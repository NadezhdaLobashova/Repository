
//////////////////////////////////////////////////////////////////////////////
////////Процедуры и функции сериализации объектов

//Проверяет является значение переменной ссылкой или объектом
//Данные. Тип: Ссылка на объект или Объект
//Возвращаемое значение: объект.
Функция ПолучитьОбъект(Данные) Экспорт
	Если Данные.Ссылка = Данные Тогда
		ТекОбъект = Данные.ПолучитьОбъект();
	Иначе
		ТекОбъект = Данные;
	КонецЕсли;
	Возврат ТекОбъект;
КонецФункции

//Проверка нужно ли записывать реквизит или табличную часть в пакет обмена
//Параметры:
//Элемент. Тип: Элемент метаданных.
//
//ЭтоГруппа. Тип: Булево.
//Признак грыппы проверяемого объекта
//
//Тип возвращаемого значения: Булево
Функция ЗаписыватьЭлементМетаданныхВXML(Элемент,ЭтоГруппа) Экспорт
	Результат = Истина;
	Если ЭтоГруппа 
		И Элемент.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
		Результат = Ложь;
	ИначеЕсли Не ЭтоГруппа 
		И Элемент.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
		Результат = Ложь;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Записывает в XML объект типа УдалениеОбъекта
//
//Параметры:
//ЗаписьXML. Тип: ЗаписьXML.
//
//Данные. Тип: УдалениеОбъекта.
Процедура ЗаписатьУдалениеОбъектаВXML(ЗаписьXML,Данные)Экспорт
	//Начало секции "Удаление объекта"
	ЗаписьXML.ЗаписатьНачалоЭлемента("УдалениеОбъекта");
	
	ЗаписатьРеквизитВXML(ЗаписьXML,"Ссылка",Данные.Ссылка);
	
	//Конец секции "Удаление объекта"
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Формирует структуру параметров объекта
//
Процедура СформироватьСтруктуруПараметровОбъекта(СтруктураПараметровОбъекта,ТекОбъект,ДополнительныеПараметры)
	
	СтандартнаяОбработка = Истина;
	//Полное переопределение сериализации объекта
	ОбменДаннымиНСИ_20Переопределяемый.ЗаписатьПараметрыОбъектаВСтруктуруПереопределяемый(СтруктураПараметровОбъекта,ТекОбъект,ДополнительныеПараметры,СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = ТекОбъект.Метаданные();
	пЭтоГруппа = ТекОбъект.Ссылка.ЭтоГруппа;
	//Стандартные реквизиты		
	Для Каждого ТекРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		
		СтандартнаяОбработка = Истина;
		ОбменДаннымиНСИ_20Переопределяемый.ЗаписатьРеквизитВСтруктуруПараметровПереопределяемый(СтруктураПараметровОбъекта,
																								ТекОбъект,
																								ТекРеквизит,
																								СтандартнаяОбработка);
		Если Не СтандартнаяОбработка Тогда
			Продолжить;
		КонецЕсли;

		ЗначениеРеквизита = ТекОбъект[ТекРеквизит.Имя];
		
		ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта,ТекРеквизит.Имя,ЗначениеРеквизита);
		
	КонецЦикла;
	
	// Обычные ревизиты
	Для Каждого ТекРеквизит Из МетаданныеОбъекта.Реквизиты Цикл
		
		Если Не ЗаписыватьЭлементМетаданныхВXML(ТекРеквизит,пЭтоГруппа) Тогда
			Продолжить;
		КонецЕсли;
		СтандартнаяОбработка = Истина;
		ОбменДаннымиНСИ_20Переопределяемый.ЗаписатьРеквизитВСтруктуруПараметровПереопределяемый(СтруктураПараметровОбъекта,
																								ТекОбъект,
																								ТекРеквизит,
																								СтандартнаяОбработка);
		Если Не СтандартнаяОбработка Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеРеквизита = ТекОбъект[ТекРеквизит.Имя];
		ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта,ТекРеквизит.Имя,ЗначениеРеквизита);			
	КонецЦикла;
	
	//Дополнительные Реквизиты
	  ОбменДаннымиНСИ_20Переопределяемый.ЗаписатьДополнительныеРеквизитыОбъектаВСтруктуру(СтруктураПараметровОбъекта,ТекОбъект);
	// Табличные части 
	Для Каждого ТекТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		Если Не ЗаписыватьЭлементМетаданныхВXML(ТекТЧ,пЭтоГруппа) Тогда
			Продолжить;
		КонецЕсли;
				
		ИмяТЧ = ТекТЧ.Имя;
				 
		СтандартнаяОбработка = Истина;
		ОбменДаннымиНСИ_20Переопределяемый.ЗаписатьТабличнуюЧастьВСтруктуруПараметровПереопределяемый(СтруктураПараметровОбъекта,
																									ТекОбъект,
																									ТекОбъект[ИмяТЧ],
																									СтандартнаяОбработка);
		Если Не СтандартнаяОбработка Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаЗначенийТЧ = ТекОбъект[ИмяТЧ].Выгрузить();
		СтруктураПараметровОбъекта.Вставить(ИмяТЧ,ТаблицаЗначенийТЧ);
	КонецЦикла;
	ОбменДаннымиНСИ_20Переопределяемый.ЗаписатьДополнительнуюТабличнуюЧастьВСтруктуру(СтруктураПараметровОбъекта,ТекОбъект);
			
КонецПроцедуры

//Записывает объект в XML 
//
//Параметры:
//ЗаписьXML. Тип: ЗаписьXML.
//
//Данные. Тип: СправочникСсылка
//Ссылка на записываемый объект
//
//ВидОбъекта. Тип: Строка.
//Имя объекта метаданных, соответсвующее имени объекта метаданных НСИ
//Например: "Номенклатура","Контрагенты".
Функция ЗаписатьОбъектВXML(ЗаписьXML,Данные,ВидОбъекта,СреднийРезмерПакета,ДополнительныеПараметры, Комментарий)Экспорт
	
	ТекОбъект = ПолучитьОбъект(Данные);
			
	СтруктураПараметровОбъекта = Новый Структура;
	
	СформироватьСтруктуруПараметровОбъекта(СтруктураПараметровОбъекта,ТекОбъект,ДополнительныеПараметры);
	
	//Если переопределенная процедура очистила структуру параметров, значит дальнейшая обработка объекта не требуется!
	Если СтруктураПараметровОбъекта.Количество() = 0 тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидОбъекта = "Работники" Тогда
		Если СтруктураПараметровОбъекта.Свойство("Логин") И ЗначениеЗаполнено(СтруктураПараметровОбъекта.Логин) Тогда
		Иначе
			ЗаписьВЛог ="Для сотрудника не определен Логин. Код физ.лица: " + СтруктураПараметровОбъекта.Код + ". Наименование: " + СтруктураПараметровОбъекта.Наименование; 
			ОбменДаннымиНСИ_20Сервер.ЗафиксироватьОписаниеОшибки(Комментарий, ЗаписьВЛог);
			Возврат Истина;	//не записываем данные в XML
		КонецЕсли;
	КонецЕсли;
		
	// Начало корня
	ЗаписьXML.ЗаписатьНачалоЭлемента(ВидОбъекта);
	//Начало элемента Реквизиты
	ЗаписьXML.ЗаписатьНачалоЭлемента("Реквизиты");
	ЧтениеТЧ = Ложь;  //Указатель на то, что чтение реквизитов закончено
	Для Каждого ЭлементСтруктуры из СтруктураПараметровОбъекта Цикл
		ИмяРеквизита = ЭлементСтруктуры.Ключ;
		Если ИмяРеквизита = "ЭлементСтруктуры.Ключ" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяРеквизита = "Код" Тогда 
			Если ВидОбъекта = "Подразделения" ИЛИ ВидОбъекта = "Проекты" Тогда
				Значение = СокрЛП(ЭлементСтруктуры.Значение);
				Если СтрДлина(Значение) > 6 Тогда
					Пока СтрДлина(Значение) > 6 Цикл
						Значение = Прав(Значение, СтрДлина(Значение)-1);
					КонецЦикла;
				ИначеЕсли СтрДлина(Значение) < 6 Тогда
					Пока СтрДлина(Значение) < 6 Цикл
						Значение = "0" + Значение;
					КонецЦикла;
				КонецЕсли;
				ПраваяЧасть = Значение;
				ЗначениеРеквизита = "НСК" + ПраваяЧасть;
			ИначеЕсли ВидОбъекта = "Работники" Тогда
				ЗначениеРеквизита = СтруктураПараметровОбъекта.Логин;
			Иначе
				ЗначениеРеквизита = ЭлементСтруктуры.Значение;
			КонецЕсли;
		Иначе
			ЗначениеРеквизита = ЭлементСтруктуры.Значение;
		КонецЕсли;
		
		Если ТипЗНЧ(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
			Если ЧтениеТЧ = Ложь Тогда
				ЧтениеТЧ = Истина;
				//Конец элемента Реквизиты
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			ЗаписатьТабличнуюЧастьВXML(ЗаписьXML,ЭлементСтруктуры,СреднийРезмерПакета);
		Иначе
			ЗаписатьРеквизитВXML(ЗаписьXML,ИмяРеквизита,ЗначениеРеквизита,СреднийРезмерПакета);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЧтениеТЧ Тогда 
		//табличных частей не было, запишем Конец элемента Реквизиты
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	//Конец корневого элемента
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат Ложь;
	
КонецФункции

//Записывает табличную часть в XML
//
Процедура ЗаписатьТабличнуюЧастьВXML(ЗаписьXML,ЭлементСтруктуры,СреднийРезмерПакета)
	 	 		
		ИмяТЧ = ЭлементСтруктуры.Ключ;
		ТЗ = ЭлементСтруктуры.Значение;	
		КоличествоКолонок = ТЗ.Колонки.Количество();
		
		Если ИмяТЧ = "ПаспортныеДанные" ИЛИ ИмяТЧ = "ТрудоваяДеятельность" ИЛИ ИмяТЧ = "Стажи" Тогда
			Возврат;
		КонецЕсли;
		//Начало элемента ТабличнаяЧасть
		ЗаписьXML.ЗаписатьНачалоЭлемента("ТабличнаяЧасть");
		ЗаписьXML.ЗаписатьАтрибут("Имя",ИмяТЧ);
		
		Для СчС = 0 По ТЗ.Количество() - 1 Цикл
			//Начало элемента Строка
			Если (ИмяТЧ = "КонтактнаяИнформация" И 
				ТЗ[СчС].Тип <> Перечисления.ТипыКонтактнойИнформации.Телефон И ТЗ[СчС].Тип <> Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты 
				И ТЗ[СчС].Тип <> Перечисления.ТипыКонтактнойИнформации.Другое) Тогда
				Продолжить;
			КонецЕсли;

			ЗаписьXML.ЗаписатьНачалоЭлемента("Строка");
			ЗаписьXML.ЗаписатьАтрибут("ИндексСтроки", XMLСтрока(СчС));
						
			Для СчК = 0  По КоличествоКолонок - 1 Цикл
				
				ЗначениеРеквизита = ТЗ[СчС][СчК];
				Если ЗначениеРеквизита = "" Тогда
					Продолжить;
				КонецЕсли;
				ЗаписатьРеквизитВXML(ЗаписьXML,ТЗ.Колонки[СчК].Имя,ЗначениеРеквизита,СреднийРезмерПакета);
					
			КонецЦикла;
			//Конец элемента Строка
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		//Конец элемента ТабличнаяЧасть
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
КонецПроцедуры

//Записывает реквизит в виде узла
//
Процедура ЗаписатьРеквизитКакУзелXML(ЗаписьXML,ИмяРеквизита,Значение,Атрибуты=Неопределено) 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяРеквизита);
	Если Не Атрибуты = Неопределено Тогда
		
		Для Каждого Элемент из Атрибуты Цикл 
			ЗаписьXML.ЗаписатьАтрибут(Элемент.Ключ,Элемент.Значение); 
		КонецЦикла; 
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(Значение));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

//Записывает реквизит в XML 
//
//Параметры:
//ЗаписьXML. Тип: ЗаписьXML.
//
//ЗначениеРеквизита. Тип: Любой
//
//ИмяРеквизита. Тип: Строка.
Процедура ЗаписатьРеквизитВXML(ЗаписьXML,ИмяРеквизита,ЗначениеРеквизита,СреднийРезмерПакета="") 
	                     	
	Если ТипЗнч(ЗначениеРеквизита) = Тип("Структура") тогда
		Значение      = ЗначениеРеквизита.ЗначениеХранилища;
		ОписаниеФайла = ЗначениеРеквизита.ОписаниеОбъекта;
		СтруктураАтрибутов = Новый Структура;
		СтруктураАтрибутов.Вставить("ОписаниеОбъекта",ОписаниеФайла);
		ЗаписатьРеквизитКакУзелXML(ЗаписьXML,ИмяРеквизита,Значение,СтруктураАтрибутов);
		//учитываем пропорциональное изменение размера в кодировке Base64
		//СреднийРезмерПакета = СреднийРезмерПакета + Значение.Размер();
		СреднийРезмерПакета = СреднийРезмерПакета + Окр(Значение.Размер()*8/6);
		
	Иначе
		
		ЗаписатьРеквизитКакУзелXML(ЗаписьXML,ИмяРеквизита,ЗначениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

//Записывает реквизит в структуру
//Параметры:
//
//СтруктураПараметровОбъекта. Тип: Структура.
//Структура в которую следует записать параметр
//
//ЗначениеРеквизита. Тип: Любой
//Для записи хранилища значения следует передавать параметр с типом ХранилищеЗначения
//
//ИмяРеквизита. Тип: Строка
//
//ИмяФайла. Тип: Строка.
//Имя файла в хранилище значения
Процедура ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта,ИмяРеквизита,ЗначениеРеквизита,ИмяФайла = "Не указано") Экспорт
	Если ТипЗнч(ЗначениеРеквизита) = Тип("ХранилищеЗначения") тогда
		Значение      = ЗначениеРеквизита.Получить();
		Если ТипЗнч(Значение) = Тип("Картинка") Тогда   //Небольшой костыль
			ИмяФайла = ИмяФайла + "." + Значение.Формат();
			Значение = Значение.ПолучитьДвоичныеДанные();
		КонецЕсли;
		ОписаниеФайла = ИмяФайла + "|" + Формат(Значение.Размер(), "ЧГ=");
		СтруктураХранилища = Новый Структура;
		СтруктураХранилища.Вставить("ОписаниеОбъекта",ОписаниеФайла);
		СтруктураХранилища.Вставить("ЗначениеХранилища",Значение);
		СтруктураПараметровОбъекта.Вставить(ИмяРеквизита,СтруктураХранилища);
	Иначе
		СтруктураПараметровОбъекта.Вставить(ИмяРеквизита,ЗначениеРеквизита);
	КонецЕсли;

КонецПроцедуры

//Записывает набор данных в XML 
//
//Параметры:
//ЗаписьXML. Тип: ЗаписьXML.
//
//Данные. Тип: РегистрСведенийНаборЗаписей
//
//ВидОбъекта. Тип: Строка.
//Имя объекта метаданных, соответсвующее имени объекта метаданных НСИ
//Например: "Номенклатура","Контрагенты".
Процедура ЗаписатьНаборДанныхВXML(ЗаписьXML,Данные,ВидОбъекта,СреднийРезмерПакета,ДополнительныеПараметры)Экспорт

	СтруктураПараметровОбъекта = Новый Структура;
	
	Измерения = Данные.Метаданные().Измерения;
	Ресурсы   = Данные.Метаданные().Ресурсы;
	Реквизиты = Данные.Метаданные().реквизиты;
	
	Данные.Прочитать();
	
	//Измерения
	Для Каждого Измерение из Измерения Цикл
		ЗначениеИзмерения = Данные.Отбор[Измерение.Имя].Значение;
		ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта,Измерение.Имя,ЗначениеИзмерения);
	КонецЦикла;
	
	Если Данные.Количество() > 0 Тогда
		
		//Ресурсы
		Для Каждого Ресурс из Ресурсы Цикл
			ЗначениеРесурса = Данные[0][Ресурс.Имя];
			ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта,Ресурс.Имя,ЗначениеРесурса);
		КонецЦикла;
		
		//Реквизиты
		Для Каждого Реквизит из Реквизиты Цикл
			ЗначениеРеквизита = Данные[0][Реквизит.Имя];
			ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта,Реквизит.Имя,ЗначениеРеквизита);
		КонецЦикла;
		
	Иначе
		ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта,"_УдалениеНабораЗаписей", Истина);
		
	КонецЕсли;
	
	ОбменДаннымиНСИ_20Переопределяемый.ЗаписатьНаборДанныхВСтруктуруПараметровПереопределяемый(СтруктураПараметровОбъекта,Данные,ВидОбъекта);
	
	Если СтруктураПараметровОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(ВидОбъекта);
	
	Для Каждого ЭлементСтруктуры из СтруктураПараметровОбъекта Цикл
		
		ИмяРеквизита = ЭлементСтруктуры.Ключ;
		ЗначениеРеквизита = ЭлементСтруктуры.Значение;
		ЗаписатьРеквизитВXML(ЗаписьXML,ИмяРеквизита,ЗначениеРеквизита,СреднийРезмерПакета);
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
////////Процедуры и функции десериализации объектов

//Проверка существования объекта.
//
Функция ОбъектСуществует(Ссылка)
	
	Результат = Ложь;
	
	Если Не Ссылка.ПолучитьОбъект() = Неопределено Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверка того, что переданный тип является ссылочным типом данных.
// Для типа "Неопределено" возвращается Ложь.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоСсылка(Тип) Экспорт
	
	Возврат Тип <> Тип("Неопределено") 
		И (Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип));
	
КонецФункции

//Проверка существования реквизита в объектк
//
Функция ПроверитьРеквзит(Метаданные, Имя)
	
	
	Если Строка(ТипЗнч(Метаданные)) = "Свойства стандартных реквизитов" Тогда 
		Для Каждого Реквизит Из Метаданные Цикл
			Если Реквизит.Имя = Имя Тогда 
				Возврат Реквизит;
			КонецЕсли;
		КонецЦикла;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Метаданные) = Тип("КоллекцияОбъектовМетаданных") Тогда 
		Если Метаданные.Найти(Имя) = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат Метаданные[Имя];
		КонецЕсли; 
	КонецЕсли;
	
	
	Если Метаданные.Реквизиты.Найти(Имя) = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		
		Возврат Метаданные.Реквизиты[Имя];
		
	КонецЕсли; 

		
КонецФункции

//Поиск элемента метаданных справочника по имени
//
Функция НайтиЭлементМетаданныхОбъектаСправочника(МетаданныеОбъекта,Имя,ТабличнаяЧасть = Неопределено) Экспорт
	
	Если ТабличнаяЧасть <> Неопределено Тогда
		
		Возврат ПроверитьРеквзит(ТабличнаяЧасть,Имя);
		
	ИначеЕсли Не ПроверитьРеквзит(МетаданныеОбъекта.СтандартныеРеквизиты,Имя) = Неопределено Тогда
		
		Возврат МетаданныеОбъекта.СтандартныеРеквизиты[Имя];
		
	ИначеЕсли Не ПроверитьРеквзит(МетаданныеОбъекта.Реквизиты,Имя) = Неопределено Тогда
		
		Возврат  МетаданныеОбъекта.Реквизиты[Имя];
		
	ИначеЕсли Не ПроверитьРеквзит(МетаданныеОбъекта.ТабличныеЧасти,Имя) = Неопределено Тогда
		
		Возврат МетаданныеОбъекта.ТабличныеЧасти[Имя];
		
	Иначе  
		Возврат Неопределено;
    КонецЕсли;
			
КонецФункции

//Поиск элемента метаданных регистра сведений по имени
//
Процедура НайтиЭлементМетаданныхРегистраСведений(МетаданныеОбъекта,Имя,РеквизитМетаданные)
	
	Если Не МетаданныеОбъекта.Измерения.Найти(Имя) = Неопределено Тогда
		
		РеквизитМетаданные = МетаданныеОбъекта.Измерения.Найти(Имя);
		
	ИначеЕсли Не МетаданныеОбъекта.Реквизиты.Найти(Имя)= Неопределено Тогда
		
		РеквизитМетаданные =  МетаданныеОбъекта.Реквизиты.Найти(Имя);
		
	ИначеЕсли Не МетаданныеОбъекта.Ресурсы.Найти(Имя) = Неопределено Тогда
		
		РеквизитМетаданные = МетаданныеОбъекта.Ресурсы.Найти(Имя);
		
	Иначе 
		РеквизитМетаданные = Неопределено;
	КонецЕсли;

КонецПроцедуры
 
//Получение Объекта по ссылке
//
Функция ПолучитьОбъектПоСсылке(Ссылка,ЭтоГруппа,МенеджерОбъекта)Экспорт
	
	Если Не ОбъектСуществует(Ссылка) Тогда
		
		// Создание объекта в базе с заданной ссылкой
		Если ЭтоГруппа Тогда
			Объект = МенеджерОбъекта.СоздатьГруппу();
		Иначе
			Объект = МенеджерОбъекта.СоздатьЭлемент();
		КонецЕсли; 
		
		Объект.УстановитьСсылкуНового(Ссылка);
		
	Иначе
		
		Объект = Ссылка.ПолучитьОбъект();
		
	КонецЕсли;
	
	Возврат Объект;

	
КонецФункции

//Получение значения реквизита ссылочного типа
//
Функция ПолучитьЗначениеРеквизитаСсылочногоТипа (Реквизит, ЗначениеСтрока,СтруктураПараметровОбъекта = Неопределено)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]);
	ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	ЗначениеРеквизита = Неопределено;
    ИмяОбъекта = ОбъектМетаданных.Имя;
    
	Если Найти(ИмяОбъектаМетаданных, "Справочник") <> 0 Тогда
		
		ОбъектМенеджер = Справочники[ОбъектМетаданных.Имя];
        
        Если ЗначениеЗаполнено(ЗначениеСтрока) Тогда
            
            GUID = Новый УникальныйИдентификатор(ЗначениеСтрока);
            ЗначениеРеквизита = ОбъектМенеджер.ПолучитьСсылку(GUID);
            
            Если ИмяОбъекта = "Абоненты" 
                И СтрНайти(Строка(ЗначениеРеквизита),"Объект не найден")>0 Тогда //Поищем по реквизиту "Эталон"
                
                ЗначениеРеквизитаGUID_НСИ = ПолучитьСсылкуПоДругимРеквизитамНСИ(ИмяОбъекта,ОбъектМенеджер,СтруктураПараметровОбъекта);
                Если Не ЗначениеРеквизитаGUID_НСИ.Пустая() Тогда
                    ЗначениеРеквизита = ЗначениеРеквизитаGUID_НСИ;
                КонецЕсли;
                
            КонецЕсли;
      
		Иначе
			ЗначениеРеквизита = Неопределено;//ПредопределенноеЗначение(ИмяОбъектаМетаданных+".ПустаяСсылка");
		КонецЕсли;
		
	ИначеЕсли Найти(ИмяОбъектаМетаданных, "Перечисление") <> 0 Тогда
		
		ОбъектМенеджер = Перечисления[ОбъектМетаданных.Имя];
		Если ЗначениеЗаполнено(ЗначениеСтрока) Тогда
			ЗначениеРеквизита = ОбъектМенеджер[ЗначениеСтрока];
		Иначе
			ЗначениеРеквизита = Неопределено;//ПредопределенноеЗначение(ИмяОбъектаМетаданных+".ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

//Получение ссылки по уникальному идентификатору
//Параметры:
//Идентификатор. Тип: УникальныйИдентификатор.
//
//ИмяСправочника. Тип: Строка
//
//Возвращаемое значение. Тип: Ссылка.
Функция ПолучитьСсылкуПоИдентификатору(Идентификатор,ИмяСправочника) Экспорт
	
	Возврат Справочники[ИмяСправочника].ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
	
КонецФункции

// Приведение значения реквизита к его типу
//
Функция ПолучитьЗначениеРеквизита(Реквизит,Значение,СтруктураПараметровОбъекта = Неопределено) Экспорт
	
	ТипРеквизита = Реквизит.Тип.Типы();
	
	Если ТипРеквизита[0] = Тип("Булево") Тогда		//Проверим простые типы
		
		Если Не ЗначениеЗаполнено(Значение) Тогда
			ЗначениеРеквизита = Ложь;
		Иначе
			ЗначениеРеквизита = XMLЗначение(Тип("Булево"),Значение);
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита[0] = Тип("Строка") Тогда
		ЗначениеРеквизита = Значение;
		
	ИначеЕсли ТипРеквизита[0] = Тип("Дата") Тогда
		
		Если Не ЗначениеЗаполнено(Значение) Тогда
			ЗначениеРеквизита = Дата("00010101000000");
		Иначе
			ЗначениеРеквизита = XMLЗначение(Тип("Дата"),Значение);
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита[0] = Тип("Число") Тогда
		
		Если Не ЗначениеЗаполнено(Значение) Тогда
			ЗначениеРеквизита = 0;
		Иначе
			ЗначениеРеквизита = XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита[0] = Тип("ХранилищеЗначения") Тогда
		
		//ДанныеСтрока   = СокрЛП(Значение);
		//ДанныеСтрока   = СтрЗаменить(СтрЗаменить(СтрЗаменить(ДанныеСтрока,Символ(10)," "),Символ(13)," ")," ","");
		ДвоичныеДанные = Base64Значение(Значение);
		ЗначениеРеквизита = Новый ХранилищеЗначения(ДвоичныеДанные);
				
	ИначеЕсли ЭтоСсылка(ТипРеквизита[0]) Тогда 
		//Проверим ссылочные типы
		ЗначениеРеквизита = ПолучитьЗначениеРеквизитаСсылочногоТипа(Реквизит, Значение,СтруктураПараметровОбъекта);
    Иначе
		//Это нечто непонятное
		ЗначениеРеквизита = Неопределено;
	КонецЕсли;
	
	Возврат ЗначениеРеквизита;	
	
КонецФункции

// Помечает на удаление объект удаленный из НСИ
//
Процедура ЗарегистрироватьУдалениеОбъекта(ЧтениеXML,Отправитель,Удаление = Ложь) Экспорт
	СсылкаНаОбъект = Неопределено;
	
	//++ Получение наименования и ссылки
	Наименование = Неопределено;
	
	Если Не Удаление Тогда
		
		СтруктураПараметровОбъекта = Новый Структура;
		ЗаполнитьСтруктуруПараметровОбъекта(ЧтениеXML,СтруктураПараметровОбъекта, Истина);	
		
		Идентификатор = Неопределено;
		СтруктураПараметровОбъекта.Свойство("Ссылка", Идентификатор); 
		Если Не ЗначениеЗаполнено(Идентификатор) Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметровОбъекта.Свойство("Наименование", Наименование); 
		
	Иначе	
		//--		
	    ЧтениеXML.Прочитать();
		
		Если ЧтениеXML.Имя <> "Ссылка"
			Или ЧтениеXML.Тип <> ТипУзлаXML.НачалоЭлемента Тогда
			Возврат;
		КОнецЕсли;
		
		Идентификатор = СокрЛП(ЧтениеXML.Значение);
		Если Не ЗначениеЗаполнено(Идентификатор) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;				
	
	Для Каждого Элемент из Метаданные.ПланыОбмена.Найти("НСИ_20").Состав Цикл
		
		ПолноеИмя = Элемент.Метаданные.ПолноеИмя();
		Если Найти(ПолноеИмя, "Справочник") <> 0 Тогда
			ПроверяемаяСсылка = ПолучитьСсылкуПоИдентификатору(Идентификатор,Элемент.Метаданные.Имя);
			Если ОбъектСуществует(ПроверяемаяСсылка) Тогда
				СсылкаНаОбъект = ПроверяемаяСсылка;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СсылкаНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект = СсылкаНаОбъект.ПолучитьОбъект();
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ОбменДанными.Отправитель = Отправитель;
	Объект.ПометкаУдаления = Истина;
	Если ЗначениеЗаполнено(Наименование) Тогда
		Объект.Наименование = Наименование;	
	КонецЕсли;	
	Объект.Записать();
КонецПроцедуры

//Чтение реквизитов объекта в структуру
//
Процедура ПрочитатьРеквизитыОбъектаИзXML(ЧтениеXML,СтруктураПараметровОбъекта)
		
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
			И ЧтениеXML.Имя = "Реквизиты" Тогда
			Возврат;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяРеквизита = ЧтениеXML.Имя;
			ОписаниеОбъекта = ЧтениеXML.ПолучитьАтрибут("ОписаниеОбъекта");
			ЗначениеРеквизита = "";
			Если ОписаниеОбъекта <> Неопределено Тогда 
				СтруктураРеквизита = Новый Структура("ИмяРеквизита,ОписаниеОбъекта", ИмяРеквизита, ОписаниеОбъекта);
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если ОписаниеОбъекта = Неопределено Тогда
				ЗначениеРеквизита = ЧтениеXML.Значение;
			Иначе
				СтруктураРеквизита.Вставить("ЗначениеРеквизита",ЧтениеXML.Значение);
				ЗначениеРеквизита = СтруктураРеквизита;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
			СтруктураПараметровОбъекта.Вставить(ИмяРеквизита,ЗначениеРеквизита);
				
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Чтение табличной части в структуру
//
Процедура ПрочитатьТабличнуюЧастьОбъектаИзXML(ЧтениеXML,ИмяТЧ,СтруктураПараметровОбъекта)
	
	СтруктураПервойСтроки = Новый Структура;
	ТЗ = Новый ТаблицаЗначений;
		
	ЧтениеПервойСтроки = Истина;		
	Пока ЧтениеXML.Прочитать() Цикл          //Читаем табличную часть
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента 
			И ЧтениеXML.Имя = "ТабличнаяЧасть" Тогда
			
			Прервать;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента    //Это строка
			И ЧтениеXML.Имя = "Строка"
			И ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
			
			Если Не ЧтениеПервойСтроки Тогда
				СтрокаТЗ = ТЗ.Добавить();
			КонецЕсли;
			
			ИндексСтроки = ЧтениеXML.ПолучитьАтрибут("ИндексСтроки");
			ЭтоРеквизит = Ложь;                //защита от дурака
			
			Пока ЧтениеXML.Прочитать() Цикл    //Читаем строку табличной части
				
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					
					ИмяРеквизита = ЧтениеXML.Имя;
					ОписаниеОбъекта = ЧтениеXML.ПолучитьАтрибут("ОписаниеОбъекта");
					ЗначениеРеквизита = "";
					Если ОписаниеОбъекта <> Неопределено Тогда 
						СтруктураРеквизита = Новый Структура("ИмяРеквизита,ОписаниеОбъекта", ИмяРеквизита, ОписаниеОбъекта);
					КонецЕсли;
					Если ИмяРеквизита = "Строка" Тогда // кто-то назвал реквизит "Строка"
						ЭтоРеквизит = Истина;
					КонецЕсли;	 
					
				ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
					
					Если ИмяРеквизита = "НомерСтроки" Тогда
						ЗначениеРеквизита = ИндексСтроки;
					ИначеЕсли ОписаниеОбъекта <> Неопределено Тогда //Это Хранилище значения
						СтруктураРеквизита.Вставить("ЗначениеРеквизита",ЧтениеXML.Значение);
						ЗначениеРеквизита = СтруктураРеквизита;
					Иначе
						ЗначениеРеквизита = ЧтениеXML.Значение;
					КонецЕсли;
					
				ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента 
					И ЧтениеXML.Имя = "Строка" 
					И Не ЭтоРеквизит Тогда
					
					Прервать;
				
				ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
					Если ЧтениеПервойСтроки Тогда
						СтруктураПервойСтроки.Вставить(ИмяРеквизита,ЗначениеРеквизита);
						ТЗ.Колонки.Добавить(ИмяРеквизита);
					Иначе
						СтрокаТЗ[ИмяРеквизита] = ЗначениеРеквизита; 
					КонецЕсли;
					ЭтоРеквизит = Ложь;
				КонецЕсли;
								
			КонецЦикла; // закончили чтение реквизитов строки
			
			Если ЧтениеПервойСтроки Тогда
				ЗаполнитьЗначенияСвойств(ТЗ.Добавить(),СтруктураПервойСтроки);
				ЧтениеПервойСтроки = Ложь;
			КонецЕсли;
			
		КонецЕсли;    //закончили чтение строки
	КонецЦикла;	//Закончили чтение табличной части
	
	СтруктураПараметровОбъекта.Вставить(ИмяТЧ,ТЗ); 
    
 КонецПроцедуры
 
//Процедура заполнения структуры параметрами объекта
//
Процедура ЗаполнитьСтруктуруПараметровОбъекта(ЧтениеXML,СтруктураПараметровОбъекта, ПолучитьТолькоОсновныеРеквизиты = Ложь) 
	
	ИмяВидаОбъектаВФайле = ЧтениеXML.Имя;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
			И ЧтениеXML.Имя = ИмяВидаОбъектаВФайле Тогда
			Прервать;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			И ЧтениеXML.Имя = "Реквизиты" Тогда
			
			ПрочитатьРеквизитыОбъектаИзXML(ЧтениеXML,СтруктураПараметровОбъекта);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			И ЧтениеXML.Имя = "ТабличнаяЧасть" Тогда
			
			ИмяТЧ = ЧтениеXML.ПолучитьАтрибут("Имя"); 
			ПрочитатьТабличнуюЧастьОбъектаИзXML(ЧтениеXML,ИмяТЧ,СтруктураПараметровОбъекта);
			
		КонецЕсли;
		
    КонецЦикла;
    
    Если Не ПолучитьТолькоОсновныеРеквизиты И ИмяВидаОбъектаВФайле = "Контрагенты" Тогда
        СтруктураПараметровОбъекта.Вставить("КодНСИ",СтруктураПараметровОбъекта.Код);
        СтруктураПараметровОбъекта.Вставить("Эталон",СтруктураПараметровОбъекта.Ссылка); // т.к. берем ссылку, т.к. эталон может быть пустой строкой.
        СтруктураПараметровОбъекта.Вставить("Комментарий","# Получен по обмену из базы НСИ #");
    КонецЕсли;
	
КонецПроцедуры

//Процедура типизации реквизитов табличной части
//
Процедура ОбработатьТаблицуРеквизитовТЧОбъекта(ТЗ,ИмяТЧ,МетаданныеОбъекта,МенеджерОбъекта)
    
    //Временная заглушка, пока не загружаем КИ для Абонентов!
    Если ИмяТЧ = "КонтактнаяИнформация" Тогда
        ТЗ = Неопределено;
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧастьМетаданные = НайтиЭлементМетаданныхОбъектаСправочника(МетаданныеОбъекта,ИмяТЧ);
	
	Если ТабличнаяЧастьМетаданные = Неопределено Тогда
		ТЗ = Неопределено;
		Возврат;
    КонецЕсли;
    
	КоличествоКолонок = ТЗ.Колонки.Количество();
	Для СчС = 0 По ТЗ.Количество() - 1 Цикл
		Для СчК = 0  По КоличествоКолонок -1 Цикл
			
			РеквизитСтрокиМетаданные = НайтиЭлементМетаданныхОбъектаСправочника(МетаданныеОбъекта,ТЗ.Колонки[СчК].Имя,ТабличнаяЧастьМетаданные);
			Если РеквизитСтрокиМетаданные = Неопределено Тогда  //нет такого реквизита
				Если ТЗ.Колонки[СчК].Имя = "НомерСтроки" Тогда
					ТЗ[СчС][СчК] = Число(ТЗ[СчС][СчК]);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ЗначениеРеквизита = ТЗ[СчС][СчК];
			Если ТипЗНЧ(ТЗ[СчС][СчК]) = Тип("Структура") Тогда
				ЗначениеРеквизита = ТЗ[СчС][СчК].ЗначениеРеквизита;
			КонецЕсли;	
			ТЗ[СчС][СчК] = ПолучитьЗначениеРеквизита(РеквизитСтрокиМетаданные,ЗначениеРеквизита);
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

//Чтение объекта из XML
//
Процедура ПрочитатьОбъект(ЧтениеXML, МенеджерОбъекта, Отправитель, Комментарий, ДополнительныеПараметры, ТзЗагруженныхОбъектовАбоненты=Неопределено) Экспорт
	
	Если МенеджерОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровОбъекта = Новый Структура;
    ЗаполнитьСтруктуруПараметровОбъекта(ЧтениеXML,СтруктураПараметровОбъекта);
    
    //Если переопределенная процедура очистила структуру параметров, значит дальнейшая обработка объекта не требуется!
	Если СтруктураПараметровОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПустаяСсылка =  МенеджерОбъекта.ПустаяСсылка();
	МетаданныеОбъекта = ПустаяСсылка.Метаданные();
	
	Идентификатор = Неопределено;
	СтруктураПараметровОбъекта.Свойство("Ссылка",Идентификатор);
	Если Идентификатор = Неопределено
		Или Не ЗначениеЗаполнено(Идентификатор) Тогда
		ЗаписьВЛог ="В сообщении обмена не найден идентификатор объекта. Вид объекта:"+ МетаданныеОбъекта.Имя; 
		ОбменДаннымиНСИ_20Сервер.ЗафиксироватьОписаниеОшибки(Комментарий, ЗаписьВЛог);
		//штатно такая ситуация возникать не должна
		Возврат;
	КонецЕсли;
	лСсылкаМетаданные = НайтиЭлементМетаданныхОбъектаСправочника(МетаданныеОбъекта,"Ссылка");
	лСсылка = ПолучитьЗначениеРеквизита(лСсылкаМетаданные,Идентификатор,СтруктураПараметровОбъекта);
	
	СтандартнаяОбработка = Истина;
	//Полное переопределение десериализации объекта
	ОбменДаннымиНСИ_20Переопределяемый.ОбработатьСтруктуруПарметровОбъектаПереопределяемый(СтруктураПараметровОбъекта,лСсылка,Отправитель,СтандартнаяОбработка,Комментарий,ДополнительныеПараметры);
	
	Если МетаданныеОбъекта.Имя = "Партнеры" И Не СтруктураПараметровОбъекта.ЭтоГруппа Тогда
		
		Если Не СтандартнаяОбработка Тогда			
			ОчиститьБуферОбменаКонтрагентовНСИ(СтруктураПараметровОбъекта);		
		КонецЕсли;
		
	КонецЕсли; 
	
	Если Не СтандартнаяОбработка тогда
		Возврат;
	КонецЕсли;
	
	ЭтоГруппаСтрока = Неопределено;
	СтруктураПараметровОбъекта.Свойство("ЭтоГруппа",ЭтоГруппаСтрока);
	
	Если ЭтоГруппаСтрока = Неопределено Тогда
		ЭтоГруппа = Ложь;
	Иначе
		ЭтоГруппаМетаданные = НайтиЭлементМетаданныхОбъектаСправочника(МетаданныеОбъекта,"ЭтоГруппа");
		Если ЭтоГруппаМетаданные = Неопределено Тогда  //нет такого реквизита
			ЭтоГруппа = Ложь;
		Иначе
			ЭтоГруппа = ПолучитьЗначениеРеквизита(ЭтоГруппаМетаданные,ЭтоГруппаСтрока);
		КонецЕсли;
	КонецЕсли;
	
	лОбъект = ПолучитьОбъектПоСсылке(лСсылка,ЭтоГруппа,МенеджерОбъекта);
	
	//Очищаем реквизиты объекта. Если реквизит не пришел в фале обмена, то он считается пустым и должен быть очищен.
	//Делаем это только в переопределяемом модуле т.к. обычно не все реквизиты участвуют в обмене
	ОбменДаннымиНСИ_20Переопределяемый.ПередЗаполнениемРеквизитовОбъекта(лОбъект, МетаданныеОбъекта, СтруктураПараметровОбъекта, ДополнительныеПараметры);
	
    Для Каждого ЭлементСтруктуры из СтруктураПараметровОбъекта Цикл
        
        //Раскоментировать!!! Если при следующих обменах мы небудем перезаписывать уже загруженные объекты.
		//Если Не лОбъект.ЭтоНовый() Тогда
		//   Прервать;       
		//КонецЕсли;
       
		Если ЭлементСтруктуры.Ключ = "Ссылка"                    //Уже прочитали
			Или ЭлементСтруктуры.Ключ = "ЭтоГруппа" 
			Или ЭлементСтруктуры.Ключ = "Предопределенный" Тогда
			Продолжить;
        КонецЕсли;
        
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
			
			ИмяТЧ = ЭлементСтруктуры.Ключ;
			ТЗ = ЭлементСтруктуры.Значение;
			СтандартнаяОбработка = Истина;
			ОбменДаннымиНСИ_20Переопределяемый.ОбработатьТаблицуРеквизитовТЧПереопределяемый(ИмяТЧ,ТЗ,лОбъект,СтандартнаяОбработка);
			
			Если СтандартнаяОбработка Тогда
				ОбработатьТаблицуРеквизитовТЧОбъекта(ТЗ,ИмяТЧ,МетаданныеОбъекта,МенеджерОбъекта);
			КонецЕсли;
			Если ТЗ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТЧ) <> Неопределено Тогда 
				лОбъект[ИмяТЧ].Загрузить(ТЗ);
			КонецЕсли;
		Иначе
			ИмяРеквизита = ЭлементСтруктуры.Ключ;
			ЗначениеРеквизита = ЭлементСтруктуры.Значение;
			СтандартнаяОбработка = Истина;
			ОбменДаннымиНСИ_20Переопределяемый.ОбработатьРеквизитОбъектаПереопределяемый(ИмяРеквизита,ЗначениеРеквизита,лОбъект,СтандартнаяОбработка);
			
			Если СтандартнаяОбработка Тогда
				МетаданныеРеквизит = НайтиЭлементМетаданныхОбъектаСправочника(Метаданныеобъекта,ИмяРеквизита);
				
				Если МетаданныеРеквизит = Неопределено Тогда //Нет такого реквизита
					Продолжить;
				КонецЕсли;
				Если ТипЗНЧ(ЗначениеРеквизита) = Тип("Структура") Тогда
					ЗначениеРеквизита = ЭлементСтруктуры.Значение.ЗначениеРеквизита;
				КонецЕсли;
				
				ЗначениеРеквизита = ПолучитьЗначениеРеквизита(МетаданныеРеквизит,ЗначениеРеквизита);
				
			КонецЕсли;
			Если ЗначениеРеквизита = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			лОбъект[ИмяРеквизита] = ЗначениеРеквизита;
		КонецЕсли;
		
    КонецЦикла;
        	
	лОбъект.ОбменДанными.Загрузка = Истина;
	лОбъект.ОбменДанными.Отправитель = Отправитель;
    
    Если МетаданныеОбъекта.Имя = "Абоненты" Тогда
        
        Если лОбъект.ЭтоНовый() Тогда
            лОбъект.УстановитьНовыйКод();
            Если лОбъект.Код = 0 Тогда // Проверяем код на 0, если 0 то получаем новый код.
                лОбъект.УстановитьНовыйКод();
            КонецЕсли;
        КонецЕсли;
       
        лОбъект.Владелец = ДополнительныеПараметры.Сервис;
        НоваяСтрокаТЗ = ТзЗагруженныхОбъектовАбоненты.Добавить();
        НоваяСтрокаТЗ.Объект = лОбъект;
        НоваяСтрокаТЗ.СтруктураПараметровОбъекта = СтруктураПараметровОбъекта;
        Возврат;
        
    КонецЕсли;
	
	НачатьТранзакцию();
    
    Попытка
		лОбъект.Записать();
		НаборыЗаписей = Неопределено;
		Если лОбъект.ДополнительныеСвойства.Свойство("НаборыЗаписей", НаборыЗаписей) Тогда 
			Для Каждого НаборЗаписей Из НаборыЗаписей Цикл
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				//НаборЗаписей.ОбменДанными.Отправитель = Отправитель; 
				НаборЗаписей.ДополнительныеСвойства.Вставить("ОбменДаннымиНСИ", Истина);
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЕсли;
		МассивРегистраторов = Неопределено;
		Если лОбъект.ДополнительныеСвойства.Свойство("МассивРегистраторов", МассивРегистраторов) Тогда 
			Для Каждого Регистратор Из МассивРегистраторов Цикл
				Регистратор.Записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла;
		КонецЕсли;
		ОбменДаннымиНСИ_20Переопределяемый.ПриЗаписиОбъекта(лОбъект, СтруктураПараметровОбъекта);
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьВЛог ="Не удалось записать объект: "+лОбъект+" ("+Идентификатор+"). По причине:"+Символы.ПС+ОписаниеОшибки();
		//ОбменДаннымиНСИ_20Сервер.ЗафиксироватьОписаниеОшибки(Комментарий, ЗаписьВЛог);
		ВызватьИсключение ЗаписьВЛог;
	КонецПопытки;
	
	ОбменДаннымиНСИ_20Переопределяемый.ПослеЗаписиОбъекта(лОбъект, СтруктураПараметровОбъекта);
	
	Если МетаданныеОбъекта.Имя = "Партнеры" Тогда		
		СоздатьКонтрагентаИзБуферОбменаКонтрагентовНСИ(СтруктураПараметровОбъекта, лОбъект.Ссылка, Отправитель);  	
	КонецЕсли;
	
КонецПроцедуры

//Чтение набора записей из XML
//
Процедура ПрочитатьНаборЗаписей(ЧтениеXML,МенеджерОбъекта,Отправитель,Комментарий,ДополнительныеПараметры) Экспорт
	
	Если МенеджерОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровОбъекта = Новый Структура;
	
	ИмяРегистра = ЧтениеXML.Имя;
	ИмяРегистраВПакете = ИмяРегистра;
	ОбменДаннымиНСИ_20Переопределяемый.ОпределитьИмяРегистраПереопределяемый(ИмяРегистра);
	СтруктураЗаписи = Новый Структура;
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
			И ЧтениеXML.Имя = ИмяРегистраВПакете Тогда
			Прервать;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			СтруктураРеквизита = Новый Структура;
			СтруктураРеквизита.Вставить("ИмяРеквизита",ЧтениеXML.Имя);
			СтруктураРеквизита.Вставить("ЗначениеРеквизита","");
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если СтруктураРеквизита.ИмяРеквизита = "_УдалениеНабораЗаписей" тогда
				СтруктураРеквизита.Вставить("ЗначениеРеквизита",Истина);
			Иначе
				РеквизитМетаданные = Неопределено;
				НайтиЭлементМетаданныхРегистраСведений(МетаданныеРегистра,СтруктураРеквизита.ИмяРеквизита,РеквизитМетаданные);
				Если РеквизитМетаданные = Неопределено тогда
					Продолжить;
				КонецЕсли;
				ЗначениеРеквизита = ПолучитьЗначениеРеквизита(РеквизитМетаданные,ЧтениеXML.Значение);
				СтруктураРеквизита.Вставить("ЗначениеРеквизита",ЗначениеРеквизита);
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента тогда
			СтруктураПараметровОбъекта.Вставить(СтруктураРеквизита.ИмяРеквизита,ЗначениеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	СтандартнаяОбработка = Истина;
	ОбменДаннымиНСИ_20Переопределяемый.ОбработатьСтруктуруРеквизитовНабораЗаписей(СтруктураПараметровОбъекта,МенеджерОбъекта,Отправитель,СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметровОбъекта.Свойство("_УдалениеНабораЗаписей") Тогда
		ОбменДаннымиНСИ_20Сервер.УдалитьНаборЗаписейВРегистреСведений(СтруктураПараметровОбъекта,ИмяРегистра,Истина,Отправитель);
	Иначе
		ОбменДаннымиНСИ_20Сервер.ДобавитьЗаписьВРегистрСведений(СтруктураПараметровОбъекта,ИмяРегистра,Истина,Отправитель);	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСсылкуПоДругимРеквизитамНСИ(ИмяОбъекта,ОбъектМенеджер,СтруктураПараметровОбъекта); //вынес в отдельную функцию, вдруг понадобится для других объектов
    
    ПустаяСсылка = ОбъектМенеджер.ПустаяСсылка();
    
    Если Не ИмяОбъекта = "Абоненты" Тогда
        Возврат ПустаяСсылка;
    КонецЕсли;
    
    Значение = ОбъектМенеджер.НайтиПоРеквизиту("Эталон",СтруктураПараметровОбъекта.Ссылка);
    
    //Если Значение.Пустая() Тогда
    //    Значение = ПолучитьСсылкуАбонентаПоНаборуРеквизитов(ОбъектМенеджер,СтруктураПараметровОбъекта.ИНН,ПустаяСсылка);
    //КонецЕсли;
    
    Возврат Значение; 
	
КонецФункции // ()

Функция ПолучитьСсылкуАбонентаПоНаборуРеквизитов(ОбъектМенеджер,ИНН,ПустаяСсылка)
                            
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   Абоненты.Ссылка КАК Ссылка
    |ИЗ
    |   Справочник.Абоненты КАК Абоненты
    |ГДЕ
    |   Абоненты.ИНН = &ИНН";
    
    Запрос.УстановитьПараметр("ИНН", ИНН);
        
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
       Значение = ВыборкаДетальныеЗаписи.Ссылка;
    Иначе
       Значение = ПустаяСсылка;
    КонецЕсли;
    
    Возврат Значение; 
    
КонецФункции    

Процедура ОчиститьБуферОбменаКонтрагентовНСИ(СтруктураПараметровОбъекта)
	
	ПартнерGUID = СтруктураПараметровОбъекта.Ссылка; 
	
	НаборЗаписей = РегистрыСведений.БуферОбменаКонтрагентовНСИ.СоздатьНаборЗаписей();				
	НаборЗаписей.Отбор.ПартнерGUID.Установить(ПартнерGUID);	 
	
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры 

Процедура СоздатьКонтрагентаИзБуферОбменаКонтрагентовНСИ(СтруктураПараметровОбъекта, Партнер, Отправитель)
	
	ПартнерGUID = СтруктураПараметровОбъекта.Ссылка; 
	
	НаборЗаписей = РегистрыСведений.БуферОбменаКонтрагентовНСИ.СоздатьНаборЗаписей();				
	НаборЗаписей.Отбор.ПартнерGUID.Установить(ПартнерGUID);	 
	
	НаборЗаписей.Прочитать();
	
	Для каждого СтрокаНабора Из НаборЗаписей Цикл
		
		GUID = Новый УникальныйИдентификатор(СтрокаНабора.КонтрагентGUID);
		ОбъектМенеджерАбонент = Справочники.Абоненты;
		СсылкаАбонент = ОбъектМенеджерАбонент.ПолучитьСсылку(GUID);
		
		Если Не ОбъектСуществует(СсылкаАбонент) Тогда //Поищем по реквизиту "Эталон"
			
			СтруктураПараметровКонтрагента = Новый Структура("Ссылка", СтрокаНабора.КонтрагентGUID);
			ЗначениеРеквизитаGUID_НСИ = ПолучитьСсылкуПоДругимРеквизитамНСИ("Абоненты", ОбъектМенеджерАбонент, СтруктураПараметровКонтрагента);
			Если Не ЗначениеРеквизитаGUID_НСИ.Пустая() Тогда
				СсылкаАбонент = ЗначениеРеквизитаGUID_НСИ;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ОбъектСуществует(СсылкаАбонент) Тогда
			Абонент = ОбъектМенеджерАбонент.СоздатьЭлемент();
			Абонент.УстановитьСсылкуНового(СсылкаАбонент);					
		Иначе					
			Абонент = СсылкаАбонент.ПолучитьОбъект();					
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Абонент, СтрокаНабора);
		Абонент.Партнер = Партнер;
		
		Если Абонент.Код = 0 Тогда // Проверяем код на 0, если 0 то получаем новый код.
			Абонент.УстановитьНовыйКод();
		КонецЕсли;
		
		Абонент.ОбменДанными.Загрузка = Истина;
		Абонент.ОбменДанными.Отправитель = Отправитель;
		Попытка					
			Абонент.Записать();					
		Исключение
			ЗаписьВЛог = "Не удалось записать объект: "+Абонент+" ("+СтрокаНабора.КонтрагентGUID+"). По причине:"+Символы.ПС+ОписаниеОшибки();
			//ОбменДаннымиНСИ_20Сервер.ЗафиксироватьОписаниеОшибки(Комментарий, ЗаписьВЛог);
			ВызватьИсключение ЗаписьВЛог;
			
		КонецПопытки;
		
	КонецЦикла;	
	
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();

КонецПроцедуры 

