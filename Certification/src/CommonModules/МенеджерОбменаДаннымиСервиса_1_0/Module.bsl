
///////////////////////////////////////////////////////////////////////////////
// МЕНЕДЖЕР ОБМЕНА ДАННЫМИ СЕРВИСА                                           //
// Поддерживаемые форматы:                                                   //
//   1. http://v8.1c.ru/edi/edi_stnd/ServiceManagerData, версия 1.0.1.1      //
//   2. http://www.1cfresh.com/sd/data/1.0, версия 1.0.2                     //
///////////////////////////////////////////////////////////////////////////////

#Область ПроцедурыКонвертации

Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ПараметрыКонвертации.Вставить("УзелКорреспондента", КомпонентыОбмена.УзелКорреспондента);
	ПараметрыКонвертации.Вставить("КлючСообщенияЖурналаРегистрации", КомпонентыОбмена.КлючСообщенияЖурналаРегистрации);
	ПараметрыКонвертации.Вставить("АбонентыДляОбновленияИнформацииПоАктивнымПодпискам", Новый Массив);
	
	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
		
	ИначеЕсли КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		
		РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КомпонентыОбмена.УзелКорреспондента,
			"Сервис");
		
		ПараметрыКонвертации.Сервис = РеквизитыУзлаОбмена.Сервис;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		УстановитьАктуальныеПодпискиАктивныхОбращений(КомпонентыОбмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
		
КонецПроцедуры

#КонецОбласти

#Область ПОД

//	НаправлениеОбмена - строка ("Отправка" либо "Получение")
//	ПравилаОбработкиДанных - таблица значений 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	
    Если НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Справочник_Абоненты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Конфигурации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВерсииКонфигураций_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ИнформационныеБазы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Приложения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыОграниченийТарифов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Тарифы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Подписка_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
	
КонецПроцедуры

#Область Получение

#Область Справочник_Абоненты_Получение

Процедура ДобавитьПОД_Справочник_Абоненты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Абоненты";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Абоненты_Получение");
КонецПроцедуры

#КонецОбласти

#Область Справочник_Пользователи_Получение

Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Пользователи";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи_Получение");
КонецПроцедуры

#КонецОбласти

#Область Справочник_Конфигурации_Получение

Процедура ДобавитьПОД_Справочник_Конфигурации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Конфигурации";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Конфигурации_Получение");
КонецПроцедуры

#КонецОбласти

#Область Справочник_ВерсииКонфигураций_Получение
Процедура ДобавитьПОД_Справочник_ВерсииКонфигураций_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ВерсииКонфигураций";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВерсииКонфигураций_Получение");
КонецПроцедуры
#КонецОбласти

#Область Справочник_ИнформационныеБазы_Получение

Процедура ДобавитьПОД_Справочник_ИнформационныеБазы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ИнформационныеБазы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ИнформационныеБазы_Получение");
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_Приложения_Получение

Процедура ДобавитьПОД_Справочник_Приложения_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ОбластиДанных";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Приложения_Получение");
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_ВидыОграниченийТарифов_Получение

Процедура ДобавитьПОД_Справочник_ВидыОграниченийТарифов_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ВидыОграниченийТарифов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыОграниченийТарифов_Получение");
	
КонецПроцедуры

#КонецОбласти 

#Область Справочник_Тарифы_Получение

Процедура ДобавитьПОД_Справочник_Тарифы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Тарифы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Тарифы_Получение");
	
КонецПроцедуры

#КонецОбласти 

#Область Документ_Подписка_Получение

Процедура ДобавитьПОД_Документ_Подписка_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.Подписка";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Подписка_Получение");
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#КонецОбласти

#Область ПКО

//  НаправлениеОбмена - строка ("Отправка" либо "Получение")
//	ПравилаКонвертации - таблица значений 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	
	Если НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Справочник_Абоненты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Конфигурации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВерсииКонфигураций_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ИнформационныеБазы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Приложения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыОграниченийТарифов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Тарифы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_Подписка_Получение(ПравилаКонвертации);
		
	КонецЕсли;
	
КонецПроцедуры

#Область Получение

#Область Справочник_Абоненты_Получение

Процедура ДобавитьПКО_Справочник_Абоненты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Абоненты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Абоненты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Абоненты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Абоненты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Абоненты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ПоляПоиска.Добавить("Код, Наименование, Владелец");
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПользователиАбонентов", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПользователиАбонентов;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПользовательСервиса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВзаимоотношенияАбонентов", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВзаимоотношенияАбонентов;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Период";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Абонент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Абоненты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидВзаимоотношений";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыВзаимоотношений_Получение";
	
	
КонецПроцедуры

Процедура ПКО_Справочник_Абоненты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
	
	// Контактная информация
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
			
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(СтрокаXDTO.НаименованиеКонтактнойИнформации,,Справочники.ВидыКонтактнойИнформации.СправочникАбоненты);
				ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
                Если НЕ ЗначениеЗаполнено(ТекВидКИ) И ЗначениеЗаполнено(ИмяТипаКИ) Тогда
					ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
					ВидКИОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникАбоненты;
					ВидКИОбъект.Наименование = СтрокаXDTO.НаименованиеКонтактнойИнформации;
					ВидКИОбъект.Тип = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
					ВидКИОбъект.Записать();
					ТекВидКИ = ВидКИОбъект.Ссылка;
                Иначе
                    Продолжить;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailАбонента;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонАбонента;
			ИначеЕсли ВидКИСтрокой = "ВебСтраница" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.СайтАбонента;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресАбонента;
			ИначеЕсли ВидКИСтрокой = "Прочее" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияАбонента;
			Иначе
				Продолжить;
			КонецЕсли;
			ТекТипКИ = ТекВидКИ.Тип;
			СтрокаКИ = ПолученныеДанные.КонтактнаяИнформация.Добавить();
			ЗначенияПолейСтрокой = СокрЛП(СтрокаXDTO.ЗначенияПолей);
			СтрокаКИ.ЗначенияПолей = ЗначенияПолейСтрокой;
			СтрокаКИ.Вид = ТекВидКИ;
			СтрокаКИ.Тип = ТекТипКИ;
			
			ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ);
		КонецЦикла;
		
	КонецЕсли;
	
	// Взаимоотношения абонентов
	Если ДанныеXDTO.Свойство("ВзаимоотношенияАбонентов") И ЗначениеЗаполнено(ДанныеXDTO.ВзаимоотношенияАбонентов) Тогда
	
		ВзаимоотношенияАбонентов = Новый ТаблицаЗначений;
		ВзаимоотношенияАбонентов.Колонки.Добавить("Период");
		ВзаимоотношенияАбонентов.Колонки.Добавить("Абонент");
		ВзаимоотношенияАбонентов.Колонки.Добавить("ВидВзаимоотношений");
		
		ОбработкаКонвертации = Обработки.КонвертацияОбъектовXDTO.Создать();
		ОбработкаКонвертации.КомпонентыОбмена = КомпонентыОбмена;
		ОбработкаКонвертации.УзелОбменаЗагрузкаДанных = КомпонентыОбмена.УзелКорреспондента;
		
		Отказ = Ложь;
		Для каждого Строка Из ДанныеXDTO.ВзаимоотношенияАбонентов Цикл
			НоваяСтрока = ВзаимоотношенияАбонентов.Добавить();
			НоваяСтрока.Период = Строка.Период;
			ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Абоненты_Получение");
			Абонент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Абонент, ПКО, "ПолучитьСсылку");
			Если Абонент = Неопределено Тогда
				Абонент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Абонент, ПКО, "КонвертироватьИЗаписать");
			КонецЕсли;
			НоваяСтрока.Абонент = Абонент;
			
			ПКПД = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("ВидыВзаимоотношений_Получение", "ИмяПКПД");
			Если ПКПД <> Неопределено Тогда
				НоваяСтрока.ВидВзаимоотношений = ПКПД.КонвертацииЗначенийПриПолучении.Получить(Строка.ВидВзаимоотношений.Значение);
			КонецЕсли;
		КонецЦикла;
		Если ВзаимоотношенияАбонентов.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Т_ВзаимоотношенияАбонентов", ВзаимоотношенияАбонентов);
		КонецЕсли;
	КонецЕсли;
	
	// Пользователи абонентов
	Если ДанныеXDTO.Свойство("ПользователиАбонентов") И ЗначениеЗаполнено(ДанныеXDTO.ПользователиАбонентов) Тогда
	
		ПользователиАбонентов = Новый ТаблицаЗначений;
		ПользователиАбонентов.Колонки.Добавить("ПользовательСервиса");
		
		ОбработкаКонвертации = Обработки.КонвертацияОбъектовXDTO.Создать();
		ОбработкаКонвертации.КомпонентыОбмена = КомпонентыОбмена;
		ОбработкаКонвертации.УзелОбменаЗагрузкаДанных = КомпонентыОбмена.УзелКорреспондента;
		
		Отказ = Ложь;
		Для каждого Строка Из ДанныеXDTO.ПользователиАбонентов Цикл
			ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Пользователи_Получение");
			ПользовательСервиса = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.ПользовательСервиса, ПКО, "ПолучитьСсылку");
			Если ПользовательСервиса = Неопределено Тогда
				ПользовательСервиса = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.ПользовательСервиса, ПКО, "КонвертироватьИЗаписать");
			КонецЕсли;
			Если ПользователиАбонентов.НайтиСтроки(Новый Структура("ПользовательСервиса",ПользовательСервиса)).Количество() = 0 Тогда
				НоваяСтрока = ПользователиАбонентов.Добавить();
				НоваяСтрока.ПользовательСервиса = ПользовательСервиса;
			КонецЕсли; 
		КонецЦикла;
		Если ПользователиАбонентов.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Т_ПользователиАбонентов", ПользователиАбонентов);
		КонецЕсли;
	КонецЕсли;
	
	ПолученныеДанные.Владелец = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
	
КонецПроцедуры

Процедура ПКО_Справочник_Абоненты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
	
	// Взаимоотношения абонентов
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Т_ВзаимоотношенияАбонентов") Тогда
		Если ДанныеИБ = Неопределено Тогда
			Ссылка = ПолученныеДанные.ПолучитьСсылкуНового();
		Иначе
			Ссылка = ДанныеИБ.Ссылка;
		КонецЕсли; 
		
		Т_ВзаимоотношенияАбонентов = Новый ТаблицаЗначений;
		Т_ВзаимоотношенияАбонентов.Колонки.Добавить("Период");
		Т_ВзаимоотношенияАбонентов.Колонки.Добавить("ВедущийАбонент");
		Т_ВзаимоотношенияАбонентов.Колонки.Добавить("Абонент");
		Т_ВзаимоотношенияАбонентов.Колонки.Добавить("ВидВзаимоотношений");
		
		Для каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Т_ВзаимоотношенияАбонентов Цикл
			ПоляПоиска = Новый Структура("Период, Абонент, ВидВзаимоотношений", Строка.Период, Строка.Абонент.Ссылка, Строка.ВидВзаимоотношений);
			Если Т_ВзаимоотношенияАбонентов.НайтиСтроки(ПоляПоиска).Количество() = 0 Тогда
				НоваяСтрока = Т_ВзаимоотношенияАбонентов.Добавить();
				НоваяСтрока.Период = Строка.Период;
				НоваяСтрока.ВидВзаимоотношений = Строка.ВидВзаимоотношений;
				НоваяСтрока.Абонент = Строка.Абонент.Ссылка;
				НоваяСтрока.ВедущийАбонент = Ссылка;
			КонецЕсли;
		КонецЦикла; 

		НаборЗаписей = РегистрыСведений.ВзаимоотношенияАбонентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВедущийАбонент.Установить(Ссылка, Истина);
		НаборЗаписей.Загрузить(Т_ВзаимоотношенияАбонентов);
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными(),
				УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	// Пользователи абонентов
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Т_ПользователиАбонентов") Тогда
		Если ДанныеИБ = Неопределено Тогда
			Ссылка = ПолученныеДанные.ПолучитьСсылкуНового();
		Иначе
			Ссылка = ДанныеИБ.Ссылка;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПользователиАбонентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Абонент.Установить(Ссылка, Истина);
		
		Для каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Т_ПользователиАбонентов Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Абонент = Ссылка;
			НоваяЗапись.ПользовательСервиса = Строка.ПользовательСервиса.Ссылка;
			НоваяЗапись.Сервис = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		ДанныеДляЗаписи = ПолученныеДанные;
	Иначе
		ДанныеДляЗаписи = ДанныеИБ;
		
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		ТекущиеДанныеКИ = ДанныеДляЗаписи.КонтактнаяИнформация.Выгрузить();
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		ДанныеДляЗаписи.КонтактнаяИнформация.Загрузить(ПолученныеДанные.КонтактнаяИнформация.Выгрузить());
		Для каждого СтрокаКИ Из ТекущиеДанныеКИ Цикл
			Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДополнительныйEmailАбонента 
				Или СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДополнительныйТелефонАбонента Тогда
				НоваяСтрокаКИ = ДанныеДляЗаписи.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКИ, СтрокаКИ);
			КонецЕсли; 
		КонецЦикла; 
		ПолученныеДанные = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_Пользователи_Получение

Процедура ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Пользователи_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ПользователиСервисов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Пользователи";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ПоляПоиска.Добавить("Код, Наименование, Владелец");
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Логин";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЧасовойПояс";
	НоваяСтрока.СвойствоФормата = "ЧасовойПояс";
	
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
	
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
			
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(СтрокаXDTO.НаименованиеКонтактнойИнформации,,Справочники.ВидыКонтактнойИнформации.СправочникПользователиСервисов);
				ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
				Если НЕ ЗначениеЗаполнено(ТекВидКИ) И ЗначениеЗаполнено(ИмяТипаКИ) Тогда
					ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
					ВидКИОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникАбоненты;
					ВидКИОбъект.Наименование = СтрокаXDTO.НаименованиеКонтактнойИнформации;
					ВидКИОбъект.Тип = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
					ВидКИОбъект.Записать();
					ТекВидКИ = ВидКИОбъект.Ссылка;
                Иначе
                    Продолжить;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПользователяСервиса;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПользователяСервиса;
			Иначе
				Продолжить;
			КонецЕсли;
			ТекТипКИ = ТекВидКИ.Тип;
			СтрокаКИ = ПолученныеДанные.КонтактнаяИнформация.Добавить();
			ЗначенияПолейСтрокой = СокрЛП(СтрокаXDTO.ЗначенияПолей);
			СтрокаКИ.ЗначенияПолей = ЗначенияПолейСтрокой;
			СтрокаКИ.Вид = ТекВидКИ;
			СтрокаКИ.Тип = ТекТипКИ;
			
			ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ);
		КонецЦикла;
		
	КонецЕсли;
	
	ПолученныеДанные.Владелец = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
	
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
	
	Если ДанныеИБ = Неопределено Тогда
		
		ДанныеДляЗаписи = ПолученныеДанные;
		
	Иначе
		ДанныеДляЗаписи = ДанныеИБ;
		
		ТекущиеДанныеКИ = ДанныеДляЗаписи.КонтактнаяИнформация.Выгрузить();
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		ДанныеДляЗаписи.КонтактнаяИнформация.Загрузить(ПолученныеДанные.КонтактнаяИнформация.Выгрузить());
		Для каждого СтрокаКИ Из ТекущиеДанныеКИ Цикл
			Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДополнительныйEmailПользователяСервиса
				Или СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДополнительныйТелефонПользователяСервиса Тогда
				НоваяСтрокаКИ = ДанныеДляЗаписи.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКИ, СтрокаКИ);
			КонецЕсли; 
		КонецЦикла; 
		
		ПолученныеДанные = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_Конфигурации_Получение

Процедура ДобавитьПКО_Справочник_Конфигурации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Конфигурации_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Конфигурации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Конфигурации";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Конфигурации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Имя";
	НоваяСтрока.СвойствоФормата = "Имя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";

	ПравилоКонвертации.ПоляПоиска.Добавить("Имя");
КонецПроцедуры

Процедура ПКО_Справочник_Конфигурации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
	
	Если ДанныеИБ = Неопределено Тогда
		ДанныеДляЗаписи = ПолученныеДанные;
	Иначе
		ДанныеДляЗаписи = ДанныеИБ;
		
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные,ДанныеИБ );
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписи.Наименование) Тогда
		ДанныеДляЗаписи.Наименование = ДанныеДляЗаписи.Код;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_ВерсииКонфигураций_Получение

Процедура ДобавитьПКО_Справочник_ВерсииКонфигураций_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ВерсииКонфигураций_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ВерсииКонфигураций;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ВерсииКонфигураций";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ВерсииКонфигураций_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";

	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Конфигурация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Конфигурации_Получение";
	
	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец, Наименование");
	
КонецПроцедуры

Процедура ПКО_Справочник_ВерсииКонфигураций_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
	
	Если ДанныеИБ = Неопределено Тогда
		ДанныеДляЗаписи = ПолученныеДанные;
	Иначе
		ДанныеДляЗаписи = ДанныеИБ;
		
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные,ДанныеИБ );
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписи.Код) Тогда
		ДанныеДляЗаписи.Код = ОбщегоНазначенияУСП.ВерсиюВЧисло(ДанныеДляЗаписи.Наименование)
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_ИнформационныеБазы_Получение

Процедура ДобавитьПКО_Справочник_ИнформационныеБазы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ИнформационныеБазы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ИнформационныеБазы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ИнформационныеБазы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ИнформационныеБазы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ИнформационныеБазы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВерсияКонфигурации";
	НоваяСтрока.СвойствоФормата = "ВерсияКонфигурации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВерсииКонфигураций_Получение";
	
КонецПроцедуры

Процедура ПКО_Справочник_ИнформационныеБазы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
	
	ПолученныеДанные.Владелец = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
	
КонецПроцедуры

Процедура ПКО_Справочник_ИнформационныеБазы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
	
	Если ДанныеИБ = Неопределено Тогда
		ДанныеДляЗаписи = ПолученныеДанные;
	Иначе
		ДанныеДляЗаписи = ДанныеИБ;
		
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные,ДанныеИБ );
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	ДанныеДляЗаписи.Владелец = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_Приложения_Получение

Процедура ДобавитьПКО_Справочник_Приложения_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Приложения_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Приложения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ОбластиДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Приложения_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Приложения_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Абонент";
	НоваяСтрока.СвойствоФормата = "Абонент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Абоненты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИнформационнаяБаза";
	НоваяСтрока.СвойствоФормата = "ИнформационнаяБаза";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ИнформационныеБазы_Получение"; 
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПользователиПриложений", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПользователиПриложений;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПользовательСервиса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Право";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПраваПользователейПриложений_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Разрешено";
	
КонецПроцедуры

Процедура ПКО_Справочник_Приложения_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
	
	// Взаимоотношения абонентов
	Если ДанныеXDTO.Свойство("ПользователиПриложений") И ЗначениеЗаполнено(ДанныеXDTO.ПользователиПриложений) Тогда
	
		ПользователиПриложений = Новый ТаблицаЗначений;
		ПользователиПриложений.Колонки.Добавить("ПользовательСервиса");
		ПользователиПриложений.Колонки.Добавить("Право");
		ПользователиПриложений.Колонки.Добавить("Разрешено");
		
		ОбработкаКонвертации = Обработки.КонвертацияОбъектовXDTO.Создать();
		ОбработкаКонвертации.КомпонентыОбмена = КомпонентыОбмена;
		ОбработкаКонвертации.УзелОбменаЗагрузкаДанных = КомпонентыОбмена.УзелКорреспондента;
		
		Отказ = Ложь;
		Для каждого Строка Из ДанныеXDTO.ПользователиПриложений Цикл
			ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Пользователи_Получение");
			ПользовательСервиса = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.ПользовательСервиса, ПКО, "ПолучитьСсылку");
			Если ПользовательСервиса = Неопределено Тогда
				ПользовательСервиса = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.ПользовательСервиса, ПКО, "КонвертироватьИЗаписать");
			КонецЕсли;
			
			ПКПД = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("ПраваПользователейПриложений_Получение", "ИмяПКПД");
			Право = Неопределено;
			Если ПКПД <> Неопределено Тогда
				Если Строка.Право <> Неопределено Тогда
					Право = ПКПД.КонвертацииЗначенийПриПолучении.Получить(Строка.Право.Значение);
				КонецЕсли;
			КонецЕсли;
			Если Право <> Неопределено И ПользователиПриложений.НайтиСтроки(Новый Структура("ПользовательСервиса, Право", ПользовательСервиса, Право)).Количество() = 0 Тогда
				НоваяСтрока = ПользователиПриложений.Добавить();
				НоваяСтрока.Право = Право;
				НоваяСтрока.ПользовательСервиса = ПользовательСервиса;
				НоваяСтрока.Разрешено = Строка.Разрешено;
			КонецЕсли; 
		КонецЦикла;
		Если ПользователиПриложений.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Т_ПользователиПриложений", ПользователиПриложений);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_Справочник_Приложения_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
    
    // Пользователи приложений
    Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Т_ПользователиПриложений") Тогда
        Если ДанныеИБ = Неопределено Тогда
            Ссылка = ПолученныеДанные.ПолучитьСсылкуНового();
        Иначе
            Ссылка = ДанныеИБ.Ссылка;
        КонецЕсли; 
        НаборЗаписей = РегистрыСведений.ПользователиПриложений.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.Приложение.Установить(Ссылка, Истина);
        Для каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Т_ПользователиПриложений Цикл
            НоваяЗапись = НаборЗаписей.Добавить();
            НоваяЗапись.Приложение = Ссылка;
            НоваяЗапись.ПользовательСервиса = Строка.ПользовательСервиса.Ссылка;
            НоваяЗапись.Право = Строка.Право;
            НоваяЗапись.Разрешено = Строка.Разрешено;
            НоваяЗапись.Сервис = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
        КонецЦикла;
        НаборЗаписей.Записать(Истина);
    КонецЕсли;
    
    Если ДанныеИБ = Неопределено Тогда
        ДанныеДляЗаписи = ПолученныеДанные;
    Иначе
        ДанныеДляЗаписи = ДанныеИБ;
        // Заменяем свойства, которые получили из XDTO
        ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
        ПолученныеДанные = Неопределено;
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(ДанныеДляЗаписи.Наименование) Тогда
        ДанныеДляЗаписи.Наименование = "<>";
    КонецЕсли;
    
    ДанныеДляЗаписи.Владелец = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
    
КонецПроцедуры

#КонецОбласти

#Область Справочник_ВидыОграниченийТарифов_Получение
Процедура ДобавитьПКО_Справочник_ВидыОграниченийТарифов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ВидыОграниченийТарифов_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ВидыОграниченийТарифов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ВидыОграниченийТарифов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	ПравилоКонвертации.ПоляПоиска.Добавить("Код, Наименование, Владелец");
	
КонецПроцедуры

Процедура ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
    
    Если ДанныеИБ = Неопределено Тогда
        ДанныеДляЗаписи = ПолученныеДанные;
    Иначе
        ДанныеДляЗаписи = ДанныеИБ;
    КонецЕсли;
    
    ДанныеДляЗаписи.Владелец = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
    
КонецПроцедуры

#КонецОбласти

#Область Справочник_Тарифы_Получение

Процедура ДобавитьПКО_Справочник_Тарифы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Тарифы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Тарифы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Тарифы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Тарифы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Тарифы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаНачалаДействия";
	НоваяСтрока.СвойствоФормата = "ДатаНачалаДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОкончанияДействия";
	НоваяСтрока.СвойствоФормата = "ДатаОкончанияДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОписаниеДляАбонентов";
	НоваяСтрока.СвойствоФормата = "ОписаниеДляАбонентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОписаниеДляОбслуживающихОрганизаций";
	НоваяСтрока.СвойствоФормата = "ОписаниеДляОбслуживающихОрганизаций";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПериодДействияПродлевающейПодписки";
	НоваяСтрока.СвойствоФормата = "ПериодДействияПродляющейПодписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПериодДействияРасширяющейПодписки";
	НоваяСтрока.СвойствоФормата = "ПериодДействияРасширяющейПодписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПериодДобавленияПродлевающейПодписки";
	НоваяСтрока.СвойствоФормата = "ПериодДобавленияПродляющейПодписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РасширениеТарифа";
	НоваяСтрока.СвойствоФормата = "РасширениеТарифа";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДоступныеТарифы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДоступныеТарифы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Тариф";
	НоваяСтрока.СвойствоКонфигурации = "Тариф";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Тарифы_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Конфигурации", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Конфигурации;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Конфигурация";
	НоваяСтрока.СвойствоКонфигурации = "Конфигурация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Конфигурация_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Ограничения", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Ограничения;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОграничений";
	НоваяСтрока.СвойствоКонфигурации = "ВидОграничений";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыОграниченийТарифов_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоЛицензий";
	НоваяСтрока.СвойствоКонфигурации = "КоличествоЛицензий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДопЛицензийРасширяющейПодписки";
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДопЛицензийРасширяющейПодписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
КонецПроцедуры

Процедура ПКО_Справочник_Тарифы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
	
	// Доступные тарифы 
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Тариф",   "Тариф");
	
	МассивСтрокДоступныеТарифы = Новый Массив;
	Если ДанныеXDTO.Свойство("ДоступныеТарифы") И ЗначениеЗаполнено(ДанныеXDTO.ДоступныеТарифы) Тогда
		Для Каждого Строка Из ДанныеXDTO.ДоступныеТарифы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Тариф", Новый Структура("Значение, ИмяПКО", Строка.Тариф, "Справочник_Тарифы_Получение"));
			МассивСтрокДоступныеТарифы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокДоступныеТарифы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДоступныеТарифы", МассивСтрокДоступныеТарифы);
	КонецЕсли;
	
	// Конфигурации 
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Конфигурация",   "Конфигурация");
	
	МассивСтрокКонфигурации = Новый Массив;
	Если ДанныеXDTO.Свойство("Конфигурации")	И ЗначениеЗаполнено(ДанныеXDTO.Конфигурации) Тогда
		Для Каждого Строка Из ДанныеXDTO.Конфигурации Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Конфигурация", Новый Структура("Значение, ИмяПКО", Строка.Конфигурация, "Справочник_Конфигурации_Получение"));
			МассивСтрокКонфигурации.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокКонфигурации.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Конфигурации", МассивСтрокКонфигурации);
	КонецЕсли;
	
	// Ограничения 
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("ВидОграничений",   "ВидОграничений");
	ПравилаЗаполнения.Вставить("КоличествоЛицензий",   "КоличествоЛицензий");
	ПравилаЗаполнения.Вставить("КоличествоДопЛицензийРасширяющейПодписки",   "КоличествоДопЛицензийРасширяющейПодписки");
	
	МассивСтрокОграничения = Новый Массив;
	Если ДанныеXDTO.Свойство("Ограничения") И ЗначениеЗаполнено(ДанныеXDTO.Ограничения) Тогда
		Для Каждого Строка Из ДанныеXDTO.Ограничения Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ВидОграничений", Новый Структура("Значение, ИмяПКО", Строка.ВидОграничений, "Справочник_ВидыОграниченийТарифов_Получение"));
			МассивСтрокОграничения.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокОграничения.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Ограничения", МассивСтрокОграничения);
	КонецЕсли;
	
	ПолученныеДанные.Владелец = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
	
КонецПроцедуры

Процедура ПКО_Справочник_Тарифы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
	
	Если ДанныеИБ <> Неопределено Тогда
		ДанныеИБ.ДоступныеТарифы.Загрузить(ПолученныеДанные.ДоступныеТарифы.Выгрузить());
		ДанныеИБ.Конфигурации.Загрузить(ПолученныеДанные.Конфигурации.Выгрузить());
		ДанныеИБ.Ограничения.Загрузить(ПолученныеДанные.Ограничения.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Документ_Подписка_Получение

Процедура ДобавитьПКО_Документ_Подписка_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_Подписка_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.Подписка;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_Подписка_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_Подписка_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ОбъектФормата = "Документ.Подписка";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Абонент";
	НоваяСтрока.СвойствоФормата = "Абонент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Абоненты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВедущийАбонент";
	НоваяСтрока.СвойствоФормата = "ВедущийАбонент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Абоненты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПодключения";
	НоваяСтрока.СвойствоФормата = "ДатаПодключения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОтключения";
	НоваяСтрока.СвойствоФормата = "ДатаОтключения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнаяПодписка";
	НоваяСтрока.СвойствоФормата = "ОсновнаяПодписка";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_Подписка_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тариф";
	НоваяСтрока.СвойствоФормата = "Тариф";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Тарифы_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипПодписки";
	НоваяСтрока.СвойствоФормата = "ТипПодписки";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыПодписок_Получение";
	
КонецПроцедуры

Процедура ПКО_Документ_Подписка_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
	
	ПолученныеДанные.Сервис = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
	
КонецПроцедуры

Процедура ПКО_Документ_Подписка_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
	
	Если КомпонентыОбмена.ПараметрыКонвертации.АбонентыДляОбновленияИнформацииПоАктивнымПодпискам.Найти(ПолученныеДанные.Абонент) = Неопределено Тогда
		КомпонентыОбмена.ПараметрыКонвертации.АбонентыДляОбновленияИнформацииПоАктивнымПодпискам.Добавить(ПолученныеДанные.Абонент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ПКПД

//Заполняет правила конвертации предопределенных данных
// Параметры:
//	НаправлениеОбмена - Строка - "Отправка" либо "Получение")
//	ПравилаКонвертации - ТаблицаЗначений - правила конвертации
//
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		//ВидыКИ_Отправка
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыКИ_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO = "ВидыКИ";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailАбонента, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонАбонента, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.СайтАбонента, "ВебСтраница");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресАбонента, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияАбонента, "Прочее");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
		
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ПраваПользователейПриложений_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПраваПользователейПриложений;
		ПравилоКонвертации.ТипXDTO = "ПраваПользователейПриложений";
	
		ЗначенияПриПолучении = Новый Соответствие;
		ЗначенияПриПолучении.Вставить("Запуск", Перечисления.ПраваПользователейПриложений.Запуск);
		ЗначенияПриПолучении.Вставить("ЗапускИАдминистрирование", Перечисления.ПраваПользователейПриложений.ЗапускИАдминистрирование);
		ЗначенияПриПолучении.Вставить("ПросмотрРезервныхКопий", Перечисления.ПраваПользователейПриложений.ПросмотрРезервныхКопий);
		ЗначенияПриПолучении.Вставить("Чтение", Перечисления.ПраваПользователейПриложений.Чтение);
		ЗначенияПриПолучении.Вставить("Удаление", Перечисления.ПраваПользователейПриложений.Удаление);
		ЗначенияПриПолучении.Вставить("ВладелецАбонента", Перечисления.ПраваПользователейПриложений.ВладелецАбонента);
		ЗначенияПриПолучении.Вставить("АдминистраторАбонента", Перечисления.ПраваПользователейПриложений.АдминистраторАбонента);
		ЗначенияПриПолучении.Вставить("УдаленныйДоступ", Перечисления.ПраваПользователейПриложений.УдаленныйДоступ);
		ЗначенияПриПолучении.Вставить("ЧтениеСлужебныхДанных", Перечисления.ПраваПользователейПриложений.ЧтениеСлужебныхДанных);
		ЗначенияПриПолучении.Вставить("Оператор", Перечисления.ПраваПользователейПриложений.Оператор);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияПриПолучении;
		
		//ВидыВзаимоотношений_Получение
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыВзаимоотношений_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыВзаимоотношений;
		ПравилоКонвертации.ТипXDTO = "ВидыВзаимоотношений";
	
		ЗначенияПриПолучении = Новый Соответствие;
		ЗначенияПриПолучении.Вставить("ПровайдерАбонент", Перечисления.ВидыВзаимоотношений.ПровайдерАбонент);
		ЗначенияПриПолучении.Вставить("ПровайдерОбслуживающаяОрганизация", Перечисления.ВидыВзаимоотношений.ПровайдерОбслуживающаяОрганизация);
		ЗначенияПриПолучении.Вставить("ОбслуживающаяОрганизацияАбонент", Перечисления.ВидыВзаимоотношений.ОбслуживающаяОрганизацияАбонент);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияПриПолучении;
		
		//ТипыПодписок_Получение
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ТипыПодписок_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыПодписок;
		ПравилоКонвертации.ТипXDTO = "ТипыПодписок";
	
		ЗначенияПриПолучении = Новый Соответствие;
		ЗначенияПриПолучении.Вставить("Продляющая", Перечисления.ТипыПодписок.Продлевающая);
		ЗначенияПриПолучении.Вставить("Основная", Перечисления.ТипыПодписок.Основная);
		ЗначенияПриПолучении.Вставить("Расширяющая", Перечисления.ТипыПодписок.Расширяющая);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияПриПолучении;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Алгоритмы

Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта ИЗ КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ)
	XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Тип, );
	
	Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
	
		ИЛИ СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
	
		СтрокаКИ.НомерТелефона = XDTOКонтактная.Представление;
	
		СтрокаКИ.НомерТелефонаБезКодов = XDTOКонтактная.Состав.Номер;
	
	ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
	
		СтрокаКИ.Страна = XDTOКонтактная.Состав.Страна;
	
		Если ТипЗнч(XDTOКонтактная.Состав.Состав) <> Тип("Строка") Тогда
	
			СтрокаКИ.Регион = XDTOКонтактная.Состав.Состав.СубъектРФ;
	
			СтрокаКИ.Город = XDTOКонтактная.Состав.Состав.Город;
	
		КонецЕсли;
	
	ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
	
		СтрокаКИ.АдресЭП = XDTOКонтактная.Состав.Значение;
	
		ПозицияСобаки = Найти(XDTOКонтактная.Состав.Значение, "@");
	
		Если ПозицияСобаки <> 0 Тогда
	
			СтрокаКИ.ДоменноеИмяСервера = Сред(XDTOКонтактная.Состав.Значение, ПозицияСобаки + 1);
	
		КонецЕсли;
	
	КонецЕсли;
	
	// Заполнение представления
	
	Если Найти(XDTOКонтактная.Представление, Символы.ПС) = 0 Тогда
	
		СтрокаКИ.Представление = XDTOКонтактная.Представление;
	
	Иначе
	
		СтрокаПредставление = "";
	
		Если СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
	
			СтруктураПолейКИ = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(XDTOКонтактная.Представление, СтрокаКИ.Вид);
	
			УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураПолейКИ, СтрокаПредставление);
	
		ИначеЕсли СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")
	
			ИЛИ СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс") Тогда
	
			СтруктураПолейКИ = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(XDTOКонтактная.Представление, СтрокаКИ.Вид);
	
			
			СтруктураПолейКИПолная = Новый Структура("КодСтраны,КодГорода,НомерТелефона,Добавочный,Комментарий");
			ЗаполнитьЗначенияСвойств(СтруктураПолейКИПолная, СтруктураПолейКИ);
	
			СтрокаПредставление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
				СтруктураПолейКИПолная.КодСтраны, СтруктураПолейКИПолная.КодГорода,
				СтруктураПолейКИПолная.НомерТелефона, СтруктураПолейКИПолная.Добавочный, 
				СтруктураПолейКИПолная.Комментарий);
			
	
		Иначе
	
			СтрокаПредставление = СтрЗаменить(XDTOКонтактная.Представление, Символы.ПС, ",");
	
		КонецЕсли;
	
		
	
		СтрокаКИ.Представление = СтрокаПредставление;
	
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСтруктуруДанныхСтроки(СоответствиеРеквизитовТЧ, СтрокаXDTO, СтруктураДанныхСтроки) Экспорт
		Для Каждого ЭлементСоответствия ИЗ СоответствиеРеквизитовТЧ Цикл
		ЗначениеРеквизитаТЧ = СтрокаXDTO[ЭлементСоответствия.Значение];
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизитаТЧ) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхСтроки.Вставить(ЭлементСоответствия.Ключ,ЗначениеРеквизитаТЧ); 
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьАктуальныеПодпискиАктивныхОбращений(КомпонентыОбмена)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Обращение.Ссылка КАК Обращение,
		|	Обращение.Абонент,
		|	Обращение.ПодпискаНаТариф КАК ТекущаяПодписка,
		|	Обращение.ПодпискаНаТариф.ДатаОтключения КАК ТекущаяДатаОтключения,
		|	МАКСИМУМ(Подписка.ДатаОтключения) КАК МаксимальнаяДатаОтключения
		|ПОМЕСТИТЬ МаксимальныеСрокиПодписок
		|ИЗ
		|	Документ.Обращение КАК Обращение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Подписка КАК Подписка
		|		ПО Обращение.Абонент = Подписка.Абонент
		|ГДЕ
		|	НЕ Обращение.ПометкаУдаления
		|	И Обращение.Абонент В(&Абоненты)
		|	И Обращение.Состояние <> &СостояниеЗакрыто
		|
		|СГРУППИРОВАТЬ ПО
		|	Обращение.Ссылка,
		|	Обращение.Абонент,
		|	Обращение.ПодпискаНаТариф,
		|	Обращение.ПодпискаНаТариф.ДатаОтключения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Подписка.Ссылка КАК НоваяПодписка,
		|	МаксимальныеСрокиПодписок.Обращение
		|ИЗ
		|	МаксимальныеСрокиПодписок КАК МаксимальныеСрокиПодписок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Подписка КАК Подписка
		|		ПО МаксимальныеСрокиПодписок.МаксимальнаяДатаОтключения = Подписка.ДатаОтключения
		|			И МаксимальныеСрокиПодписок.Абонент = Подписка.Абонент
		|			И МаксимальныеСрокиПодписок.ТекущаяПодписка <> Подписка.Ссылка
		|ГДЕ
		|	Подписка.ДатаОтключения > МаксимальныеСрокиПодписок.ТекущаяДатаОтключения";
	
	Запрос.УстановитьПараметр("СостояниеЗакрыто", Перечисления.СостоянияОбращений.Закрыто);
	Запрос.УстановитьПараметр("Абоненты", КомпонентыОбмена.ПараметрыКонвертации.АбонентыДляОбновленияИнформацииПоАктивнымПодпискам);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбращениеОбъект = Выборка.Обращение.ПолучитьОбъект();
		
		ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеАктивнойПодпискиНаТариф;
		
		ДанныеКонтекста = Новый Структура;
		ДанныеКонтекста.Вставить("ИсходнаяПодпискаНаТариф", ОбращениеОбъект.ПодпискаНаТариф);
		ДанныеКонтекста.Вставить("НоваяПодпискаНаТариф", Выборка.НоваяПодписка);
		
		КонтекстСобытия = БизнесСобытия.СформироватьКонтекстСобытия(ДанныеКонтекста);
		
		БизнесСобытия.ЗарегистрироватьСобытие(ОбращениеОбъект.Ссылка, , КонтекстСобытия,,
			СтрШаблон(НСтр("ru='%1%2""%3"" → ""%4""'"), Строка(ВидСобытия), Символы.ПС,
				БизнесСобытия.ПредставлениеЗначения(ОбращениеОбъект.ПодпискаНаТариф),
				БизнесСобытия.ПредставлениеЗначения(Выборка.НоваяПодписка)));
		
		ОбращениеОбъект.ПодпискаНаТариф = Выборка.НоваяПодписка;
		ОбращениеОбъект.ОбменДанными.Загрузка = Истина;
		ОбращениеОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область Параметры

//Заполняет параметры конвертации
// Параметры:
//	ПараметрыКонвертации - Структура
//
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	
	ПараметрыКонвертации.Вставить("Сервис");
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

//Выполняет процедуру модуля менеджера по переданному имени процедуры
//
//Параметры:
//	ИмяПроцедуры - Строка - строка с именем процедуры
//	Параметры - Структура - параметры обмена
//
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	
	Если ИмяПроцедуры = "ПКО_Справочник_Абоненты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Абоненты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Абоненты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Абоненты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Конфигурации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Конфигурации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВерсииКонфигураций_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ВерсииКонфигураций_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ИнформационныеБазы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ИнформационныеБазы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ИнформационныеБазы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Приложения_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Приложения_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
		
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Приложения_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Приложения_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
            
    ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Тарифы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Тарифы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Тарифы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Тарифы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Подписка_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_Подписка_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Подписка_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_Подписка_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

