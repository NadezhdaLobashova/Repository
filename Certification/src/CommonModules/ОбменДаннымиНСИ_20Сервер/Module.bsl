
////////////////////////////////////////////////////////////////////////////////
// Вспомогательные служебные процедуры и функции

// Проверяет факт восстановления этой базы из резервной копии.
// Если база была восстановлена из резервной копии, то необходимо выполнить синхронизацию номеров отправленных и полученных сообщений
// для двух баз (номеру отправленного сообщения в этой базе присваивается значение номера принятого сообщения из базы-корреспондента).
// Если база была восстановлена из резервной копии, то рекомендуется не снимать с регистрации изменения данных на текущем узле,
// т.к. эти данные могли быть еще не отправлены.
//
// Параметры:
//   Отправитель    - ПланОбменаСсылка - узел, от имени которого было сформировано и отправлено сообщение обмена.
//   НомерПринятого - Число            - номер принятого сообщения в базе-корреспонденте.
//
// Возвращаемое значение:
//   ФиксированнаяСтруктура - свойства структуры:
//     * Отправитель                 - ПланОбменаСсылка - см. выше параметр Отправитель.
//     * НомерПринятого              - Число            - см. выше параметр НомерПринятого.
//     * ВосстановленаРезервнаяКопия - Булево - Истина, если обнаружен факт восстановления этой базы из резервной копии.
//
Функция ПараметрыРезервнойКопии(Знач Отправитель, Знач НомерПринятого) Экспорт
	
	// Для базы, которая была поднята из резервной копии, номер отправленного сообщения
	// будет меньше номера принятого сообщения в корреспонденте.
	// Т.е. эта база получит номер принятого сообщения,
	// который она еще не отправляла - "сообщение из будущего".
	Результат = Новый Структура("Отправитель, НомерПринятого, ВосстановленаРезервнаяКопия");
	Результат.Отправитель = Отправитель;
	Результат.НомерПринятого = НомерПринятого;
	Результат.ВосстановленаРезервнаяКопия = (НомерПринятого > Отправитель.НомерОтправленного);
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

// Определяет корневой тип конфигурации по описанию типов, типу, метаданным, ссылке или объекту.
// Для описания типов берется первый тип массива типов.
// Для субобъектов конфигурации не возвращает имя корневого типа.
//
// Параметры:
//  пОбъект      – Произвольный – для чего получаем метаданные.
//
// Возвращаемое значение:
//               – Строка - имя типа конфигурации;
//  Неопределено - не удалось получить имя типа.
//
Функция ЛксПолучитьКорневойТипКонфигурацииНСИ(Знач пОбъект) Экспорт

    Если ТипЗнч(пОбъект) = Тип("ОбъектМетаданных") Тогда 
        МетаданныеТипа = пОбъект;
    Иначе
        Если ТипЗнч(пОбъект) = Тип("ОписаниеТипов") Тогда
            Если пОбъект.Типы().Количество() > 0 Тогда 
                пОбъект = пОбъект.Типы()[0];
            Иначе
                Возврат Неопределено;
            КонецЕсли;
        КонецЕсли;
        Если ТипЗнч(пОбъект) = Тип("Тип") Тогда
            МетаданныеТипа = Метаданные.НайтиПоТипу(пОбъект);
        Иначе
            МетаданныеТипа = Метаданные.НайтиПоТипу(ТипЗнч(пОбъект));
        КонецЕсли;
    КонецЕсли;
    Если МетаданныеТипа <> Неопределено Тогда 
        МассивФрагментов = ЛксПолучитьМассивИзСтрокиСРазделителемНСИ(МетаданныеТипа.ПолноеИмя());
        Если МассивФрагментов.Количество() = 2 Тогда 
            Возврат МассивФрагментов[0];
        Иначе
            // Ссылка на субобъект
        КонецЕсли;
    КонецЕсли;
    Возврат Неопределено;
    
КонецФункции // ЛксПолучитьКорневойТипКонфигурации()

// Функция разбивает строку разделителем.
// 
// Параметры:
//  пСтрока      - Строка - которую разбиваем;
//  *пРазделитель - Строка - символ-разделитель.
//
// Возвращаемое значение:
//               - Массив - содержащий фрагменты, на которые разбивает строку разделитель.
//
Функция ЛксПолучитьМассивИзСтрокиСРазделителемНСИ(пСтрока, пРазделитель = ".") Экспорт
    
    Массив = Новый Массив;
    лСтрока = СтрЗаменить(пСтрока, пРазделитель, Символы.ПС);
    Для Счетчик = 1 По СтрЧислоСтрок(лСтрока) Цикл 
        Массив.Добавить(СтрПолучитьСтроку(лСтрока, Счетчик));
    КонецЦикла;
    Возврат Массив;
    
КонецФункции // ЛксПолучитьМассивИзСтрокиСРазделителем()

// Формирует выборку измененных данных для передачи их в тот или иной узел плана обмена.
// Если обращение к методу выполняется в активной транзакции, то вызывает исключение.
// См. описание метода ПланыОбменаМенеджер.ВыбратьИзменения() в синтаксис-помощнике.
//
Функция ВыбратьИзменения(Знач Узел, Знач НомерСообщения, Знач ФильтрВыборки = Неопределено) Экспорт
	
	Если ТранзакцияАктивна() Тогда
		ВызватьИсключение НСтр("ru = 'Выборка изменений данных запрещена в активной транзакции.'");
	КонецЕсли;
	
	Возврат ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения, ФильтрВыборки);
КонецФункции

// Выполняет синхронизацию номеров отправленных и полученных сообщений
// для двух баз (номеру отправленного сообщения в этой базе присваивается значение номера принятого сообщения из базы-корреспондента).
//
// Параметры:
//   ПараметрыРезервнойКопии - ФиксированнаяСтруктура - свойства структуры:
//     * Отправитель                 - ПланОбменаСсылка - узел, от имени которого было сформировано и отправлено сообщение обмена.
//     * НомерПринятого              - Число            - номер принятого сообщения в базе-корреспонденте.
//     * ВосстановленаРезервнаяКопия - Булево           - признак восстановления этой базы из резервной копии.
//
Процедура ПриВосстановленииРезервнойКопии(Знач ПараметрыРезервнойКопии) Экспорт
	
	Если ПараметрыРезервнойКопии.ВосстановленаРезервнаяКопия Тогда
		
		// Устанавливаем в качестве номера отправленного сообщения в этой базе номер принятого сообщения в корреспонденте.
		ОбъектУзла = ПараметрыРезервнойКопии.Отправитель.ПолучитьОбъект();
		ОбъектУзла.НомерОтправленного = ПараметрыРезервнойКопии.НомерПринятого;
		ОбъектУзла.ДополнительныеСвойства.Вставить("Загрузка");
		ОбъектУзла.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет одну запись в регистр сведений по переданным значениям структуры
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо создать набор записей и заполнить этот набор
//  ИмяРегистра     - Строка - имя регистра сведений, в который необходимо добавить запись
// 
Процедура ДобавитьЗаписьВРегистрСведений(СтруктураЗаписи, Знач ИмяРегистра, Загрузка = Ложь,Отправитель = Неопределено) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	// добавляем только одну запись в новый набор записей
	НоваяЗапись = НаборЗаписей.Добавить();
	
	// заполняем значения свойств записи из переданной структуры
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
	
	НаборЗаписей.ОбменДанными.Загрузка = Загрузка;
	НаборЗаписей.ОбменДанными.Отправитель = Отправитель;

	// записываем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет набор записей в регистре по переданным значениям структуры
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо удалить набор записей
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо удалить набор записей
// 
Процедура УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи, ИмяРегистра, Загрузка = Ложь,Отправитель = Неопределено) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	НаборЗаписей.ОбменДанными.Загрузка = Загрузка;
	НаборЗаписей.ОбменДанными.Отправитель = Отправитель;
	// записываем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры

//Добавляет в комментарий описание возникшей ошибки 
//
Процедура ЗафиксироватьОписаниеОшибки(Комментарий, ОписаниеОшибки) Экспорт
	Комментарий = Комментарий + Символы.ПС + "///////////////////"+Символы.ПС+ОписаниеОшибки;
КонецПроцедуры

// Создает набор записей регистра сведений по переданным значениям структуры. Добавляет одну запись в набор
//
// Параметры:
//  СтруктураЗаписи - Структура - структура по значениям которой необходимо создать набор записей и заполнить этот набор
//  ИмяРегистра     - Строка - имя регистра сведений
// 
Функция СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// создаем набор записей регистра
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	
	// устанавливаем отбор по измерениям регистра
	Для Каждого Измерение ИЗ МетаданныеРегистра.Измерения Цикл
		
		// если задано значение в структуре, то отбор устанавливаем
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			НаборЗаписей.Отбор[Измерение.Имя].Установить(СтруктураЗаписи[Измерение.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборЗаписей;
КонецФункции

// Для внутреннего использования
//
Процедура ПроверитьВозможностьВыполненияОбмена()
	
	Если Не Константы.ИспользоватьОбменДаннымиНСИ20.Получить() Тогда
		ВызватьИсключение НСтр("ru = 'Использование обмена данными с НСИ запрещено.'");
	КонецЕсли;
	
КонецПроцедуры

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;

КонецФункции

// Создает запись в журнале регистрации о событии обмена данными/транспорте сообщений обмена
//
Процедура ЗаписьЖурналаРегистрацииОбменаДанными(Комментарий, СтруктураНастроекОбмена, ЭтоОшибка = Ложь) Экспорт
	
	Уровень = ?(ЭтоОшибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации, Уровень,,, Комментарий);
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена)
	
	СтруктураНастроекОбмена.Отказ = Истина;
	СтруктураНастроекОбмена.РезультатыВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Отменено;
	
КонецПроцедуры

// Возвращает признак успешного выполнения обмена данными
//
Функция РезультатыВыполненияОбменаВыполнено(РезультатыВыполненияОбмена)
	
	Возврат РезультатыВыполненияОбмена = Неопределено
		ИЛИ РезультатыВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено
		ИЛИ РезультатыВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями;
	
КонецФункции

// Возвращает ключ сообщения журнала регистрации
//
функция ПолучитьКлючСообщенияЖурналаРегистрации(СтруктураНастроекОбмена)
	ИмяПланаОбмена     = СтруктураНастроекОбмена.УзелИнформационнойБазы.Метаданные().Имя;
	КодУзлаПланаОбмена = СокрЛП(СтруктураНастроекОбмена.УзелИнформационнойБазы.Код);
	
	КлючСообщения = НСтр("ru = 'Обмен данными.[ИмяПланаОбмена].Узел [КодУзла].[ДействиеПриОбмене]'");
	
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ИмяПланаОбмена]",    ИмяПланаОбмена);
	КлючСообщения = СтрЗаменить(КлючСообщения, "[КодУзла]",           КодУзлаПланаОбмена);
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ДействиеПриОбмене]", СтруктураНастроекОбмена.ДействиеПриОбмене);
	
	Возврат КлючСообщения;

КонецФункции

// Для внутреннего использования
// 
Процедура ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена)
	
	Если НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.УзелИнформационнойБазы) Тогда
		
		// узел информационной базы не должен быть пустым
		СтрокаСообщенияОбОшибке = НСтр(
		"ru = 'Не задан узел информационной базы с которым нужно производить обмен информацией. Обмен отменен.'");
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
				
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураНастроекОбмена.ДействиеПриОбмене) Тогда
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Не указано выполняемое действие (выгрузка / загрузка). Обмен отменен.'");
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	ИначеЕсли СтруктураНастроекОбмена.УзелИнформационнойБазы.ПометкаУдаления Тогда
		
		// узел информационной базы не должен быть помечен на удаление
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Узел информационной базы помечен на удаление. Обмен отменен.'");
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
	
	ИначеЕсли СтруктураНастроекОбмена.УзелИнформационнойБазы = СтруктураНастроекОбмена.ТекущийУзелПланаОбмена Тогда
		
		// сами с собой не обмениваемся
		СтрокаСообщенияОбОшибке = НСтр(
		"ru = 'Нельзя организовать обмен данными с текущим узлом информационной базы. Обмен отменен.'");
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
	
	ИначеЕсли ПустаяСтрока(СтруктураНастроекОбмена.УзелИнформационнойБазыКод)
		  ИЛИ ПустаяСтрока(СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод) Тогда
		
		// у узлов участвующих в обмене должен быть не пустой код
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Один из узлов обмена имеет пустой код. Обмен отменен.'");
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибке, СтруктураНастроекОбмена, Истина);
		
		ЗафиксироватьЗавершениеИнициализацииОбмена(СтруктураНастроекОбмена);
		
	КонецЕсли;
		
		
КонецПроцедуры

// Для внутреннего использования
// 
Функция СтруктураНастроекОбменаБазовая()
	
	СтруктураНастроекОбмена = Новый Структура;
	
	// структура настроек по полям запроса
	
	СтруктураНастроекОбмена.Вставить("ДатаНачала");
	СтруктураНастроекОбмена.Вставить("ДатаОкончания");
	
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазы");
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазыКод", "");
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазыНаименование", "");
	СтруктураНастроекОбмена.Вставить("ДействиеПриОбмене");
	СтруктураНастроекОбмена.Вставить("КоличествоЭлементовВТранзакции", 1); // на каждый элемент отдельная транзакция
	СтруктураНастроекОбмена.Вставить("ПроизводитьЗагрузкуДанных", Ложь);
	СтруктураНастроекОбмена.Вставить("ПроизводитьВыгрузкуДанных", Ложь);
	СтруктураНастроекОбмена.Вставить("ИспользоватьПередачуБольшогоОбъемаДанных", Ложь);
	
	
	// структура настроек дополнительная
	СтруктураНастроекОбмена.Вставить("Отказ", Ложь);
		
	СтруктураНастроекОбмена.Вставить("ОбработкаОбменаДанными");
	СтруктураНастроекОбмена.Вставить("ОбработкаТранспортаСообщенийОбмена");
	
	СтруктураНастроекОбмена.Вставить("ИмяПланаОбмена");
	СтруктураНастроекОбмена.Вставить("ТекущийУзелПланаОбмена");
	СтруктураНастроекОбмена.Вставить("ТекущийУзелПланаОбменаКод");
	
	СтруктураНастроекОбмена.Вставить("ИмяОбработкиТранспортаСообщенийОбмена");
	
	СтруктураНастроекОбмена.Вставить("КлючСообщенияЖурналаРегистрации");
	
	СтруктураНастроекОбмена.Вставить("Комментарий","");
	СтруктураНастроекОбмена.Вставить("ПакетОбмена","");
	
	// структура для регистрации событий в ЖР
	СтруктураНастроекОбмена.Вставить("РезультатыВыполненияОбмена");
	СтруктураНастроекОбмена.Вставить("КоличествоОшибокОбмена", 0);
	СтруктураНастроекОбмена.Вставить("ДействиеПриОбмене");
	СтруктураНастроекОбмена.Вставить("КоличествоОбъектовОбработано", 0);
	СтруктураНастроекОбмена.Вставить("СообщениеПриОбмене",           "");
	СтруктураНастроекОбмена.Вставить("СтрокаСообщенияОбОшибке",      "");
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

// Для внутреннего использования
// 
Процедура ВыполнитьИнициализациюСтруктурыНастроекОбменаДляУзлаИнформационнойБазы(СтруктураНастроекОбмена)
	
		
	// ВЫЧИСЛЯЕМЫЕ ЗНАЧЕНИЯ
	СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных = (СтруктураНастроекОбмена.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	
	СтруктураНастроекОбмена.ИмяПланаОбмена = СтруктураНастроекОбмена.УзелИнформационнойБазы.Метаданные().Имя;
	
	СтруктураНастроекОбмена.ТекущийУзелПланаОбмена    = ПланыОбмена[СтруктураНастроекОбмена.ИмяПланаОбмена].ЭтотУзел();
	СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод = СтруктураНастроекОбмена.ТекущийУзелПланаОбмена.Код;
	
	// получаем ключ сообщения для ЖР
	СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации = ПолучитьКлючСообщенияЖурналаРегистрации(СтруктураНастроекОбмена);
	
КонецПроцедуры

// Выполняет инициализацию подсистемы обмена данными для выполнения процесса обмена
//
// Параметры:
// 
// Возвращаемое значение:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
//
Функция ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(
	УзелИнформационнойБазы,
	ДействиеПриОбмене	
	) Экспорт
	
	// возвращаемое значение функции
	СтруктураНастроекОбмена = СтруктураНастроекОбменаБазовая();
	
	СтруктураНастроекОбмена.УзелИнформационнойБазы             = УзелИнформационнойБазы;
	СтруктураНастроекОбмена.ДействиеПриОбмене                  = ДействиеПриОбмене;
	СтруктураНастроекОбмена.УзелИнформационнойБазыКод          = УзелИнформационнойБазы.Код;
	СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование = УзелИнформационнойБазы.Наименование;

	ВыполнитьИнициализациюСтруктурыНастроекОбменаДляУзлаИнформационнойБазы(СтруктураНастроекОбмена);
	
	// проверяем структуру настроек на валидность значений для выполнения обмена. Ошибки фиксируем в ЖР
	ВыполнитьПроверкуСтруктурыОбменаНаВалидность(СтруктураНастроекОбмена);
	
	Возврат СтруктураНастроекОбмена;
КонецФункции

// Фиксирует состояние обмена данными в регистре сведений СостоянияОбменовДанными
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
// 
Процедура ЗафиксироватьЗавершениеОбменаВРегистреСведений(СтруктураНастроекОбмена)
	
	// создаем структуру для новой записи в РС
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("УзелИнформационнойБазы",		СтруктураНастроекОбмена.УзелИнформационнойБазы);
	СтруктураЗаписи.Вставить("ДействияПриОбмене",			СтруктураНастроекОбмена.ДействиеПриОбмене);
	СтруктураЗаписи.Вставить("РезультатыВыполненияОбмена",	СтруктураНастроекОбмена.РезультатыВыполненияОбмена);
	СтруктураЗаписи.Вставить("ДатаНачала",					СтруктураНастроекОбмена.ДатаНачала);
	СтруктураЗаписи.Вставить("ДатаОкончания",				СтруктураНастроекОбмена.ДатаОкончания);
	СтруктураЗаписи.Вставить("Комментарий",					СтруктураНастроекОбмена.Комментарий);
	СтруктураЗаписи.Вставить("КоличествоОбъектов",			СтруктураНастроекОбмена.КоличествоОбъектовОбработано);
	СтруктураЗаписи.Вставить("РазмерПакета",				СтрДлина(СтруктураНастроекОбмена.ПакетОбмена));

	
	Если Не СтруктураНастроекОбмена.РезультатыВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено Тогда
		ХранилищеСообщенияОбмена = Новый ХранилищеЗначения(СтруктураНастроекОбмена.ПакетОбмена, Новый СжатиеДанных(9));
        СтруктураЗаписи.Вставить("ПакетОбмена",           ХранилищеСообщенияОбмена);
	КонецЕсли;
		
	РегистрыСведений.СостоянияОбменовДаннымиНСИ20.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры


// Регистрирует что обмен был произведен и фиксирует информацию в протоколе
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
// 
Процедура ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена) Экспорт
	
	// статус "Неопределено" в конце обмена свидетельствует об успешном выполнении обмена
	Если СтруктураНастроекОбмена.РезультатыВыполненияОбмена = Неопределено Тогда
		СтруктураНастроекОбмена.РезультатыВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	КонецЕсли;
	
	// формируем итоговое сообщение для протокола
	
	СтрокаСообщения = НСтр("ru = '%1, %2; Объектов обработано: %3'");
	СтрокаСообщения = ПодставитьПараметрыВСтроку(СтрокаСообщения,
		СтруктураНастроекОбмена.РезультатыВыполненияОбмена,
		СтруктураНастроекОбмена.ДействиеПриОбмене,
		СтруктураНастроекОбмена.КоличествоОбъектовОбработано);
	
	
	СтруктураНастроекОбмена.ДатаОкончания = ТекущаяДатаСеанса();
	
	// фиксируем состояние обмена в РС
	ЗафиксироватьЗавершениеОбменаВРегистреСведений(СтруктураНастроекОбмена);
		
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
КонецПроцедуры

							
////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции обмена данными

// Для внутреннего использования
// 
Процедура ВыполнитьВыгрузкуДляУзлаИнформационнойБазыЧерезСтроку(Знач ИмяПланаОбмена, Знач КодУзлаИнформационнойБазы, СообщениеОбмена,ВсеДанныеВыгружены, ОчиститьПриОтправке = Неопределено) Экспорт
	
	ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(Неопределено,
												"",
												Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
												ИмяПланаОбмена,
												КодУзлаИнформационнойБазы,
												СообщениеОбмена,
												ВсеДанныеВыгружены,
												,
												ОчиститьПриОтправке);
	
											КонецПроцедуры
											
// Для внутреннего использования
// 
Процедура ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку( УзелИнформационнойБазы = Неопределено,
																			ПолноеИмяФайлаСообщенияОбмена = "",
																			ДействиеПриОбмене,
																			ИмяПланаОбмена = "",
																			КодУзлаИнформационнойБазы = "",
																			СообщениеОбмена = "",
																			ВсеДанныеВыгружены = Ложь,
																			ДатаНачалаОперации = Неопределено,
																			ОчиститьПриОтправке = Неопределено
	) Экспорт
	
	ПроверитьВозможностьВыполненияОбмена();
	УстановитьПривилегированныйРежим(Истина);
	Если УзелИнформационнойБазы = Неопределено Тогда
		
		УзелИнформационнойБазы = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодУзлаИнформационнойБазы);
		
		Если УзелИнформационнойБазы.Пустая() Тогда
			СтрокаСообщенияОбОшибке = НСтр("ru = 'Узел плана обмена %1 с кодом %2 не найден.'");
			СтрокаСообщенияОбОшибке = ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ИмяПланаОбмена, КодУзлаИнформационнойБазы);
			ВызватьИсключение СтрокаСообщенияОбОшибке;
		КонецЕсли;
		
	КонецЕсли;
	
	//// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	СтруктураНастроекОбмена = ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ДействиеПриОбмене);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка при инициализации процесса обмена данными.'");
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
	
	СтруктураНастроекОбмена.РезультатыВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала = ?(ДатаНачалаОперации = Неопределено, ТекущаяДатаСеанса(), ДатаНачалаОперации);
	
	СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла %1'");
	СтрокаСообщения = ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование);
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
	Если СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		
				
		ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ПолноеИмяФайлаСообщенияОбмена, СообщениеОбмена);
		
			
	ИначеЕсли СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ПолноеИмяФайлаСообщенияОбмена, СообщениеОбмена,ВсеДанныеВыгружены);
			
	КонецЕсли;
	
	СтруктураНастроекОбмена.ПакетОбмена = СообщениеОбмена;
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	Если Не РезультатыВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатыВыполненияОбмена) Тогда
		ВызватьИсключение СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке;
	КонецЕсли;
	
	Если ОчиститьПриОтправке = Истина и 
		(СтруктураНастроекОбмена.РезультатыВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено
			И СтруктураНастроекОбмена.КоличествоОшибокОбмена = 0) Тогда
		ОчиститьПриОтправке = Истина;
	Иначе
		ОчиститьПриОтправке = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
//
Процедура ВыполнитьЗагрузкуДляУзлаИнформационнойБазыЧерезСтроку(Знач ИмяПланаОбмена, Знач КодУзлаИнформационнойБазы, СообщениеОбмена) Экспорт
	
	ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЧерезФайлИлиСтроку(Неопределено,
												"",
												Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
												ИмяПланаОбмена,
												КодУзлаИнформационнойБазы,
												СообщениеОбмена);
	
КонецПроцедуры

// Получает сообщение обмена с новыми данными и загружает данные в информационную базу
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
// 
Процедура ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, Знач ИмяФайлаСообщенияОбмена = "", СообщениеОбмена = "", Знач ТолькоПараметры = Ложь)
	    		
		СтандартнаяОбработка = Истина;
		КоличествоОбъектовОбработано = 0;
		Попытка
			ОбработчикПриЗагрузкеДанных(  СтандартнаяОбработка,
					                    СтруктураНастроекОбмена.УзелИнформационнойБазы,
										СообщениеОбмена,
										СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
										СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
										КоличествоОбъектовОбработано,
										СтруктураНастроекОбмена.Комментарий);
					

			Если ЗначениеЗаполнено(СтруктураНастроекОбмена.Комментарий) Тогда
				СтруктураНастроекОбмена.РезультатыВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями;
			КонецЕсли;
		Исключение
			СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
					СтруктураНастроекОбмена.УзелИнформационнойБазы.Метаданные(), 
					СтруктураНастроекОбмена.УзелИнформационнойБазы, СтрокаСообщенияОбОшибке);
			СтруктураНастроекОбмена.РезультатыВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке = СтрокаСообщенияОбОшибке;
			Возврат;
		КонецПопытки;
		
		СтруктураНастроекОбмена.КоличествоОбъектовОбработано = КоличествоОбъектовОбработано;
				
КонецПроцедуры

// Записывает изменения узла информационной базы в файл во временном каталоге
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
// 
Процедура ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, Знач ИмяФайлаСообщенияОбмена = "", СообщениеОбмена = "",ВсеДанныеВыгружены)
	
	    СтандартнаяОбработка = Истина;
		КоличествоОбъектовОбработано = 0;
		КоличествоОшибокОбмена = 0;
		Комментарий = "";
		Попытка
					
								
				ОбработчикПриВыгрузкеДанных(	СтандартнаяОбработка,
				                                СтруктураНастроекОбмена.УзелИнформационнойБазы,
												СообщениеОбмена,
												СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
												СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
												КоличествоОбъектовОбработано,
												КоличествоОшибокОбмена,
												Комментарий,
		                                        ВсеДанныеВыгружены);
				
		Исключение
			
			СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
					СтруктураНастроекОбмена.УзелИнформационнойБазы.Метаданные(), 
					СтруктураНастроекОбмена.УзелИнформационнойБазы, СтрокаСообщенияОбОшибке);
			СтруктураНастроекОбмена.РезультатыВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке = СтрокаСообщенияОбОшибке;
			Возврат;
		КонецПопытки;
		    
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = КоличествоОбъектовОбработано;
			СтруктураНастроекОбмена.КоличествоОшибокОбмена = КоличествоОшибокОбмена;
			СтруктураНастроекОбмена.Комментарий = Комментарий;
			СтруктураНастроекОбмена.ПакетОбмена = СообщениеОбмена;	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ОбработчикПриЗагрузкеДанных(  СтандартнаяОбработка,
										Отправитель,
										СообщениеОбмена,
										КоличествоЭлементовВТранзакции,
										КлючСообщенияЖурналаРегистрации,
										КоличествоОбъектовОбработано,
										Комментарий);
										
	ОбменДаннымиНСИ_20Переопределяемый.ПриЗагрузкеДанныхПереопределяемый(   СтандартнаяОбработка,
																			Отправитель,
																			СообщениеОбмена,
																			КоличествоЭлементовВТранзакции,
																			КлючСообщенияЖурналаРегистрации,
																			КоличествоОбъектовОбработано,
																			Комментарий);
Если СтандартнаяОбработка Тогда
																				
	ПриЗагрузкеДанных(  Отправитель,
						СообщениеОбмена,
						КоличествоЭлементовВТранзакции,
						КлючСообщенияЖурналаРегистрации,
						КоличествоОбъектовОбработано,
						Комментарий);
КонецЕсли;
								
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ОбработчикПриВыгрузкеДанных(СтандартнаяОбработка,
	                                  Получатель,
									  СообщениеОбмена,
									  КоличествоЭлементовВТранзакции,
									  КлючСообщенияЖурналаРегистрации,
									  КоличествоОбъектовОбработано,
									  КоличествоОшибокОбмена,
									  Комментарий,
									  ВсеДанныеВыгружены);
												
	ОбменДаннымиНСИ_20Переопределяемый.ПриВыгрузкеДанныхПереопределяемый(СтандартнаяОбработка,
																		Получатель,
																		СообщениеОбмена,
																		КоличествоЭлементовВТранзакции,
																		КлючСообщенияЖурналаРегистрации,
																		КоличествоОбъектовОбработано,
																		Комментарий,
																		ВсеДанныеВыгружены);

	Если СтандартнаяОбработка Тогда
																			
		ПриВыгрузкеДанных(Получатель,
						СообщениеОбмена,
						КоличествоЭлементовВТранзакции,
						КлючСообщенияЖурналаРегистрации,
						КоличествоОбъектовОбработано,
						КоличествоОшибокОбмена,
						Комментарий,
						ВсеДанныеВыгружены);
	КонецЕсли;

												
КонецПроцедуры

//Возвращает таблицу весов объектов
//
Функция ПолучитьТаблицуВесов()
	Запрос = Новый Запрос;
	Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |   СреднийВесОбъектовНСИ20.ВидОбъекта КАК ВидОбъекта,
    |   СреднийВесОбъектовНСИ20.Вес КАК Вес
    |ИЗ
    |   РегистрСведений.СреднийВесОбъектовНСИ20 КАК СреднийВесОбъектовНСИ20";
    
	Возврат Запрос.Выполнить().Выгрузить();			   
КонецФункции

// Обработчик при выгрузке данных.
// Используется для переопределения стандартной обработки выгрузки данных.
// В данном обработчике должна быть реализована логика выгрузки данных:
// выборка данных для выгрузки, сериализация данных в файл сообщения или сериализация данных в поток.
// После выполнения обработчика выгруженные данные будут отправлены получателю подсистемой обмена данными.
// Формат сообщения для выгрузки может быть произвольным.
// В случае ошибок при отправке данных следует прерывать выполнение обработчика
// методом ВызватьИсключение с описанием ошибки.
//
// Параметры:
//
// СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной (системной) обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная
// обработка события производиться не будет. Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
//
// Получатель (только для чтения). Тип: ПланОбменаСсылка.
// Узел плана обмена, для которого выполняется выгрузка данных.
//
// ИмяФайлаСообщения (только для чтения). Тип: Строка.
// Имя файла, в который необходимо выполнить выгрузку данных. Если этот параметр заполнен, то система ожидает,
// что данные будут выгружены в файл. После выгрузки система выполнит отправку данных из этого файла.
// Если параметр пустой, то система ожидает, что данные будут выгружены в параметр ДанныеСообщения.
//
// ДанныеСообщения. Тип: Произвольный.
// Если параметр ИмяФайлаСообщения пустой, то система ожидает, что данные будут выгружены в этот параметр.
//
// КоличествоЭлементовВТранзакции (только для чтения). Тип: Число.
// Определяет максимальное число элементов данных, которые помещаются в сообщение в рамках одной транзакции базы данных.
// При необходимости в обработчике следует реализовать логику установки транзакционных блокировок на выгружаемые данные.
// Значение параметра задается в настройках подсистемы обмена данными.
//
// ИмяСобытияЖурналаРегистрации (только для чтения). Тип: Строка.
// Имя события журнала регистрации текущего сеанса обмена данными. Используется для записи в журнал регистрации 
// данных (ошибок, предупреждений, информации) с заданным именем события.
// Соответствует параметру ИмяСобытия метода глобального контекста ЗаписьЖурналаРегистрации.
//
// КоличествоОтправленныхОбъектов. Тип: Число.
// Счетчик отправленных объектов. Используется для определения количества отправленных объектов
// для последующей фиксации в протоколе обмена.
//
Процедура ПриВыгрузкеДанных( Получатель,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоОтправленныхОбъектов,
								КоличествоОшибокОбмена,
								Комментарий,
								ВсеДанныеВыгружены
	) Экспорт
	
	Если ТипЗнч(Получатель) <> Тип("ПланОбменаСсылка.НСИ_20") Тогда
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Узел Получатель %1 не соответствует плану обмена %2'");
		СтрокаСообщенияОбОшибке = ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, Получатель, Получатель.Метаданные().Имя);
		Комментарий = СтрокаСообщенияОбОшибке;
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
	
	ТаблицаВыборкиДанных = Новый ТаблицаЗначений;
	ТаблицаВыборкиДанных.Колонки.Добавить("Данные");
	ТаблицаВыборкиДанных.Колонки.Добавить("ВидОбъекта", Новый ОписаниеТипов("Строка"));
	ТаблицаВыборкиДанных.Колонки.Добавить("ТипОбъекта", Новый ОписаниеТипов("Строка"));
	ТаблицаВыборкиДанных.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	ТаблицаВыборкиДанных.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));			
	ТаблицаВыборкиДанных.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число"));	
	
	МассивВыборки = Новый Массив;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Создаем новое сообщение
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Получатель);
	
	ТаблицаВесов  = ПолучитьТаблицуВесов();

	ВыборкаИзменений = ВыбратьИзменения(ЗаписьСообщения.Получатель,ЗаписьСообщения.НомерСообщения);
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		ДанныеВыборки = ВыборкаИзменений.Получить();
		
		Если Не ДанныеВыборки = Неопределено Тогда
			СтрокаТаблицы = ТаблицаВыборкиДанных.Добавить();
			СтрокаТаблицы.Данные         = ДанныеВыборки;
			Если  ТипЗнч(ДанныеВыборки)  = Тип("УдалениеОбъекта") Тогда
				
				СтрокаТаблицы.Порядок    = 0;
				СтрокаТаблицы.ВидОбъекта = "УдалениеОбъекта";
				СтрокаТаблицы.Уровень    = 0;
				СтрокаТаблицы.ТипОбъекта = "УдалениеОбъекта";
				СтрокаТаблицы.Вес        = 300;         // значение по умолчанию
				
			Иначе
				ТипДанных = ЛксПолучитьКорневойТипКонфигурацииНСИ(ДанныеВыборки);
				ВидОбъекта = ДанныеВыборки.Метаданные().Имя;
				ОбменДаннымиНСИ_20Переопределяемый.ОпределитьВидОбъектаПереопределяемый(ВидОбъекта);
				СтрокаТаблицы.ВидОбъекта = ВидОбъекта;
				СтрокаТаблицы.ТипОбъекта = ТипДанных;
				СтрокаТаблицы.Порядок    = 0;
				Уровень    = 0;
				
				Если ТипДанных = "Справочник" Тогда
					Уровень = ДанныеВыборки.Уровень();
				КонецЕсли;
				
				СтрокаТаблицы.Уровень = Уровень;
				
				СтрокаТаблицыВесов = ТаблицаВесов.Найти(СтрокаТаблицы.ВидОбъекта,"ВидОбъекта");
				Если СтрокаТаблицыВесов = Неопределено Тогда
					СреднийВесОбъекта = 10240;                // 10 Кб по умолчанию
				Иначе
					СреднийВесОбъекта = СтрокаТаблицыВесов.Вес;
				КонецЕсли;
				СтрокаТаблицы.Вес = СреднийВесОбъекта;
				
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;

	
	Если Не ТаблицаВыборкиДанных.Количество() = 0 Тогда
		ТаблицаВыборкиДанных.Сортировать("Порядок Возр,ВидОбъекта Возр, Уровень Возр");
		Попытка
			СформироватьФайлОбмена(ЗаписьXML,Получатель,ВсеДанныеВыгружены,ТаблицаВыборкиДанных,КоличествоОтправленныхОбъектов, КоличествоОшибокОбмена,Комментарий);		
			
		Исключение
			
			ЗаписьСообщения.ПрерватьЗапись();
			ЗаписьXML.Закрыть();
			СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗафиксироватьОписаниеОшибки(Комментарий, СтрокаСообщенияОбОшибке);
			ВсеДанныеВыгружены = Истина;
			ВызватьИсключение СтрокаСообщенияОбОшибке;
		КонецПопытки;
		
	Иначе
		ВсеДанныеВыгружены = Истина;
		
	КонецЕсли;
	
	ЗаписьСообщения.ЗакончитьЗапись();
	ДанныеСообщения = ЗаписьXML.Закрыть();
	
КонецПроцедуры

//Для внутреннего использования
//
Функция ЗаписатьДанныеВXML(ЗаписьXML,Данные,ВидОбъекта,ТипОбъекта,СреднийРезмерПакета,ДополнительныеПараметры, Комментарий)
	Отказ = Ложь;
	Если ТипОбъекта = "Справочник" Тогда		
		Отказ = СериализацияДанныхНСИ_20Сервер.ЗаписатьОбъектВXML(ЗаписьXML,Данные,ВидОбъекта,СреднийРезмерПакета,ДополнительныеПараметры, Комментарий);
	ИначеЕсли ТипОбъекта = "РегистрСведений" Тогда
		СериализацияДанныхНСИ_20Сервер.ЗаписатьНаборДанныхВXML(ЗаписьXML,Данные,ВидОбъекта,СреднийРезмерПакета,ДополнительныеПараметры);
	КонецЕсли;
	Возврат Отказ;
КонецФункции

//Процедура регистрирует изменение объектов заново, убирая номер пакета в таблице регистрации изменений
//
Процедура ЗарегистироватьИзмененияДляНеОтправленныхОбъектов(ТаблицаВыборкиДанных,Индекс,Получатель)
	Для н = Индекс  По ТаблицаВыборкиДанных.Количество()-1 Цикл
		СтрокаТаблицы = ТаблицаВыборкиДанных[н]; 
		ПланыОбмена.УдалитьРегистрациюИзменений(Получатель,СтрокаТаблицы.Данные);
		ПланыОбмена.ЗарегистрироватьИзменения(Получатель,СтрокаТаблицы.Данные);
	КонецЦикла;
КонецПроцедуры

//Формирует файл обмена
//
Процедура СформироватьФайлОбмена(ЗаписьXML,Получатель,ВсеДанныеВыгружены,ТаблицаВыборкиДанных,КоличествоОтправленныхОбъектов,КоличествоОшибокОбмена,Комментарий) Экспорт
	
	ТекущийВидОбъекта = "";
	СреднийРезмерПакета = 0;
	ВсеДанныеВыгружены = Истина;
	ДополнительныеПараметры = Новый Структура;
	ОбменДаннымиНСИ_20Переопределяемый.ПередНачаломВыгрузкиОбъектов(ДополнительныеПараметры);
	
	Для Каждого СтрокаТаблицы из ТаблицаВыборкиДанных Цикл
		
		Если СреднийРезмерПакета > Получатель.РазмерПакета  Тогда // Максимальный размер пакета
			ВсеДанныеВыгружены = Ложь;
			Индекс = ТаблицаВыборкиДанных.Индекс(СтрокаТаблицы);
			ЗарегистироватьИзмененияДляНеОтправленныхОбъектов(ТаблицаВыборкиДанных,Индекс,Получатель);
			Прервать;
		КонецЕсли;
		
		СреднийРезмерПакета = СреднийРезмерПакета + СтрокаТаблицы.Вес;
		
		НачатьТранзакцию();
		Если ТекущийВидОбъекта <> СтрокаТаблицы.ВидОбъекта Тогда
			
			ТекущийВидОбъекта = СтрокаТаблицы.ВидОбъекта;
			
			Если КоличествоОтправленныхОбъектов > 0 Тогда
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента(СтрокаТаблицы.ВидОбъекта);  
			ЗаписьXML.ЗаписатьАтрибут("ВидОбъекта","true");
			ОбменДаннымиНСИ_20Переопределяемый.ПередНачаломВыгрузкиВидаОбъекта(СтрокаТаблицы.ТипОбъекта, СтрокаТаблицы.ВидОбъекта, ТипЗнч(СтрокаТаблицы.Данные), ДополнительныеПараметры);
		КонецЕсли;
		
		Отказ = Ложь; //при отстутвии логина у Сотрудника запись прирываем
		Если СтрокаТаблицы.ТипОбъекта = "УдалениеОбъекта" Тогда
			СериализацияДанныхНСИ_20Сервер.ЗаписатьУдалениеОбъектаВXML(ЗаписьXML,СтрокаТаблицы.Данные);
		Иначе
			Отказ = ЗаписатьДанныеВXML(ЗаписьXML,СтрокаТаблицы.Данные,СтрокаТаблицы.ВидОбъекта,СтрокаТаблицы.ТипОбъекта,СреднийРезмерПакета,ДополнительныеПараметры, Комментарий);
		КонецЕсли;
		Если Отказ Тогда 
			ОтменитьТранзакцию();
			КоличествоОшибокОбмена = КоличествоОшибокОбмена + 1;
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
					
		КоличествоОтправленныхОбъектов = КоличествоОтправленныхОбъектов+1;
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

// Обработчик при загрузке данных.
// Используется для переопределения стандартной обработки загрузки данных.
// В данном обработчике должна быть реализована логика загрузки данных:
// необходимые проверки перед загрузкой данных, сериализация данных из файла сообщения или сериализация данных из потока.
// Формат сообщения для загрузки может быть произвольным.
// В случае ошибок при получении данных следует прерывать выполнение обработчика
// методом ВызватьИсключение с описанием ошибки.
//
// Параметры:
//
// СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной (системной) обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет.
// Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
//
// Отправитель (только для чтения). Тип: ПланОбменаСсылка.
// Узел плана обмена, для которого выполняется загрузка данных.
//
// ИмяФайлаСообщения (только для чтения). Тип: Строка.
// Имя файла, из которого требуется выполнить загрузку данных. Если параметр не заполнен, то данные для загрузки
// передаются через параметр ДанныеСообщения.
//
// ДанныеСообщения. Тип: Произвольный.
// Параметр содержит данные, которые необходимо загрузить. Если параметр ИмяФайлаСообщения пустой,
// то данные для загрузки передаются через этот параметр.
//
// КоличествоЭлементовВТранзакции (только для чтения). Тип: Число.
// Определяет максимальное число элементов данных, которые читаются из сообщения и записываются в базу данных
// в рамках одной транзакции. При необходимости в обработчике следует реализовать логику записи данных в транзакции.
// Значение параметра задается в настройках подсистемы обмена данными.
//
// ИмяСобытияЖурналаРегистрации (только для чтения). Тип: Строка.
// Имя события журнала регистрации текущего сеанса обмена данными. Используется для записи в журнал регистрации
// данных (ошибок, предупреждений, информации) с заданным именем события.
// Соответствует параметру ИмяСобытия метода глобального контекста ЗаписьЖурналаРегистрации.
//
// КоличествоПолученныхОбъектов. Тип: Число.
// Счетчик полученных объектов. Используется для определения количества загруженных объектов
// для последующей фиксации в протоколе обмена.
//
Процедура ПриЗагрузкеДанных(Отправитель,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоПолученныхОбъектов,
								Комментарий
	) Экспорт
	
	Если ТипЗнч(Отправитель) <> Тип("ПланОбменаСсылка.НСИ_20") Тогда
		    СтрокаСообщенияОбОшибке = НСтр("ru = 'Узел Отправитель %1 не соответствует плану обмена %2'");
			СтрокаСообщенияОбОшибке = ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, Отправитель, Отправитель.Метаданные().Имя);
			Комментарий = СтрокаСообщенияОбОшибке;
			ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;

	ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.УстановитьСтроку(ДанныеСообщения);
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
    //Переделать перед включением!
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML, ДопустимыйНомерСообщения.Любой);//ДопустимыйНомерСообщения.Больший);
	
	ПараметрыРезервнойКопии = ПараметрыРезервнойКопии(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	УдалитьРегистрациюИзменений = Не ПараметрыРезервнойКопии.ВосстановленаРезервнаяКопия;
				
	Попытка
				
		ЗагрузитьФайлОбмена(ЧтениеXML,ЧтениеСообщения.Отправитель,КоличествоПолученныхОбъектов,Комментарий);
		
		Если УдалитьРегистрациюИзменений Тогда
			
			// Удаляем регистрацию изменений для узла отправителя сообщения
			
			//закомментируем, т.к. удаление сделали сразу после успешной выгрузки
			//ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
			
		КонецЕсли;
		
		ПриВосстановленииРезервнойКопии(ПараметрыРезервнойКопии);
		
		ЧтениеСообщения.ЗакончитьЧтение();
		ЧтениеXML.Закрыть();
		
	Исключение
		ЧтениеСообщения.ПрерватьЧтение();
		ЧтениеXML.Закрыть();
		СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗафиксироватьОписаниеОшибки(Комментарий, СтрокаСообщенияОбОшибке);
		ВызватьИсключение СтрокаСообщенияОбОшибке;
    КонецПопытки;
		
КонецПроцедуры

//Чтение вида объекта из XML
//Возвращаемое значение: менеджер объекта
//Например: Справочники.Номенклатура
Функция ПолучитьМенеджерОбъекта(Имя) Экспорт 
	
	Менеджер = Неопределено;

	МенеджерОбъекта = Метаданные.НайтиПоПолномуИмени("Справочник."+Имя);
	Если  Не МенеджерОбъекта = Неопределено Тогда
		Менеджер = Справочники[Имя];
	Иначе
		
		МенеджерОбъекта = Метаданные.НайтиПоПолномуИмени("РегистрСведений."+Имя);
		Если Не МенеджерОбъекта = Неопределено Тогда
			Менеджер = РегистрыСведений[Имя];
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Менеджер;
	
КонецФункции

//Для внутреннего использования
//
Процедура ОбработчикПолучитьМенеджерОбъекта(МенеджерОбъекта,Имя)
	
	СтандартнаяОбработка = Истина;
	ОбменДаннымиНСИ_20Переопределяемый.ОпределитьМенеджерОбъектаПереопределяемый(МенеджерОбъекта,Имя,СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		МенеджерОбъекта = ПолучитьМенеджерОбъекта(Имя);
	КонецЕсли;
		
Конецпроцедуры

//Процедура чтния и загрузки файла обмена
//
Процедура ЗагрузитьФайлОбмена(ЧтениеXML,Отправитель,КоличествоПолученныхОбъектов,Комментарий)
    
	МенеджерОбъекта = Неопределено;
	ВидОбъекта = Неопределено;
    
    //Таблица загруженных Абонентов и сопуствующие им данные.
    ТзЗагруженныхОбъектовАбоненты = Новый ТаблицаЗначений;
    ТзЗагруженныхОбъектовАбоненты.Колонки.Добавить("Объект");
    ТзЗагруженныхОбъектовАбоненты.Колонки.Добавить("СтруктураПараметровОбъекта");
    
    Сервис = ПолучитьСсылкуСправочникаСервисы();
	ДополнительныеПараметры = Новый Структура;
    ДополнительныеПараметры.Вставить("Сервис",Сервис);
	ОбменДаннымиНСИ_20Переопределяемый.ПередНачаломЗагрузкиОбъектов(ДополнительныеПараметры);

	Пока Истина Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
			И ЧтениеXML.Имя = "v8msg:Body" Тогда
			Прервать;
        КонецЕсли;
        
        Если Не (ЧтениеXML.Имя = "Контрагенты"  // Это не нужные объекты
                или ЧтениеXML.Имя = "Партнеры") Тогда 
            ЧтениеXML.Пропустить();                             
			Продолжить;
        КонецЕсли; 
					
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента           //Это вид объекта
			И ЧтениеXML.ПолучитьАтрибут("ВидОбъекта") <> Неопределено Тогда
			
			Если ЧтениеXML.Имя = "УдалениеОбъекта" Тогда
				УдалениеОбъекта = Истина;
				МенеджерОбъекта = Неопределено;
			Иначе
				УдалениеОбъекта = Ложь;
				ОбработчикПолучитьМенеджерОбъекта(МенеджерОбъекта,ЧтениеXML.Имя);
				Если МенеджерОбъекта = Неопределено Тогда
					ЗаписьВЛог = "Не найден вид объекта: "+ ЧтениеXML.Имя;
					ЗафиксироватьОписаниеОшибки(Комментарий, ЗаписьВЛог);
					ЧтениеXML.Пропустить();                             //Не нашли, пропускаем дочерние узлы
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ВидОбъекта = ЧтениеXML.Имя;			
			ТипОбъекта = ЛксПолучитьКорневойТипКонфигурацииНСИ(МенеджерОбъекта);				
			Если Не УдалениеОбъекта Тогда 
				ОбменДаннымиНСИ_20Переопределяемый.ПередНачаломЗагрузкиВидаОбъекта(ТипОбъекта, ВидОбъекта, МенеджерОбъекта, ДополнительныеПараметры)
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента       //Это сам объект
			И ЧтениеXML.ПолучитьАтрибут("ВидОбъекта") = Неопределено
			И ЧтениеXML.Имя = ВидОбъекта Тогда
			
			Если ЧтениеXML.ПолучитьАтрибут("Статус") = "Дубль" Тогда			
			   	СериализацияДанныхНСИ_20Сервер.ЗарегистрироватьУдалениеОбъекта(ЧтениеXML,Отправитель);
            ИначеЕсли ТипОбъекта = "Справочник" Тогда
                СериализацияДанныхНСИ_20Сервер.ПрочитатьОбъект(ЧтениеXML,МенеджерОбъекта,Отправитель,Комментарий,ДополнительныеПараметры,ТзЗагруженныхОбъектовАбоненты);
			ИначеЕсли ТипОбъекта = "РегистрСведений" Тогда
				СериализацияДанныхНСИ_20Сервер.ПрочитатьНаборЗаписей(ЧтениеXML,МенеджерОбъекта,Отправитель,Комментарий,ДополнительныеПараметры);
			ИначеЕсли УдалениеОбъекта Тогда
				СериализацияДанныхНСИ_20Сервер.ЗарегистрироватьУдалениеОбъекта(ЧтениеXML,Отправитель,Истина);
			КонецЕсли;
			КоличествоПолученныхОбъектов = КоличествоПолученныхОбъектов+1;
			
		КонецЕсли;
		
		Если Не ЧтениеXML.Прочитать()Тогда                               //На всякий случай
			Прервать;
		КонецЕсли;
		
    КонецЦикла;

	МассивПартнеров = Новый Массив;
	
    Для каждого СтрТЗ Из ТзЗагруженныхОбъектовАбоненты Цикл
        
        АбонентОбъект = СтрТЗ.Объект;
        
        ////!!! Фильтр абонентов по принадлезности к филиалу, еслинет партнера, то значит этот абонент не НСК.!!!
					
		Если АбонентОбъект.Партнер.Пустая() Тогда 
		    Если Не АбонентОбъект.ЭтоНовый() Тогда		
				Продолжить;		
			КонецЕсли;
		ИначеЕсли АбонентОбъект.Партнер.ПолучитьОбъект() = Неопределено Тогда
						
			НаборЗаписей = РегистрыСведений.БуферОбменаКонтрагентовНСИ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПартнерGUID.Установить(Строка(АбонентОбъект.Партнер.УникальныйИдентификатор()));
			НаборЗаписей.Отбор.КонтрагентGUID.Установить(СтрТЗ.СтруктураПараметровОбъекта.Ссылка);
			
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.КонтрагентGUID = СтрТЗ.СтруктураПараметровОбъекта.Ссылка;
			НоваяСтрока.ПартнерGUID = Строка(АбонентОбъект.Партнер.УникальныйИдентификатор());
			ЗаполнитьЗначенияСвойств(НоваяСтрока, АбонентОбъект);
			
			НаборЗаписей.Записать();
			
			Если СтрТЗ.СтруктураПараметровОбъекта.Свойство("Партнер") И ЗначениеЗаполнено(СтрТЗ.СтруктураПараметровОбъекта.Партнер) Тогда
				МассивПартнеров.Добавить(СтрТЗ.СтруктураПараметровОбъекта.Партнер);		
			КонецЕсли;	
			
			Если АбонентОбъект.ЭтоНовый() Тогда		
				Продолжить;		
			КонецЕсли;

		КонецЕсли;				
		
        НачатьТранзакцию();
        СтруктураПараметровОбъекта = СтрТЗ.СтруктураПараметровОбъекта;
        
        Попытка
            АбонентОбъект.Записать();
            ОбменДаннымиНСИ_20Переопределяемый.ПриЗаписиОбъекта(АбонентОбъект, СтруктураПараметровОбъекта);
            ЗафиксироватьТранзакцию();
        Исключение
            ОтменитьТранзакцию();
            ЗаписьВЛог ="Не удалось записать объект: "+АбонентОбъект+" ("+СтруктураПараметровОбъекта.Ссылка+"). По причине:"+Символы.ПС+ОписаниеОшибки();
            //ОбменДаннымиНСИ_20Сервер.ЗафиксироватьОписаниеОшибки(Комментарий, ЗаписьВЛог);
            ВызватьИсключение ЗаписьВЛог;
        КонецПопытки;
        
        ОбменДаннымиНСИ_20Переопределяемый.ПослеЗаписиОбъекта(АбонентОбъект, СтруктураПараметровОбъекта);
        
    КонецЦикла;
	
	Если МассивПартнеров.Количество() Тогда	
		Результат = ОбменДаннымиНСИ_20Сервер.ЗарегистриоватьИзмененияДляУзла(МассивПартнеров, "Партнеры", "57"); //Новосибирск	
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьСтруктуруОбмена(Тест=ложь) Экспорт
	УзелНСИ = ПланыОбмена.НСИ_20.НайтиПоКоду("0");
	СтруктураОбмена = Новый Структура;
	Если УзелНСИ.Пустая() Тогда
		Сообщение = "Не найден узел НСИ!";
		ВызватьИсключение  Сообщение;
	КОнецЕсли;
	
	Если Не Тест Тогда
		URL = СокрЛП(УзелНСИ.URLВебСервиса);
		Логин = СокрЛП(УзелНСИ.Логин);
		Пароль = СокрЛП(УзелНСИ.Пароль);
		Определения = Новый WSОпределения(URL,Логин,Пароль,15);
		WSСервис = Определения.Сервисы[0];
		Прокси = Новый WSПрокси(Определения, WSСервис.URIПространстваИмен, WSСервис.Имя, WSСервис.ТочкиПодключения[0].Имя);
		Прокси.Пароль = Пароль;
		Прокси.Пользователь = Логин;
		СтруктураОбмена.Вставить("Прокси",Прокси);
		СтруктураОбмена.Вставить("МногопакетныйРежим",УзелНСИ.МногопакетныйРежим);
	КонецЕсли;
	СтруктураОбмена.Вставить("Узел",ПланыОбмена.НСИ_20.ЭтотУзел());
	СтруктураОбмена.Вставить("УзелНСИ",УзелНСИ);
	Возврат СтруктураОбмена;
КонецФункции

// Процедура обмена данными.
//Вызывается регламентным заданием "ОбменДанныиНСИ_20"
Процедура ОбменДанныиНСИ_20() Экспорт
	
	ОбработкаВыгрузки = Обработки.ОбменДаннымиНСИ20.Создать();
	ОбработкаВыгрузки.ВыполнитьОбмен();
	
КонецПроцедуры

Функция ЗарегистриоватьИзмененияДляУзла(ДанныеДляРегистрации, ВидДанных, КодУзла="") Экспорт
	СтруктураОбмена = ПолучитьСтруктуруОбмена();
	
	GUIDArray = СтруктураОбмена.Прокси.ФабрикаXDTO.Создать(СтруктураОбмена.Прокси.ФабрикаXDTO.Тип("NSI20", "GUIDArray"));
	Если ТипЗнч(ДанныеДляРегистрации) = Тип("Массив") Тогда 
		Данные = ДанныеДляРегистрации;
	Иначе
		Данные = Новый Массив();
		Данные.Добавить(ДанныеДляРегистрации);
	КонецЕсли;
	Для каждого Элемент Из Данные Цикл
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда 
			GUIDArray.GUID.Добавить(Строка(Элемент));	
		Иначе
			GUIDArray.GUID.Добавить(Строка(Элемент.УникальныйИдентификатор()));	
		КонецЕсли;
	КонецЦикла;  	
	
	Если ЗначениеЗаполнено(КодУзла) Тогда 
		Код = КодУзла;
	Иначе
		Код = СтруктураОбмена.Узел.Код;
	КонецЕсли;
	Попытка
		Результат = СтруктураОбмена.Прокси.RegisterChanges(Код, ВидДанных, GUIDArray, Истина, Ложь);
		Рез = Результат.Result;
		//ОписаниеОшибки = Результат.Message;
	Исключение
		Рез = Ложь;
		//Сообщить(ОписаниеОшибки());
	КонецПопытки;	
		
	Возврат Рез;
		
КонецФункции

// Процедура для безопасной инициации обмена данными в фоновом задании
Процедура НачатьОбменДанныиНСИ_20() Экспорт
	
	
	//Создание фонового задания происходит всегда под текущим пользователем. Это может являться проблемой.
	//Т.к. прийдется "светить" в НСИ логин и пароль пользователя Узла, имеющего права на запись опреденных объектов
	//Обходим это. Перезаписывам рег. задание. При этом планировщик сам запускает фоновое задание
	//под тем пользователем, под которым настроено выполнение регламентного задания.
	//Таким образом, пользователь для инициации обмена через web-сервис вообще может не именть
	//никаких прав, кроме прав на вызов метода StartDataExChange web-сервиса NSI20_DataExchange.
	РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбменДанныиНСИ_20);
	Если РегЗадание <> Неопределено И РегЗадание.Расписание.ТребуетсяВыполнение() Тогда 
		РегЗадание.Записать();
	Иначе
		//тут пока ничего не делаем
	КонецЕсли;
	//Ключ = "ОбменДанныиНСИ_20";
	//// проверяем отсутствие текущих задач
	//СтруктураПоиска = Новый Структура();
	//СтруктураПоиска.Вставить("Ключ", Ключ);
	//СтруктураПоиска.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	//Если ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураПоиска).Количество() <> 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//Параметры = Новый Массив(1);
	//Параметры[0] = Истина;
	//Попытка
	//	//Обернем в попытку. Пока проверяли, фоновое задание с таким ключем уже могло стартовать
	//	ФоновыеЗадания.Выполнить("ОбменДаннымиНСИ_20Сервер.ОбменДанныиНСИ_20", Параметры, Ключ, "(realtime)Обмен данными НСИ 2.0");
	//Исключение
	//КонецПопытки;
	
	
КонецПроцедуры

Функция ПолучитьСсылкуСправочникаСервисы() Экспорт
    
    Значение = Неопределено;
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |   Сервисы.Ссылка КАК Ссылка
    |ИЗ
    |   Справочник.Сервисы КАК Сервисы
    |
    |УПОРЯДОЧИТЬ ПО
    |   Ссылка";
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Значение = ВыборкаДетальныеЗаписи.Ссылка;
    КонецЕсли;
    
    Возврат Значение;
    
КонецФункции // ()

