
// Обработчик при загрузке данных.
// Используется для переопределения стандартной обработки загрузки данных.
// В данном обработчике должна быть реализована логика загрузки данных:
// необходимые проверки перед загрузкой данных, сериализация данных из потока.
// Формат сообщения для загрузки может быть произвольным.
// В случае ошибок при получении данных следует прерывать выполнение обработчика
// методом ВызватьИсключение с описанием ошибки.
//
// Параметры:
//
//
// СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная
// обработка события производиться не будет. Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
//
// Отправитель (только для чтения). Тип: ПланОбменаСсылка.
// Узел плана обмена, для которого выполняется загрузка данных.
//
// ДанныеСообщения. Тип: Произвольный.
// Параметр содержит данные, которые необходимо загрузить. 
//
// КоличествоЭлементовВТранзакции (только для чтения). Тип: Число.
// Определяет максимальное число элементов данных, которые читаются из сообщения и записываются в базу данных
// в рамках одной транзакции. При необходимости в обработчике следует реализовать логику записи данных в транзакции.
// Значение параметра задается в настройках подсистемы обмена данными.
//
// ИмяСобытияЖурналаРегистрации (только для чтения). Тип: Строка.
// Имя события журнала регистрации текущего сеанса обмена данными. Используется для записи в журнал регистрации
// данных (ошибок, предупреждений, информации) с заданным именем события.
// Соответствует параметру ИмяСобытия метода глобального контекста ЗаписьЖурналаРегистрации.
//
// КоличествоПолученныхОбъектов. Тип: Число.
// Счетчик полученных объектов. Используется для определения количества загруженных объектов
// для последующей фиксации в протоколе обмена.
//
//Комментарий. Тип: Строка.
//В параметр нужно поместить текст сообщения об ошибке, для записи лога в регистр сведений "СостоянияОбменовДаннымиНСИ20"
//
Процедура ПриЗагрузкеДанныхПереопределяемый(СтандартнаяОбработка,
											Отправитель,
											ДанныеСообщения,
											КоличествоЭлементовВТранзакции,
											ИмяСобытияЖурналаРегистрации,
											КоличествоПолученныхОбъектов,
											Комментарий
	) Экспорт
	
				
КонецПроцедуры

// Обработчик при выгрузке данных.
// Используется для переопределения стандартной обработки выгрузки данных.
// В данном обработчике должна быть реализована логика выгрузки данных:
// выборка данных для выгрузки, сериализация данных в поток.
// После выполнения обработчика выгруженные данные будут отправлены получателю подсистемой обмена данными.
// Формат сообщения для выгрузки может быть произвольным.
// В случае ошибок при отправке данных следует прерывать выполнение обработчика
// методом ВызватьИсключение с описанием ошибки.
//
// Параметры:
//
// СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной  обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная
// обработка события производиться не будет. Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
//
// Получатель (только для чтения). Тип: ПланОбменаСсылка.
// Узел плана обмена, для которого выполняется выгрузка данных.
//
// ДанныеСообщения. Тип: Произвольный.
// Если параметр ИмяФайлаСообщения пустой, то система ожидает, что данные будут выгружены в этот параметр.
//
// КоличествоЭлементовВТранзакции (только для чтения). Тип: Число.
// Определяет максимальное число элементов данных, которые помещаются в сообщение в рамках одной транзакции базы данных.
// При необходимости в обработчике следует реализовать логику установки транзакционных блокировок на выгружаемые данные.
// Значение параметра задается в настройках подсистемы обмена данными.
//
// ИмяСобытияЖурналаРегистрации (только для чтения). Тип: Строка.
// Имя события журнала регистрации текущего сеанса обмена данными. Используется для записи в журнал регистрации 
// данных (ошибок, предупреждений, информации) с заданным именем события.
// Соответствует параметру ИмяСобытия метода глобального контекста ЗаписьЖурналаРегистрации.
//
// КоличествоОтправленныхОбъектов. Тип: Число.
// Счетчик отправленных объектов. Используется для определения количества отправленных объектов
// для последующей фиксации в протоколе обмена.
//
Процедура ПриВыгрузкеДанныхПереопределяемый(   СтандартнаяОбработка,
	                                                            Получатель,
																ДанныеСообщения,
																КоличествоЭлементовВТранзакции,
																ИмяСобытияЖурналаРегистрации,
																КоличествоОтправленныхОбъектов,
																Комментарий,
																ВсеДанныеВыгружены
	) Экспорт
	
	//корректировка ФИО
    //Запрос = Новый Запрос();
    //Запрос.Текст = "
    //|ВЫБРАТЬ
    //|	ФИОФизЛицСрезПоследних.ФизическоеЛицо,
    //|	ФИОФизЛицСрезПоследних.Фамилия,
    //|	ФИОФизЛицСрезПоследних.Имя,
    //|	ФИОФизЛицСрезПоследних.Отчество
    //|ИЗ
    //|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
    //|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних КАК РаботникиСрезПоследних
    //|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = РаботникиСрезПоследних.ФизЛицо
    //|			И (РаботникиСрезПоследних.ПричинаУвольнения = ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.ПустаяСсылка))
    //|ГДЕ
    //|	ФИОФизЛицСрезПоследних.ФизЛицо.Наименование <> ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя
    //|	И (НЕ ФИОФизЛицСрезПоследних.ФизЛицо.Наименование ПОДОБНО ""%(%)%"")";

    //Выборка = Запрос.Выполнить().Выбрать();
    //Пока Выборка.Следующий() Цикл
    //	Об = Выборка.ФизЛицо.ПолучитьОбъект();
    //	Об.Наименование = СокрЛП(Выборка.Фамилия + " " + Выборка.Имя);
    //	Об.Записать();			
    //КонецЦикла;
		
КонецПроцедуры

//Получение менеджера объекта по имени
// Используется при несоответствии имени объекта метаданных в текущей базе и НСИ
//
//Параметры:
//
//МенеджерОбъекта.
//Переменная, в нее следует поместить менеджер объекта.
//
//Имя (только для чтения). Тип: Строка
//Имя объекта метаданных полученное из файла обмена.
//Например "Номенклатура","Контрагенты"...
//
//СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная
// обработка события производиться не будет. Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
//
//Процедура используется для переопределения функции получения менеджера объекта.
//Например: в базе используется справочник "Сотрудники", а в пакете обмена использовано имя "Работники",
//в данной процедуре необходимо инициализировать переменную МенеджерОбъекта как Справочники.Сотрудники.
Процедура ОпределитьМенеджерОбъектаПереопределяемый(МенеджерОбъекта,Имя,СтандартнаяОбработка) Экспорт
    
    Если Имя = "Контрагенты" Тогда //Грузить контрагентов в абоненты
        СтандартнаяОбработка = Ложь;
		МенеджерОбъекта = Справочники.Абоненты;
	ИначеЕсли Имя = "Партнеры" Тогда //Грузить контрагентов в абоненты
        СтандартнаяОбработка = Ложь;
		МенеджерОбъекта = Справочники.Партнеры;
    КонецЕсли;
    
КонецПроцедуры

//Сериализация объекта в XML
// Параметры:
//
// СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная
// обработка события производиться не будет. Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
//
//СтруктураПараметровОбъекта. Тип: Структура
//В нее следует поместить реквизиты объекта
//Ключ: Имя реквизита\табличной части
//Значение: значение реквизита\таблица значений
//Если значением реквизита является хранилище значения, то значением элемента структуры должна быть структура следующего вида:
//Ключи: ЗначениеХранилища,ОписаниеОбъекта
//Для этого можно использовать процедуру СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру()
//
//Данные (только для чтения). Тип: Объект, НаборЗаписей
//Данные для сериализации
//
//ВидОбъекта (только для чтения). Тип: Строка.
//Имя объекта метаданных
//Например: "Номенклатура"
//
//ТипОбъекта (только для чтения). Тип: Строка.
//Принимает значение "Справочник" или "РегистрСведений".
//Указывает на корневой тип конфигурации к которому относится сериализуемый объект
//
//Используется для переопределения стандартной сериализации данных
Процедура ЗаписатьПараметрыОбъектаВСтруктуруПереопределяемый(СтруктураПараметровОбъекта,Объект,ДополнительныеПараметры,СтандартнаяОбработка) Экспорт
	
	ТипЗнчОбъект = ТипЗнч(Объект);
    Если ТипЗнчОбъект = Тип("СправочникОбъект.ХранилищеДополнительнойИнформации") Тогда
    	СтандартнаяОбработка = Ложь;
    	Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.ФизическиеЛица") И ЗначениеЗаполнено(Объект.Объект)
    		И Объект.Объект.ОсновноеИзображение = Объект.Ссылка Тогда 
    		СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Ссылка", Объект.Ссылка);
    		СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Код", Объект.Код);
    		СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Наименование", Объект.Наименование);
    		СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Сотрудник", Объект.Объект);
    		СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Фото", Объект.Хранилище, "Фото сотрудника");
    	Иначе
    		СтруктураПараметровОбъекта.Очистить();
    	КонецЕсли;
    ИначеЕсли ТипЗнчОбъект = Тип("СправочникОбъект.Подразделения") Тогда
       	//исползуем стандартную обработку
    	//переопределение идет на уровне реквизитов в ЗаписатьРеквизитВСтруктуруПараметровПереопределяемый()		
    	СтандартнаяОбработка = Ложь;
    	ИмяСправочника = Объект.Метаданные().Имя;
        СтруктураРеквизитов = Неопределено;
    	НашКорень = "ff020c0a-c404-11e1-ab5a-001a64361bf0";
    	
    	Если ДополнительныеПараметры.КэшСтруктурыСправочников.Свойство(ИмяСправочника, СтруктураРеквизитов) Тогда 
    		Для Каждого ОписаниеРеквизита Из СтруктураРеквизитов.Реквизиты Цикл
    			Если Не (СтруктураРеквизитов.Иерархический И
    				(Не Объект.ЭтоГруппа И ОписаниеРеквизита.Значение.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы
    				ИЛИ Объект.ЭтоГруппа И ОписаниеРеквизита.Значение.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)) 
    				И Не (ОписаниеРеквизита.Ключ = "ЭтоГруппа" Или ОписаниеРеквизита.Ключ = "Код") Тогда 
    				
    				Если ОписаниеРеквизита.Ключ = "Родитель" И Объект[ОписаниеРеквизита.Ключ] = Справочники.СтруктураПредприятия.ПустаяСсылка() Тогда
    					СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Родитель", НашКорень);
    				Иначе
    					СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, ОписаниеРеквизита.Ключ, Объект[ОписаниеРеквизита.Ключ]);
    				КонецЕсли;
    				
    			КонецЕсли;				
    		КонецЦикла;			
    	КонецЕсли;
    ИначеЕсли ТипЗнчОбъект = Тип("СправочникОбъект.Проекты") Тогда
    	СтандартнаяОбработка = Ложь;
		ИмяСправочника = Объект.Метаданные().Имя;
        СтруктураРеквизитов = Неопределено;
        Если ДополнительныеПараметры.КэшСтруктурыСправочников.Свойство(ИмяСправочника, СтруктураРеквизитов) Тогда 
			Для Каждого ОписаниеРеквизита Из СтруктураРеквизитов.Реквизиты Цикл
				Если Не (СтруктураРеквизитов.Иерархический И
					(Не Объект.ЭтоГруппа И ОписаниеРеквизита.Значение.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы
					ИЛИ Объект.ЭтоГруппа И ОписаниеРеквизита.Значение.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)) Тогда 
					
					Если ОписаниеРеквизита.Ключ = "Родитель" И Объект.Родитель = Справочники.Проекты.ПустаяСсылка() Тогда 
						
						НашКорень = "817378fd-01f4-4e73-b8ad-d282edde3fd2";
						СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Родитель", НашКорень);
												
					ИначеЕсли Не ОписаниеРеквизита.Ключ = "ЭтоГруппа" Тогда  						
						СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, ОписаниеРеквизита.Ключ, Объект[ОписаниеРеквизита.Ключ]);
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "ПроектЕИС", Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
        |   ИСТИНА КАК Поле1
        |ИЗ
        |   Справочник.Проекты КАК Проекты
        |ГДЕ
        |   НЕ Проекты.ПометкаУдаления
        |   И Проекты.Родитель = &Родитель";
		
		Запрос.УстановитьПараметр("Родитель", Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьПодчиненные = Не РезультатЗапроса.Пустой();
		
		СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "времЭтоГруппа", ЕстьПодчиненные);
	ИначеЕсли ТипЗнчОбъект = Тип("СправочникОбъект.Организации") Тогда
    	//Организации из HRM не выгружаем вообще
    	СтандартнаяОбработка = Ложь;
    	//СтруктураПараметровОбъекта.Очистить();
    	ИмяСправочника = Объект.Метаданные().Имя;
        СтруктураРеквизитов = Неопределено;
        Если ДополнительныеПараметры.КэшСтруктурыСправочников.Свойство(ИмяСправочника, СтруктураРеквизитов) Тогда 
    		Для Каждого ОписаниеРеквизита Из СтруктураРеквизитов.Реквизиты Цикл
    			Если Не (СтруктураРеквизитов.Иерархический И
    				(Не Объект.ЭтоГруппа И ОписаниеРеквизита.Значение.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы
    				ИЛИ Объект.ЭтоГруппа И ОписаниеРеквизита.Значение.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)) Тогда 
    				
    				Если ОписаниеРеквизита.Ключ = "Ссылка" Тогда 
    					
    					Запрос = Новый Запрос;
    					Запрос.Текст = 
    					"ВЫБРАТЬ
    					|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
    					|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане.КПП КАК КПП,
    					|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане.КодПоОКАТО КАК КодПоОКАТО
    					|ИЗ
    					|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних";
    					
    					Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.Ссылка);
    					
    					РезультатЗапроса = Запрос.Выполнить();
    					
    					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    					
    					СтруктураРегистрацияВНалоговомОргане = Новый Структура("КПП, КодПоОКАТО");
    					
    					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл							
    						ЗаполнитьЗначенияСвойств(СтруктураРегистрацияВНалоговомОргане, ВыборкаДетальныеЗаписи);							
    					КонецЦикла;
    					
    					СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "КПП", СтруктураРегистрацияВНалоговомОргане.КПП);
    					СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "КодПоОКАТО", СтруктураРегистрацияВНалоговомОргане.КодПоОКАТО);
    					
    				Иначе 						
    					СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, ОписаниеРеквизита.Ключ, Объект[ОписаниеРеквизита.Ключ]);
    				КонецЕсли;

    			КонецЕсли;
    		КонецЦикла;
    	КонецЕсли;
    	
    	НашКорень = "ad2d38aa-3401-48cc-bb89-575fa132a923";

    	СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Родитель", НашКорень);

    	ЗаписатьКонтактнуюИнформациюОрганизацииВXML(СтруктураПараметровОбъекта, Объект.Ссылка);
    	
    ИначеЕсли ТипЗнчОбъект = Тип("СправочникОбъект.УправленческиеДолжности") Тогда
    	
    	СтандартнаяОбработка = Ложь;
    	ИмяСправочника = Объект.Метаданные().Имя;
    	СтруктураРеквизитов = Неопределено;
    	Если ДополнительныеПараметры.КэшСтруктурыСправочников.Свойство(ИмяСправочника, СтруктураРеквизитов) Тогда 
    		Для Каждого ОписаниеРеквизита Из СтруктураРеквизитов.Реквизиты Цикл
    			Если Не (СтруктураРеквизитов.Иерархический И
    				(Не Объект.ЭтоГруппа И ОписаниеРеквизита.Значение.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы
    				ИЛИ Объект.ЭтоГруппа И ОписаниеРеквизита.Значение.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)) Тогда 
    				
    				СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, ОписаниеРеквизита.Ключ, Объект[ОписаниеРеквизита.Ключ]);
    				
    			КонецЕсли;
    		КонецЦикла;
        КонецЕсли;
    Иначе
        СтандартнаяОбработка = Ложь;
        ИмяСправочника = Объект.Метаданные().Имя;
        СтруктураРеквизитов = Неопределено;
        Если ДополнительныеПараметры.КэшСтруктурыСправочников.Свойство(ИмяСправочника, СтруктураРеквизитов) Тогда 
        	Для Каждого ОписаниеРеквизита Из СтруктураРеквизитов.Реквизиты Цикл
        		Если Не (СтруктураРеквизитов.Иерархический И
        			(Не Объект.ЭтоГруппа И ОписаниеРеквизита.Значение.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы
        			ИЛИ Объект.ЭтоГруппа И ОписаниеРеквизита.Значение.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)) Тогда 
        			Если ОписаниеРеквизита.Ключ = "Логин" Или ОписаниеРеквизита.Ключ = "Организация" Тогда 
        				Запрос = Новый Запрос();
        				Запрос.Текст = "ВЫБРАТЬ
        				               |	ФизическиеЛица.Ссылка КАК Ссылка,
        				               |	ФизическиеЛица.ПометкаУдаления КАК ПометкаУдаления,
        				               |	ФизическиеЛица.Родитель КАК Родитель,
        				               |	ФизическиеЛица.ЭтоГруппа КАК ЭтоГруппа,
        				               |	ФизическиеЛица.Код КАК Код,
        				               |	ФизическиеЛица.Наименование КАК Наименование,
        				               |	ФизическиеЛица.ДатаРождения КАК ДатаРождения,
        				               |	ФизическиеЛица.ИНН КАК ИНН,
        				               |	ФизическиеЛица.СтраховойНомерПФР КАК СтраховойНомерПФР,
        				               |	ФизическиеЛица.Пол КАК Пол,
        				               |	ФизическиеЛица.МестоРождения КАК МестоРождения,
        				               |	ЕСТЬNULL(ФизическиеЛицаДополнительныеРеквизиты.Значение, """") КАК Логин,
        				               |	РаботникиСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
        				               |	РаботникиСрезПоследних.Организация КАК Организация
        				               |ИЗ
        				               |	РегистрСведений.Работники.СрезПоследних(, ФизическоеЛицо = &ФизическоеЛицо) КАК РаботникиСрезПоследних
        				               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
        				               |		ПО РаботникиСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка
        				               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.ДополнительныеРеквизиты КАК ФизическиеЛицаДополнительныеРеквизиты
        				               |		ПО РаботникиСрезПоследних.ФизическоеЛицо = ФизическиеЛицаДополнительныеРеквизиты.Ссылка
        				               |			И (ФизическиеЛицаДополнительныеРеквизиты.Свойство.Имя = ""Рарус_Логин"")";
									   									   						        				
        				Запрос.УстановитьПараметр("ФизическоеЛицо", Объект.Ссылка);
        				
        				Результат = Запрос.Выполнить().Выбрать();
        				Если Результат.Следующий() Тогда
        					СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Логин", Результат.Логин);
							СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Организация", Результат.Организация);
        				КонецЕсли;
        			Иначе	
        				СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, ОписаниеРеквизита.Ключ, Объект[ОписаниеРеквизита.Ключ]);
        			КонецЕсли;
        								
        		КонецЕсли;
        	КонецЦикла;
        КонецЕсли;
        
        ЗаписатьДополнительныеРеквизитыОбъектаВСтруктуру(СтруктураПараметровОбъекта, Объект);
        ЗаписатьДополнительнуюТабличнуюЧастьВСтруктуру(СтруктураПараметровОбъекта, Объект);
		
	КонецЕсли;
	
КонецПроцедуры

//Переопределяет вид объекта
//
//Параметры:
//
//ВидОбъекта. Тип: Строка.
//Имя объекта метаданных
//Например: "Номенклатура"
//
Процедура ОпределитьВидОбъектаПереопределяемый(ВидОбъекта) Экспорт
    
    //Раскоментировать если нужен будет обмен!
    //Если ВидОбъекта = "ФизическиеЛица" Тогда
    //	ВидОбъекта = "ФизическиеЛица";
    //ИначеЕсли ВидОбъекта = "Должности" Тогда
    //	ВидОбъекта = "Должности";
    //ИначеЕсли ВидОбъекта = "Подразделения" Тогда //
    //	ВидОбъекта = "Подразделения";
    //КонецЕсли;
    
КонецПроцедуры

//Записывает дополнительную табличную часть объекта в файл обмена
// Параметры:
//
//Объект (только для чтения). Тип: Объект
//
//СтруктураПараметровОбъекта. Тип: Структура.
//В нее следует поместить таблицу значение соответсвующуу структуре табличной части
//Ключ: Имя табличной части
//Значение: таблица значений
//
//Процедура используется если в объект нужно записать дополнительные данные, хранящиеся в других источниках.
//Например для представления контактной информации сотрудников,хранящейся в регистре сведений
//в виде табличной части.
Процедура ЗаписатьДополнительнуюТабличнуюЧастьВСтруктуру(СтруктураПараметровОбъекта,Объект) Экспорт
	ТипЗнчОбъект = ТипЗнч(Объект);
	Если ТипЗнчОбъект = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		Если Не Объект.ЭтоГруппа Тогда 
			
			//ЗнаниеЯзыков, СоставСемьи и Образование вообще никогда не выгружались.
			ЗаписатьФИО(СтруктураПараметровОбъекта, Объект.Ссылка);
			ЗаписатьПаспортныеДанные(СтруктураПараметровОбъекта, Объект.Ссылка);
			ЗаписатьКонтактнуюИнформациюВXML(СтруктураПараметровОбъекта, Объект.Ссылка);
			ЗаписатьКадровуюИнформацию(СтруктураПараметровОбъекта, Объект.Ссылка);
			//ЗаписатьСертификацию(СтруктураПараметровОбъекта, Объект.Ссылка);
			
			//ЗаписатьТрудоваяДеятельность(СтруктураПараметровОбъекта, Объект);
			//ЗаписатьСтажи(СтруктураПараметровОбъекта, Объект);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

//Процедура переопределения загрузки табличной части.
///
//Параметры:
//
//Объект(только для чтения).
//Загружаемый объект.
//
//ИмяТЧ. Тип: Строка
//Имя табличной части объекта полученное из файла или переопределенное ранее.
//
//ТаблицаРеквизитов. Тип: ТаблицаЗначений
//Таблица прочитанных из файла обмена реквизитов табличной части
//Если значение реквизита имеет тип "структура", то это хранилище значения
//Ключи: ИмяРеквизита, ЗначениеРеквизита, ОписаниеОбъекта
//Чтобы исключить загрузку табличной части, нужно установить значение параметра в "Неопределено"
//
// СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная
// обработка события производиться не будет. Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
//
//Процедура предназначена для переопределения загрузки табличной части.
Процедура ОбработатьТаблицуРеквизитовТЧПереопределяемый(ИмяТЧ,ТаблицаРеквизитов,Объект,СтандартнаяОбработка) Экспорт
	
	Если Объект.ЭтоНовый() Тогда 
		Ссылка = Объект.ПолучитьСсылкуНового();
	Иначе
		Ссылка = Объект.Ссылка;
	КонецЕсли;
    
    Если  ТипЗнч(Объект) = Тип("СправочникОбъект.Абоненты") Тогда
    	СтандартнаяОбработка = Ложь;
    	ТаблицаРеквизитов = Неопределено;
        
    //Раскоментировать если будет нужно участие этих объектов в обмене!
    
    //ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
    //	СтандартнаяОбработка = Ложь;
    //	
    //	Если Не Объект.ДополнительныеСвойства.Свойство("НаборыЗаписей") Тогда 
    //		Объект.ДополнительныеСвойства.Вставить("НаборыЗаписей", Новый Массив);
    //	КонецЕсли;
    //	Если Не Объект.ДополнительныеСвойства.Свойство("МассивРегистраторов") Тогда 
    //		Объект.ДополнительныеСвойства.Вставить("МассивРегистраторов", Новый Массив);
    //	КонецЕсли;
    //	Если Не Объект.ДополнительныеСвойства.Свойство("мВидыКонтактнойИнформации") Тогда 
    //		Объект.ДополнительныеСвойства.Вставить("мВидыКонтактнойИнформации", Неопределено);
    //	КонецЕсли;
    //	
    //	Если ИмяТЧ = "КонтактнаяИнформация" Тогда 
    //		УстановитьКонтактнаяИнформация(Ссылка, ТаблицаРеквизитов, Объект.ДополнительныеСвойства.НаборыЗаписей, Объект.ДополнительныеСвойства.мВидыКонтактнойИнформации);
    //		ТаблицаРеквизитов = Неопределено;
    //	Иначе
    //		ТаблицаРеквизитов = Неопределено;
    //	КонецЕсли;
	
    //ИначеЕсли  ТипЗнч(Объект) = Тип("СправочникОбъект.Подразделения") Тогда
    //	СтандартнаяОбработка = Ложь;
    //	ТаблицаРеквизитов = Неопределено;
    
    //ИначеЕсли  ТипЗнч(Объект) = Тип("СправочникОбъект.Проекты") Тогда
    //	СтандартнаяОбработка = Ложь;
    //	ТаблицаРеквизитов = Неопределено;
    
    //ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Должности") Тогда
    //	СтандартнаяОбработка = Ложь;
    //	ТаблицаРеквизитов = Неопределено;
    КонецЕсли;
	
КонецПроцедуры  

Процедура ЗаписатьПараметрыОбъектаСтатьиЗатратИСФУ(СтруктураПараметровОбъекта, Объект, Комментарий, ДополнительныеПараметры)
	
    //Запрос = Новый Запрос();
    //Запрос.Текст = 
    //"ВЫБРАТЬ 
    //|	СоответствияПоСтатьямЗатратИСФУСрезПоследних.Значение.Наименование КАК НаименованиеФилиала
    //|ИЗ
    //|	РегистрСведений.СоответствияПоСтатьямЗатратИСФУ.СрезПоследних КАК СоответствияПоСтатьямЗатратИСФУСрезПоследних
    //|ГДЕ
    //|	СоответствияПоСтатьямЗатратИСФУСрезПоследних.ЗначениеИСФУ <> ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат_ИСФУ.ПустаяСсылка)
    //|	И СоответствияПоСтатьямЗатратИСФУСрезПоследних.Значение <> НЕОПРЕДЕЛЕНО
    //|	И СоответствияПоСтатьямЗатратИСФУСрезПоследних.Значение <> ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
    //|	И СоответствияПоСтатьямЗатратИСФУСрезПоследних.Значение <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
    //|	И СоответствияПоСтатьямЗатратИСФУСрезПоследних.Значение <> ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
    //|	И СоответствияПоСтатьямЗатратИСФУСрезПоследних.ЗначениеИСФУ = &Ссылка
    //|
    //|УПОРЯДОЧИТЬ ПО
    //|	СоответствияПоСтатьямЗатратИСФУСрезПоследних.Значение.Наименование";

    //Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
    //
    //Результат = Запрос.Выполнить();
    //Если Не Результат.Пустой() Тогда 
    //	НаименованиеФилиала = "";
    //	Выборка = Результат.Выбрать();
    //	Пока Выборка.Следующий() Цикл
    //		НаименованиеФилиала = НаименованиеФилиала + ", " + СокрЛП(Выборка.НаименованиеФилиала);
    //	КонецЦикла;
    //	НаименованиеФилиала = Сред(НаименованиеФилиала, 3);	// Отрезать ведущее ", "

    //	СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Ссылка", Объект.Ссылка);
    //	СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "НаименованиеСМР", НаименованиеФилиала);
    //КонецЕсли;
	
КонецПроцедуры


//Процедура переопределения чтения набора записей из XML
//
//Параметры:
//
//СтруктураПараметровОбъекта. Тип: Структура
//В нее следует поместить Значение параметров регистра(измерений, ресурсов, реквизитов)
//Ключ "_УдалениеНабораЗаписей" является обязательным в структуре, если он присутствует в файле обмена.
//Ключ: Имя параметра
//Значение: значение параметра
//
//МенеджерОбъекта(только для чтения).
//Менеджер справочника.
//
//Отправитель. Узел плана обмена отправивший сообщение
//
// СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная
// обработка события производиться не будет. Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
Процедура ОбработатьСтруктуруРеквизитовНабораЗаписей(СтруктураПараметровОбъекта,МенеджерОбъекта,Отправитель,СтандартнаяОбработка) Экспорт
КонецПроцедуры

//Процедура переопределения записи реквизита в XML
//
//Параметры:
//
//СтруктураПараметровОбъекта. Тип: Структура
//В нее следует поместить реквизиты объекта
//Ключ: Имя реквизита
//Значение: значение реквизита
//Если значением реквизита является хранилище значения, то значением элемента структуры должна быть структура следующего вида:
//Ключи: ЗначениеХранилища,ОписаниеОбъекта
//Для этого можно использовать процедуру СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру()
//
//Объект. Тип: Объект.
//Объект, реквизит которого следует переопределить
//
//Реквизит. Тип: Любой.
//Переопределяемый реквизит
//
// СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная
// обработка события производиться не будет. Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
Процедура ЗаписатьРеквизитВСтруктуруПараметровПереопределяемый(СтруктураПараметровОбъекта,Объект,Реквизит,СтандартнаяОбработка) Экспорт
	
	ИмяМенеджера = Объект.Метаданные().Имя;
	//Если ИмяМенеджера = "Подразделения" И Реквизит.Имя = "Порядок" Тогда 
	//	СтандартнаяОбработка = Ложь;
	//	НашКорень = "ff020c0a-c404-11e1-ab5a-001a64361bf0";
	//	//Если Объект <> Справочники.Подразделения.ПустаяСсылка() И Объект.Родитель = Справочники.СтруктураПредприятия.ПустаяСсылка() Тогда
	//	Если Объект.Родитель = Справочники.Подразделения.ПустаяСсылка() Тогда
	//	    СтандартнаяОбработка = Ложь;
	//	    СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Родитель", НашКорень);
	//	КонецЕсли;
	//ИначеЕсли ИмяМенеджера = "Подразделения" И Реквизит.Имя = "ВидЦФО" Тогда 
	//	СтандартнаяОбработка = Ложь;
	//	//Если Объект <> Справочники.Подразделения.ПустаяСсылка() И Объект.Родитель = Справочники.СтруктураПредприятия.ПустаяСсылка() Тогда
	//    СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "ВидПодразделения", Объект.ВидЦФО);
	//Иначе
	//Если ИмяМенеджера = "Проекты" И Реквизит.Имя = "GUID" Тогда 
	//	СтандартнаяОбработка = Ложь;
	//	НашКорень = "817378fd-01f4-4e73-b8ad-d282edde3fd2";
	//	//Если Объект <> Справочники.Подразделения.ПустаяСсылка() И Объект.Родитель = Справочники.СтруктураПредприятия.ПустаяСсылка() Тогда
	//	Если Объект.Родитель = Справочники.Проекты.ПустаяСсылка() Тогда
	//	    СтандартнаяОбработка = Ложь;
	//	    СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Родитель", НашКорень);
	//	КонецЕсли;
	//	
	//КонецЕсли;

			      		  	
КонецПроцедуры

//Процедура записи дополнительных реквизитов в структуру парметров
//
//Параметры:
//
//СтруктураПараметровОбъекта. Тип: Структура
//В нее следует поместить реквизиты объекта
//Ключ: Имя реквизита
//Значение: значение реквизита
//Если значением реквизита является хранилище значения, то значением элемента структуры должна быть структура следующего вида:
//Ключи: ЗначениеХранилища,ОписаниеОбъекта
//Для этого можно использовать процедуру СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру()
//
//Объект. Тип: Объект.
//Объект, реквизит которого следует переопределить
//
Процедура ЗаписатьДополнительныеРеквизитыОбъектаВСтруктуру(СтруктураПараметровОбъекта,Объект) Экспорт
	ТипЗнчОбъект = ТипЗнч(Объект);
	Если ТипЗнчОбъект = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		Если Не Объект.ЭтоГруппа Тогда 

			//СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "ОсновноеФото", Объект.ОсновноеИзображение);
			СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Родитель", Справочники.ФизическиеЛица.ПустаяСсылка());
			
		КонецЕсли;
	//ИначеЕсли ТипЗнчОбъект = Тип("СправочникОбъект.Проекты") Тогда
	//	//Если Не Объект.ЭтоГруппа Тогда 
	//	СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "ПроектЕИС", Истина);
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	ИСТИНА КАК Поле1
	//	|ИЗ
	//	|	Справочник.Проекты КАК Проекты
	//	|ГДЕ
	//	|	НЕ Проекты.ПометкаУдаления
	//	|	И Проекты.Родитель = &Родитель";
	//	
	//	Запрос.УстановитьПараметр("Родитель", Объект.Ссылка);
	//	РезультатЗапроса = Запрос.Выполнить();
	//	ЕстьПодчиненные = Не РезультатЗапроса.Пустой();
	//	
	//	СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "времЭтоГруппа", ЕстьПодчиненные);
	
	КонецЕсли;
КонецПроцедуры

//Процедура переопределения имени регистра при чтении
//
//Параметры: 
//
//ИмяРегистра. Тип: Строка.
//
Процедура ОпределитьИмяРегистраПереопределяемый(ИмяРегистра) Экспорт
КонецПроцедуры

//Процедура переопределения записи табличной части в XML.
///
//Параметры:
//
//ТабЧасть(только для чтения).
//Табличная часть объекта.
//
//Объект. Тип: Объект
//
//ИмяТЧ. Тип: Строка
//Имя табличной части объекта полученное из файла.
//
//СтруктураПараметровОбъекта. Тип: Струткура
//В нее следует поместить таблицу значение соответсвующуу структуре табличной части
//Ключ: Имя табличной части
//Значение: таблица значений
//
// СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная
// обработка события производиться не будет. Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
//
Процедура ЗаписатьТабличнуюЧастьВСтруктуруПараметровПереопределяемый(СтруктураПараметровОбъекта,Объект,ТабЧасть,СтандартнаяОбработка) Экспорт
КонецПроцедуры

//Процедура переопределения чтения объекта из XML.
//
//Параметры:
//
//СтруктураПараметровОбъекта. Тип: Структура
//В нее следует поместить реквизиты объекта
//Ключ: Имя реквизита\табличной части
//Значение: значение реквизита\таблица значений
//Если значением реквизита является хранилище значения, то значением элемента структуры должна быть структура следующего вида:
//Ключи: ЗначениеХранилища,ОписаниеОбъекта
//Для этого можно использовать процедуру СериализацияДанныхНСИ_20Сервер.ПрочитатьРеквизитВСтруктуру()
//
//Ссылка(только для чтения).
//Ссылка на объект.
//
// СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная
// обработка события производиться не будет. Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
Процедура ОбработатьСтруктуруПарметровОбъектаПереопределяемый(СтруктураПараметровОбъекта,Ссылка,Отправитель,СтандартнаяОбработка,Комментарий,ДополнительныеПараметры) Экспорт
    
    	//данные объекты только выгружаем из HRM, но не загружаем в HRM
	ТипЗнчСсылка = ТипЗнч(Ссылка);
	//Если ТипЗнчСсылка = Тип("СправочникСсылка.Подразделения") Тогда 
	//	СтандартнаяОбработка = Ложь;
	//КонецЕсли;
	
	Если ТипЗнчСсылка = Тип("СправочникСсылка.Пользователи") 
		Или ТипЗнчСсылка = Тип("СправочникСсылка.Подразделения") Тогда 
		СтандартнаяОбработка = Ложь;
        
    ИначеЕсли ТипЗнчСсылка = Тип("СправочникСсылка.ФизическиеЛица") 
        Или ТипЗнчСсылка = Тип("СправочникСсылка.Абоненты") Тогда 
		//игнорируем группы при загрузке из НСИ объектов вида ФизическиеЛица
		ЭтоГруппа = Неопределено;
		Если СтруктураПараметровОбъекта.Свойство("ЭтоГруппа", ЭтоГруппа) Тогда
			Если XMLЗначение(Тип("Булево"), ЭтоГруппа) = Истина Тогда 
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
    ИначеЕсли ТипЗнчСсылка = Тип("СправочникСсылка.Партнеры") Тогда
        
		Если Не СтруктураПараметровОбъекта.Свойство("Офис") Тогда 
			СтандартнаяОбработка = Ложь;			
		ИначеЕсли Не СтруктураПараметровОбъекта.Офис = "587f25f9-8f69-11e5-a033-382c4ac6951e" Тогда
			СтандартнаяОбработка = Ложь;
        КонецЕсли; 
    		
	КонецЕсли;
	
КонецПроцедуры

//Процедура переопределения чтения реквизита из XML
//
//Параметры:
//
//ИмяРеквизита. Тип: Строка
//
//ЗначениеРеквизита. Тип: Строка или Структура
//Если значение реквизита имеет тип "структура", то это хранилище значения
//Ключи: ИмяРеквизита, ЗначениеРеквизита, ОписаниеОбъекта
//Чтобы исключить загрузку реквизита следует установить значение параметра в "Неопределено"
//
//Объект(только для чтения).
//Загружаемый объект.
//
// СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная
// обработка события производиться не будет. Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
//
Процедура ОбработатьРеквизитОбъектаПереопределяемый(ИмяРеквизита,ЗначениеРеквизита,Объект,СтандартнаяОбработка)Экспорт
    
    ИмяМенеджера = Объект.Метаданные().Имя;
    
    Если ИмяМенеджера = "Абоненты" Тогда
        
        //Нужно будет поменять.
        
        //Если нужно будет не загружать уже пришедшие из базы НСИ, раскоментировать и добавить проверку, на то, что они пришли из базу НСИ!
        ////Для существующих Абоненты из НСИ ничего не зугружаем, кроме контактной информации
        ////Для новых физ лица (видимо, из других филиалов) загружаем все реквизиты и контактную информацию
        //Если Не Объект.ЭтоНовый() Тогда 
        //	СтандартнаяОбработка = Ложь;
        //	ЗначениеРеквизита = Неопределено
        Если ИмяРеквизита = "Код" Тогда
            
            Если Объект.ЭтоНовый() Тогда 
                ЗначениеРеквизита = 0;
            Иначе
                ЗначениеРеквизита = Строка(Объект.Код);
            КонецЕсли;
            
        КонецЕсли;
    КонецЕсли;    
	
КонецПроцедуры

//Процедура переопределения записи параметров независимого набора данных в структуру
//
//Параметры:
//
//СтруктураПараметровОбъекта. Тип: Структура
//В нее следует поместить реквизиты объекта
//Ключ: Имя реквизита
//Значение: значение реквизита
//Ключ "_УдалениеНабораЗаписей" является обязательным в структуре, если набор данных следует удалить.Значение ключа- "Истина".
//Если значением реквизита является хранилище значения, то значением элемента структуры должна быть структура следующего вида:
//Ключи: ЗначениеХранилища,ОписаниеОбъекта
//
//Данные. Зарегистрированные в плане одмена данные
//
//ВидОбъекта. Тип: Строка.
//Имя регистра сведений
//
Процедура ЗаписатьНаборДанныхВСтруктуруПараметровПереопределяемый(СтруктураПараметровОбъекта,Данные,ВидОбъекта) Экспорт
КонецПроцедуры

//Процедура вызывается при записи объекта в базу
//
//Параметры:
//
//Объект. Тип: любой объект
//Записываемый объект
//
//СтруктураПараметровОбъекта. Тип: Структура
//В нее следует поместить реквизиты объекта
//Ключ: Имя реквизита
//Значение: значение реквизита
//Если значением реквизита является хранилище значения, то значением элемента структуры должна быть структура следующего вида:
//Ключи: ЗначениеХранилища,ОписаниеОбъекта
Процедура ПриЗаписиОбъекта(Объект, СтруктураПараметровОбъекта) Экспорт
	
КонецПроцедуры 

//Процедура вызывается после записи объекта в базу
//
//Параметры:
//
//Объект. Тип: любой объект
//Записываемый объект
//
//СтруктураПараметровОбъекта. Тип: Структура
//В нее следует поместить реквизиты объекта
//Ключ: Имя реквизита
//Значение: значение реквизита
//Если значением реквизита является хранилище значения, то значением элемента структуры должна быть структура следующего вида:
//Ключи: ЗначениеХранилища,ОписаниеОбъекта
Процедура ПослеЗаписиОбъекта(Объект, СтруктураПараметровОбъекта) Экспорт
	
КонецПроцедуры 

//Процедура вызывается перед началом выгрузки данных
//
//Параметры:
//
//ДополнительныеПараметры. Тип: Структура
//Структура предназаначена для хранения пользовательских данных.
//Сохраняется на протяжении всей выгрузки данных и передается во вложенные методы
Процедура ПередНачаломВыгрузкиОбъектов(ДополнительныеПараметры) Экспорт
	КэшСтруктурыСправочников = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшСтруктурыСправочников", КэшСтруктурыСправочников);
КонецПроцедуры

//Процедура вызывается перед началом загрузки данных
//
//Параметры:
//
//ДополнительныеПараметры. Тип: Структура
//Структура предназаначена для хранения пользовательских данных.
//Сохраняется на протяжении всей загрузки данных и передается во вложенные методы
Процедура ПередНачаломЗагрузкиОбъектов(ДополнительныеПараметры) Экспорт
	КэшСтруктурыСправочников = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшСтруктурыСправочников", КэшСтруктурыСправочников);
КонецПроцедуры

//Процедура вызывается перед началом выгрузки
//каждого следующего вида объекта
//
//Параметры:
//
//ТипОбъекта (только для чтения). Тип: Строка.
//Принимает значение "Справочник", "РегистрСведений" или "УдалениеОбъекта".
//Указывает на корневой тип конфигурации к которому относится сериализуемый объект
//
//ВидОбъекта (только для чтения). Тип: Строка.
//Имя объекта в терминах сервара НСИ
//Например: "Работники"
//
//ТипДанных (только для чтения). Тип: Тип.
//Содержит тип выгружаемых данных в терминах локальной базы
//Может содержать также тип УдалениеДанных
//
//ДополнительныеПараметры. Тип: Структура
//Структура предназаначена для хранения пользовательских данных.
//Сохраняется на протяжении всей выгрузки данных и передается во вложенные методы
Процедура ПередНачаломВыгрузкиВидаОбъекта(ТипОбъекта, ВидОбъекта, ТипДанных, ДополнительныеПараметры) Экспорт
	Если ТипОбъекта = "Справочник" Тогда 
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипДанных);
		Если МетаданныеОбъекта <> Неопределено Тогда 
			ИмяСправочника = МетаданныеОбъекта.Имя;
			Если ИмяСправочника = "ФизическиеЛица" Тогда
				//ДополнительныеПоля = "Логин,ДатаРождения,ИНН,КодИМНС,СтраховойНомерПФР,Пол,МестоРождения,МестоРожденияКодПоОКАТО";
                
                //ДополнительныеПоля = "Логин,ДатаРождения,ИНН,СтраховойНомерПФР,Пол,МестоРождения,Организация";
            //ИначеЕсли ИмяСправочника = "Организации" Тогда 				
            //	//ДополнительныеПоля = "ИНН, ВидОбменаСКонтролирующимиОрганами, ГоловнаяОрганизация, ИНН, ДополнительныйКодФСС, ЕстьОбособленныеПодразделения, КодНалоговогоОрганаПолучателя, КодОрганаПФР, КодОрганаФСГС, КодПоОКПО, КодПодчиненностиФСС, КрупнейшийНалогоплательщик, НаименованиеПолное, НаименованиеСокращенное, НаименованиеТерриториальногоОрганаПФР, НаименованиеТерриториальногоОрганаФСС, ОбменКаталогОтправкиДанныхОтчетности, ОбменКодАбонента, ОбособленноеПодразделение, ОГРН, ПрименятьРайонныйКоэффициент, ПрименятьСевернуюНадбавку, РайонныйКоэффициент, Префикс, РегистрационныйНомерФСС, РегистрационныйНомерПФР, КодОКВЭД, НаименованиеОКВЭД, КодОКОПФ, НаименованиеОКОПФ, КодОКФС, НаименованиеОКФС, ПроцентСевернойНадбавки, ЮридическоеФизическоеЛицо";
            //	ДополнительныеПоля = "ИНН, КодПоОКПО, НаименованиеПолное, ОГРН, Префикс, ЮридическоеФизическоеЛицо";
            //ИначеЕсли ИмяСправочника = "УправленческиеДолжности" Тогда	
            //	ДополнительныеПоля = "";
            //    
            //ИначеЕсли ИмяСправочника = "Подразделения" Тогда 
            //	ДополнительныеПоля = "";
            ИначеЕсли ИмяСправочника = "Проекты" Тогда 
				ДополнительныеПоля = "";
			Иначе
				ДополнительныеПоля = Неопределено;
			КонецЕсли;
			СтруктураРеквизитов = ПолучитьСтруктуруРеквизитовСправочника(ИмяСправочника, ДополнительныеПоля);
			Если СтруктураРеквизитов <> Неопределено Тогда 
				ДополнительныеПараметры.КэшСтруктурыСправочников.Вставить(ИмяСправочника, СтруктураРеквизитов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Процедура вызывается перед началом загрузки
//каждого следующего вида объекта
//
//Параметры:
//
//ТипОбъекта (только для чтения). Тип: Строка.
//Принимает значение "Справочник", "РегистрСведений"
//Указывает на корневой тип конфигурации к которому относится сериализуемый объект
//
//ВидОбъекта (только для чтения). Тип: Строка.
//Имя объекта в терминах сервара НСИ
//Например: "Работники"
//
//МенеджерОбъекта (только для чтения). Тип: Менеджер.
//Содержит менеджер загружаемого объекта. Например Справочник.ФизическиеЛица
//Может принимать значение Неопределено
//
//ДополнительныеПараметры. Тип: Структура
//Структура предназаначена для хранения пользовательских данных.
//Сохраняется на протяжении всей выгрузки данных и передается во вложенные методы
Процедура ПередНачаломЗагрузкиВидаОбъекта(ТипОбъекта, ВидОбъекта, МенеджерОбъекта, ДополнительныеПараметры) Экспорт
КонецПроцедуры

//Процедура вызывается при загрузке объекта, перед началом заполенния его реквизитов
//Предназначена для очистки реквизитов (если реквизит не пришел по обмену, то он считается пустым)
//
//Параметры:
//
//Объект. Тип: любой объект
//Записываемый объект
//
//МетаданныеОбъекта (только для чтения). Тип: Метаданные.
//Содержит метаданные загружаемого объекта.
//
//СтруктураПараметровОбъекта. Тип: Структура
//Структура содержит считанные из файла обмена реквизиты объекта
//
//ДополнительныеПараметры. Тип: Структура
//Структура предназаначена для хранения пользовательских данных.
//Сохраняется на протяжении всей загрузки данных и передается во вложенные методы
Процедура ПередЗаполнениемРеквизитовОбъекта(Объект, МетаданныеОбъекта, СтруктураПараметровОбъекта, ДополнительныеПараметры) Экспорт
    
	Объект.ДополнительныеСвойства.Вставить("ОбменДаннымиНСИ", Истина);
    
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		//очащем все кроме контактной информации
		//Для Каждого ЭлементСтруктуры Из СтруктураПараметровОбъекта Цикл
		//	Если ЭлементСтруктуры.Ключ <> "КонтактнаяИнформация" Тогда
		//		СтруктураПараметровОбъекта.Удалить(ЭлементСтруктуры.Ключ);
		//	КонецЕсли
		//КонецЦикла;
    КонецЕсли;
    
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////Процедуры и функции обработки данных////////////////////////////////////////////

Функция ПолучитьСтруктуруРеквизитовСправочника(ИмяСправочника, ДополнительныеПоля = Неопределено) Экспорт
    
    Если ТипЗнч(ИмяСправочника) = Тип("Строка") Тогда 
		МетаданныеСправочника = Метаданные.Справочники.Найти(ИмяСправочника);
	Иначе
		МетаданныеСправочника = ИмяСправочника;
	КонецЕсли;
	Если МетаданныеСправочника = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Иерархический	= МетаданныеСправочника.Иерархический;
	Подчинен		= МетаданныеСправочника.Владельцы.Количество() > 0;
	
	СтруктураРеквизитов = Новый Структура("Реквизиты,ТабличныеЧасти,Иерархический");
	СтруктураРеквизитов.Иерархический = Иерархический;
	
	ДляГруппыИЭлемента = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента;
	
	СтруктураПолейСправочника = Новый Структура;
	СтруктураПолейСправочника.Вставить("Код", 				Новый Структура("Очищать,Использование", Истина, ДляГруппыИЭлемента));
	СтруктураПолейСправочника.Вставить("Наименование", 		Новый Структура("Очищать,Использование", Истина, ДляГруппыИЭлемента));
	СтруктураПолейСправочника.Вставить("ПометкаУдаления", 	Новый Структура("Очищать,Использование", Истина, ДляГруппыИЭлемента));
	СтруктураПолейСправочника.Вставить("Ссылка", 			Новый Структура("Очищать,Использование", Ложь, ДляГруппыИЭлемента));
	
	Если Подчинен Тогда
		СтруктураПолейСправочника.Вставить("Владелец", 		Новый Структура("Очищать,Использование", Ложь, ДляГруппыИЭлемента));
	КонецЕсли;
	
	Если Иерархический Тогда
		СтруктураПолейСправочника.Вставить("Родитель", 		Новый Структура("Очищать,Использование", Истина, ДляГруппыИЭлемента));
		СтруктураПолейСправочника.Вставить("ЭтоГруппа", 	Новый Структура("Очищать,Использование", Ложь, ДляГруппыИЭлемента));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПоля) Тогда 
		
		лкДополнительныеПоля = ДополнительныеПоля;
		Если ТипЗнч(лкДополнительныеПоля) = Тип("Строка") Тогда 
			лкДополнительныеПоля = Новый Структура(лкДополнительныеПоля);
		КонецЕсли;
	
		Для Каждого ДополнительноеПоле Из лкДополнительныеПоля Цикл
			Если ДополнительноеПоле.Значение = Неопределено Тогда 
				МетаданныеРеквизита = МетаданныеСправочника.Реквизиты.Найти(ДополнительноеПоле.Ключ);
				Если МетаданныеРеквизита = Неопределено Тогда 
					Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента;
				Иначе
					Использование = МетаданныеРеквизита.Использование;
				КонецЕсли;
				СтруктураПолейСправочника.Вставить(ДополнительноеПоле.Ключ, Новый Структура("Очищать,Использование", Истина, Использование));
			Иначе
				СтруктураСвойствРеквизита = Новый Структура("Очищать,Использование", Истина, ДляГруппыИЭлемента);
				Для Каждого Св Из ДополнительноеПоле.Значение Цикл
					СтруктураСвойствРеквизита.Вставить(Св.Ключ, Св.Значение);
				КонецЦикла;
				СтруктураПолейСправочника.Вставить(ДополнительноеПоле.Ключ, СтруктураСвойствРеквизита);
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли;
	
	СтруктураРеквизитов.Реквизиты = СтруктураПолейСправочника;
	//СтруктураРеквизитов.ТабличныеЧасти
	Возврат СтруктураРеквизитов;
	
КонецФункции

Процедура ЗаписатьНаименованиеЭлементаСправочника(СтруктураПараметровОбъекта, НазваниеРеквизита, Ссылка)
	
	СтруктураПараметровОбъекта.Вставить(НазваниеРеквизита, Ссылка.Наименование);
	
КонецПроцедуры

Процедура ЗаписатьКодЭлементаСправочника(СтруктураПараметровОбъекта, НазваниеРеквизита, Ссылка)
	
	СтруктураПараметровОбъекта.Вставить(НазваниеРеквизита,Ссылка.Код);
	
КонецПроцедуры

Функция ПрочитатьЭлементСправочникаПоНаименованию(НазваниеСправочника, Наименование)
	
	Возврат Справочники[НазваниеСправочника].НайтиПоНаименованию(Наименование);
	
КонецФункции

Функция ПрочитатьЭлементСправочникаПоКоду(НазваниеСправочника, Код)
	
	Возврат Справочники[НазваниеСправочника].НайтиПоКоду(Код);

КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////Процедуры и функции обработки данных////////////////////////////////////////////

Процедура ИнициализироватьВидыКонтактнойИнформации(мВидыКонтактнойИнформации)
	
    //Запрос = Новый Запрос();
    //Запрос.Текст = 
    //"ВЫБРАТЬ
    //|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
    //|	ВидыКонтактнойИнформации.Тип КАК Тип,
    //|	ВидыКонтактнойИнформации.Наименование КАК Наименование
    //|ИЗ
    //|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
    //|ГДЕ
    //|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ВидОбъектаКонтактнойИнформации";
    //Запрос.УстановитьПараметр("ВидОбъектаКонтактнойИнформации", Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица);
    //мВидыКонтактнойИнформации = Запрос.Выполнить().Выгрузить();
    //мВидыКонтактнойИнформации.Индексы.Добавить("Тип");
    //мВидыКонтактнойИнформации.Индексы.Добавить("Наименование");
	
КонецПроцедуры

Функция НайтиВидКонтактнойИнформации(мВидыКонтактнойИнформации, НаименованиеВида, Тип)
	
	Если мВидыКонтактнойИнформации = Неопределено Тогда
		ИнициализироватьВидыКонтактнойИнформации(мВидыКонтактнойИнформации);	
	КонецЕсли;
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Наименование", НаименованиеВида);
    СтруктураПоиска.Вставить("Тип", Тип);
	Претендетны = мВидыКонтактнойИнформации.НайтиСтроки(СтруктураПоиска);
	ВидИнфы = Неопределено;
	Если Претендетны.Количество() = 0 Тогда
		// создать вид контактной инфы
		ВидИнфыНовый = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		ВидИнфыНовый.Наименование = НаименованиеВида;
		ВидИнфыНовый.Тип = Тип;
		ВидИнфыНовый.ВидОбъектаКонтактнойИнформации = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
		ВидИнфыНовый.Записать();
		ВидИнфы = ВидИнфыНовый.Ссылка;
		НоваяСтрока = мВидыКонтактнойИнформации.Добавить();
		НоваяСтрока.Ссылка = ВидИнфы;
		НоваяСтрока.Наименование = НаименованиеВида;
		НоваяСтрока.Тип = Тип;
	Иначе
		ВидИнфы = Претендетны[0].Ссылка;
	КонецЕсли;
	
	Возврат ВидИнфы; 
	
КонецФункции

//Записывает доп. табличную часть "КонтатнаяИнформация"
//
Процедура ЗаписатьКонтактнуюИнформациюВXML(СтруктураПараметровОбъекта,Ссылка)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛицаКонтактнаяИнформация.Тип КАК Тип,
		|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление,
		|	ФизическиеЛицаКонтактнаяИнформация.Вид.Наименование КАК Вид
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|ГДЕ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка = &Ссылка
		|	И (НЕ ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|			ИЛИ НЕ ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница))";
	
    Запрос.УстановитьПараметр("Ссылка",Ссылка);
    КонтактнаяИнформация = Запрос.Выполнить().Выгрузить();
    
     // выгружаем из HRM все кроме внутренних телефонов
    ШаблонВнутреннегоТелефона = "Телефон внутренний";
    СтрокиКУдалению = Новый Массив();
    Для Каждого ТекСтрока Из КонтактнаяИнформация Цикл
    	ВидИнформации = СокрЛП(ТекСтрока.Вид);
    	Если Найти(ВидИнформации, ШаблонВнутреннегоТелефона) > 0 Тогда 
    		СтрокиКУдалению.Добавить(ТекСтрока);
    	КонецЕсли;
    КонецЦикла;
    Для Каждого ТекСтрока Из СтрокиКУдалению Цикл
    	КонтактнаяИнформация.Удалить(ТекСтрока);
    КонецЦикла;
    
    СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "КонтактнаяИнформация", КонтактнаяИнформация);
	
КонецПроцедуры

Процедура ЗаписатьКонтактнуюИнформациюОрганизацииВXML(СтруктураПараметровОбъекта,Ссылка)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОрганизацииКонтактнаяИнформация.Тип КАК Тип,
		|	ОрганизацииКонтактнаяИнформация.Представление КАК Представление,
		|	ОрганизацииКонтактнаяИнформация.Вид.Наименование КАК Вид
		|ИЗ
		|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
		|ГДЕ
		|	ОрганизацииКонтактнаяИнформация.Ссылка = &Ссылка";
	
    Запрос.УстановитьПараметр("Ссылка",Ссылка);
    КонтактнаяИнформация = Запрос.Выполнить().Выгрузить();
	    
    СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "КонтактнаяИнформация", КонтактнаяИнформация);
	
КонецПроцедуры

//Записывает доп. табличную часть "ФИО"
//
Процедура ЗаписатьФИО(СтруктураПараметровОбъекта, Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст =  
    "ВЫБРАТЬ
    |   ФИОФизЛиц.Период КАК Период,
    |   ФИОФизЛиц.Фамилия КАК Фамилия,
    |   ФИОФизЛиц.Имя КАК Имя,
    |   ФИОФизЛиц.Отчество КАК Отчество
    |ИЗ
    |   РегистрСведений.ФИОФизическихЛиц КАК ФИОФизЛиц
    |ГДЕ
    |   ФИОФизЛиц.ФизическоеЛицо = &Ссылка
    |
    |УПОРЯДОЧИТЬ ПО
    |   Период";
    
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "ФИО", Результат);
КонецПроцедуры

//Записывает доп. табличную часть "КадроваяИнформация"
//
Процедура ЗаписатьКадровуюИнформацию(СтруктураПараметровОбъекта, Ссылка)
    Запрос = Новый Запрос;	
    Запрос.Текст = "ВЫБРАТЬ
                   |	НАЧАЛОПЕРИОДА(Работники.Период, ДЕНЬ) КАК Период,
                   |	Работники.Подразделение КАК Подразделение,
                   |	ЕСТЬNULL(Работники.Должность.Наименование, """") КАК Должность,
                   |	Работники.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
                   |	ВЫБОР
                   |		КОГДА Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(перечисление.ВидыКадровыхСобытий.Прием)
                   |				ИЛИ Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(перечисление.ВидыКадровыхСобытий.ВосстановлениеВДолжности)
                   |			ТОГДА ""ПриемНаРаботу""
                   |		КОГДА Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(перечисление.ВидыКадровыхСобытий.НачальныеДанные)
                   |				ИЛИ Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(перечисление.ВидыКадровыхСобытий.НеподтвержденныеДанные)
                   |			ТОГДА ""Перемещение""
                   |		КОГДА Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(перечисление.ВидыКадровыхСобытий.ИзменениеОплатыТруда)
                   |			ТОГДА """"
                   |		ИНАЧЕ Работники.ПричинаИзмененияСостояния
                   |	КОНЕЦ КАК ПричинаИзмененияСостояния,
                   |	ЕСТЬNULL(Работники.ПричинаУвольнения.Наименование, """") КАК ПричинаУвольнения,
                   |	ЕСТЬNULL(ФизическиеЛицаДополнительныеРеквизиты.Значение, """") КАК ТабельныйНомер,
                   |	Работники.Организация КАК Организация,
                   |	Работники.Должность КАК ДолжностьРаботника
                   |ИЗ
                   |	РегистрСведений.Работники КАК Работники
                   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.ДополнительныеРеквизиты КАК ФизическиеЛицаДополнительныеРеквизиты
                   |		ПО Работники.ФизическоеЛицо = ФизическиеЛицаДополнительныеРеквизиты.Ссылка
                   |			И (ФизическиеЛицаДополнительныеРеквизиты.Свойство.Имя = ""Рарус_Логин"")
                   |ГДЕ
                   |	Работники.ФизическоеЛицо = &ФизЛицо
                   |
                   |УПОРЯДОЧИТЬ ПО
                   |	Период";
	               
    Запрос.УстановитьПараметр("ФизЛицо", Ссылка);
    Результат = Запрос.Выполнить().Выгрузить();
    
    СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта,"КадроваяИнформация", Результат);

КонецПроцедуры

//Записывает доп. табличную часть "Сертификация"
//
Процедура ЗаписатьСертификацию(СтруктураПараметровОбъекта, Ссылка)
	
    //Запрос = Новый Запрос;	
    //Запрос.Текст = "ВЫБРАТЬ
    //               |	Сертификация.Период КАК Период,
    //               |	Сертификация.Регистратор.Номер КАК НомерСертификата,
    //               |	Сертификация.Действует,
    //               |	Сертификация.Примечание,
    //               |	Сертификация.ВидСертификата КАК ВидСертификата,
    //               |	ЕСТЬNULL(Сертификация.ОрганизацияВыдачи.Наименование, """") КАК ОрганизацияВыдачи
    //               |ИЗ
    //               |	РегистрСведений.Сертификация КАК Сертификация
    //               |ГДЕ
    //               |	Сертификация.Сотрудник = &Ссылка
    //               |
    //               |УПОРЯДОЧИТЬ ПО
    //               |	Период";
    //Запрос.УстановитьПараметр("Ссылка", Ссылка);
    //Результат = Запрос.Выполнить().Выгрузить();
    //
    //СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта,"Сертификаты",Результат);
    	
КонецПроцедуры

//Записывает доп. табличную часть "ПаспортныеДанные"
//
Процедура ЗаписатьПаспортныеДанные(СтруктураПараметровОбъекта, Ссылка)
	
    //Запрос = Новый Запрос;	
    //Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    //|	ПаспортныеДанныеФизЛиц.ДокументВид,
    //|	ПаспортныеДанныеФизЛиц.ДокументСерия,
    //|	ПаспортныеДанныеФизЛиц.ДокументНомер,
    //|	ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи,
    //|	ПаспортныеДанныеФизЛиц.ДокументКемВыдан,
    //|	ПаспортныеДанныеФизЛиц.ДокументКодПодразделения,
    //|	ПаспортныеДанныеФизЛиц.Период
    //|ИЗ
    //|	РегистрСведений.ПаспортныеДанныеФизЛиц КАК ПаспортныеДанныеФизЛиц
    //|ГДЕ
    //|	ПаспортныеДанныеФизЛиц.ФизЛицо = &ФизЛицо";
    //Запрос.УстановитьПараметр("ФизЛицо", Ссылка);
    //Результат = Запрос.Выполнить().Выгрузить();
    //
    //СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта,"ПаспортныеДанные",Результат);
КонецПроцедуры

Процедура ЗаписатьТрудоваяДеятельность(СтруктураПараметровОбъекта, Объект)
	Результат = Объект.ТрудоваяДеятельность.Выгрузить();
	Результат.Колонки.Удалить("НомерСтроки");
	СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "ТрудоваяДеятельность", Результат);
КонецПроцедуры

Процедура ЗаписатьСтажи(СтруктураПараметровОбъекта, Объект)
	Результат = Объект.Стажи.Выгрузить();
	Результат.Колонки.Удалить("НомерСтроки");
	СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Стажи", Результат);
КонецПроцедуры

Процедура ЗаписатьПрофессии(СтруктураПараметровОбъекта, Объект)
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Профессия", Новый ОписаниеТипов("Строка"));
	Для Каждого Стр Из Объект.Профессии Цикл
		НоваяСтр = Результат.Добавить();
		НоваяСтр.Профессия = Стр.Профессия;
	КонецЦикла;
	СериализацияДанныхНСИ_20Сервер.ЗаписатьРеквизитВСтруктуру(СтруктураПараметровОбъекта, "Профессии", Результат);
КонецПроцедуры

Функция УстановитьКонтактнаяИнформация(Ссылка, ТаблицаОбъекта, НаборыЗаписей, мВидыКонтактнойИнформации, ОписаниеОшибки = "")
	
	Для Каждого ТекСтрока Из ТаблицаОбъекта Цикл
		
		// Реализуем логику старой НСИ
		// Записываем только если Вид в списке допустимых (только внутренние телефоны)
		ВидКонтактнойИнформации = СокрЛП(ТекСтрока.Вид);
		Если Найти(ВидКонтактнойИнформации, "Внутр.телефон") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// загрузка
		ТипКонтИнформации = Перечисления.ТипыКонтактнойИнформации[ТекСтрока.Тип];
		
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Значение = Ссылка;
		НаборЗаписей.Отбор.Объект.Использование = Истина;
		НаборЗаписей.Отбор.Тип.Значение = ТипКонтИнформации;
		НаборЗаписей.Отбор.Тип.Использование = Истина;
		НаборЗаписей.Отбор.Вид.Значение = ВидКонтактнойИнформации;
		НаборЗаписей.Отбор.Вид.Использование = Истина;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Объект = Ссылка;
		НоваяЗапись.Тип = ТипКонтИнформации;
		НоваяЗапись.Вид = ВидКонтактнойИнформации;
		НоваяЗапись.Представление = ТекСтрока.Представление;
		ТипБулево = Новый Структура("Тип", Новый ОписаниеТипов("Булево"));
		НоваяЗапись.ЗначениеПоУмолчанию = СериализацияДанныхНСИ_20Сервер.ПолучитьЗначениеРеквизита(ТипБулево, ТекСтрока.ЗначениеПоУмолчанию);
		НоваяЗапись.Поле1 = ТекСтрока.Поле1;		
		НоваяЗапись.Поле2 = ТекСтрока.Поле2;		
		НоваяЗапись.Поле3 = ТекСтрока.Поле3;		
		НоваяЗапись.Поле4 = ТекСтрока.Поле4;		
		НоваяЗапись.Поле5 = ТекСтрока.Поле5;		
		НоваяЗапись.Поле6 = ТекСтрока.Поле6;		
		НоваяЗапись.Поле7 = ТекСтрока.Поле7;		
		НоваяЗапись.Поле8 = ТекСтрока.Поле8;		
		НоваяЗапись.Поле9 = ТекСтрока.Поле9;		
		НоваяЗапись.Поле10 = ТекСтрока.Поле10;		
		НоваяЗапись.Комментарий = "#Введена автоматически при переносе из системы НСИ2";
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОбменДаннымиНСИ", Истина);
		
		НаборыЗаписей.Добавить(НаборЗаписей);
	КонецЦикла;
	
	Возврат НаборыЗаписей;
	
КонецФункции
