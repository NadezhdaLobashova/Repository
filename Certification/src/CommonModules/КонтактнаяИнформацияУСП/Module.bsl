
#Область ПрограммныйИнтерфейс

// Возвращает первое значение пользователя сервиса по адресу электронной почты.
//
// Параметры:
//  Сервис - СправочникСсылка.Сервисы - сервис пользователя.
//  Адрес  - Строка - адрес электронной почты пользователя.
// 
// Возвращаемое значение:
//  СправочникСсылка.ПользователиСервисов - пользователь сервиса.
//
Функция ПользовательСервисаПоАдресу(Сервис, Адрес) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПользователиСервисовКонтактнаяИнформация.Ссылка КАК ПользовательСервиса
		|ИЗ
		|	Справочник.ПользователиСервисов.КонтактнаяИнформация КАК ПользователиСервисовКонтактнаяИнформация
		|ГДЕ
		|	ПользователиСервисовКонтактнаяИнформация.Представление = &Адрес
		|	И ПользователиСервисовКонтактнаяИнформация.Тип = &ТипКИ
		|	И ПользователиСервисовКонтактнаяИнформация.Ссылка.Владелец = &Сервис";
		
	Запрос.УстановитьПараметр("Адрес", Адрес);
	Запрос.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Сервис", Сервис);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПользовательСервиса;
	Иначе
		Возврат Справочники.ПользователиСервисов.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции

// Возвращает актуальные адреса отправки пользователя сервиса.
//
// Параметры:
//  ПользовательСервиса - СправочникСсылка.ПользователиСервисов - пользователь сервиса.
// 
// Возвращаемое значение:
//  Массив - электронные адреса объекта, с которых приходили последние сообщения.
//
Функция АктуальныеАдресаОтправкиПользователяСервиса(ПользовательСервиса) Экспорт
	
	АдресаПользователя = ВсеЭлектронныеАдресаПользователяСервиса(ПользовательСервиса);
	ДоступныеАдреса = Новый Массив;
	Для каждого Элемент Из АдресаПользователя Цикл
		ДоступныеАдреса.Добавить(Элемент.Адрес);
	КонецЦикла; 
	
	Если ДоступныеАдреса.Количество() = 0 Тогда
		Возврат АдресаПользователя;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
        |   Получатели.Контакт,
        |   Получатели.Представление,
        |   Получатели.Адрес,
        |   Получатели.Ссылка.ДатаОтправления КАК ДатаОтправления,
        |   Получатели.Ссылка КАК Ссылка
        |ИЗ
        |   Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК Получатели
        |ГДЕ
        |   Получатели.Контакт = &ПользовательСервиса
        |   И НЕ Получатели.Ссылка.ПометкаУдаления
        |   И Получатели.Ссылка.СтатусПисьма = &СтатусОтправлено
        |   И Получатели.Адрес В(&ДоступныеАдреса)
        |
        |УПОРЯДОЧИТЬ ПО
        |   ДатаОтправления УБЫВ
        |ИТОГИ ПО
        |   Ссылка";
	
	Запрос.УстановитьПараметр("ПользовательСервиса", ПользовательСервиса);
	Запрос.УстановитьПараметр("СтатусОтправлено", Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено);
	Запрос.УстановитьПараметр("ДоступныеАдреса", ДоступныеАдреса);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Адреса = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ВыборкаПолучатель = Выборка.Выбрать();
		Пока ВыборкаПолучатель.Следующий() Цикл
			ДанныеКонтакта = Новый Структура;
			ДанныеКонтакта.Вставить("Адрес", ВыборкаПолучатель.Адрес); 
			ДанныеКонтакта.Вставить("Представление", ВыборкаПолучатель.Представление);
			ДанныеКонтакта.Вставить("Контакт", ВыборкаПолучатель.Контакт); 
			Адреса.Добавить(ДанныеКонтакта);
		КонецЦикла; 
		Прервать;
	КонецЦикла;
	 
	Если Адреса.Количество() = 0 Тогда
		Возврат АдресаПользователя;
	Иначе
		Возврат Адреса;
	КонецЕсли;
	
КонецФункции

// Функция - Все электронные адреса пользователя сервиса
//
// Параметры:
//  ПользовательСервиса - СправочникСсылка.ПользователиСервисов - пользователь сервиса.
// 
// Возвращаемое значение:
//  Массив - электронные адреса объекта.
//
Функция ВсеЭлектронныеАдресаПользователяСервиса(ПользовательСервиса) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПользователиСервисовКонтактнаяИнформация.Представление КАК Адрес,
		|	ПользователиСервисовКонтактнаяИнформация.Ссылка КАК Контакт,
		|	ПользователиСервисовКонтактнаяИнформация.Ссылка.Наименование КАК ПредставлениеКонтакта
		|ИЗ
		|	Справочник.ПользователиСервисов.КонтактнаяИнформация КАК ПользователиСервисовКонтактнаяИнформация
		|ГДЕ
		|	ПользователиСервисовКонтактнаяИнформация.Ссылка = &ПользовательСервиса
		|	И ПользователиСервисовКонтактнаяИнформация.Вид В(&ВидыКИПочты)";
	
	ВидыКИПочты = Новый Массив;
	ВидыКИПочты.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПользователяСервиса);
	ВидыКИПочты.Добавить(Справочники.ВидыКонтактнойИнформации.ДополнительныйEmailПользователяСервиса);
	
	Запрос.УстановитьПараметр("ВидыКИПочты", ВидыКИПочты);
	Запрос.УстановитьПараметр("ПользовательСервиса", ПользовательСервиса);
	Результат = Запрос.Выполнить();
	Адреса = Новый Массив;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеКонтакта = Новый Структура;
		ДанныеКонтакта.Вставить("Адрес", Выборка.Адрес); 
		ДанныеКонтакта.Вставить("Представление", СтрШаблон("%1 <%2>", Выборка.ПредставлениеКонтакта, Выборка.Адрес));
		ДанныеКонтакта.Вставить("Контакт", Выборка.Контакт); 
		Адреса.Добавить(ДанныеКонтакта);
	КонецЦикла; 
	
	Возврат Адреса;
	
КонецФункции

// Функция - Все электронные адреса абонента
//
// Параметры:
//  Абонент - СправочникСсылка.Абоненты - абонент.
// 
// Возвращаемое значение:
//  Массив - электронные адреса объекта.
//
Функция ВсеЭлектронныеАдресаАбонента(Абонент) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АбонентыКонтактнаяИнформация.Представление КАК Адрес,
		|	АбонентыКонтактнаяИнформация.Ссылка КАК Контакт,
		|	АбонентыКонтактнаяИнформация.Ссылка.Наименование КАК ПредставлениеКонтакта
		|ИЗ
		|	Справочник.Абоненты.КонтактнаяИнформация КАК АбонентыКонтактнаяИнформация
		|ГДЕ
		|	АбонентыКонтактнаяИнформация.Ссылка = &Абонент
		|	И АбонентыКонтактнаяИнформация.Вид В(&ВидыКИПочты)";
	
	ВидыКИПочты = Новый Массив;
	ВидыКИПочты.Добавить(Справочники.ВидыКонтактнойИнформации.EmailАбонента);
	ВидыКИПочты.Добавить(Справочники.ВидыКонтактнойИнформации.ДополнительныйEmailАбонента);
	
	Запрос.УстановитьПараметр("ВидыКИПочты", ВидыКИПочты);
	Запрос.УстановитьПараметр("Абонент", Абонент);
	Результат = Запрос.Выполнить();
	Адреса = Новый Массив;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеКонтакта = Новый Структура;
		ДанныеКонтакта.Вставить("Адрес", Выборка.Адрес); 
		ДанныеКонтакта.Вставить("Представление", СтрШаблон("%1 <%2>", Выборка.ПредставлениеКонтакта, Выборка.Адрес));
		ДанныеКонтакта.Вставить("Контакт", Выборка.Контакт); 
		Адреса.Добавить(ДанныеКонтакта);
	КонецЦикла; 
	
	Возврат Адреса;
	
КонецФункции 

// Функция - Все электронные адреса пользователя
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь.
// 
// Возвращаемое значение:
//  Массив - электронные адреса объекта.
//
Функция ВсеЭлектронныеАдресаПользователя(Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление КАК Адрес,
		|	КонтактнаяИнформация.Ссылка КАК Контакт,
		|	КонтактнаяИнформация.Ссылка.Наименование КАК ПредставлениеКонтакта
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Пользователь
		|	И КонтактнаяИнформация.Вид В(&ВидыКИПочты)";
	
	ВидыКИПочты = Новый Массив;
	ВидыКИПочты.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	
	Запрос.УстановитьПараметр("ВидыКИПочты", ВидыКИПочты);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Адреса = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеКонтакта = Новый Структура;
		ДанныеКонтакта.Вставить("Адрес", Выборка.Адрес); 
		ДанныеКонтакта.Вставить("Представление", СтрШаблон("%1 <%2>", Выборка.ПредставлениеКонтакта, Выборка.Адрес));
		ДанныеКонтакта.Вставить("Контакт", Выборка.Контакт); 
		Адреса.Добавить(ДанныеКонтакта);
	КонецЦикла; 
	
	Возврат Адреса;
	
КонецФункции

// Функция - Все электронные адреса линии поддержки
//
// Параметры:
//  ЛинияПоддержки - СправочникСсылка.ЛинииПоддержки - линия поддержки.
// 
// Возвращаемое значение:
//  Массив - электронные адреса объекта.
//
Функция ВсеЭлектронныеАдресаЛинииПоддержки(ЛинияПоддержки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление КАК Адрес,
		|	КонтактнаяИнформация.Ссылка КАК Контакт,
		|	КонтактнаяИнформация.Ссылка.Наименование КАК ПредставлениеКонтакта
		|ИЗ
		|	Справочник.ЛинииПоддержки.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &ЛинияПоддержки
		|	И КонтактнаяИнформация.Вид В(&ВидыКИПочты)";
	
	ВидыКИПочты = Новый Массив;
	ВидыКИПочты.Добавить(Справочники.ВидыКонтактнойИнформации.EmailЛинииПоддержки);
	
	Запрос.УстановитьПараметр("ВидыКИПочты", ВидыКИПочты);
	Запрос.УстановитьПараметр("ЛинияПоддержки", ЛинияПоддержки);
	Результат = Запрос.Выполнить();
	Адреса = Новый Массив;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеКонтакта = Новый Структура;
		ДанныеКонтакта.Вставить("Адрес", Выборка.Адрес); 
		ДанныеКонтакта.Вставить("Представление", СтрШаблон("%1 <%2>", Выборка.ПредставлениеКонтакта, Выборка.Адрес));
		ДанныеКонтакта.Вставить("Контакт", Выборка.Контакт); 
		Адреса.Добавить(ДанныеКонтакта);
	КонецЦикла; 
	
	Возврат Адреса;
	
КонецФункции

// Функция - Все электронные адреса объекта
//
// Параметры:
//  Объект - ЛюбаяСсылка - ссылка на объект, для которого нужно получить адреса.
// 
// Возвращаемое значение:
//  Массив - электронные адреса объекта.
//
Функция ВсеЭлектронныеАдресаОбъекта(Объект) Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Абоненты") Тогда
		Возврат ВсеЭлектронныеАдресаАбонента(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПользователиСервисов") Тогда
		Возврат ВсеЭлектронныеАдресаПользователяСервиса(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Пользователи") Тогда
		Возврат ВсеЭлектронныеАдресаПользователя(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ЛинииПоддержки") Тогда
		Возврат ВсеЭлектронныеАдресаЛинииПоддержки(Объект);
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
