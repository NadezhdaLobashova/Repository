
#Область ПрограммныйИнтерфейс

// Возвращает значение абонента обслуживающей организации абонента.
// Параметры:
//	Абонент - СправочникСсылка.Абоненты - абонент, для которого нужно вернуть абонента ОО.
//
Функция АбонентОбслуживающейОрганизацииАбонента(Абонент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаимоотношенияАбонентовСрезПоследних.ВедущийАбонент
		|ИЗ
		|	РегистрСведений.ВзаимоотношенияАбонентов.СрезПоследних КАК ВзаимоотношенияАбонентовСрезПоследних
		|ГДЕ
		|	ВзаимоотношенияАбонентовСрезПоследних.Абонент = &Абонент
		|	И ВзаимоотношенияАбонентовСрезПоследних.ВидВзаимоотношений = &ОбслуживающаяОрганизацияАбонент";
	Запрос.УстановитьПараметр("Абонент", Абонент);
	Запрос.УстановитьПараметр("ОбслуживающаяОрганизацияАбонент", Перечисления.ВидыВзаимоотношений.ОбслуживающаяОрганизацияАбонент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВедущийАбонент;
	Иначе 
		Возврат Справочники.Абоненты.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции 

// Возвращает значение абонента по пользователю сервиса.
// Параметры:
//	ПользовательСервиса - СправочникСсылка.ПользователиСервиса
//
Функция АбонентПользователяСервиса(ПользовательСервиса) Экспорт
	
	Запрос = Новый Запрос;
    
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗЛИЧНЫЕ
        |   ПользователиПриложений.Приложение.Абонент КАК АбонентПользователя
        |ИЗ
        |   РегистрСведений.ПользователиПриложений КАК ПользователиПриложений
        |ГДЕ
        |   ПользователиПриложений.ПользовательСервиса = &ПользовательСервиса
        |   И ПользователиПриложений.Разрешено";
    Запрос.УстановитьПараметр("ПользовательСервиса", ПользовательСервиса);
    Выборка = Запрос.Выполнить().Выбрать();
    Если Выборка.Количество() = 1 Тогда
        Выборка.Следующий();
        Возврат Выборка.АбонентПользователя;
    ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьТарифы") Тогда
        Пока Выборка.Следующий() Цикл
            Если Документы.Подписка.АктивнаяПодпискаАбонента(Выборка.АбонентПользователя) <> Неопределено Тогда
                Возврат Выборка.АбонентПользователя;
            КонецЕсли;
        КонецЦикла;
	КонецЕсли; 
    
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПользователиАбонентов.Абонент КАК АбонентПользователя
		|ИЗ
		|	РегистрСведений.ПользователиАбонентов КАК ПользователиАбонентов
		|ГДЕ
		|	ПользователиАбонентов.ПользовательСервиса = &ПользовательСервиса";
		
	Запрос.УстановитьПараметр("ПользовательСервиса", ПользовательСервиса);
	
	Выборка = Запрос.Выполнить().Выбрать();
    Если Выборка.Количество() = 1 Тогда
        Выборка.Следующий();
        Возврат Выборка.АбонентПользователя;
    ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьТарифы") Тогда
        Пока Выборка.Следующий() Цикл
            Если Документы.Подписка.АктивнаяПодпискаАбонента(Выборка.АбонентПользователя) <> Неопределено Тогда
                Возврат Выборка.АбонентПользователя;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли; 
    
    Возврат Справочники.Абоненты.ПустаяСсылка();

КонецФункции

// Возвращает массив абонентов пользователя сервиса.
//
Функция АбонентыПользователяСервиса(ПользовательСервиса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПользователиАбонентов.Абонент КАК АбонентПользователя
		|ИЗ
		|	РегистрСведений.ПользователиАбонентов КАК ПользователиАбонентов
		|ГДЕ
		|	ПользователиАбонентов.ПользовательСервиса = &ПользовательСервиса";
		
	Запрос.УстановитьПараметр("ПользовательСервиса", ПользовательСервиса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	АбонентыПользователя = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		АбонентыПользователя.Добавить(Выборка.АбонентПользователя);
	КонецЦикла; 
	
	Возврат АбонентыПользователя;
	
КонецФункции
	
// Генерирует сложный пароль
//
Функция НовыйПароль() Экспорт
	
	ЗаглавныеБуквы = "QWERTYUOPASDFGHJKLZXCVBNM"; // Без буквы I
	СтрочныеБуквы = "qwertyuiopasdfghjkzxcvbnm"; // Без буквы l
	Цифры = "1234567890";
	СпецСимволы = "_.,!?";
	
	Пароль = "";
	
	Генератор = Новый ГенераторСлучайныхЧисел;
	
	Пока СтрДлина(Пароль) < 8 Цикл
		
		Число = Генератор.СлучайноеЧисло(1, 6);
		
		Если Число = 1 Или Число = 2 Тогда
			
			Индекс = Генератор.СлучайноеЧисло(1, СтрДлина(ЗаглавныеБуквы));
			Пароль = Пароль + Сред(ЗаглавныеБуквы, Индекс, 1);
			
		ИначеЕсли Число = 3 Или Число = 4 Тогда
			
			Индекс = Генератор.СлучайноеЧисло(1, СтрДлина(СтрочныеБуквы));
			Пароль = Пароль + Сред(СтрочныеБуквы, Индекс, 1);
			
		ИначеЕсли Число = 5 Тогда
			
			Индекс = Генератор.СлучайноеЧисло(1, СтрДлина(Цифры));
			Пароль = Пароль + Сред(Цифры, Индекс, 1);
			
		Иначе
			
			Индекс = Генератор.СлучайноеЧисло(1, СтрДлина(СпецСимволы));
			Пароль = Пароль + Сред(СпецСимволы, Индекс, 1);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Пароль;
	
КонецФункции

// Процедура - Принять объекты в работу
//
// Параметры:
//  Ссылки - Массив - ссылки на объекты типа СправочникСсылка.Консультации, СправочникСсылка.Ошибки, 
//                    СправочникСсылка.Пожелания, ДокументСсылка.Обращение, ЗадачаСсылка.ЗадачаИсполнителя 
//
Процедура ПринятьОбъектыВРаботу(Ссылки, Знач Список = Неопределено) Экспорт
    
    Если Ссылки.Количество() = 0 Тогда
        Возврат;
    КонецЕсли; 
    
    Если ТипЗнч(Ссылки[0]) = Тип("СправочникСсылка.Консультации") Тогда
        ПринятьОбъектыБазыЗнанийВРаботу(Ссылки, Справочники.Консультации);
    ИначеЕсли ТипЗнч(Ссылки[0]) = Тип("СправочникСсылка.Ошибки") Тогда
        ПринятьОбъектыБазыЗнанийВРаботу(Ссылки, Справочники.Ошибки);
    ИначеЕсли ТипЗнч(Ссылки[0]) = Тип("СправочникСсылка.Пожелания") Тогда
        ПринятьОбъектыБазыЗнанийВРаботу(Ссылки, Справочники.Пожелания);
    ИначеЕсли ТипЗнч(Ссылки[0]) = Тип("ДокументСсылка.Обращение") Тогда  
        ПринятьОбращенияВРаботу(Ссылки);
    ИначеЕсли ТипЗнч(Ссылки[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
      	БизнесПроцессыИЗадачиВызовСервера.ПринятьЗадачиКИсполнению(Ссылки);
    Иначе
        ВызватьИсключение НСтр("ru='Не поддерживаемый объект перенаправления.'");
    КонецЕсли;
    
    Если Ссылки.Количество() > 0 И Список <> Неопределено Тогда
        Список.Обновить();
    КонецЕсли; 
    
КонецПроцедуры

// Процедура - Перевести объекты на линию
//
// Параметры:
//  Ссылки - Массив - ссылки на объекты типа СправочникСсылка.Консультации, СправочникСсылка.Ошибки, 
//                    СправочникСсылка.Пожелания, ДокументСсылка.Обращение 
//
Процедура ПеревестиОбъектыНаЛинию(Ссылки, Список = Неопределено) Экспорт
    
    Если Ссылки.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;
    
    Если ТипЗнч(Ссылки[0]) = Тип("СправочникСсылка.Консультации") Тогда
        ПеревестиОбъектыБазыЗнанийНаЛинию(Ссылки, Справочники.Консультации);
    ИначеЕсли ТипЗнч(Ссылки[0]) = Тип("СправочникСсылка.Ошибки") Тогда
        ПеревестиОбъектыБазыЗнанийНаЛинию(Ссылки, Справочники.Ошибки);
    ИначеЕсли ТипЗнч(Ссылки[0]) = Тип("СправочникСсылка.Пожелания") Тогда
        ПеревестиОбъектыБазыЗнанийНаЛинию(Ссылки, Справочники.Пожелания);
    ИначеЕсли ТипЗнч(Ссылки[0]) = Тип("ДокументСсылка.Обращение") Тогда  
        ПеревестиОбращенияНаЛинию(Ссылки);
    Иначе
        ВызватьИсключение НСтр("ru='Не поддерживаемый объект перенаправления.'");
    КонецЕсли;
    
    Если Ссылки.Количество() > 0 И Список <> Неопределено Тогда
        Список.Обновить();
    КонецЕсли; 
    
 КонецПроцедуры

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик регламентного задания РасчетДлительностиОбработкиАктивныхОбращений
//
Процедура РасчетДлительностиОбработкиАктивныхОбращений() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	РегистрыСведений.ДлительностьОбработкиОбращений.РассчитатьДлительностьОбработкиАктивныхОбращений();
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ПринятьОбращенияВРаботу(Ссылки)
	
	НовыйСписокСсылок = Новый Массив();
	
	НачатьТранзакцию();
	
	Попытка
		Документы.Обращение.ЗаблокироватьОбъекты(Ссылки);
		ТекущийПользователь = Пользователи.АвторизованныйПользователь();
		Сведения = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
		Для каждого Ссылка Из Ссылки Цикл
			Если ТипЗнч(Ссылка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
				Продолжить;
			КонецЕсли;
			Объект = Ссылка.ПолучитьОбъект();
			Если Не Объект.ПроверитьЗаполнение() Тогда
				Продолжить;
			КонецЕсли;
			Объект.Заблокировать();
			Объект.ОбслуживающаяОрганизация = Сведения.ОбслуживающаяОрганизация;
			Объект.ЛинияПоддержки = Сведения.ЛинияПоддержки;
			Если Объект.Состояние = Перечисления.СостоянияОбращений.Новое Или Объект.Состояние = Перечисления.СостоянияОбращений.Закрыто Тогда
				Объект.Состояние = Перечисления.СостоянияОбращений.Расследование;
			КонецЕсли; 
			Объект.Исполнитель = ТекущийПользователь;
            Попытка
			    Объект.Записать(РежимЗаписиДокумента.Проведение);
                НовыйСписокСсылок.Добавить(Ссылка);
            Исключение
                // Если документ не записался, мы его пропускаем.
            КонецПопытки;    
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Ссылки = НовыйСписокСсылок;
	
КонецПроцедуры

Процедура ПеревестиОбращенияНаЛинию(Ссылки)
	
	НовыйМассивОбращений = Новый Массив();
	
	НачатьТранзакцию();
	
	Попытка
		Документы.Обращение.ЗаблокироватьОбъекты(Ссылки);
		
		ТекущийПользователь = Пользователи.АвторизованныйПользователь();
		СведенияОПользователе = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
		
		Для каждого Ссылка Из Ссылки Цикл
			
			Если ТипЗнч(Ссылка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбращениеОбъект = Ссылка.ПолучитьОбъект();
			Если Не ОбращениеОбъект.ПроверитьЗаполнение() Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбращениеОбъект.Исполнитель = ТекущийПользователь Тогда
				ОбращениеОбъект.Заблокировать();
				ОбращениеОбъект.ОбслуживающаяОрганизация = СведенияОПользователе.ОбслуживающаяОрганизация;
				ОбращениеОбъект.ЛинияПоддержки = СведенияОПользователе.ЛинияПоддержки;
				ОбращениеОбъект.Исполнитель = СведенияОПользователе.ЛинияПоддержки;
				ОбращениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
				НовыйМассивОбращений.Добавить(Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Ссылки = НовыйМассивОбращений;
	
КонецПроцедуры

Процедура ПринятьОбъектыБазыЗнанийВРаботу(Ссылки, МенеджерОбъектов)
	
	ОбработанныеСсылки = Новый Массив();
	
	НачатьТранзакцию();
	
	Попытка
		МенеджерОбъектов.ЗаблокироватьОбъекты(Ссылки);
		СведенияОПользователе = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
		Для каждого Ссылка Из Ссылки Цикл
			Если ТипЗнч(Ссылка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
				Продолжить;
			КонецЕсли;
			Объект = Ссылка.ПолучитьОбъект();
			Если Не Объект.ПроверитьЗаполнение() Тогда
				Продолжить;
			КонецЕсли;
			Объект.Заблокировать();
			Объект.ОбслуживающаяОрганизация = СведенияОПользователе.ОбслуживающаяОрганизация;
			Объект.ЛинияПоддержки = СведенияОПользователе.ЛинияПоддержки;
			Объект.Ответственный = Пользователи.АвторизованныйПользователь();
			Объект.Записать();
			ОбработанныеСсылки.Добавить(Ссылка);
		КонецЦикла;
        
        ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Ссылки = ОбработанныеСсылки;
	
КонецПроцедуры

Процедура ПеревестиОбъектыБазыЗнанийНаЛинию(Ссылки, МенеджерОбъектов)
	
	ОбработанныеСсылки = Новый Массив();
	
	НачатьТранзакцию();
	
	Попытка
		МенеджерОбъектов.ЗаблокироватьОбъекты(Ссылки);
		
		ТекущийПользователь = Пользователи.АвторизованныйПользователь();
		СведенияОПользователе = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
		
		Для каждого Ссылка Из Ссылки Цикл
			
			Если ТипЗнч(Ссылка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
				Продолжить;
			КонецЕсли;
			
			Объект = Ссылка.ПолучитьОбъект();
			Если Не Объект.ПроверитьЗаполнение() Тогда
				Продолжить;
			КонецЕсли;
			
			Если Объект.Ответственный = ТекущийПользователь Тогда
				Объект.Заблокировать();
				Объект.ОбслуживающаяОрганизация = СведенияОПользователе.ОбслуживающаяОрганизация;
			    Объект.ЛинияПоддержки = СведенияОПользователе.ЛинияПоддержки;
				Объект.Ответственный = СведенияОПользователе.ЛинияПоддержки;
				Объект.Записать();
				ОбработанныеСсылки.Добавить(Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Ссылки = ОбработанныеСсылки;
	
КонецПроцедуры

Процедура ЗаполнитьЛинииПоддержкиКарточекБазыЗнаний_1_0_11_1(Параметры) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.УстановитьПараметр("ПустаяЛиния", Справочники.ЛинииПоддержки.ПустаяСсылка());
    
    ТипыКарточек = СтрРазделить("Консультации,Ошибки,Пожелания", ",", Ложь);
    Для каждого ТипКарточки Из ТипыКарточек Цикл
        
        Запрос.Текст = 
        	"ВЫБРАТЬ
            |   Карточки.Ссылка,
            |   ЕСТЬNULL(СведенияОПользователях.ЛинияПоддержки, Карточки.Ответственный) КАК ЛинияПоддержки
            |ИЗ
            |   Справочник.Консультации КАК Карточки
            |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
            |       ПО Карточки.Ответственный = СведенияОПользователях.Пользователь
            |ГДЕ
            |   Карточки.ЛинияПоддержки = &ПустаяЛиния";
        
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "Консультации", ТипКарточки);	
        
    КонецЦикла; 
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        КарточкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
        КарточкаОбъект.ОбменДанными.Загрузка = Истина;
        КарточкаОбъект.ЛинияПоддержки = Выборка.ЛинияПоддержки;
        КарточкаОбъект.Записать();
    КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 
