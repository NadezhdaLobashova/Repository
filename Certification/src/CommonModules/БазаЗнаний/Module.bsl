
#Область ПрограммныйИнтерфейс

// Вызывается в обработчике ПередЗаписью в карточках базы знаний.
//
// Параметры:
//  Объект - СправочникОбъект.Консультация, СправочникОбъект.Ошибка, СправочникОбъект.Пожелание - объект базы знаний.
//
Процедура ПередЗаписью(Объект) Экспорт
    
    Объект.ДатаИзменения = ТекущаяУниверсальнаяДата();
	Объект.АвторИзменения = Пользователи.ТекущийПользователь();
    
    ОсновныеВитрины = Новый Соответствие;
    СеврисыВитрин = Новый Соответствие;
    Для каждого Строка Из Объект.Сервисы Цикл
        Если Не ЗначениеЗаполнено(Строка.Витрина) Тогда
            Строка.Витрина = ОсновныеВитрины.Получить(Строка.Сервис);
            Если Не ЗначениеЗаполнено(Строка.Витрина) Тогда
                ОсновнаяВитрина = БазаЗнанийПовтИсп.ОсновнаяВитринаСервиса(Строка.Сервис);
                Строка.Витрина = ОсновнаяВитрина;
                ОсновныеВитрины.Вставить(Строка.Сервис, ОсновнаяВитрина);
            КонецЕсли;
        ИначеЕсли Не ЗначениеЗаполнено(Строка.Сервис) Тогда
            Строка.Сервис = СеврисыВитрин.Получить(Строка.Витрина);
            Если Не ЗначениеЗаполнено(Строка.Сервис) Тогда
                СервисВитрины = БазаЗнанийПовтИсп.СервисВитрины(Строка.Витрина);
                Строка.Сервис = СервисВитрины;
                СеврисыВитрин.Вставить(Строка.Витрина, СервисВитрины);
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    
    Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВитринСервисов") Тогда
        Объект.СервисыСтрока = ОбщегоНазначенияУСП.КолонкаТаблицыСтрокой(Объект.Сервисы, "Витрина");
    Иначе
        Объект.СервисыСтрока = ОбщегоНазначенияУСП.КолонкаТаблицыСтрокой(Объект.Сервисы, "Сервис");
    КонецЕсли;
    
    Объект.КомпонентыСтрока = ОбщегоНазначенияУСП.КолонкаТаблицыСтрокой(Объект.Компоненты, "Компонент");
	Объект.РазделыСтрока = ОбщегоНазначенияУСП.КолонкаТаблицыСтрокой(Объект.Разделы, "Раздел");
    
    Если НЕ Объект.Ссылка.Пустая() Тогда
		ИсходныеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, 
			"ОбслуживающаяОрганизация, ЛинияПоддержки, Ответственный, Состояние, ПометкаУдаления");
	Иначе 
		ИсходныеРеквизиты = Новый Структура(
			"ОбслуживающаяОрганизация, ЛинияПоддержки, Ответственный, Состояние, ПометкаУдаления",
			Справочники.ОбслуживающиеОрганизации.ПустаяСсылка(),
            Справочники.ЛинииПоддержки.ПустаяСсылка(),
			Неопределено,
            Неопределено, 
            Ложь);
	КонецЕсли;
			
	Если Не Объект.Ссылка.Пустая() Тогда
		Если ИсходныеРеквизиты.ОбслуживающаяОрганизация <> Объект.ОбслуживающаяОрганизация
		 ИЛИ ИсходныеРеквизиты.ЛинияПоддержки <> Объект.ЛинияПоддержки
		 ИЛИ ИсходныеРеквизиты.Ответственный <> Объект.Ответственный Тогда
			Объект.ДополнительныеСвойства.Вставить("ИзменилисьРеквизитыАдресации", Истина);
			УстановитьДополнительныеСвойстваИзмененияОтветственного(Объект, ИсходныеРеквизиты);
		КонецЕсли;
	КонецЕсли;
	
    Для каждого Строка Из Объект.Сервисы Цикл
    	Если Не ЗначениеЗаполнено(Строка.Витрина) Тогда
            Строка.Витрина = БазаЗнанийПовтИсп.ОсновнаяВитринаСервиса(Строка.Сервис);    
        КонецЕсли; 
    КонецЦикла; 
    
    Объект.ДополнительныеСвойства.Вставить("ИсходнаяПометкаУдаления", ИсходныеРеквизиты.ПометкаУдаления);
	Объект.ДополнительныеСвойства.Вставить("ИсходнаяОрганизация", ИсходныеРеквизиты.ОбслуживающаяОрганизация);
	Объект.ДополнительныеСвойства.Вставить("ИсходнаяЛинияПоддержки", ИсходныеРеквизиты.ЛинияПоддержки);
    Объект.ДополнительныеСвойства.Вставить("ИсходныйОтветственный", ИсходныеРеквизиты.Ответственный);
    Объект.ДополнительныеСвойства.Вставить("ИзменилосьСостояние", ИсходныеРеквизиты.Состояние <> Объект.Состояние);

КонецПроцедуры

// Вызывается в обработчике ПриЗаписи в карточках базы знаний.
//
// Параметры:
//  Объект - СправочникОбъект.Консультация, СправочникОбъект.Ошибка, СправочникОбъект.Пожелание - объект базы знаний.
//
Процедура ПриЗаписи(Объект) Экспорт
    
    МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
    
	Если Объект.ЭтоНовый() Тогда
		БизнесСобытия.ЗарегистрироватьСобытие(Объект.Ссылка, МенеджерОбъекта.ВидСобытия_Создание());
	Иначе
		БизнесСобытия.ЗарегистрироватьСобытие(Объект.Ссылка, МенеджерОбъекта.ВидСобытия_Изменение());
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ОбращениеОснование") И ЗначениеЗаполнено(Объект.ДополнительныеСвойства.ОбращениеОснование) Тогда
		ПрисоединенныеФайлыУСП.СкопироватьПрисоединенныеФайлыИзОбращенияВКарточку(Объект.ДополнительныеСвойства.ОбращениеОснование, Объект.Ссылка); 
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("ИзменилисьРеквизитыАдресации") И Объект.ДополнительныеСвойства.ИзменилисьРеквизитыАдресации Тогда
		ЗарегистрироватьПеренаправлениеОбъекта(Объект);
    КонецЕсли;
    
    Если Объект.ДополнительныеСвойства.ИсходнаяПометкаУдаления <> Объект.ПометкаУдаления Тогда
        
        Запрос = Новый Запрос;
        Запрос.Текст = 
        	"ВЫБРАТЬ
            |	ПроизошедшиеБизнесСобытия.Ссылка
            |ИЗ
            |	Справочник.ПроизошедшиеБизнесСобытия КАК ПроизошедшиеБизнесСобытия
            |ГДЕ
            |	ПроизошедшиеБизнесСобытия.Источник = &Источник";
        
        Запрос.УстановитьПараметр("Источник", Объект.Ссылка);
        
        Результат = Запрос.Выполнить();
        Если Не Результат.Пустой() Тогда
            УстановитьПривилегированныйРежим(Истина);
        КонецЕсли; 
        Выборка = Результат.Выбрать();
        Пока Выборка.Следующий() Цикл
            СобытиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
            СобытиеОбъект.УстановитьПометкуУдаления(Объект.ПометкаУдаления);
        КонецЦикла;
        
    КонецЕсли; 
	
КонецПроцедуры
 
// Вызывается в обработчиках ПриКописровании и ОбработкаЗаполнения в карточках базы знаний.
//
// Параметры:
//  Объект - СправочникОбъект.Консультация, СправочникОбъект.Ошибка, СправочникОбъект.Пожелание - объект базы знаний.
//
Процедура ПриКопированииПриЗаполнении(Объект) Экспорт
    
	Объект.ДатаРегистрации = ТекущаяДатаСеанса();
	Объект.Автор = Пользователи.АвторизованныйПользователь();
	Объект.Ответственный = Пользователи.АвторизованныйПользователь();
    
    СведенияОПользователе = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
	Объект.ОбслуживающаяОрганизация = СведенияОПользователе.ОбслуживающаяОрганизация;
    Объект.ЛинияПоддержки = СведенияОПользователе.ЛинияПоддержки;
    
КонецПроцедуры

// Вызывается в обработчике ПриСозданииНаСервере в форме карточки базы знаний.
//
// Параметры:
//  Форма - УправляемаяФорма - форма карточки базы знаний.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Форма.ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
    Форма.ИспользоватьНесколькоВитринСервисов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВитринСервисов");
	Форма.Элементы.Комментарии.ИзменятьСоставСтрок = Форма.ЭтоПолноправныйПользователь;
	Форма.Элементы.КомментарииУдалить.Видимость = Форма.ЭтоПолноправныйПользователь;
    Форма.ИсходноеСостояние = Форма.Объект.Состояние;
    
    Форма.ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	СведенияОПользователе = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
	Форма.ЛинияПоддержки = СведенияОПользователе.ЛинияПоддержки;
	ОбслуживающаяОрганизация = СведенияОПользователе.ОбслуживающаяОрганизация;
	Форма.Комментарии.Параметры.УстановитьЗначениеПараметра("Владелец", Форма.Объект.Ссылка);
	Если ОбслуживающаяОрганизация <> Справочники.ОбслуживающиеОрганизации.СлужбаПоддержки Тогда
		Форма.Элементы.ВнутренняяПереписка.Видимость = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Комментарии, "ВнутренняяПереписка", Ложь, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Иначе
		Форма.Элементы.ВнутренняяПереписка.Видимость = Истина;
		Форма.ВнутренняяПереписка = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
        Форма.Описание.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(" "));
		Форма.ТолькоЧтоСозданнаяКарточка = Истина;
        
        Если ТипЗнч(Форма.Параметры.Основание) = Тип("Структура") Тогда
			Если Форма.Параметры.Основание.Свойство("Обращение") Тогда
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Форма.Параметры.Основание.Обращение, "Тема, ОписаниеХранилище");
				Форма.Объект.Наименование = ЗначенияРеквизитов.Тема;
				ОбщегоНазначенияУСП.УстановитьФорматированноеОписаниеИзХранилища(Форма.Описание, ЗначенияРеквизитов.ОписаниеХранилище);
			КонецЕсли; 
			
			Если Форма.Параметры.Основание.Свойство("Сервис") Тогда
				НоваяСтрока = Форма.Объект.Сервисы.Добавить();
				НоваяСтрока.Сервис = Форма.Параметры.Основание.Сервис;
                Если Форма.Параметры.Основание.Свойство("Витрина") Тогда
				    НоваяСтрока.Витрина = Форма.Параметры.Основание.Витрина;
                КонецЕсли;
			КонецЕсли; 
			
			Если Форма.Параметры.Основание.Свойство("Компоненты") Тогда
				Для каждого Компонент Из Форма.Параметры.Основание.Компоненты Цикл
					НоваяСтрока = Форма.Объект.Компоненты.Добавить();
					НоваяСтрока.Компонент = Компонент;
				КонецЦикла; 
			КонецЕсли; 
			
			Если Форма.Параметры.Основание.Свойство("Разделы") Тогда
				Для каждого Раздел Из Форма.Параметры.Основание.Разделы Цикл
					НоваяСтрока = Форма.Объект.Разделы.Добавить();
					НоваяСтрока.Раздел = Раздел;
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли;
		
		ЗаполнитьСпискиПоТабличнымЧастям(Форма, Форма.Объект);
        
		Если ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
			ОбщегоНазначенияУСП.УстановитьФорматированноеОписаниеИзХранилища(Форма.Описание, Форма.Параметры.ЗначениеКопирования.ОписаниеХранилище);
		КонецЕсли;
        
	КонецЕсли;
    
    ШаблонПараметровВыбора = Новый Массив();
	ШаблонПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Форма.СервисСписок.ВыгрузитьЗначения()));
	Форма.Элементы.КомпонентСписок.ПараметрыВыбора = Новый ФиксированныйМассив(ШаблонПараметровВыбора);
    
  	Форма.ОтветственныйСтрокой = ОбщегоНазначенияУСПКлиентСервер.ОписаниеИсполнителя(
        Форма.Объект.ОбслуживающаяОрганизация, Форма.Объект.ЛинияПоддержки, Форма.Объект.Ответственный);

	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Форма.Элементы.ОписаниеВставитьКартинкуИзБуфера.Видимость = Ложь;
    КонецЕсли;
    
    УстановитьУсловноеОформлениеКарточки(Форма);
    
КонецПроцедуры

Процедура ФормаВыбораПриСозданииНаСервере(Форма) Экспорт
    
    Параметры = Форма.Параметры;
    
    Параметры.Свойство("Сервис", Форма.Сервис);
    Параметры.Свойство("Витрина", Форма.Витрина);
	Параметры.Свойство("Обращение", Форма.Обращение);
    
    Если ЗначениеЗаполнено(Форма.Обращение) Тогда
		РеквизитыОбращения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Форма.Обращение, "Сервис, Витрина, Компонент, Раздел");
	Иначе
		РеквизитыОбращения = Новый Структура("Сервис, Витрина, Компонент, Раздел", 
			Справочники.Сервисы.ПустаяСсылка(),
			Справочники.Витрины.ПустаяСсылка(),
			Справочники.КомпонентыСервиса.ПустаяСсылка(),
			Справочники.Разделы.ПустаяСсылка());
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Сервис) Тогда
		РеквизитыОбращения.Свойство("Сервис", Форма.Сервис);
    КонецЕсли;
    
	Если Не ЗначениеЗаполнено(Форма.Витрина) Тогда
		РеквизитыОбращения.Свойство("Витрина", Форма.Витрина);
	КонецЕсли;
	
	Если Параметры.Свойство("Компоненты") И Параметры.Компоненты <> Неопределено Тогда
		Если Не (Параметры.Компоненты.Количество() = 1 И Не ЗначениеЗаполнено(Параметры.Компоненты[0])) Тогда
			Форма.КомпонентСписок.ЗагрузитьЗначения(Параметры.Компоненты);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыОбращения.Компонент) Тогда
		Форма.КомпонентСписок.Добавить(РеквизитыОбращения.Компонент);
	КонецЕсли;
	
	Если Параметры.Свойство("Разделы") И Параметры.Разделы <> Неопределено Тогда
		Если Не (Параметры.Разделы.Количество() = 1 И Не ЗначениеЗаполнено(Параметры.Разделы[0])) Тогда
			Форма.РазделСписок.ЗагрузитьЗначения(Параметры.Разделы);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыОбращения.Раздел) Тогда
		Форма.РазделСписок.Добавить(РеквизитыОбращения.Раздел);
	КонецЕсли;
	
	УстановитьОтборыСписков(Форма);
	
	ПараметрыДляВыбора = Новый Массив();
	ПараметрыДляВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Форма.Сервис));
	Форма.Элементы.КомпонентСписок.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыДляВыбора);
	
	Форма.КоличествоДнейОтбораОбращений = 10;
	ЗаполнитьТоп10(Форма);
    
КонецПроцедуры

Процедура УстановитьОтборыСписков(Форма) Экспорт
	
	УстановитьПараметрыСписка(Форма);
	ЗаполнитьТоп10(Форма);
	
КонецПроцедуры

// Принимает карточку базы знаний работу текущего пользователя.
//
// Параметры:
//  Форма - УправляемаяФорма - форма объекта карточки базы знаний.
// 
// Возвращаемое значение:
//   - Булево - Истина, если принятие в работу удалось, в противном случае - Ложь.
//
Функция ПринятьВРаботу(Форма) Экспорт
    
    // Получение свередений о текущем пользователе.
	СведенияОПользователе = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
    
    // Установка значений адресации.
	Форма.Объект.ОбслуживающаяОрганизация = СведенияОПользователе.ОбслуживающаяОрганизация;
    Форма.Объект.ЛинияПоддержки = СведенияОПользователе.ЛинияПоддержки;
	Форма.Объект.Ответственный = Пользователи.ТекущийПользователь();
    
    // Заполнение строки отображения ответственного.
    Форма.ОтветственныйСтрокой = ОбщегоНазначенияУСПКлиентСервер.ОписаниеИсполнителя(
        Форма.Объект.ОбслуживающаяОрганизация, 
        Форма.Объект.ЛинияПоддержки, 
        Форма.Объект.Ответственный);
	
	Возврат Форма.Записать();
	
КонецФункции

// Переводит карточку базы знаний на линию поддержки текущего пользователя.
//
// Параметры:
//  Форма - УправляемаяФорма - форма объекта карточки базы знаний.
// 
// Возвращаемое значение:
//   - Булево - Истина, если перевод удался, в противном случае - Ложь.
//
Функция ПеревестиНаЛинию(Форма) Экспорт
    
    // Получение свередений о текущем пользователе.
	СведенияОПользователе = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
    
    // Можно перевести карточку на линию текущего пользователя, только если текущий пользователь - ответственный по карточке.
	Если Форма.Объект.Ответственный = Пользователи.ТекущийПользователь() Тогда
        
        // Установка значений адресации.
		Форма.Объект.ОбслуживающаяОрганизация = СведенияОПользователе.ОбслуживающаяОрганизация;
        Форма.Объект.ЛинияПоддержки = СведенияОПользователе.ЛинияПоддержки;
		Форма.Объект.Ответственный = СведенияОПользователе.ЛинияПоддержки;
        
        // Заполнение строки отображения ответственного.
        Форма.ОтветственныйСтрокой = ОбщегоНазначенияУСПКлиентСервер.ОписаниеИсполнителя(
            Форма.Объект.ОбслуживающаяОрганизация, 
            Форма.Объект.ЛинияПоддержки, 
            Форма.Объект.Ответственный);
            
        Возврат Форма.Записать();
            
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Действие недоступно для текущего объекта.'");
		Сообщение.Сообщить();
        
        Возврат Ложь;
        
    КонецЕсли;
	
КонецФункции

// Вставляет картинку из буфера в форматированный документ.
//
// Параметры:
//  Форма - УправляемаяФорма - форма объекта карточки базы знаний.
//  АдресКартинки - Строка - адрес временного хранилища картинки.
//  ИмяРеквизитаРаздела - Строка - имя реквизита форматированного документа для вставки картинки.
//
Процедура ВставитьКартинкуИзБуфера(Форма, АдресКартинки, ИмяРеквизитаРаздела) Экспорт
    
	Начало = Неопределено;
	Окончание = Неопределено;
	Форма.Элементы[ИмяРеквизитаРаздела].ПолучитьГраницыВыделения(Начало, Окончание);
	Если Окончание = Неопределено Тогда
		ЗакладкаДляВставки = Форма[ИмяРеквизитаРаздела].ПолучитьЗакладкуНачала();
	Иначе
		ЗакладкаДляВставки = Окончание;
	КонецЕсли; 
	
	Форма[ИмяРеквизитаРаздела].Вставить(ЗакладкаДляВставки, ПолучитьИзВременногоХранилища(АдресКартинки), Тип("КартинкаФорматированногоДокумента"));
    
КонецПроцедуры

// Возвращает принадлежность карточки базы знаний по первому значению табличной части Сервисы
// Параметры:
//   Карточка - СправочникСсылка.Пожелание - карточка базы знаний, по которой нужно вернуть принадлежность.
//
Функция ОсновнаяПринадлежностьКарточки(Карточка) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = 
    	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Принадлежность.Сервис,
        |   Принадлежность.Витрина
        |ИЗ
        |   Справочник.Консультации.Сервисы КАК Принадлежность
        |ГДЕ
        |   Принадлежность.НомерСтроки = &НомерСтроки
        |   И Принадлежность.Ссылка = &Карточка";
    
    Запрос.УстановитьПараметр("Карточка", Карточка);
    Запрос.УстановитьПараметр("НомерСтроки", 1);
    
    Если ТипЗнч(Карточка) = Тип("СправочникСсылка.Пожелания") Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "Консультации", "Пожелания");
    ИначеЕсли ТипЗнч(Карточка) = Тип("СправочникСсылка.Ошибки") Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "Консультации", "Ошибки");
    КонецЕсли;
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Принадлежность = Новый Структура;
    Принадлежность.Вставить("Сервис", Справочники.Сервисы.ПустаяСсылка());
    Принадлежность.Вставить("Витрина", Справочники.Витрины.ПустаяСсылка());
    
    Если Выборка.Следующий() Тогда
        ЗаполнитьЗначенияСвойств(Принадлежность, Выборка);
    КонецЕсли;
     
    Возврат Принадлежность;
    
КонецФункции

Процедура ЗаполнитьСпискиПоТабличнымЧастям(Форма, Знач Объект) Экспорт
    
    Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВитринСервисов") Тогда
        ОбщегоНазначенияУСП.ЗаполнитьСписокИзТаблицы(Форма.ВитринаСписок, Объект.Сервисы, "Витрина");
        Для каждого Строка Из Форма.ВитринаСписок Цикл
            СтрокаСервиса = Форма.СервисСписок.Добавить(БазаЗнанийПовтИсп.СервисВитрины(Строка.Значение));
        КонецЦикла; 
    Иначе    
        ОбщегоНазначенияУСП.ЗаполнитьСписокИзТаблицы(Форма.СервисСписок, Объект.Сервисы, "Сервис");
        Для каждого Строка Из Форма.СервисСписок Цикл
            СтрокаВитрины = Форма.ВитринаСписок.Добавить(БазаЗнанийПовтИсп.ОсновнаяВитринаСервиса(Строка.Значение));
        КонецЦикла; 
    КонецЕсли;
    
    ОбщегоНазначенияУСП.ЗаполнитьСписокИзТаблицы(Форма.КомпонентСписок, Объект.Компоненты, "Компонент");
    ОбщегоНазначенияУСП.ЗаполнитьСписокИзТаблицы(Форма.РазделСписок, Объект.Разделы, "Раздел");

КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиПоСпискам(Объект, Форма) Экспорт
    
    Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВитринСервисов") Тогда
	    ОбщегоНазначенияУСП.ЗаполнитьТаблицуИзСписка(Объект.Сервисы, Форма.ВитринаСписок, "Витрина");
        Для каждого Строка Из Объект.Сервисы Цикл
        	Строка.Сервис = БазаЗнанийПовтИсп.СервисВитрины(Строка.Витрина);
        КонецЦикла; 
    Иначе    
	    ОбщегоНазначенияУСП.ЗаполнитьТаблицуИзСписка(Объект.Сервисы, Форма.СервисСписок, "Сервис");
        Для каждого Строка Из Объект.Сервисы Цикл
        	Строка.Витрина = БазаЗнанийПовтИсп.ОсновнаяВитринаСервиса(Строка.Сервис);
        КонецЦикла; 
    КонецЕсли;
    
	ОбщегоНазначенияУСП.ЗаполнитьТаблицуИзСписка(Объект.Компоненты, Форма.КомпонентСписок, "Компонент");
	ОбщегоНазначенияУСП.ЗаполнитьТаблицуИзСписка(Объект.Разделы, Форма.РазделСписок, "Раздел");
    
КонецПроцедуры

Процедура УстановитьПараметрыВыбораВладельца(Элемент, Значение) Экспорт
	
    ПараметрыДляВыбора = Новый Массив();
	ПараметрыДляВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Значение));
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыДляВыбора);
	
КонецПроцедуры

Процедура ЗаполнитьТоп10(Форма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
        |   Карточки.Ссылка,
        |   Карточки.Наименование КАК Наименование,
        |   КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Обращение.Ссылка) КАК КоличествоОбращений
        |ИЗ
        |   Справочник.Консультации КАК Карточки
        |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.Обращение КАК Обращение
        |       ПО Карточки.Ссылка = Обращение.КарточкаБазыЗнаний
        |ГДЕ
        |   ВЫБОР
        |           КОГДА &ОтборСервисы = ЛОЖЬ
        |               ТОГДА ИСТИНА
        |           ИНАЧЕ Карточки.Сервисы.Сервис В (&Сервисы)
        |       КОНЕЦ
        |   И ВЫБОР
        |           КОГДА &ОтборВитрины = ЛОЖЬ
        |               ТОГДА ИСТИНА
        |           ИНАЧЕ Карточки.Сервисы.Витрина В (&Витрины)
        |       КОНЕЦ
        |   И ВЫБОР
        |           КОГДА &ОтборКомпоненты = ЛОЖЬ
        |               ТОГДА ИСТИНА
        |           ИНАЧЕ Карточки.Компоненты.Компонент В (&Компоненты)
        |       КОНЕЦ
        |   И ВЫБОР
        |           КОГДА &ОтборРазделы = ЛОЖЬ
        |               ТОГДА ИСТИНА
        |           ИНАЧЕ Карточки.Разделы.Раздел В (&Разделы)
        |       КОНЕЦ
        |   И &ОтборЗакрытые
        |
        |СГРУППИРОВАТЬ ПО
        |   Карточки.Ссылка,
        |   Карточки.Наименование
        |
        |УПОРЯДОЧИТЬ ПО
        |   КоличествоОбращений УБЫВ";
        
    Если Форма.ИмяФормы = "Справочник.Ошибки.Форма.ФормаВыбора" Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "Консультации", "Ошибки");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборЗакрытые", 
            "И ВЫБОР КОГДА &ОтображатьЗакрытые ТОГДА ИСТИНА
            |		ИНАЧЕ НЕ Карточки.Состояние = &СостояниеЗакрытых
            |	КОНЕЦ");
    	Запрос.УстановитьПараметр("ОтображатьЗакрытые", Форма.ОтображатьЗакрытые);
    	Запрос.УстановитьПараметр("СостояниеЗакрытых", Перечисления.СостоянияОшибок.Исправлена);
    ИначеЕсли Форма.ИмяФормы = "Справочник.Пожелания.Форма.ФормаВыбора" Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "Консультации", "Пожелания");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборОшибки", 
            "И ВЫБОР КОГДА &ОтборЗакрытые ТОГДА ИСТИНА
            |		ИНАЧЕ НЕ Карточки.Состояние В (&СостояниеЗакрытых)
            |	КОНЕЦ");
        ЗакрытыеПожелания = Новый Массив;
        ЗакрытыеПожелания.Добавить(Перечисления.СостоянияПожеланий.Реализовано);
        ЗакрытыеПожелания.Добавить(Перечисления.СостоянияПожеланий.Отклонено);
    	Запрос.УстановитьПараметр("ОтображатьЗакрытые", Форма.ОтображатьЗакрытые);
	    Запрос.УстановитьПараметр("СостояниеЗакрытых", ЗакрытыеПожелания);
    КонецЕсли;
    
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборЗакрытые", "");
    
	Запрос.УстановитьПараметр("ОтборСервисы", ЗначениеЗаполнено(Форма.Сервис));
	Запрос.УстановитьПараметр("ОтборВитрины", ЗначениеЗаполнено(Форма.Витрина));
	Запрос.УстановитьПараметр("ОтборКомпоненты", Форма.КомпонентСписок.Количество() > 0);
	Запрос.УстановитьПараметр("ОтборРазделы", Форма.РазделСписок.Количество() > 0);
	Запрос.УстановитьПараметр("Сервисы", Форма.Сервис);
	Запрос.УстановитьПараметр("Витрины", Форма.Витрина);
	Запрос.УстановитьПараметр("Компоненты", Форма.КомпонентСписок.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Разделы", Форма.РазделСписок.ВыгрузитьЗначения());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Форма.Топ10.Загрузить(РезультатЗапроса.Выгрузить());
	
	ПрописьЧисла     = ЧислоПрописью(Форма.КоличествоДнейОтбораОбращений, "Л = ru_RU", НСтр("ru = ',,,,,,,,0'"));
	ПрописьЧислаИДни = ЧислоПрописью(Форма.КоличествоДнейОтбораОбращений, "Л = ru_RU", НСтр("ru = 'день, дня, дней,,,,,,0'"));
	ЧислоИДни = СтрЗаменить(ПрописьЧислаИДни, ПрописьЧисла, Формат(Форма.КоличествоДнейОтбораОбращений, "ЧГ=") + " ");
	
	Форма.Элементы.ГиперссылкаНастроить.Заголовок = СтрШаблон(НСтр("ru='Отбор обращений за %1'"), ЧислоИДни); 
	
КонецПроцедуры
 
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции
    
Процедура УстановитьУсловноеОформлениеКарточки(Форма)
	
	Форма.УсловноеОформление.Элементы.Очистить();
	
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("КомментарииДата");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("КомментарииАвтор");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Комментарии.Автор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВыделенныйКурсивныйШрифт);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветАвтораКомментария);
	
КонецПроцедуры

Процедура УстановитьДополнительныеСвойстваИзмененияОтветственного(Объект, ИсходныеРеквизиты)
	
    ДополнительныеСвойства = Объект.ДополнительныеСвойства;
    
    Если ИсходныеРеквизиты.ОбслуживающаяОрганизация <> Объект.ОбслуживающаяОрганизация 
	 ИЛИ ИсходныеРеквизиты.Ответственный <> Объект.Ответственный Тогда
		
		ДополнительныеСвойства.Вставить("ИсходныйОтветственный", ИсходныеРеквизиты.Ответственный);
		ДополнительныеСвойства.Вставить("ИсходнаяОрганизация", ИсходныеРеквизиты.ОбслуживающаяОрганизация);
		ДополнительныеСвойства.Вставить("ИсходнаяЛинияПоддержки", ИсходныеРеквизиты.ЛинияПоддержки);
		ДополнительныеСвойства.Вставить("Ответственный", Объект.Ответственный);
		ДополнительныеСвойства.Вставить("Организация", Объект.ОбслуживающаяОрганизация);
		ДополнительныеСвойства.Вставить("ЛинияПоддержки", Объект.ЛинияПоддержки);
		
	КонецЕсли;
	
КонецПроцедуры

// Делает запись бизнес-события перенаправления объекта
//
Процедура ЗарегистрироватьПеренаправлениеОбъекта(Объект)
	
    МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ВидСобытия = МенеджерОбъекта.ВидСобытия_Перенаправление();
    ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	
	Если ДополнительныеСвойства.Свойство("КомментарийПеренаправления") Тогда
		КомментарийПеренаправления = ДополнительныеСвойства.КомментарийПеренаправления;
	Иначе
		КомментарийПеренаправления = "";
	КонецЕсли;
	
	ПараметрыСобытия = Новый Структура;
	ПараметрыСобытия.Вставить("ИсходнаяОрганизация", ДополнительныеСвойства.ИсходнаяОрганизация);
	ПараметрыСобытия.Вставить("ИсходныйОтветственный", ДополнительныеСвойства.ИсходныйОтветственный);
	ПараметрыСобытия.Вставить("ИсходнаяЛинияПоддержки", ДополнительныеСвойства.ИсходнаяЛинияПоддержки);
	ПараметрыСобытия.Вставить("Организация", Объект.ОбслуживающаяОрганизация);
	ПараметрыСобытия.Вставить("ЛинияПоддержки", Объект.ЛинияПоддержки);
	ПараметрыСобытия.Вставить("Ответственный", Объект.Ответственный);
	ПараметрыСобытия.Вставить("Комментарий", КомментарийПеренаправления);
	
	КонтекстСтрокой = Строка(ВидСобытия);
	
	Если ДополнительныеСвойства.ИсходнаяОрганизация <> Объект.ОбслуживающаяОрганизация Тогда
		КонтекстСтрокой = КонтекстСтрокой + СтрШаблон(НСтр("ru='Организация: ""%1"" → ""%2""'"),
			БизнесСобытия.ПредставлениеЗначения(ДополнительныеСвойства.ИсходнаяОрганизация), 
			БизнесСобытия.ПредставлениеЗначения(Объект.ОбслуживающаяОрганизация));
	КонецЕсли;
	
	Если ДополнительныеСвойства.ИсходнаяЛинияПоддержки <> Объект.ЛинияПоддержки Тогда
		КонтекстСтрокой = КонтекстСтрокой + ?(ПустаяСтрока(КонтекстСтрокой), "", Символы.ПС)
                        + СтрШаблон(НСтр("ru='Линия поддержки: ""%1"" → ""%2""'"),
                			БизнесСобытия.ПредставлениеЗначения(ДополнительныеСвойства.ИсходнаяЛинияПоддержки), 
                			БизнесСобытия.ПредставлениеЗначения(Объект.ЛинияПоддержки));
	КонецЕсли;
    
    Если ДополнительныеСвойства.ИсходныйОтветственный <> Объект.Ответственный Тогда
		КонтекстСтрокой = КонтекстСтрокой + ?(ПустаяСтрока(КонтекстСтрокой), "", Символы.ПС) 
                        + СтрШаблон(НСтр("ru='Ответственный: ""%1"" → ""%2""'"),
            				БизнесСобытия.ПредставлениеЗначения(ДополнительныеСвойства.ИсходныйОтветственный), 
            				БизнесСобытия.ПредставлениеЗначения(Объект.Ответственный));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КомментарийПеренаправления) Тогда
		КонтекстСтрокой = КонтекстСтрокой + ?(ПустаяСтрока(КонтекстСтрокой), "", Символы.ПС) +
			СтрШаблон(НСтр("ru='Комментарий: %1'"), КомментарийПеренаправления);
	КонецЕсли; 
	
	КонтекстСобытия = БизнесСобытия.СформироватьКонтекстСобытия(ПараметрыСобытия);
    
    БизнесСобытия.ЗарегистрироватьСобытие(Объект.Ссылка, ВидСобытия, КонтекстСобытия,, КонтекстСтрокой, 
		ДополнительныеСвойства.ИсходныйОтветственный, Объект.Ответственный);
		
КонецПроцедуры

Процедура УстановитьПараметрыСписка(Форма)
    
    Параметры = Форма.Список.Параметры;
	Параметры.УстановитьЗначениеПараметра("ОтборСервисы", ЗначениеЗаполнено(Форма.Сервис));
	Параметры.УстановитьЗначениеПараметра("ОтборВитрины", ЗначениеЗаполнено(Форма.Витрина));
	Параметры.УстановитьЗначениеПараметра("ОтборКомпоненты", Форма.КомпонентСписок.Количество() > 0);
	Параметры.УстановитьЗначениеПараметра("ОтборРазделы", Форма.РазделСписок.Количество() > 0);
	Параметры.УстановитьЗначениеПараметра("Сервисы", Форма.Сервис);
	Параметры.УстановитьЗначениеПараметра("Витрины", Форма.Витрина);
	Параметры.УстановитьЗначениеПараметра("Компоненты", Форма.КомпонентСписок.ВыгрузитьЗначения());
	Параметры.УстановитьЗначениеПараметра("Разделы", Форма.РазделСписок.ВыгрузитьЗначения());
    Если Форма.ИмяФормы = "Справочник.Ошибки.Форма.ФормаВыбора" Тогда
    	Параметры.УстановитьЗначениеПараметра("СостояниеИсправленные", Перечисления.СостоянияОшибок.Исправлена);
    	Параметры.УстановитьЗначениеПараметра("ОтображатьЗакрытые", Форма.ОтображатьЗакрытые);
    ИначеЕсли Форма.ИмяФормы = "Справочник.Пожелания.Форма.ФормаВыбора" Тогда
        ЗакрытыеПожелания = Новый Массив;
        ЗакрытыеПожелания.Добавить(Перечисления.СостоянияПожеланий.Реализовано);
        ЗакрытыеПожелания.Добавить(Перечисления.СостоянияПожеланий.Отклонено);
    	Параметры.УстановитьЗначениеПараметра("СостояниеЗакрытые", ЗакрытыеПожелания);
    	Параметры.УстановитьЗначениеПараметра("ОтображатьЗакрытые", Форма.ОтображатьЗакрытые);
    КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
 
