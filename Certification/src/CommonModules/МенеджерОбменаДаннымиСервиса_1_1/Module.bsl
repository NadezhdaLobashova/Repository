
///////////////////////////////////////////////////////////////////////////////
// МЕНЕДЖЕР ОБМЕНА ДАННЫМИ СЕРВИСА                                           //
// Поддерживаемые форматы:                                                   //
//   1. http://www.1cfresh.com/sd/data/1.1, версия 1.1.1                     //
///////////////////////////////////////////////////////////////////////////////

#Область ПроцедурыКонвертации

Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ПараметрыКонвертации.Вставить("УзелКорреспондента", КомпонентыОбмена.УзелКорреспондента);
	ПараметрыКонвертации.Вставить("КлючСообщенияЖурналаРегистрации", КомпонентыОбмена.КлючСообщенияЖурналаРегистрации);
	ПараметрыКонвертации.Вставить("АбонентыДляОбновленияИнформацииПоАктивнымПодпискам", Новый Массив);
	
    ДопРеквизитыИСведения = Новый ТаблицаЗначений;
    ДопРеквизитыИСведения.Колонки.Добавить("Свойство");
    ДопРеквизитыИСведения.Колонки.Добавить("Значение");
    ДопРеквизитыИСведения.Колонки.Добавить("ЭтоДопСведение");
    ДопРеквизитыИСведения.Колонки.Добавить("ТипОбъекта");
    
	ПараметрыКонвертации.Вставить("ЗагруженныеДопРеквизитыИСведения", ДопРеквизитыИСведения);
    
    Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
		
	ИначеЕсли КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		
		РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КомпонентыОбмена.УзелКорреспондента,
			"Сервис");
		
		ПараметрыКонвертации.Сервис = РеквизитыУзлаОбмена.Сервис;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		
		УстановитьАктуальныеПодпискиАктивныхОбращений(КомпонентыОбмена);
    	ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
		
КонецПроцедуры

#КонецОбласти

#Область ПОД

//	НаправлениеОбмена - строка ("Отправка" либо "Получение")
//	ПравилаОбработкиДанных - таблица значений 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	
    Если НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Справочник_Абоненты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПользователиПриложений_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПользователиАбонентов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВзаимоотношенияАбонентов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Конфигурации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВерсииКонфигураций_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ИнформационныеБазы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Приложения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыОграниченийТарифов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Тарифы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_Подписка_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ДополнительныеРеквизиты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ЗначенияДопРеквизитов_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
	
КонецПроцедуры

#Область Получение

#Область Справочник_Абоненты_Получение

Процедура ДобавитьПОД_Справочник_Абоненты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Абоненты";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Абоненты_Получение");
КонецПроцедуры

#КонецОбласти

#Область Справочник_ПользователиПриложений_Получение

Процедура ДобавитьПОД_Справочник_ПользователиПриложений_Получение(ПравилаОбработкиДанных)
    
    ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ПользователиПриложений";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПользователиПриложений_Получение");
    
КонецПроцедуры

#КонецОбласти

#Область Справочник_ПользователиАбонентов_Получение

Процедура ДобавитьПОД_Справочник_ПользователиАбонентов_Получение(ПравилаОбработкиДанных)
    
    ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ПользователиАбонентов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПользователиАбонентов_Получение");
    
КонецПроцедуры

#КонецОбласти

#Область Справочник_ВзаимоотношенияАбонентов_Получение

Процедура ДобавитьПОД_Справочник_ВзаимоотношенияАбонентов_Получение(ПравилаОбработкиДанных)
    
    ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ВзаимоотношенияАбонентов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВзаимоотношенияАбонентов_Получение");
    
КонецПроцедуры

#КонецОбласти

#Область Справочник_Пользователи_Получение

Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Пользователи";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи_Получение");
КонецПроцедуры

#КонецОбласти

#Область Справочник_Конфигурации_Получение

Процедура ДобавитьПОД_Справочник_Конфигурации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Конфигурации";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Конфигурации_Получение");
КонецПроцедуры

#КонецОбласти

#Область Справочник_ВерсииКонфигураций_Получение
Процедура ДобавитьПОД_Справочник_ВерсииКонфигураций_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ВерсииКонфигураций";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВерсииКонфигураций_Получение");
КонецПроцедуры
#КонецОбласти

#Область Справочник_ИнформационныеБазы_Получение

Процедура ДобавитьПОД_Справочник_ИнформационныеБазы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ИнформационныеБазы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ИнформационныеБазы_Получение");
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_Приложения_Получение

Процедура ДобавитьПОД_Справочник_Приложения_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Приложения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Приложения_Получение");
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_ВидыОграниченийТарифов_Получение

Процедура ДобавитьПОД_Справочник_ВидыОграниченийТарифов_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ВидыОграниченийТарифов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыОграниченийТарифов_Получение");
	
КонецПроцедуры

#КонецОбласти 

#Область Справочник_Тарифы_Получение

Процедура ДобавитьПОД_Справочник_Тарифы_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Тарифы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Тарифы_Получение");
	
КонецПроцедуры

#КонецОбласти 

#Область Документ_Подписка_Получение

Процедура ДобавитьПОД_Документ_Подписка_Получение(ПравилаОбработкиДанных)
	
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.Подписка";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Подписка_Получение");
	
КонецПроцедуры

#КонецОбласти 

#Область ДополнительныеРеквизиты_Получение

Процедура ДобавитьПОД_ДополнительныеРеквизиты_Получение(ПравилаОбработкиДанных)
    
    ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "ДополнительныеРеквизиты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ДополнительныеРеквизиты";
	ПравилоОбработки.ПриОбработке = "ПОД_ДополнительныеРеквизиты_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДополнительныеРеквизиты");
    
КонецПроцедуры

Процедура ПОД_ДополнительныеРеквизиты_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
    
    Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		ИспользованиеПКО.Справочник_ДополнительныеРеквизиты = Ложь;
	КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ЗначенияДопРеквизитов_Получение

Процедура ДобавитьПОД_ЗначенияДопРеквизитов_Получение(ПравилаОбработкиДанных)
    
    ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "ЗначенияДопРеквизитов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоОбработки.ПриОбработке = "ПОД_ЗначенияДопРеквизитов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияДополнительныхРеквизитов");
    
КонецПроцедуры

Процедура ПОД_ЗначенияДопРеквизитов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
    
    Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		ИспользованиеПКО.Справочник_ЗначенияДополнительныхРеквизитов = Ложь;
	КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ПКО

//  НаправлениеОбмена - строка ("Отправка" либо "Получение")
//	ПравилаКонвертации - таблица значений 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	
	Если НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Справочник_Абоненты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПользователиПриложений_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПользователиАбонентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВзаимоотношенияАбонентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Конфигурации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВерсииКонфигураций_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ИнформационныеБазы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Приложения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыОграниченийТарифов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Тарифы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_Подписка_Получение(ПравилаКонвертации);
	    ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации);
	    ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации);
		
	КонецЕсли;
	
КонецПроцедуры

#Область Получение

#Область Справочник_Абоненты_Получение

Процедура ДобавитьПКО_Справочник_Абоненты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Абоненты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Абоненты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Абоненты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Абоненты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Абоненты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ПоляПоиска.Добавить("Код, Наименование, Владелец");
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
КонецПроцедуры

Процедура ПКО_Справочник_Абоненты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
    
    // Контактная информация
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
			
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			Если Лев(СокрЛП(ВидКИСтрокой), 18) = "ПользовательскаяКИ" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(СтрокаXDTO.НаименованиеКонтактнойИнформации,, Справочники.ВидыКонтактнойИнформации.СправочникАбоненты);
				ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
				Если НЕ ЗначениеЗаполнено(ТекВидКИ) И ЗначениеЗаполнено(ИмяТипаКИ) Тогда
					ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
					ВидКИОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникАбоненты;
					ВидКИОбъект.Наименование = СтрокаXDTO.НаименованиеКонтактнойИнформации;
					ВидКИОбъект.Тип = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
					ВидКИОбъект.Записать();
					ТекВидКИ = ВидКИОбъект.Ссылка;
                Иначе
                    Продолжить;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailАбонента;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонАбонента;
			ИначеЕсли ВидКИСтрокой = "ВебСтраница" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.СайтАбонента;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресАбонента;
			ИначеЕсли ВидКИСтрокой = "Прочее" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияАбонента;
			Иначе
				Продолжить;
			КонецЕсли;
			ТекТипКИ = ТекВидКИ.Тип;
			СтрокаКИ = ПолученныеДанные.КонтактнаяИнформация.Добавить();
			ЗначенияПолейСтрокой = СокрЛП(СтрокаXDTO.ЗначенияПолей);
			СтрокаКИ.ЗначенияПолей = ЗначенияПолейСтрокой;
			СтрокаКИ.Вид = ТекВидКИ;
			СтрокаКИ.Тип = ТекТипКИ;
			
			ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ);
		КонецЦикла;
		
	КонецЕсли;
	
	ПолученныеДанные.Владелец = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
	
КонецПроцедуры

Процедура ПКО_Справочник_Абоненты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.1") Тогда
        ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
    КонецЕсли;
    
    Если ДанныеИБ = Неопределено Тогда
    	ДанныеДляЗаписи = ПолученныеДанные;
    Иначе
    	ДанныеДляЗаписи = ДанныеИБ;
    	// Заменяем свойства, которые получили из XDTO
    	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
    	ТекущиеДанныеКИ = ДанныеДляЗаписи.КонтактнаяИнформация.Выгрузить();
    	ДанныеДляЗаписи.КонтактнаяИнформация.Загрузить(ПолученныеДанные.КонтактнаяИнформация.Выгрузить());
    	Для каждого СтрокаКИ Из ТекущиеДанныеКИ Цикл
    		Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДополнительныйEmailАбонента 
    			Или СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДополнительныйТелефонАбонента Тогда
    			НоваяСтрокаКИ = ДанныеДляЗаписи.КонтактнаяИнформация.Добавить();
    			ЗаполнитьЗначенияСвойств(НоваяСтрокаКИ, СтрокаКИ);
    		КонецЕсли; 
        КонецЦикла;
        ДанныеДляЗаписи.ДополнительныеРеквизиты.Загрузить(ПолученныеДанные.ДополнительныеРеквизиты.Выгрузить());
    	ПолученныеДанные = Неопределено;
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область Справочник_ПользователиПриложений_Получение

Процедура ДобавитьПКО_Справочник_ПользователиПриложений_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ПользователиПриложений_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.РегистрыСведений.ПользователиПриложений;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ПользователиПриложений";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ПользователиПриложений_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ПользователиПриложений_Получение_ПередЗаписьюПолученныхДанных";
	
    ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Записи", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Записи;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Приложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Приложения_Получение";
    
    НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Пользователь";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи_Получение";

    НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Право";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПраваПользователейПриложений_Отправка";

    НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Разрешено";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
    
КонецПроцедуры

Процедура ПКО_Справочник_ПользователиПриложений_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
	
	Если ДанныеXDTO.Свойство("Записи") И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
	
		Записи = Новый ТаблицаЗначений;
		Записи.Колонки.Добавить("Приложение");
		Записи.Колонки.Добавить("ПользовательСервиса");
		Записи.Колонки.Добавить("Право");
		Записи.Колонки.Добавить("Разрешено");
		
		ОбработкаКонвертации = Обработки.КонвертацияОбъектовXDTO.Создать();
		ОбработкаКонвертации.КомпонентыОбмена = КомпонентыОбмена;
		ОбработкаКонвертации.УзелОбменаЗагрузкаДанных = КомпонентыОбмена.УзелКорреспондента;
		
		Отказ = Ложь;
		Для каждого Строка Из ДанныеXDTO.Записи Цикл
			ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Пользователи_Получение");
			ПользовательСервиса = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Пользователь, ПКО, "ПолучитьСсылку");
			Если ПользовательСервиса = Неопределено Тогда
				ПользовательСервиса = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Пользователь, ПКО, "КонвертироватьИЗаписать");
			КонецЕсли;
            
			ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Приложения_Получение");
			Приложение = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Приложение, ПКО, "ПолучитьСсылку");
			Если Приложение = Неопределено Тогда
				Приложение = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Приложение, ПКО, "КонвертироватьИЗаписать");
			КонецЕсли;
            
			ПКПД = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("ПраваПользователейПриложений_Получение", "ИмяПКПД");
			Право = Неопределено;
			Если ПКПД <> Неопределено Тогда
				Если Строка.Право <> Неопределено Тогда
					Право = ПКПД.КонвертацииЗначенийПриПолучении.Получить(Строка.Право.Значение);
				КонецЕсли;
            КонецЕсли;
            Отбор = Новый Структура("ПользовательСервиса, Приложение, Право", ПользовательСервиса, Приложение, Право);
            Если Право <> Неопределено И Записи.НайтиСтроки(Отбор).Количество() = 0 Тогда
				НоваяСтрока = Записи.Добавить();
				НоваяСтрока.Право = Право;
				НоваяСтрока.ПользовательСервиса = ПользовательСервиса;
				НоваяСтрока.Приложение = Приложение;
				НоваяСтрока.Разрешено = Строка.Разрешено;
			КонецЕсли; 
		КонецЦикла;
		Если Записи.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Т_Записи", Записи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПКО_Справочник_ПользователиПриложений_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
	
    // Пользователи приложений
    Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Т_Записи") Тогда
        Для каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Т_Записи Цикл
            МенеджерЗаписи = РегистрыСведений.ПользователиПриложений.СоздатьМенеджерЗаписи();
            МенеджерЗаписи.Приложение = Строка.Приложение.Ссылка;
            МенеджерЗаписи.ПользовательСервиса = Строка.ПользовательСервиса.Ссылка;
            МенеджерЗаписи.Право = Строка.Право;
            МенеджерЗаписи.Разрешено = Строка.Разрешено;
            МенеджерЗаписи.Сервис = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
            МенеджерЗаписи.Записать();
        КонецЦикла;
    КонецЕсли;
    
    ПолученныеДанные = Неопределено;
    ДанныеИБ = Неопределено;
    
КонецПроцедуры

#КонецОбласти

#Область Справочник_ПользователиАбонентов_Получение

Процедура ДобавитьПКО_Справочник_ПользователиАбонентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ПользователиАбонентов_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.РегистрыСведений.ПользователиАбонентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ПользователиАбонентов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ПользователиАбонентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ПользователиАбонентов_Получение_ПередЗаписьюПолученныхДанных";
	
    ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Записи", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Записи;
    
    ДобавитьСвойство(СвойстваТЧ, "Абонент", "Справочник_Абоненты_Получение");
    ДобавитьСвойство(СвойстваТЧ, "Пользователь", "Справочник_Пользователи_Получение");
    
КонецПроцедуры

Процедура ПКО_Справочник_ПользователиАбонентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
    
    ПользовательОтбор = НайтиСоздатьОбъект(ДанныеXDTO.ПользовательОтбор, "Справочник_Пользователи_Получение", КомпонентыОбмена);
    АбонентОтбор = НайтиСоздатьОбъект(ДанныеXDTO.АбонентОтбор, "Справочник_Абоненты_Получение", КомпонентыОбмена);
    
    ПолученныеДанные.Отбор.Абонент.Установить(АбонентОтбор.Ссылка, Истина);
    ПолученныеДанные.Отбор.ПользовательСервиса.Установить(ПользовательОтбор.Ссылка, Истина);
    
    Если ДанныеXDTO.Свойство("Записи") И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
	
		Записи = Новый ТаблицаЗначений;
		Записи.Колонки.Добавить("Абонент");
		Записи.Колонки.Добавить("Пользователь");
		
		ОбработкаКонвертации = Обработки.КонвертацияОбъектовXDTO.Создать();
		ОбработкаКонвертации.КомпонентыОбмена = КомпонентыОбмена;
		ОбработкаКонвертации.УзелОбменаЗагрузкаДанных = КомпонентыОбмена.УзелКорреспондента;
        
        Отказ = Ложь;
		Для Каждого Строка Из ДанныеXDTO.Записи Цикл
            Пользователь = НайтиСоздатьОбъект(Строка.Пользователь, "Справочник_Пользователи_Получение", КомпонентыОбмена);
            Абонент = НайтиСоздатьОбъект(Строка.Абонент, "Справочник_Абоненты_Получение", КомпонентыОбмена);
            Отбор = Новый Структура("Абонент, Пользователь", Абонент, Пользователь);
            Если Записи.НайтиСтроки(Отбор).Количество() = 0 Тогда
				НоваяСтрока = Записи.Добавить();
				НоваяСтрока.Абонент = Абонент;
				НоваяСтрока.Пользователь = Пользователь;
			КонецЕсли; 
		КонецЦикла;
		Если Записи.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Т_Записи", Записи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПКО_Справочник_ПользователиАбонентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
    
    Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Т_Записи") Тогда
        Для каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Т_Записи Цикл
            Запись = ПолученныеДанные.Добавить();
            Запись.Абонент = Строка.Абонент.Ссылка;
            Запись.ПользовательСервиса = Строка.Пользователь.Ссылка;
            Запись.Сервис = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
        КонецЦикла;
    КонецЕсли;
    
    ПолученныеДанные.Записать();
    
    ПолученныеДанные = Неопределено;
    ДанныеИБ = Неопределено;
    
КонецПроцедуры

#КонецОбласти

#Область Справочник_ВзаимоотношенияАбонентов_Получение

Процедура ДобавитьПКО_Справочник_ВзаимоотношенияАбонентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ВзаимоотношенияАбонентов_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.РегистрыСведений.ВзаимоотношенияАбонентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ВзаимоотношенияАбонентов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ВзаимоотношенияАбонентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ВзаимоотношенияАбонентов_Получение_ПередЗаписьюПолученныхДанных";
	
    ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Записи", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Записи;
	
    ДобавитьСвойство(СвойстваТЧ, "Период",, Ложь);
    ДобавитьСвойство(СвойстваТЧ, "ВедущийАбонент", "Справочник_Абоненты_Получение");
    ДобавитьСвойство(СвойстваТЧ, "ВидВзаимоотношений", "ВидыВзаимоотношений_Получение");
    ДобавитьСвойство(СвойстваТЧ, "Абонент", "Справочник_Абоненты_Получение");
    
КонецПроцедуры

Процедура ПКО_Справочник_ВзаимоотношенияАбонентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
    
    ПериодОтбор = ДанныеXDTO.ПериодОтбор;
    ВедущийАбонентОтбор = НайтиСоздатьОбъект(ДанныеXDTO.ВедущийАбонентОтбор, "Справочник_Абоненты_Получение", КомпонентыОбмена);
    АбонентОтбор = НайтиСоздатьОбъект(ДанныеXDTO.АбонентОтбор, "Справочник_Абоненты_Получение", КомпонентыОбмена);
    
	ПКПД = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("ВидыВзаимоотношений_Получение", "ИмяПКПД");
	ВидВзаимоотношенийОтбор = ПКПД.КонвертацииЗначенийПриПолучении.Получить(ДанныеXDTO.ВидВзаимоотношенийОтбор.Значение);
    
    ПолученныеДанные.Отбор.Период.Установить(ПериодОтбор, Истина);
    ПолученныеДанные.Отбор.ВедущийАбонент.Установить(ВедущийАбонентОтбор.Ссылка, Истина);
    ПолученныеДанные.Отбор.ВидВзаимоотношений.Установить(ВидВзаимоотношенийОтбор, Истина);
    ПолученныеДанные.Отбор.Абонент.Установить(АбонентОтбор.Ссылка, Истина);
    
    Если ДанныеXDTO.Свойство("Записи") И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
	
		Записи = Новый ТаблицаЗначений;
		Записи.Колонки.Добавить("Период");
		Записи.Колонки.Добавить("ВедущийАбонент");
		Записи.Колонки.Добавить("ВидВзаимоотношений");
		Записи.Колонки.Добавить("Абонент");
		
		ОбработкаКонвертации = Обработки.КонвертацияОбъектовXDTO.Создать();
		ОбработкаКонвертации.КомпонентыОбмена = КомпонентыОбмена;
		ОбработкаКонвертации.УзелОбменаЗагрузкаДанных = КомпонентыОбмена.УзелКорреспондента;
        
        Отказ = Ложь;
		Для Каждого Строка Из ДанныеXDTO.Записи Цикл
            Период = Строка.Период;
            ВедущийАбонент = НайтиСоздатьОбъект(Строка.ВедущийАбонент, "Справочник_Абоненты_Получение", КомпонентыОбмена);
            Абонент = НайтиСоздатьОбъект(Строка.Абонент, "Справочник_Абоненты_Получение", КомпонентыОбмена);
        	ПКПД = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("ВидыВзаимоотношений_Получение", "ИмяПКПД");
        	ВидВзаимоотношений = ПКПД.КонвертацииЗначенийПриПолучении.Получить(Строка.ВидВзаимоотношений.Значение);
            Отбор = Новый Структура("Период, ВедущийАбонент, ВидВзаимоотношений, Абонент", Период, ВедущийАбонент, ВидВзаимоотношений, Абонент);
            Если Записи.НайтиСтроки(Отбор).Количество() = 0 Тогда
				НоваяСтрока = Записи.Добавить();
				НоваяСтрока.Период = Период;
				НоваяСтрока.ВедущийАбонент = ВедущийАбонент;
				НоваяСтрока.ВидВзаимоотношений = ВидВзаимоотношений;
				НоваяСтрока.Абонент = Абонент;
			КонецЕсли; 
		КонецЦикла;
		Если Записи.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Т_Записи", Записи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПКО_Справочник_ВзаимоотношенияАбонентов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
    
    Если ПолученныеДанные.ДополнительныеСвойства.Свойство("Т_Записи") Тогда
        Для каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Т_Записи Цикл
            Запись = ПолученныеДанные.Добавить();
            Запись.Период = Строка.Период;
            Запись.ВедущийАбонент = Строка.ВедущийАбонент.Ссылка;
            Запись.ВидВзаимоотношений = Строка.ВидВзаимоотношений;
            Запись.Абонент = Строка.Абонент;
        КонецЦикла;
    КонецЕсли;
    
    ПолученныеДанные.Записать();
    
    ПолученныеДанные = Неопределено;
    ДанныеИБ = Неопределено;
    
КонецПроцедуры

#КонецОбласти

#Область Справочник_Пользователи_Получение

Процедура ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Пользователи_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ПользователиСервисов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Пользователи";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ПоляПоиска.Добавить("Код, Наименование, Владелец");
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Логин";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЧасовойПояс";
	НоваяСтрока.СвойствоФормата = "ЧасовойПояс";
	
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
	
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
			
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			Если Лев(СокрЛП(ВидКИСтрокой), 18) = "ПользовательскаяКИ" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(СтрокаXDTO.НаименованиеКонтактнойИнформации,, Справочники.ВидыКонтактнойИнформации.СправочникПользователиСервисов);
                ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
				Если НЕ ЗначениеЗаполнено(ТекВидКИ) И ЗначениеЗаполнено(ИмяТипаКИ) Тогда
					ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
					ВидКИОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникАбоненты;
					ВидКИОбъект.Наименование = СтрокаXDTO.НаименованиеКонтактнойИнформации;
					ВидКИОбъект.Тип = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
					ВидКИОбъект.Записать();
					ТекВидКИ = ВидКИОбъект.Ссылка;
                Иначе
                    Продолжить;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПользователяСервиса;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПользователяСервиса;
			Иначе
				Продолжить;
			КонецЕсли;
			ТекТипКИ = ТекВидКИ.Тип;
			СтрокаКИ = ПолученныеДанные.КонтактнаяИнформация.Добавить();
			ЗначенияПолейСтрокой = СокрЛП(СтрокаXDTO.ЗначенияПолей);
			СтрокаКИ.ЗначенияПолей = ЗначенияПолейСтрокой;
			СтрокаКИ.Вид = ТекВидКИ;
			СтрокаКИ.Тип = ТекТипКИ;
			
			ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ);
		КонецЦикла;
		
	КонецЕсли;
	
	ПолученныеДанные.Владелец = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
	
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
	
	Если ДанныеИБ = Неопределено Тогда
		
		ДанныеДляЗаписи = ПолученныеДанные;
		
	Иначе
		ДанныеДляЗаписи = ДанныеИБ;
		
		ТекущиеДанныеКИ = ДанныеДляЗаписи.КонтактнаяИнформация.Выгрузить();
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		ДанныеДляЗаписи.КонтактнаяИнформация.Загрузить(ПолученныеДанные.КонтактнаяИнформация.Выгрузить());
		Для каждого СтрокаКИ Из ТекущиеДанныеКИ Цикл
			Если СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДополнительныйEmailПользователяСервиса
				Или СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДополнительныйТелефонПользователяСервиса Тогда
				НоваяСтрокаКИ = ДанныеДляЗаписи.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКИ, СтрокаКИ);
			КонецЕсли; 
		КонецЦикла; 
		
		ПолученныеДанные = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_Конфигурации_Получение

Процедура ДобавитьПКО_Справочник_Конфигурации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Конфигурации_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Конфигурации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Конфигурации";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Конфигурации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Имя";
	НоваяСтрока.СвойствоФормата = "Имя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";

	ПравилоКонвертации.ПоляПоиска.Добавить("Имя");
КонецПроцедуры

Процедура ПКО_Справочник_Конфигурации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
	
	Если ДанныеИБ = Неопределено Тогда
		ДанныеДляЗаписи = ПолученныеДанные;
	Иначе
		ДанныеДляЗаписи = ДанныеИБ;
		
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные,ДанныеИБ );
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписи.Наименование) Тогда
		ДанныеДляЗаписи.Наименование = ДанныеДляЗаписи.Код;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_ВерсииКонфигураций_Получение

Процедура ДобавитьПКО_Справочник_ВерсииКонфигураций_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ВерсииКонфигураций_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ВерсииКонфигураций;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ВерсииКонфигураций";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ВерсииКонфигураций_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";

	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Конфигурация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Конфигурации_Получение";
	
	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец, Наименование");
	
КонецПроцедуры

Процедура ПКО_Справочник_ВерсииКонфигураций_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
	
	Если ДанныеИБ = Неопределено Тогда
		ДанныеДляЗаписи = ПолученныеДанные;
	Иначе
		ДанныеДляЗаписи = ДанныеИБ;
		
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные,ДанныеИБ );
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписи.Код) Тогда
		ДанныеДляЗаписи.Код = ОбщегоНазначенияУСП.ВерсиюВЧисло(ДанныеДляЗаписи.Наименование)
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_ИнформационныеБазы_Получение

Процедура ДобавитьПКО_Справочник_ИнформационныеБазы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ИнформационныеБазы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ИнформационныеБазы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ИнформационныеБазы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ИнформационныеБазы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ИнформационныеБазы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВерсияКонфигурации";
	НоваяСтрока.СвойствоФормата = "ВерсияКонфигурации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВерсииКонфигураций_Получение";
	
КонецПроцедуры

Процедура ПКО_Справочник_ИнформационныеБазы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
	
	ПолученныеДанные.Владелец = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
	
КонецПроцедуры

Процедура ПКО_Справочник_ИнформационныеБазы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
	
	Если ДанныеИБ = Неопределено Тогда
		ДанныеДляЗаписи = ПолученныеДанные;
	Иначе
		ДанныеДляЗаписи = ДанныеИБ;
		
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные,ДанныеИБ );
		ПолученныеДанные = Неопределено;
	КонецЕсли;
	
	ДанныеДляЗаписи.Владелец = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_Приложения_Получение

Процедура ДобавитьПКО_Справочник_Приложения_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Приложения_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Приложения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Приложения";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Приложения_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Абонент";
	НоваяСтрока.СвойствоФормата = "Абонент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Абоненты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИнформационнаяБаза";
	НоваяСтрока.СвойствоФормата = "ИнформационнаяБаза";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ИнформационныеБазы_Получение"; 
	
КонецПроцедуры

Процедура ПКО_Справочник_Приложения_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
    
    Если ДанныеИБ = Неопределено Тогда
        ДанныеДляЗаписи = ПолученныеДанные;
    Иначе
        ДанныеДляЗаписи = ДанныеИБ;
        // Заменяем свойства, которые получили из XDTO
        ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
        ПолученныеДанные = Неопределено;
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(ДанныеДляЗаписи.Наименование) Тогда
        ДанныеДляЗаписи.Наименование = "<>";
    КонецЕсли;
    
    ДанныеДляЗаписи.Владелец = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
    
КонецПроцедуры

#КонецОбласти

#Область Справочник_ВидыОграниченийТарифов_Получение
Процедура ДобавитьПКО_Справочник_ВидыОграниченийТарифов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ВидыОграниченийТарифов_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ВидыОграниченийТарифов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ВидыОграниченийТарифов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	ПравилоКонвертации.ПоляПоиска.Добавить("Код, Наименование, Владелец");
	
КонецПроцедуры

Процедура ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
    
    Если ДанныеИБ = Неопределено Тогда
        ДанныеДляЗаписи = ПолученныеДанные;
    Иначе
        ДанныеДляЗаписи = ДанныеИБ;
    КонецЕсли;
    
    ДанныеДляЗаписи.Владелец = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
    
КонецПроцедуры

#КонецОбласти

#Область Справочник_Тарифы_Получение

Процедура ДобавитьПКО_Справочник_Тарифы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Тарифы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Тарифы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Тарифы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Тарифы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Тарифы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаНачалаДействия";
	НоваяСтрока.СвойствоФормата = "ДатаНачалаДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОкончанияДействия";
	НоваяСтрока.СвойствоФормата = "ДатаОкончанияДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОписаниеДляАбонентов";
	НоваяСтрока.СвойствоФормата = "ОписаниеДляАбонентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОписаниеДляОбслуживающихОрганизаций";
	НоваяСтрока.СвойствоФормата = "ОписаниеДляОбслуживающихОрганизаций";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПериодДействияПродлевающейПодписки";
	НоваяСтрока.СвойствоФормата = "ПериодДействияПродлевающейПодписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПериодДействияРасширяющейПодписки";
	НоваяСтрока.СвойствоФормата = "ПериодДействияРасширяющейПодписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПериодДобавленияПродлевающейПодписки";
	НоваяСтрока.СвойствоФормата = "ПериодДобавленияПродлевающейПодписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РасширениеТарифа";
	НоваяСтрока.СвойствоФормата = "РасширениеТарифа";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДоступныеТарифы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДоступныеТарифы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Тариф";
	НоваяСтрока.СвойствоКонфигурации = "Тариф";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Тарифы_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Конфигурации", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Конфигурации;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Конфигурация";
	НоваяСтрока.СвойствоКонфигурации = "Конфигурация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Конфигурация_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Ограничения", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Ограничения;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОграничений";
	НоваяСтрока.СвойствоКонфигурации = "ВидОграничений";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыОграниченийТарифов_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоЛицензий";
	НоваяСтрока.СвойствоКонфигурации = "КоличествоЛицензий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДопЛицензийРасширяющейПодписки";
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДопЛицензийРасширяющейПодписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
КонецПроцедуры

Процедура ПКО_Справочник_Тарифы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
	
	// Доступные тарифы 
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Тариф",   "Тариф");
	
	МассивСтрокДоступныеТарифы = Новый Массив;
	Если ДанныеXDTO.Свойство("ДоступныеТарифы") И ЗначениеЗаполнено(ДанныеXDTO.ДоступныеТарифы) Тогда
		Для Каждого Строка Из ДанныеXDTO.ДоступныеТарифы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Тариф", Новый Структура("Значение, ИмяПКО", Строка.Тариф, "Справочник_Тарифы_Получение"));
			МассивСтрокДоступныеТарифы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокДоступныеТарифы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДоступныеТарифы", МассивСтрокДоступныеТарифы);
	КонецЕсли;
	
	// Конфигурации 
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Конфигурация",   "Конфигурация");
	
	МассивСтрокКонфигурации = Новый Массив;
	Если ДанныеXDTO.Свойство("Конфигурации")	И ЗначениеЗаполнено(ДанныеXDTO.Конфигурации) Тогда
		Для Каждого Строка Из ДанныеXDTO.Конфигурации Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Конфигурация", Новый Структура("Значение, ИмяПКО", Строка.Конфигурация, "Справочник_Конфигурации_Получение"));
			МассивСтрокКонфигурации.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокКонфигурации.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Конфигурации", МассивСтрокКонфигурации);
	КонецЕсли;
	
	// Ограничения 
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("ВидОграничений",   "ВидОграничений");
	ПравилаЗаполнения.Вставить("КоличествоЛицензий",   "КоличествоЛицензий");
	ПравилаЗаполнения.Вставить("КоличествоДопЛицензийРасширяющейПодписки",   "КоличествоДопЛицензийРасширяющейПодписки");
	
	МассивСтрокОграничения = Новый Массив;
	Если ДанныеXDTO.Свойство("Ограничения") И ЗначениеЗаполнено(ДанныеXDTO.Ограничения) Тогда
		Для Каждого Строка Из ДанныеXDTO.Ограничения Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("ВидОграничений", Новый Структура("Значение, ИмяПКО", Строка.ВидОграничений, "Справочник_ВидыОграниченийТарифов_Получение"));
			МассивСтрокОграничения.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокОграничения.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Ограничения", МассивСтрокОграничения);
	КонецЕсли;
	
	ПолученныеДанные.Владелец = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
	
КонецПроцедуры

Процедура ПКО_Справочник_Тарифы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
	
	Если ДанныеИБ <> Неопределено Тогда
		ДанныеИБ.ДоступныеТарифы.Загрузить(ПолученныеДанные.ДоступныеТарифы.Выгрузить());
		ДанныеИБ.Конфигурации.Загрузить(ПолученныеДанные.Конфигурации.Выгрузить());
		ДанныеИБ.Ограничения.Загрузить(ПолученныеДанные.Ограничения.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Документ_Подписка_Получение

Процедура ДобавитьПКО_Документ_Подписка_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_Подписка_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.Подписка;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_Подписка_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_Подписка_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ОбъектФормата = "Документ.Подписка";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Абонент";
	НоваяСтрока.СвойствоФормата = "Абонент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Абоненты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВедущийАбонент";
	НоваяСтрока.СвойствоФормата = "ВедущийАбонент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Абоненты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПодключения";
	НоваяСтрока.СвойствоФормата = "ДатаПодключения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОтключения";
	НоваяСтрока.СвойствоФормата = "ДатаОтключения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнаяПодписка";
	НоваяСтрока.СвойствоФормата = "ОсновнаяПодписка";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_Подписка_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тариф";
	НоваяСтрока.СвойствоФормата = "Тариф";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Тарифы_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипПодписки";
	НоваяСтрока.СвойствоФормата = "ТипПодписки";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыПодписок_Получение";
	
КонецПроцедуры

Процедура ПКО_Документ_Подписка_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена) Экспорт
	
	ПолученныеДанные.Сервис = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
	
КонецПроцедуры

Процедура ПКО_Документ_Подписка_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена) Экспорт
	
	Если КомпонентыОбмена.ПараметрыКонвертации.АбонентыДляОбновленияИнформацииПоАктивнымПодпискам.Найти(ПолученныеДанные.Абонент) = Неопределено Тогда
		КомпонентыОбмена.ПараметрыКонвертации.АбонентыДляОбновленияИнформацииПоАктивнымПодпискам.Добавить(ПолученныеДанные.Абонент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_ДополнительныеРеквизиты

Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДополнительныеРеквизиты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВладелецДополнительныхЗначений";
	НоваяСтрока.СвойствоФормата = "ВладелецДополнительныхЗначений";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеЗначенияИспользуются";
	НоваяСтрока.СвойствоФормата = "ДополнительныеЗначенияИспользуются";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеЗначенияСВесом";
	НоваяСтрока.СвойствоФормата = "ДополнительныеЗначенияСВесом";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Заголовок";
	НоваяСтрока.СвойствоФормата = "Заголовок";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаголовокФормыВыбораЗначения";
	НоваяСтрока.СвойствоФормата = "ЗаголовокФормыВыбораЗначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаголовокФормыЗначения";
	НоваяСтрока.СвойствоФормата = "ЗаголовокФормыЗначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаполнятьОбязательно";
	НоваяСтрока.СвойствоФормата = "ЗаполнятьОбязательно";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МногострочноеПолеВвода";
	НоваяСтрока.СвойствоФормата = "МногострочноеПолеВвода";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подсказка";
	НоваяСтрока.СвойствоФормата = "Подсказка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФорматСвойства";
	НоваяСтрока.СвойствоФормата = "ФорматСвойства";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЭтоДополнительноеСведение";
	НоваяСтрока.СвойствоФормата = "ЭтоДополнительноеСведение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
    
    Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Заголовок) Тогда
		ПолученныеДанные.Заголовок = ПолученныеДанные.Наименование;
    КонецЕсли;
    
    Ссылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
    
    Менеджер = РегистрыСведений.ДополнительныеРеквизитыОбъектовПоСервисам.СоздатьМенеджерЗаписи();
    Менеджер.Сервис = КомпонентыОбмена.ПараметрыКонвертации.Сервис;
    Менеджер.ДополнительныйРеквизит = Ссылка; 
    Менеджер.Записать();
       
КонецПроцедуры

#КонецОбласти

#Область Справочник_ЗначенияДополнительныхРеквизитов

Процедура ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вес";
	НоваяСтрока.СвойствоФормата = "Вес";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Владелец");
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ПКПД

//Заполняет правила конвертации предопределенных данных
// Параметры:
//	НаправлениеОбмена - Строка - "Отправка" либо "Получение")
//	ПравилаКонвертации - ТаблицаЗначений - правила конвертации
//
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		//ВидыКИ_Отправка
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыКИ_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO = "ВидыКИ";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailАбонента, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонАбонента, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.СайтАбонента, "ВебСтраница");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресАбонента, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияАбонента, "Прочее");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
		
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ПраваПользователейПриложений_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПраваПользователейПриложений;
		ПравилоКонвертации.ТипXDTO = "ПраваПользователейПриложений";
	
		ЗначенияПриПолучении = Новый Соответствие;
		ЗначенияПриПолучении.Вставить("Запуск", Перечисления.ПраваПользователейПриложений.Запуск);
		ЗначенияПриПолучении.Вставить("ЗапускИАдминистрирование", Перечисления.ПраваПользователейПриложений.ЗапускИАдминистрирование);
		ЗначенияПриПолучении.Вставить("ПросмотрРезервныхКопий", Перечисления.ПраваПользователейПриложений.ПросмотрРезервныхКопий);
		ЗначенияПриПолучении.Вставить("Чтение", Перечисления.ПраваПользователейПриложений.Чтение);
		ЗначенияПриПолучении.Вставить("Удаление", Перечисления.ПраваПользователейПриложений.Удаление);
		ЗначенияПриПолучении.Вставить("ВладелецАбонента", Перечисления.ПраваПользователейПриложений.ВладелецАбонента);
		ЗначенияПриПолучении.Вставить("АдминистраторАбонента", Перечисления.ПраваПользователейПриложений.АдминистраторАбонента);
		ЗначенияПриПолучении.Вставить("УдаленныйДоступ", Перечисления.ПраваПользователейПриложений.УдаленныйДоступ);
		ЗначенияПриПолучении.Вставить("ЧтениеСлужебныхДанных", Перечисления.ПраваПользователейПриложений.ЧтениеСлужебныхДанных);
		ЗначенияПриПолучении.Вставить("Оператор", Перечисления.ПраваПользователейПриложений.Оператор);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияПриПолучении;
		
		//ВидыВзаимоотношений_Получение
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыВзаимоотношений_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыВзаимоотношений;
		ПравилоКонвертации.ТипXDTO = "ВидыВзаимоотношений";
	
		ЗначенияПриПолучении = Новый Соответствие;
		ЗначенияПриПолучении.Вставить("ПровайдерАбонент", Перечисления.ВидыВзаимоотношений.ПровайдерАбонент);
		ЗначенияПриПолучении.Вставить("ПровайдерОбслуживающаяОрганизация", Перечисления.ВидыВзаимоотношений.ПровайдерОбслуживающаяОрганизация);
		ЗначенияПриПолучении.Вставить("ОбслуживающаяОрганизацияАбонент", Перечисления.ВидыВзаимоотношений.ОбслуживающаяОрганизацияАбонент);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияПриПолучении;
		
		//ТипыПодписок_Получение
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ТипыПодписок_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыПодписок;
		ПравилоКонвертации.ТипXDTO = "ТипыПодписок";
	
		ЗначенияПриПолучении = Новый Соответствие;
		ЗначенияПриПолучении.Вставить("Продлевающая", Перечисления.ТипыПодписок.Продлевающая);
		ЗначенияПриПолучении.Вставить("Основная", Перечисления.ТипыПодписок.Основная);
		ЗначенияПриПолучении.Вставить("Расширяющая", Перечисления.ТипыПодписок.Расширяющая);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияПриПолучении;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Алгоритмы

Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта ИЗ КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ)
	XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Тип, );
	
	Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
	
		ИЛИ СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
	
		СтрокаКИ.НомерТелефона = УправлениеКонтактнойИнформациейУСП.УбратьРазделителиВНомерТелефона(
			XDTOКонтактная.Состав.КодСтраны + XDTOКонтактная.Состав.КодГорода + XDTOКонтактная.Состав.Номер);
	
		СтрокаКИ.НомерТелефонаБезКодов = УправлениеКонтактнойИнформациейУСП.УбратьРазделителиВНомерТелефона(XDTOКонтактная.Состав.Номер);
	
	ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
	
		СтрокаКИ.Страна = XDTOКонтактная.Состав.Страна;
	
		Если ЗначениеЗаполнено(XDTOКонтактная.Состав.Состав) И ТипЗнч(XDTOКонтактная.Состав.Состав) <> Тип("Строка") Тогда
	
			СтрокаКИ.Регион = XDTOКонтактная.Состав.Состав.СубъектРФ;
	
			СтрокаКИ.Город = XDTOКонтактная.Состав.Состав.Город;
	
		КонецЕсли;
	
	ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
	
		СтрокаКИ.АдресЭП = XDTOКонтактная.Состав.Значение;
	
		ПозицияСобаки = Найти(XDTOКонтактная.Состав.Значение, "@");
	
		Если ПозицияСобаки <> 0 Тогда
	
			СтрокаКИ.ДоменноеИмяСервера = Сред(XDTOКонтактная.Состав.Значение, ПозицияСобаки + 1);
	
		КонецЕсли;
	
	КонецЕсли;
	
	// Заполнение представления
	
	Если Найти(XDTOКонтактная.Представление, Символы.ПС) = 0 Тогда
	
		СтрокаКИ.Представление = XDTOКонтактная.Представление;
	
	Иначе
	
		СтрокаПредставление = "";
	
		Если СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
	
			СтруктураПолейКИ = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(XDTOКонтактная.Представление, СтрокаКИ.Вид);
	
			УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураПолейКИ, СтрокаПредставление);
	
		ИначеЕсли СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")
	
			ИЛИ СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс") Тогда
	
			СтруктураПолейКИ = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(XDTOКонтактная.Представление, СтрокаКИ.Вид);
	
			
			СтруктураПолейКИПолная = Новый Структура("КодСтраны,КодГорода,НомерТелефона,Добавочный,Комментарий");
			ЗаполнитьЗначенияСвойств(СтруктураПолейКИПолная, СтруктураПолейКИ);
	
			СтрокаПредставление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
				СтруктураПолейКИПолная.КодСтраны, СтруктураПолейКИПолная.КодГорода,
				СтруктураПолейКИПолная.НомерТелефона, СтруктураПолейКИПолная.Добавочный, 
				СтруктураПолейКИПолная.Комментарий);
			
	
		Иначе
	
			СтрокаПредставление = СтрЗаменить(XDTOКонтактная.Представление, Символы.ПС, ",");
	
		КонецЕсли;
	
		
	
		СтрокаКИ.Представление = СтрокаПредставление;
	
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСтруктуруДанныхСтроки(СоответствиеРеквизитовТЧ, СтрокаXDTO, СтруктураДанныхСтроки) Экспорт
		Для Каждого ЭлементСоответствия ИЗ СоответствиеРеквизитовТЧ Цикл
		ЗначениеРеквизитаТЧ = СтрокаXDTO[ЭлементСоответствия.Значение];
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизитаТЧ) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхСтроки.Вставить(ЭлементСоответствия.Ключ,ЗначениеРеквизитаТЧ); 
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьАктуальныеПодпискиАктивныхОбращений(КомпонентыОбмена)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Обращение.Ссылка КАК Обращение,
		|	Обращение.Абонент,
		|	Обращение.ПодпискаНаТариф КАК ТекущаяПодписка,
		|	Обращение.ПодпискаНаТариф.ДатаОтключения КАК ТекущаяДатаОтключения,
		|	МАКСИМУМ(Подписка.ДатаОтключения) КАК МаксимальнаяДатаОтключения
		|ПОМЕСТИТЬ МаксимальныеСрокиПодписок
		|ИЗ
		|	Документ.Обращение КАК Обращение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Подписка КАК Подписка
		|		ПО Обращение.Абонент = Подписка.Абонент
		|ГДЕ
		|	НЕ Обращение.ПометкаУдаления
		|	И Обращение.Абонент В(&Абоненты)
		|	И Обращение.Состояние <> &СостояниеЗакрыто
		|
		|СГРУППИРОВАТЬ ПО
		|	Обращение.Ссылка,
		|	Обращение.Абонент,
		|	Обращение.ПодпискаНаТариф,
		|	Обращение.ПодпискаНаТариф.ДатаОтключения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Подписка.Ссылка КАК НоваяПодписка,
		|	МаксимальныеСрокиПодписок.Обращение
		|ИЗ
		|	МаксимальныеСрокиПодписок КАК МаксимальныеСрокиПодписок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Подписка КАК Подписка
		|		ПО МаксимальныеСрокиПодписок.МаксимальнаяДатаОтключения = Подписка.ДатаОтключения
		|			И МаксимальныеСрокиПодписок.Абонент = Подписка.Абонент
		|			И МаксимальныеСрокиПодписок.ТекущаяПодписка <> Подписка.Ссылка
		|ГДЕ
		|	Подписка.ДатаОтключения > МаксимальныеСрокиПодписок.ТекущаяДатаОтключения";
	
	Запрос.УстановитьПараметр("СостояниеЗакрыто", Перечисления.СостоянияОбращений.Закрыто);
	Запрос.УстановитьПараметр("Абоненты", КомпонентыОбмена.ПараметрыКонвертации.АбонентыДляОбновленияИнформацииПоАктивнымПодпискам);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбращениеОбъект = Выборка.Обращение.ПолучитьОбъект();
		
		ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеАктивнойПодпискиНаТариф;
		
		ДанныеКонтекста = Новый Структура;
		ДанныеКонтекста.Вставить("ИсходнаяПодпискаНаТариф", ОбращениеОбъект.ПодпискаНаТариф);
		ДанныеКонтекста.Вставить("НоваяПодпискаНаТариф", Выборка.НоваяПодписка);
		
		КонтекстСобытия = БизнесСобытия.СформироватьКонтекстСобытия(ДанныеКонтекста);
		
		БизнесСобытия.ЗарегистрироватьСобытие(ОбращениеОбъект.Ссылка, , КонтекстСобытия,,
			СтрШаблон(НСтр("ru='%1%2""%3"" → ""%4""'"), Строка(ВидСобытия), Символы.ПС,
				БизнесСобытия.ПредставлениеЗначения(ОбращениеОбъект.ПодпискаНаТариф),
				БизнесСобытия.ПредставлениеЗначения(Выборка.НоваяПодписка)));
		
		ОбращениеОбъект.ПодпискаНаТариф = Выборка.НоваяПодписка;
		ОбращениеОбъект.ОбменДанными.Загрузка = Истина;
		ОбращениеОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

Процедура ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, ЕстьТЧДопРеквизиты = Ложь)
    
    Если НЕ (ДанныеXDTO.Свойство("ДополнительныеРеквизиты")
			И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты)) Тогда
		Возврат;
	КонецЕсли;
    
    Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
    
    МетаОбъект = ПолученныеДанные.Метаданные();
	ИмяБазовогоТипа = "";
	Если Метаданные.Документы.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "Документ";
	ИначеЕсли Метаданные.Справочники.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "Справочник";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "ПланВидовХарактеристик";
	КонецЕсли;	
	
	ТипДанныхСтрокой = ИмяБазовогоТипа+"."+МетаОбъект.Имя;
	
	МассивСтрокДопРеквизиты = Новый Массив;
	МассивСтрокДопСведения = Новый Массив;
	Для Каждого СтрокаТЧ ИЗ ДанныеXDTO.ДополнительныеРеквизиты Цикл
		ЭтоДопСведение = СтрокаТЧ.Свойство.Свойство("ЭтоДополнительноеСведение") И СтрокаТЧ.Свойство.ЭтоДополнительноеСведение;
		ДопРеквизитыСтрока = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения.Добавить();
		ДопРеквизитыСтрока.Свойство = СтрокаТЧ.Свойство;
		ДопРеквизитыСтрока.ЭтоДопСведение = ЭтоДопСведение;
		ДопРеквизитыСтрока.ТипОбъекта = ТипДанныхСтрокой;
	
		СтруктураДанныхСтроки = Новый Структура("Свойство, Значение");
	
		//Проверка на простой тип
		Если ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Строка")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Число")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Дата")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Булево") Тогда
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			СтруктураДанныхСтроки.Значение = СтрокаТЧ.ЗначениеСвойства;
		Иначе
			ИмяПКО = "";
			ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
			Если ИмяПКО = "" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			ЗначениеСвойства = СтрокаТЧ.ЗначениеСвойства;
			Если ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов" Тогда
				Если НЕ (ЗначениеСвойства.Свойство("Владелец") И ЗначениеЗаполнено(ЗначениеСвойства.Владелец)) Тогда
					// Ключевое свойство Владелец необходимо указать явно
					ЗначениеСвойства.Вставить("Владелец", СтрокаТЧ.Свойство);
				КонецЕсли;
			КонецЕсли;
			СтруктураДанныхСтроки.Значение = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
		КонецЕсли;
		Если ЭтоДопСведение Тогда
			МассивСтрокДопСведения.Добавить(СтруктураДанныхСтроки);
		ИначеЕсли ЕстьТЧДопРеквизиты Тогда
			МассивСтрокДопРеквизиты.Добавить(СтруктураДанныхСтроки);
        КонецЕсли;
        ДопРеквизитыСтрока.Значение = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
	КонецЦикла;
	Если МассивСтрокДопРеквизиты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеРеквизиты", МассивСтрокДопРеквизиты);
	КонецЕсли;
	Если МассивСтрокДопСведения.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеСведения", МассивСтрокДопСведения);
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗагрузитьДополнительныеСведения(ОбъектСсылка, СтруктураДопСвойства, КомпонентыОбмена)
    
    Если СтруктураДопСвойства.Свойство("ДополнительныеСведения") = Ложь ИЛИ 
		СтруктураДопСвойства.ДополнительныеСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	ДопСведенияНаборЗаписей.ОбменДанными.Загрузка = Истина;
	ПКО_ДопРеквизиты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты");
    
    Для Каждого СтрокаДопСведения ИЗ СтруктураДопСвойства.ДополнительныеСведения Цикл
		СвойствоОбъект = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
			СтрокаДопСведения.Свойство, 
			ПКО_ДопРеквизиты, 
			"ПолучитьСсылку");
        Если СвойствоОбъект.Ссылка.ПолучитьОбъект() = Неопределено Тогда
			СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				СтрокаДопСведения.Свойство, 
				ПКО_ДопРеквизиты, 
				"КонвертироватьИЗаписать").Ссылка;
        Иначе 
            СвойствоСсылка = СвойствоОбъект.Ссылка;        
		КонецЕсли;
			
		Если ТипЗнч(СтрокаДопСведения.Значение) = Тип("Структура") Тогда
			ПКО_ЗначениеСвойства = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,СтрокаДопСведения.Значение.ИмяПКО);
			ЗначениеСвойстваОбъект = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					СтрокаДопСведения.Значение.Значение, 
					ПКО_ЗначениеСвойства, 
					"ПолучитьСсылку");
                    
			Если ЗначениеСвойстваОбъект.Ссылка.ПолучитьОбъект() = Неопределено Тогда
				ЗначениеСвойстваОбъект = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					СтрокаДопСведения.Значение.Значение, 
					ПКО_ЗначениеСвойства, 
					"КонвертироватьИЗаписать").Ссылка;
            Иначе 
                ЗначениеСвойства = ЗначениеСвойстваОбъект.Ссылка;        
			КонецЕсли;
		Иначе
			ЗначениеСвойства = СтрокаДопСведения.Значение;
		КонецЕсли;
		НовЗапись = ДопСведенияНаборЗаписей.Добавить();
		НовЗапись.Объект = ОбъектСсылка;
		НовЗапись.Свойство = СвойствоСсылка;
		НовЗапись.Значение = ЗначениеСвойства;
	КонецЦикла;	
    
    ДопСведенияНаборЗаписей.Записать();
    
КонецПроцедуры

Процедура ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО)
    
    ТипЗначенияСвойства = ЗначениеСвойства.ТипЗначения;
	
	Если Найти(ТипЗначенияСвойства, "ЗначенияДополнительныхРеквизитов")>0 Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Пользователь")>0 Тогда
		ИмяПКО = "Справочник_Пользователи";
	КонецЕсли;
    
КонецПроцедуры

Процедура ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена)
    
    ДопРеквизитыИСведения = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения;
	Если ДопРеквизитыИСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СоответствиеТипОбъектаИНабор = Новый Соответствие;
	ИменаПредопределенных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИменаПредопределенных();
    
    Для Каждого СтрокаДопРеквизиты ИЗ ДопРеквизитыИСведения Цикл
		// Получение набора доп. реквизитов.
		НаборДопРеквизитов = СоответствиеТипОбъектаИНабор.Получить(СтрокаДопРеквизиты.ТипОбъекта);
		Если НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
			//На прошлых итерациях не удалось найти набор доп реквизитов.
			Продолжить;
		ИначеЕсли НаборДопРеквизитов = Неопределено Тогда
			// Поиск набора еще не выполнялся.
			// 1 этап - прямой поиск.
			ИмяПредопределенногоЭлемента = СтрЗаменить(СтрокаДопРеквизиты.ТипОбъекта, ".", "_");
			Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
				НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
				Если НаборДопРеквизитов.ЭтоГруппа Тогда
					НаборДопРеквизитов = Неопределено;
				КонецЕсли;
			КонецЕсли;
			// 2 этап - поиск общего элемента.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяПредопределенногоЭлемента = ИмяПредопределенногоЭлемента + "_Общие";
				Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
					НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
					Если НаборДопРеквизитов.ЭтоГруппа Тогда
						НаборДопРеквизитов = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// 3 этап - поиск по наименованию.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяТипаОбъекта = Прав(СтрокаДопРеквизиты.ТипОбъекта, СтрДлина(СтрокаДопРеквизиты.ТипОбъекта) - Найти(СтрокаДопРеквизиты.ТипОбъекта, "."));
				Запрос = Новый Запрос;
				Запрос.Текст = 
                    "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
    				|ИЗ Справочник.НаборыДополнительныхРеквизитовИСведений
    				|ГДЕ ЭтоГруппа = Ложь И Наименование ПОДОБНО &ИмяПоиск";
				Запрос.УстановитьПараметр("ИмяПоиск", "%"+ИмяТипаОбъекта+"%");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НаборДопРеквизитов = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если НаборДопРеквизитов = Неопределено Тогда
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
				Продолжить;
			Иначе
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитов);
			КонецЕсли;
		КонецЕсли; 
		// Преобразование свойства из XDTO в ссылку.
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
							СтрокаДопРеквизиты.Свойство, 
							ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты"),
							"ПолучитьСсылку").Ссылка;
		Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
			// Возможно на этапе анализа данных, когда данные еще не загружены в ИБ.					
			Продолжить;
		КонецЕсли;
		// Проверка наличия в наборе доп реквизита или доп сведения.
		ИмяТабЧасти = ?(СтрокаДопРеквизиты.ЭтоДопСведение, "ДополнительныеСведения", "ДополнительныеРеквизиты");
		Если НаборДопРеквизитов[ИмяТабЧасти].Найти(СвойствоСсылка, "Свойство") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(НаборДопРеквизитов) = Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда
			// Набор еще не менялся. Получение объекта и размещение его в соответствии.
			НаборДопРеквизитовОбъект = НаборДопРеквизитов.ПолучитьОбъект();
			СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитовОбъект); 
		Иначе
			НаборДопРеквизитовОбъект = НаборДопРеквизитов;
		КонецЕсли;
		НаборДопРеквизитовОбъект.ОбменДанными.Загрузка = Истина;
		СтрокаТЧ = НаборДопРеквизитовОбъект[ИмяТабЧасти].Добавить();
		СтрокаТЧ.Свойство = СвойствоСсылка;	
	КонецЦикла;
    
    // Запись измененных наборов.
	Для Каждого ЭлементСоответствияНабора ИЗ СоответствиеТипОбъектаИНабор Цикл
		Если ТипЗнч(ЭлементСоответствияНабора.Значение) = Тип("СправочникОбъект.НаборыДополнительныхРеквизитовИСведений") Тогда
			НаборДопРеквизитовОбъект = ЭлементСоответствияНабора.Значение;
			НаборДопРеквизитовОбъект.КоличествоРеквизитов = Формат(НаборДопРеквизитовОбъект.ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			
			НаборДопРеквизитовОбъект.КоличествоСведений   = Формат(НаборДопРеквизитовОбъект.ДополнительныеСведения.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			НаборДопРеквизитовОбъект.Записать();
        КонецЕсли;
        
    КонецЦикла;
    
    Для каждого Строка Из КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения Цикл
        Если ТипЗнч(Строка.Свойство) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
            СвойствоСсылка = Строка.Свойство;
        ИначеЕсли ТипЗнч(Строка.Свойство) = Тип("Структура") Тогда
            СвойствоСсылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.Свойство.Ссылка.Значение));
            Если СвойствоСсылка.ПолучитьОбъект() = Неопределено Тогда
                Продолжить;
            КонецЕсли;
        КонецЕсли;
        Если Не СвойствоСсылка.ТипЗначения.СодержитТип(ТипЗначения(Строка.Значение)) Тогда
            ДобавляемыеТипы = Новый Массив;
            ДобавляемыеТипы.Добавить(ТипЗначения(Строка.Значение));
            ВычитаемыеТипы = Новый Массив;
            ВычитаемыеТипы.Добавить(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"));
            СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
            СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(СвойствоОбъект.ТипЗначения, ДобавляемыеТипы, ВычитаемыеТипы);
            СвойствоОбъект.Записать();
        КонецЕсли;
        
    КонецЦикла; 
    
КонецПроцедуры

Функция ТипЗначения(ЗначениеСвойства)
    
    Если Не ЗначениеЗаполнено(ЗначениеСвойства.ИмяПКО) Тогда
        Возврат ТипЗнч(ЗначениеСвойства.Значение);
    ИначеЕсли ЗначениеСвойства.ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов" Тогда
        Возврат Тип("СправочникСсылка.ЗначенияСвойствОбъектов");
    ИначеЕсли ЗначениеСвойства.ИмяПКО = "Справочник_Пользователи" Тогда
        Возврат Тип("СправочникСсылка.ПользователиСервисов");
    КонецЕсли;
	
КонецФункции
 
Функция ВерсияФорматаЧислом(СтрокаВерсии)
    
    Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.1.1" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный]) * МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
    
    Возврат ВерсияФорматаЧислом;
    
КонецФункции

Функция НайтиСоздатьОбъект(Данные, ИмяПКО, КомпонентыОбмена)
    
    ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
    Объект = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Данные, ПКО, "ПолучитьСсылку");
    Если Объект = Неопределено Тогда
        Объект = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Данные, ПКО, "КонвертироватьИЗаписать");
    КонецЕсли;
    
    Возврат Объект;

КонецФункции

    
#КонецОбласти

#Область Параметры

//Заполняет параметры конвертации
// Параметры:
//	ПараметрыКонвертации - Структура
//
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	
	ПараметрыКонвертации.Вставить("Сервис");
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

//Выполняет процедуру модуля менеджера по переданному имени процедуры
//
//Параметры:
//	ИмяПроцедуры - Строка - строка с именем процедуры
//	Параметры - Структура - параметры обмена
//
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	
	Если ИмяПроцедуры = "ПКО_Справочник_Абоненты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Абоненты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Абоненты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Абоненты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Пользователи_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПользователиПриложений_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ПользователиПриложений_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПользователиПриложений_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ПользователиПриложений_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
            
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПользователиАбонентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ПользователиАбонентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
            
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПользователиАбонентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ПользователиАбонентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
            
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВзаимоотношенияАбонентов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ВзаимоотношенияАбонентов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
            
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВзаимоотношенияАбонентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ВзаимоотношенияАбонентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
            
    ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Конфигурации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Конфигурации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВерсииКонфигураций_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ВерсииКонфигураций_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ИнформационныеБазы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ИнформационныеБазы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ИнформационныеБазы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Приложения_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Приложения_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
            
    ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ВидыОграниченийТарифов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Тарифы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Тарифы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Тарифы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Тарифы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Подписка_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_Подписка_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Подписка_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_Подписка_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
			
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
            
	ИначеЕсли ИмяПроцедуры = "ПОД_ДополнительныеРеквизиты_Получение_ПриОбработке" Тогда 
		ПОД_ДополнительныеРеквизиты_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
            
    ИначеЕсли ИмяПроцедуры = "ПОД_ЗначенияДопРеквизитов_Получение_ПриОбработке" Тогда 
		ПОД_ЗначенияДопРеквизитов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
    КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьСвойство(Свойства, СвойствоФормата, ПравилоКонвертацииСвойства = "", ИспользуетсяАлгоритмКонвертации = Истина)
    
    НоваяСтрока = Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = СвойствоФормата;
	НоваяСтрока.ПравилоКонвертацииСвойства = ПравилоКонвертацииСвойства;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ИспользуетсяАлгоритмКонвертации;

КонецПроцедуры

#КонецОбласти

