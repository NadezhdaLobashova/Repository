
#Область ПрограммныйИнтерфейс

// Процедура - Перенаправить объекты
//
// Параметры:
//  Ссылки - Массив - ссылки на объекты типа СправочникСсылка.Консультации, СправочникСсылка.Ошибки, 
//                    СправочникСсылка.Пожелания, ДокументСсылка.Обращение, ЗадачаСсылка.ЗадачаИсполнителя 
//  Параметры - Структура - параметры перенаправления:
//              * Исполнитель - СправочникСсылка.Пользователи, СправочникСсылка.ЛинииПоддержки.
//              * Комментарий - комментарий перенаправления.
//
Процедура ПеренаправитьОбъекты(Ссылки, Параметры) Экспорт
    
    Если Ссылки.Количество() = 0 Тогда
        Возврат;
    КонецЕсли; 
    
    Адресация = Адресация(Параметры);
    СведенияОПользователе = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
    
    Если РегистрыСведений.РазрешенныеВзаимодействияЛинийПоддержки.РазрешеноВзаимодействие(СведенияОПользователе.ЛинияПоддержки, Адресация.ЛинияПоддержки) Тогда
        Если ТипЗнч(Ссылки[0]) = Тип("СправочникСсылка.Консультации") Тогда
            ПеренаправитьОбъектыБазыЗнаний(Ссылки, Справочники.Консультации, Параметры, Адресация);
        ИначеЕсли ТипЗнч(Ссылки[0]) = Тип("СправочникСсылка.Ошибки") Тогда
            ПеренаправитьОбъектыБазыЗнаний(Ссылки, Справочники.Ошибки, Параметры, Адресация);
        ИначеЕсли ТипЗнч(Ссылки[0]) = Тип("СправочникСсылка.Пожелания") Тогда
            ПеренаправитьОбъектыБазыЗнаний(Ссылки, Справочники.Пожелания, Параметры, Адресация);
        ИначеЕсли ТипЗнч(Ссылки[0]) = Тип("ДокументСсылка.Обращение") Тогда  
            ПеренаправитьОбращения(Ссылки, Параметры, Адресация);
        ИначеЕсли ТипЗнч(Ссылки[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда  
            ПеренаправитьЗадачи(Ссылки, Параметры, Адресация);
        Иначе
            ВызватьИсключение НСтр("ru='Не поддерживаемый объект перенаправления.'");
        КонецЕсли;
    Иначе
        ВызватьИсключение НСтр("ru='Перенаправление на указанную адресацию не разрешено.'"); 
    КонецЕсли;
    
КонецПроцедуры

// Функция - Новый пароль
// 
// Возвращаемое значение:
//  Строка - сгенерированный пароль.
//
Функция НовыйПароль() Экспорт
 
	Возврат Обслуживание.НовыйПароль();
 
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПеренаправитьЗадачи(МассивЗадач, Параметры, Адресация)
	
	УстановитьПривилегированныйРежим(Истина);
    
    НовыйСписокСсылок = Новый Массив();
    
	Попытка
        ЗадачиМогутБытьПеренаправлены = БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(
		    МассивЗадач, Неопределено, Истина);
    	Если НЕ ЗадачиМогутБытьПеренаправлены И МассивЗадач.Количество() = 1 Тогда
    		ВызватьИсключение(НСтр("ru = 'Невозможно перенаправить уже выполненную задачу.'"));
        КонецЕсли;
        МассивПеренаправленныхЗадач = Новый Массив;
        ПараметрыПеренаправления = Новый Структура("Исполнитель, РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации, Комментарий");
        ПараметрыПеренаправления.Комментарий = Параметры.Комментарий;
        Если ТипЗнч(Адресация.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
            ПараметрыПеренаправления.Исполнитель = Адресация.Исполнитель;
        Иначе
            ПараметрыПеренаправления.РольИсполнителя = Справочники.РолиИсполнителей.СотрудникЛинииПоддержки;
            ПараметрыПеренаправления.ОсновнойОбъектАдресации = Адресация.ОбслуживающаяОрганизация;
            ПараметрыПеренаправления.ДополнительныйОбъектАдресации = Адресация.ЛинияПоддержки;
        КонецЕсли;
        БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(
    		МассивЗадач, ПараметрыПеренаправления, Ложь, МассивПеренаправленныхЗадач);
    Исключение
		ВызватьИсключение НСтр("ru='Ошибка при перенаправлении задачи'");
        
    КонецПопытки;
	
	МассивЗадач = МассивПеренаправленныхЗадач;
    
КонецПроцедуры

Процедура ПеренаправитьОбъектыБазыЗнаний(Ссылки, МенеджерОбъектов, Параметры, Адресация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработанныеСсылки = Новый Массив();
	НачатьТранзакцию();
    
	Попытка
		МенеджерОбъектов.ЗаблокироватьОбъекты(Ссылки);
		Для каждого Ссылка Из Ссылки Цикл
			Если ТипЗнч(Ссылка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
				Продолжить;
			КонецЕсли;
			Объект = Ссылка.ПолучитьОбъект();
			Если Не Объект.ПроверитьЗаполнение() Тогда
				Продолжить;
			КонецЕсли;
			Объект.Ответственный = Адресация.Ответственный;
			Объект.ОбслуживающаяОрганизация = Адресация.ОбслуживающаяОрганизация;
			Объект.ЛинияПоддержки = Адресация.ЛинияПоддержки;
			Объект.ДополнительныеСвойства.Вставить("КомментарийПеренаправления", Параметры.Комментарий);
            ДобавитьКомментарий(Объект, Параметры);
			Объект.Записать();
			ОбработанныеСсылки.Добавить(Ссылка);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Ссылки = ОбработанныеСсылки;
	
КонецПроцедуры

Процедура ПеренаправитьОбращения(Ссылки, Параметры, Адресация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйСписокСсылок = Новый Массив();
	НачатьТранзакцию();
    
	Попытка
		Документы.Обращение.ЗаблокироватьОбъекты(Ссылки);
		Для каждого Ссылка Из Ссылки Цикл
			Если ТипЗнч(Ссылка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
				Продолжить;
			КонецЕсли;
			Объект = Ссылка.ПолучитьОбъект();
			Объект.Исполнитель = Адресация.Исполнитель;
			Объект.ЛинияПоддержки = Адресация.ЛинияПоддержки;
			Объект.ОбслуживающаяОрганизация = Адресация.ОбслуживающаяОрганизация;
			Объект.ДополнительныеСвойства.Вставить("КомментарийПеренаправления", Параметры.Комментарий);
			//+ Котова А.Ю. 25.09.2018 ТЗ№ 86200 { 
			
            //ДобавитьКомментарий(Объект, Параметры);
			ПроверкаПройдена = Объект.ПроверитьЗаполнение();
			СоответствиеПройденаПроверкаДокументов = Новый Соответствие;
			СоответствиеПройденаПроверкаДокументов.Вставить(Ссылка, ПроверкаПройдена);
			Если Параметры = Неопределено  Тогда
				
				Параметры = Новый Структура;
			    
			КонецЕсли;
			Параметры.Вставить("СоответствиеПройденаПроверкаДокументов",СоответствиеПройденаПроверкаДокументов);
			
			Если Не ПроверкаПройдена Тогда //Было: Если Не Объект.ПроверитьЗаполнение() Тогда
				Продолжить;
			КонецЕсли;
            ДобавитьКомментарий(Объект, Параметры);
			//- Котова А.Ю. 25.09.2018 ТЗ№ 86200 }
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			НовыйСписокСсылок.Добавить(Ссылка);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
        
    Исключение                                                                      
		ОтменитьТранзакцию();
		ВызватьИсключение;
        
    КонецПопытки;
    
    Ссылки = НовыйСписокСсылок;
	
КонецПроцедуры

Функция Адресация(Параметры) 
	
    Если Параметры.Свойство("Исполнитель") Тогда
        Исполнитель = Параметры.Исполнитель;
    ИначеЕсли Параметры.Свойство("Ответственный") Тогда
        Исполнитель = Параметры.Ответственный;
    Иначе
        ВызватьИсключение НСтр("ru='Не задан исполнитель.'"); 
    КонецЕсли;
    
    Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
        Сведения = РегистрыСведений.СведенияОПользователях.СведенияОПользователе(Исполнитель);
        ЛинияПоддержки = Сведения.ЛинияПоддержки;
        ОбслуживающаяОрганизация = Сведения.ОбслуживающаяОрганизация;
    ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.ЛинииПоддержки") Тогда 
        ЛинияПоддержки = Исполнитель;
        ОбслуживающаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Исполнитель, "Владелец");
    Иначе
        ВызватьИсключение НСтр("ru='Исполнитель задан некорректно, ожидаются типы: справочник ""Пользователи"" или справочник ""Линии поддержки"".'"); 
    КонецЕсли;
    
    Возврат Новый Структура("Исполнитель, Ответственный, ЛинияПоддержки, ОбслуживающаяОрганизация", 
                            Исполнитель, Исполнитель, ЛинияПоддержки, ОбслуживающаяОрганизация); 
	
КонецФункции

Процедура ДобавитьКомментарий(Объект, Параметры)
    
    НовыйКомментарий = Справочники.Комментарии.СоздатьЭлемент();
	НовыйКомментарий.ВладелецКомментария = Объект.Ссылка;
    НовыйКомментарий.Автор = ПараметрыСеанса.АвторизованныйПользователь;
    НовыйКомментарий.ЛинияПоддержки = РегистрыСведений.СведенияОПользователях.СведенияОПользователе(НовыйКомментарий.Автор).ЛинияПоддержки;
    НовыйКомментарий.Дата = ТекущаяДатаСеанса();
    НовыйКомментарий.Комментарий = Параметры.Комментарий;
    НовыйКомментарий.ВнутренняяПереписка = ?(Параметры.Свойство("ВнутренняяПереписка"), Параметры.ВнутренняяПереписка, Ложь);
	НовыйКомментарий.Записать();
    
КонецПроцедуры

#КонецОбласти 
