
#Область ПрограммныйИнтерфейс

// Получает заголовочную часть сводки по шаблону.
//
// Параметры:
//  Ссылка - СправочникСсылка.ШаблоныПоручений - ссылка на шаблон бизнес-процесса.
// 
// Возвращаемое значение:
//  Строка - строка с описанием типа процесса, наименованием шаблона и комментарием к шаблону.
//
Функция ОбщаяЧастьОписанияШаблона(Ссылка) Экспорт
	
	Результат = "";
	
	Результат = Результат 
		+ СтрШаблон("%1: %2", НСтр("ru = 'Шаблон процесса'"),
          Метаданные.БизнесПроцессы[ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка).ИмяПроцесса(Ссылка)].Синоним)
		+ Символы.ПС;
	
	Если ЗначениеЗаполнено(Ссылка.Наименование) Тогда
		Результат = Результат + СтрШаблон("%1: %2", НСтр("ru = 'Наименование шаблона"), Ссылка.Наименование) + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.Комментарий) Тогда
		Результат = Результат + СтрШаблон("%1: %2", НСтр("ru = 'Комментарий'"), Ссылка.Комментарий) + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Результат = Результат + Символы.ПС;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает шаблоны по объекту
//
// Параметры:
//  Объект            - БизнесПроцессСсылка - ссылка на объект, для которого нужно получить шаблоны.
//  ТолькоНастроенные - Булево - признак возврата только настроенных шаблонов.
// 
// Возвращаемое значение:
//  Массив - массив шаблонов.
//
Функция ШаблоныПоОбъекту(Объект, ТолькоНастроенные = Истина) Экспорт
	
	ИдентификаторОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Объект));
	
	ШаблоныПоОбъекту = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Объект) Тогда 
		Возврат ШаблоныПоОбъекту;
	КонецЕсли;	
	
	Если ИдентификаторОбъекта <> ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("СправочникСсылка.Консультации")) 
		И ИдентификаторОбъекта <> ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("СправочникСсылка.Ошибки")) 
		И ИдентификаторОбъекта <> ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("СправочникСсылка.Пожелания")) 
		И ИдентификаторОбъекта <> ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.Обращение")) Тогда
		
		Возврат ШаблоныПоОбъекту;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса КАК Шаблон,
		|	НастройкаШаблоновБизнесПроцессов.Условие КАК Условие
		|ИЗ
		|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
		|ГДЕ
		|	НастройкаШаблоновБизнесПроцессов.ИдентификаторОбъекта = &ИдентификаторОбъекта
		|	И (НЕ НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса.ПометкаУдаления)";
		
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", ИдентификаторОбъекта);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Выборка =  Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.Условие.Пустая() Тогда
				РезультатПроверки = РаботаСУсловиямиМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Объект, Выборка.Условие);
				Если РезультатПроверки Тогда
					ШаблоныПоОбъекту.Добавить(Выборка.Шаблон);
				КонецЕсли;
			Иначе
				ШаблоныПоОбъекту.Добавить(Выборка.Шаблон);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ТолькоНастроенные И ШаблоныПоОбъекту.Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Шаблоны.Ссылка КАК Шаблон,
			|   ЗНАЧЕНИЕ(Справочник.УсловияМаршрутизации.ПустаяСсылка) КАК Условие
			|ИЗ
			|	Справочник.ШаблоныПоручений КАК Шаблоны
			|ГДЕ
			|	0 В
			|			(ВЫБРАТЬ
			|				КОЛИЧЕСТВО(*)
			|			ИЗ
			|				РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблонов
			|			ГДЕ
			|				НастройкаШаблонов.ШаблонБизнесПроцесса = Шаблоны.Ссылка)";
			
		Выборка =  Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.Условие.Пустая() Тогда
				РезультатПроверки = РаботаСУсловиямиМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Объект, Выборка.Условие);
				Если РезультатПроверки Тогда
					ШаблоныПоОбъекту.Добавить(Выборка.Шаблон);
				КонецЕсли;
			Иначе
				ШаблоныПоОбъекту.Добавить(Выборка.Шаблон);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШаблоныПоОбъекту;
	
КонецФункции 	

// Возвращает признак доступности к изменению процесса по шаблону.
//
// Параметры:
//  Объект - БизнесПроцессСсылка - проверяемый объект.
// 
// Возвращаемое значение:
//  Булево - признак доступности. 
//
Функция ДоступностьПоШаблону(Объект) Экспорт
	
	БизнесПроцесс = Объект.Ссылка;
	Шаблон = Объект.Шаблон;
	
	ИдентификаторыОбъектов = Новый Массив;
	ИдентификаторыОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Консультации"));
	ИдентификаторыОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Ошибки"));
	ИдентификаторыОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.Пожелания"));
	ИдентификаторыОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.Обращение"));
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкаШаблоновБизнесПроцессов.ЗапрещеноИзменение КАК ЗапрещеноИзменение
	|ИЗ
	|	РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
	|ГДЕ
	|	НастройкаШаблоновБизнесПроцессов.ИдентификаторОбъекта В (&ИдентификаторыОбъектов)
	|	И НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = &Шаблон";
	
	Запрос.УстановитьПараметр("ИдентификаторыОбъектов", ИдентификаторыОбъектов);
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ЕстьЗапрещеноИзменение = Ложь;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЗапрещеноИзменение Тогда 
			ЕстьЗапрещеноИзменение = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Не ЕстьЗапрещеноИзменение Тогда 
		Возврат Истина;
	КонецЕсли;	
		
	Возврат Ложь;
	
КонецФункции	

// Возвращает список значений доступных функций автоподстановки исполнителей процессов.
// 
// Возвращаемое значение:
//   Массив - список доступных функций автоподстановки.
//
Функция СписокДоступныхФункций() Экспорт
	
	ДоступныеФункции = ШаблоныБизнесПроцессовПереопределяемый.СписокДоступныхФункций();
	
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.АвторПроцесса(Объект)", 								  НСтр("ru = 'Автор процесса'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.НепосредственныйРуководительАвтораПроцесса(Объект)",	  НСтр("ru = 'Непосредственный руководитель автора процесса'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ЛинияПоддержкиАвтораПроцесса(Объект)",  				  НСтр("ru = 'Линия поддержки автора процесса'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ПерваяЛинияПоддержкиОрганизацииАвтораПроцесса(Объект)", НСтр("ru = 'Первая линия поддержки организации автора процесса'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.АвторПредмета(Объект)",   							  НСтр("ru = 'Автор предмета'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.НепосредственныйРуководительАвтораПредмета(Объект)",	  НСтр("ru = 'Непосредственный руководитель автора предмета'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ЛинияПоддержкиАвтораПредмета(Объект)",   				  НСтр("ru = 'Линия поддержки автора предмета'"));
	ДоступныеФункции.Добавить("ШаблоныБизнесПроцессов.ПерваяЛинияПоддержкиОрганизацииАвтораКарточки(Объект)", НСтр("ru = 'Первая линия поддержки организации автора предмета'"));
	
	ДоступныеФункции.СортироватьПоПредставлению();
	
	Возврат ДоступныеФункции;
	
КонецФункции

// Возвращает результат автоподстановки по значению Автоподстановки.
//
// Параметры:
//  Автоподстановка - Строка - значение автоподстановки.
//  Объект - БизнесПроцессОбъект - объект для получения результата автоподстановки.
// 
// Возвращаемое значение:
//   - значение автоподстановки.
//
Функция ЗначениеАвтоподстановки(Автоподстановка, Объект) Экспорт
	
	ФункцияАвтоподстановки = "";
	
	СписокФункций = СписокДоступныхФункций();
	
	Для Инд = 0 По СписокФункций.Количество() - 1 Цикл
		Если СписокФункций[Инд].Представление = Автоподстановка Тогда 
			ФункцияАвтоподстановки = СписокФункций[Инд].Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если ФункцияАвтоподстановки = "" Тогда 
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не определена автоподстановка %1'"), Автоподстановка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	РезультатФункции = Неопределено;
	Попытка
		Выполнить("РезультатФункции = " + ФункцияАвтоподстановки);
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при выполнении автоподстановки %1:
			|%2'"), Автоподстановка, ИнформацияОбОшибке().Описание);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
    Если (ТипЗнч(РезультатФункции) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(РезультатФункции)) 
     Или (ТипЗнч(РезультатФункции) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(РезультатФункции)) 
     Или (ТипЗнч(РезультатФункции) = Тип("Структура")) 
     Или (ТипЗнч(РезультатФункции) = Тип("Массив") И РезультатФункции.Количество() > 0) Тогда 
		Возврат РезультатФункции;
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найдены исполнители для автоподстановки ""%1"".
					|Обратитесь к администратору.'"), Автоподстановка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

// Возвращает пустую ссылку на бизнес-процесс по шаблону.
//
// Параметры:
//  ШаблонБизнесПроцесса - СправочникСсылка.ШаблоныБизнесПроцессов - шаблон бизнес-процесса.
// 
// Возвращаемое значение:
//  БизнесПроцессСсылка - пустая ссылка на бизнес-процесс.
//
Функция ПустаяСсылкаНаПроцессПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	ИмяТипаПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ШаблонБизнесПроцесса).ИмяПроцесса(ШаблонБизнесПроцесса);
	Возврат БизнесПроцессы[ИмяТипаПроцесса].ПустаяСсылка();
		
КонецФункции

// Возвращает имя процесса, которое будет установлено в случае, если в шаблоне оно не указано.
//
Функция НаименованиеПроцессаПоУмолчанию(ИмяСправочника, Шаблон = Неопределено) Экспорт
	
	ИмяПроцесса = "";
	
    Если ИмяСправочника = "ШаблоныПоручения" Тогда
		ИмяПроцесса = СтрШаблон("%1 ", НСтр("ru='Выполнить'"));
	КонецЕсли;
	
	Возврат ИмяПроцесса;
	
КонецФункции

// Выполняет начальное заполнение шаблона бизнес-процесса
//
// Параметры:
//  Шаблон           - СправочникОбъект.ШаблоныПоручений - шаблон для заполнения.
//  ДанныеЗаполнения - Структура - структура с данными заполнения.
//
Процедура НачальноеЗаполнениеШаблона(Шаблон, ДанныеЗаполнения) Экспорт
	
	МетаданныеШаблона = Шаблон.Метаданные();
	РеквизитыШаблона = МетаданныеШаблона.Реквизиты;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ТипШаблона") Тогда
		Шаблон.ТипШаблона = ДанныеЗаполнения.ТипШаблона;
	КонецЕсли;
	
	Если РеквизитыШаблона.Найти("НаименованиеБизнесПроцесса") <> Неопределено Тогда
		Шаблон.НаименованиеБизнесПроцесса = НаименованиеПроцессаПоУмолчанию(МетаданныеШаблона.Имя, Шаблон);
	КонецЕсли;
	
	Если РеквизитыШаблона.Найти("ДобавлятьНаименованиеПредмета") <> Неопределено Тогда
		Шаблон.ДобавлятьНаименованиеПредмета = Истина;
	КонецЕсли;
	
	Если РеквизитыШаблона.Найти("Важность") <> Неопределено Тогда
		Шаблон.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	КонецЕсли;
	
	Шаблон.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

#Область АвтоподстановкиДляПроцессов

Функция АвторПроцесса(ПроцессОбъект) Экспорт
	
	Возврат ПроцессОбъект.Автор;

КонецФункции

Функция НепосредственныйРуководительАвтораПроцесса(ПроцессОбъект) Экспорт 
	
	АвторБизнесПроцесса = ПроцессОбъект.Автор;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПользователях.ЛинияПоддержки КАК ЛинияПоддержки,
		|	СведенияОПользователях.ЛинияПоддержки.Руководитель КАК Руководитель
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", АвторБизнесПроцесса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЛинияПоддержки = Выборка.ЛинияПоддержки;
	Если Выборка.Руководитель <> АвторБизнесПроцесса Тогда 
		Возврат Выборка.Руководитель;
	КонецЕсли;
	
	Пока ЛинияПоддержки.Родитель <> Неопределено Цикл
		ЛинияПоддержки = ЛинияПоддержки.Родитель;
		Если ЛинияПоддержки.Руководитель <> АвторБизнесПроцесса Тогда 
			Возврат ЛинияПоддержки.Руководитель;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЛинияПоддержки, "Руководитель");
	
КонецФункции	

Функция ЛинияПоддержкиАвтораПроцесса(ПроцессОбъект) Экспорт
	
	АвторБизнесПроцесса = ПроцессОбъект.Автор;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПользователях.ЛинияПоддержки,
		|	СведенияОПользователях.ОбслуживающаяОрганизация
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", АвторБизнесПроцесса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ДанныеИсполнителя = Новый Структура;
	ДанныеИсполнителя.Вставить("РольИсполнителя",Справочники.РолиИсполнителей.СотрудникЛинииПоддержки);
	ДанныеИсполнителя.Вставить("ОсновнойОбъектАдресации",Выборка.ОбслуживающаяОрганизация);
	ДанныеИсполнителя.Вставить("ДополнительныйОбъектАдресации",Выборка.ЛинияПоддержки);
	
	Возврат ДанныеИсполнителя;
	
КонецФункции 

Функция ПерваяЛинияПоддержкиОрганизацииАвтораПроцесса(ПроцессОбъект) Экспорт
	
	АвторБизнесПроцесса = ПроцессОбъект.Автор;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПользователях.ОбслуживающаяОрганизация,
		|	СведенияОПользователях.ОбслуживающаяОрганизация.ПерваяЛинияПоддержки КАК ЛинияПоддержки
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", АвторБизнесПроцесса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ДанныеИсполнителя = Новый Структура;
	ДанныеИсполнителя.Вставить("РольИсполнителя",Справочники.РолиИсполнителей.СотрудникЛинииПоддержки);
	ДанныеИсполнителя.Вставить("ОсновнойОбъектАдресации",Выборка.ОбслуживающаяОрганизация);
	ДанныеИсполнителя.Вставить("ДополнительныйОбъектАдресации",Выборка.ЛинияПоддержки);
	
	Возврат ДанныеИсполнителя;
	
КонецФункции

#КонецОбласти 
 
#Область АвтоподстановкиДляПредметов

Функция АвторПредмета(ПроцессОбъект) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроцессОбъект.Предмет, "Автор");
		
КонецФункции

Функция НепосредственныйРуководительАвтораПредмета(ПроцессОбъект) Экспорт 
	
	АвторПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроцессОбъект.Предмет, "Автор");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПользователях.ЛинияПоддержки КАК ЛинияПоддержки
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь";
		
	Запрос.УстановитьПараметр("Пользователь", АвторПредмета);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЛинияПоддержки = Выборка.ЛинияПоддержки;
	Если ЛинияПоддержки.Руководитель <> АвторПредмета Тогда 
		Возврат ЛинияПоддержки.Руководитель;
	КонецЕсли;
	
	Пока ЛинияПоддержки.Родитель <> Неопределено Цикл
		ЛинияПоддержки = ЛинияПоддержки.Родитель;
		Если ЛинияПоддержки.Руководитель <> АвторПредмета Тогда 
			Возврат ЛинияПоддержки.Руководитель;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЛинияПоддержки, "Руководитель");
	
КонецФункции	

Функция ЛинияПоддержкиАвтораПредмета(ПроцессОбъект) Экспорт
	
	АвторПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроцессОбъект.Предмет, "Автор");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПользователях.ЛинияПоддержки,
		|	СведенияОПользователях.ОбслуживающаяОрганизация
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", АвторПредмета);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Справочники.ЛинииПоддержки.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЛинияПоддержки = Выборка.ЛинияПоддержки;
	
	ДанныеИсполнителя = Новый Структура;
	ДанныеИсполнителя.Вставить("РольИсполнителя",Справочники.РолиИсполнителей.СотрудникЛинииПоддержки);
	ДанныеИсполнителя.Вставить("ОсновнойОбъектАдресации",Выборка.ОбслуживающаяОрганизация);
	ДанныеИсполнителя.Вставить("ДополнительныйОбъектАдресации",Выборка.ЛинияПоддержки);
	
	Возврат ДанныеИсполнителя;
	
КонецФункции

Функция ПерваяЛинияПоддержкиОрганизацииАвтораКарточки(ПроцессОбъект) Экспорт
	
	АвторПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроцессОбъект.Предмет, "Автор");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОПользователях.ОбслуживающаяОрганизация,
		|	СведенияОПользователях.ОбслуживающаяОрганизация.ПерваяЛинияПоддержки КАК ЛинияПоддержки
		|ИЗ
		|	РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|ГДЕ
		|	СведенияОПользователях.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", АвторПредмета);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Справочники.ЛинииПоддержки.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЛинияПоддержки = Выборка.ЛинияПоддержки;
	
	ДанныеИсполнителя = Новый Структура;
	ДанныеИсполнителя.Вставить("РольИсполнителя",Справочники.РолиИсполнителей.СотрудникЛинииПоддержки);
	ДанныеИсполнителя.Вставить("ОсновнойОбъектАдресации",Выборка.ОбслуживающаяОрганизация);
	ДанныеИсполнителя.Вставить("ДополнительныйОбъектАдресации",Выборка.ЛинияПоддержки);
	
	Возврат ДанныеИсполнителя;
	
КонецФункции

#КонецОбласти 

#КонецОбласти 
 