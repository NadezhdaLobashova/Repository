
Функция ЭтоПлатформа83БезРежимаСовместимости() Экспорт
	
	Информация = Новый СистемнаяИнформация;
	Возврат Лев(Информация.ВерсияПриложения, 3) = "8.3"
		И (Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать
		Или (Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13
		И Вычислить("Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_16")
		И Вычислить("Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_3_1")
		И Вычислить("Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_3_2")));
	
КонецФункции

Функция ПолучитьДоступностьРолей() Экспорт
	Роли = Новый Структура;
	Для каждого Роль Из Метаданные.Роли Цикл
		Роли.Вставить(Роль.Имя, РольДоступна(Роль));
	КонецЦикла;
	ВозВрат Роли;
КонецФункции

Функция ЕстьРеквизитОбъекта(ИмяРеквизита, ПолноеИмяОбъекта, ПроверитьДляГруппы = Неопределено) Экспорт
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	Реквизит = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);
	Если Реквизит = Неопределено Тогда
		ОбщийРеквизит = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
		Если ОбщийРеквизит = Неопределено Тогда
			ВозВрат Ложь;
		КонецЕсли;
		ЭлементСостава = ОбщийРеквизит.Состав.Найти(МетаданныеОбъекта);
		Если ЭлементСостава = Неопределено Тогда
			ВозВрат Ложь;
		КонецЕсли;
		Если ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать Тогда
			ВозВрат Ложь;
		ИначеЕсли ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
			ВозВрат Истина;
		ИначеЕсли ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто Тогда
			ВозВрат ОбщийРеквизит.Автоиспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать;
		Иначе // так не бывает пока
			ВозВрат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если Реквизит = Неопределено Тогда
		ВозВрат Ложь;
	КонецЕсли;
	Если ПроверитьДляГруппы = Неопределено Тогда
		ВозВрат Истина;
	КонецЕсли;
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		Если ПроверитьДляГруппы Тогда
			ВозВрат Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы ИЛИ Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента;
		Иначе
			ВозВрат Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента ИЛИ Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента;
		КонецЕсли;
	Иначе
		ВозВрат Истина;
	КонецЕсли;

КонецФункции // ЕстьРеквизитДокумента()

// БоР : Немного переделана стандартная и помещена в повторный возврат 25.09.2016 14:10:18
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмя, ".");
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ  = ЧастиИмени[1];
	КонецЕсли;
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Менеджер = Отчеты;
		
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Менеджер = Обработки;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		Если ЧастиИмени.Количество() = 2 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ = ЧастиИмени[2];
			ИмяПодчиненногоОМ = ЧастиИмени[3];
			Если ВРег(КлассПодчиненногоОМ) = "ПЕРЕРАСЧЕТ" Тогда
				// Перерасчет
				Попытка
					Менеджер = РегистрыРасчета[ИмяОМ].Перерасчеты;
					ИмяОм = ИмяПодчиненногоОМ;
				Исключение
					Менеджер = Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
		
	ИначеЕсли ВРег(КлассОМ) = "КОНСТАНТА" Тогда
		Менеджер = Константы;
		
	ИначеЕсли ВРег(КлассОМ) = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;
	
	Если Менеджер <> Неопределено Тогда
		Попытка
			Возврат Менеджер[ИмяОМ];
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Неизвестный тип объекта метаданных ""%1""'"), ПолноеИмя);
	
КонецФункции

Функция БорСтрРазделить(Строка, Разделитель, ВключатьПустые = Истина)  Экспорт
	Перем ИсходнаяСтрока;
	Перем КоличествоРазделителей;
	Перем Номер;
	Перем Символ;
	Перем МассивСтрок;
	Перем ОчереднаяСтрока;
	
	ИсходнаяСтрока = Строка;
	КоличествоРазделителей = СтрДлина(Разделитель);
	Для Номер = 1 По КоличествоРазделителей Цикл
		Символ = Сред(Разделитель, Номер, 1);
		ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, Разделитель, Символы.ПС);
	КонецЦикла;
	МассивСтрок = Новый Массив;
	Для Номер = 1 По СтрЧислоСтрок(ИсходнаяСтрока) Цикл
		ОчереднаяСтрока = СтрПолучитьСтроку(ИсходнаяСтрока, Номер);
		Если ЗначениеЗаполнено(ОчереднаяСтрока) ИЛИ ВключатьПустые Тогда
			МассивСтрок.Добавить(ОчереднаяСтрока);
		КонецЕсли;
	КонецЦикла;
	ВозВрат МассивСтрок;
КонецФункции

// БоР : Возвращает время и сдвиг в секундах от начала дня по значеням НачалоРабочегоДня, КонецРабочегоДня 19.07.2017 12:28:56
Функция ПолучитьРабочееВремяДня() Экспорт
	//Начало	= БоР_ОбщийМодульКлиентСервер.ВДату(УправлениеНастройками.ПолучитьНастройку("УРВ_НачалоРабочегоДня"));
	//Конец	= БоР_ОбщийМодульКлиентСервер.ВДату(УправлениеНастройками.ПолучитьНастройку("УРВ_КонецРабочегоДня"));
	Начало	= БоР_ОбщийМодульКлиентСервер.ВДату(Дата(2019,01,01,08,00,00));
	Конец	= БоР_ОбщийМодульКлиентСервер.ВДату(Дата(2019,01,01,18,00,00));
	
	СекундДоНачала		= Начало - НачалоДня(Начало);
	СекундДоКонца		= Конец - НачалоДня(Конец);
	
	Начало	= '00010101' + СекундДоНачала;
	Конец	= '00010101' + СекундДоКонца;
	
	ПервыйСлотШкалы		= НачалоЧаса(Начало);
	ПоследнийСлотШкалы	= КонецЧаса(Конец - 1) + 1; // 17-45 -> 18-00 17-00 -> 17-00
	
	ШагСеткиМин = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания();
	ШагСеткиСек = ШагСеткиМин * 60;
	ПоследнийСлотШкалы	= ПоследнийСлотШкалы - ШагСеткиСек; // Нужно еще вычесть один шаг шкалы сетки, чтобы получить последний слот в сетке
	
	СекундДоПервогоСлота		= ПервыйСлотШкалы - '00010101';
	СекундДоПоследнегоСлота		= ПоследнийСлотШкалы - '00010101';
	
	СтруктураРабочегоДня = Новый Структура;
	СтруктураРабочегоДня.Вставить("Начало"						, Начало);
	СтруктураРабочегоДня.Вставить("Конец"						, Конец);
	СтруктураРабочегоДня.Вставить("СекундДоНачала"				, СекундДоНачала);
	СтруктураРабочегоДня.Вставить("СекундДоКонца"				, СекундДоКонца);
	СтруктураРабочегоДня.Вставить("ПервыйСлотШкалы"				, ПервыйСлотШкалы);
	СтруктураРабочегоДня.Вставить("ПоследнийСлотШкалы"			, ПоследнийСлотШкалы);
	СтруктураРабочегоДня.Вставить("СекундДоПервогоСлота"		, СекундДоПервогоСлота);
	СтруктураРабочегоДня.Вставить("СекундДоПоследнегоСлота"		, СекундДоПоследнегоСлота);
	ВозВрат СтруктураРабочегоДня;
КонецФункции
