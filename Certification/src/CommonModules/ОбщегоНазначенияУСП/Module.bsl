
#Область ПрограммныйИнтерфейс

// Устанавливает значение переданного реквизита типа "ФорматированныйДокумент", 
// получая данные из указанного хранилища значения.
//
// Параметры:
//  Описание - ФорматированныйДокумент - его надо заполнить данными из хранилища значения.
//  ХранилищеЗначения - ХранилищеЗначения - содерит описание форматированного документа.
//
Процедура УстановитьФорматированноеОписаниеИзХранилища(Описание, Знач ХранилищеЗначения) Экспорт
	
	ДанныеХранилища = ХранилищеЗначения.Получить();
	Если ТипЗнч(ДанныеХранилища) = Тип("ФорматированныйДокумент") Тогда
		Описание = ДанныеХранилища;
	Иначе
		Описание = Новый ФорматированныйДокумент;
	КонецЕсли;
	
КонецПроцедуры

// Помещает указанное описание типа "ФорматированныйДокумент", в указанное хранилище значения.
//
// Параметры:
//  Описание - ФорматированныйДокумент - , который надо поместить в хранилище значения.
//  ХранилищеЗначения - ХранилищеЗначения - , в которое нужно поместить форматированное описание.
//
Процедура ПоместитьФорматированноеОписаниеВХранилище(Знач Описание, ХранилищеЗначения) Экспорт
	
	ХранилищеЗначения = Новый ХранилищеЗначения(Описание);
	
КонецПроцедуры

// Процедура - Заполнить таблицу из списка
//
// Параметры:
//  Таблица    - ТабличнаяЧасть - заполняемая табличная часть объекта.
//  Список     - СписокЗначений - значения заполнения.
//  ИмяКолонки - Строка - имя заполняемой колонки таблицы.
//
Процедура ЗаполнитьТаблицуИзСписка(Таблица, Список, ИмяКолонки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		| Таблица."+ИмяКолонки+" КАК Значение
		|ПОМЕСТИТЬ ВсеЗначения
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВсеЗначения.Значение КАК Значение,
		|	ВсеЗначения.Значение.Ссылка КАК ЗначениеСсылка
		|ИЗ
		|	ВсеЗначения КАК ВсеЗначения";
	
	Запрос.УстановитьПараметр("Таблица",Таблица.Выгрузить());
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Таблица.Очистить();
	
	Для каждого Элемент Из Список Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока[ИмяКолонки] = Элемент.Значение;
	КонецЦикла;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Значение <> Выборка.ЗначениеСсылка Тогда
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока[ИмяКолонки] = Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Заполнить список из таблицы
//
// Параметры:
//  Список     - СписокЗначений - заполняемый список.
//  Таблица    - ТабличнаяЧасть - значения заполнения
//  ИмяКолонки - Строка - колонка таблицы с значениями заполнения.
//
Процедура ЗаполнитьСписокИзТаблицы(Список, Таблица, ИмяКолонки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		| Таблица."+ИмяКолонки+" КАК Значение
		|ПОМЕСТИТЬ ВсеЗначения
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВсеЗначения.Значение.Ссылка КАК Значение
		|ИЗ
		|	ВсеЗначения КАК ВсеЗначения
		|ГДЕ 
		|	ВсеЗначения.Значение.Ссылка = ВсеЗначения.Значение";
	
	Запрос.УстановитьПараметр("Таблица",Таблица.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Список.Очистить();
	
	Пока Выборка.Следующий() Цикл
		Список.Добавить(Выборка.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Функция - Колонка таблицы строкой
//
// Параметры:
//  Таблица     - ТаблицаЗначений, ТабличнаяЧасть - таблица с данными для обработки.
//  ИмяКолонки  - Строка - имя колонки таблицы с данными.
//  Ограничение - Число(3,0) - ограничение на количество символов в строке.
// 
// Возвращаемое значение:
//   - Строка - результат 
//
Функция КолонкаТаблицыСтрокой(Таблица, ИмяКолонки, Ограничение = 1000) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаКолонки = "";
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаКолонки = СтрокаКолонки + ?(СтрокаКолонки = "","","; ") + Строка(СтрокаТаблицы[ИмяКолонки]);
		Если СтрДлина(СтрокаКолонки) > Ограничение Тогда
			СтрокаКолонки = Лев(СтрокаКолонки, Ограничение - 3) + "...";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтрокаКолонки;
	
КонецФункции

// Преобразовать версию в строку вида Редакция.Подредакция.Версия.Сборка.
//
// Параметры:
//  НомерВерсии - Число, в формате АААБББВВВДДДДДД, где буквы - позиции младших
//                  разрядов компонент версии.
//
// Возвращаемое значение:
//  Строка - версия вида Редакция.Подредакция.Версия.Сборка.
//
Функция ВерсиюВСтроку(НомерВерсии) Экспорт
	
	Все = Формат(НомерВерсии, "ЧГ=0");
	Длина = СтрДлина(Все);
	Сборка = Число(Прав(Все, 6));
	Версия = Число(Сред(Все, Длина - 8, 3));
	Подредакция = Число(Сред(Все, Длина - 11, 3));
	Редакция = Число(Лев(Все, Длина - 12));
    
    Возврат Строка(Редакция) + "." + Подредакция + "." + Версия + "." + Формат(Сборка, "ЧН=0; ЧГ=0");
	
КонецФункции // ВерсиюВСтроку()

// Преобразовать строку вида Редакция.Подредакция.Версия.Сборка в число формата 
// АААБББВВВДДДДДД, где буквы - позиции младших разрядов компонент версии.
//
// Параметры:
//  Версия - Строка, вида Редакция.Подредакция.Версия.Сборка.
//
// Возвращаемое значение:
//  Число - вида 00А00Б00В00000Д.
//
Функция ВерсиюВЧисло(НомерВерсии) Экспорт
	
	Состав = РазделитьСтроку(НомерВерсии, ".");
	ФорматСоблюден = Истина;
	
	// Проверить формат версии
	Если Состав.Количество() <> 4 Тогда
		ФорматСоблюден = Ложь;
	Иначе
		Попытка
			Редакция = Число(Состав[0]);
			Подредакция = Число(Состав[1]);
			Версия = Число(Состав[2]);
			Сборка = Число(Состав[3]);
		Исключение
			ФорматСоблюден = Ложь;
		КонецПопытки;
		
		Если ФорматСоблюден Тогда
			Если Редакция < 0 Или Редакция > 999
			 Или Подредакция < 0 Или Подредакция > 999
			 Или Версия < 0 Или Версия > 999
			 Или Сборка < 0 Или Сборка > 999999 Тогда
				ФорматСоблюден = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ФорматСоблюден Тогда
		Описание = НСтр("ru = 'Версия """"{Значение}"""" не соответствует формату Редакция.Подредакция.Версия.Сборка, 
            |где Редакция, Подредакция, Версия - целые числа от 0 до 999 и Сборка - целое число от 0 до 999999.'");
		Описание = СтрЗаменить(Описание, "{Значение}", НомерВерсии);
		ВызватьИсключение Описание;
	КонецЕсли;
	
	Возврат Редакция * 1000000000000 + Подредакция * 1000000000 + Версия * 1000000 + Сборка;
	
КонецФункции // ВерсиюВЧисло()

// Разделить строку на составляющие по разделителю и поместить
// части строки в массив.
//
// Параметры:
//  РазделяемаяСтрока - Строка, которую нужно разделить.
//  Разделитель - Строка, символ разделяющий части строки.
//  ПустыеСтроки - Булево, Истина - включать пустые строки в результат;
//               - Ложь - не включать пустые строки в результат.
//  Сокращать - Булево, Истина - делать СокрЛП результату;
//            - Ложь - нет.
//
// Возвращаемое значение:
//  Массив - части строк.
//
Функция РазделитьСтроку(ИсходнаяСтрока, Разделитель,
                        ПустыеСтроки = Ложь,
                        Сокращать = Истина) Экспорт
	
	Результат = Новый Массив;
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	ТекущаяСтрока = "";
	
	Для Сч = 1 По ДлинаСтроки Цикл
		
		ТекущийСимвол = Сред(ИсходнаяСтрока, Сч, 1);
		
		Если ТекущийСимвол = Разделитель Тогда
			
			Если Сокращать Тогда
				ОбработаннаяСтрока = СокрЛП(ТекущаяСтрока);
			Иначе
				ОбработаннаяСтрока = Строка(ТекущаяСтрока);
			КонецЕсли;
			
			Если Не ПустаяСтрока(ОбработаннаяСтрока) Или ПустыеСтроки Тогда
				Результат.Добавить(ОбработаннаяСтрока);
			КонецЕсли;
			
			ТекущаяСтрока = "";
			
		Иначе
			ТекущаяСтрока = ТекущаяСтрока + ТекущийСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработаннаяСтрока = СокрЛП(ТекущаяСтрока);
	
	Если Не ПустаяСтрока(ОбработаннаяСтрока) Тогда
		Результат.Добавить(ОбработаннаяСтрока);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // РазделитьСтроку()

// Получает список всех мировых часовых поясов.
// Первые девять поясов в списке - российские, упорядоченные с запада на восток.
//
// Возвращаемое значение:
//  Таблица значений - список идентификаторов часовых поясов и их представлений.
//
Функция ПолучитьЧасовыеПояса() Экспорт

	ЧасовыеПояса = Новый ТаблицаЗначений;
	ЧасовыеПояса.Колонки.Добавить("Идентификатор");
	ЧасовыеПояса.Колонки.Добавить("Представление");
	
	СписокЧасовыхПоясов = ПолучитьДопустимыеЧасовыеПояса();
	СписокЧасовыхПоясов.Вставить(0,"Europe/Kaliningrad");
	СписокЧасовыхПоясов.Вставить(1,"Europe/Moscow");
	СписокЧасовыхПоясов.Вставить(2,"Asia/Yekaterinburg");
	СписокЧасовыхПоясов.Вставить(3,"Asia/Novosibirsk");
	СписокЧасовыхПоясов.Вставить(4,"Asia/Krasnoyarsk");
	СписокЧасовыхПоясов.Вставить(5,"Asia/Irkutsk");
	СписокЧасовыхПоясов.Вставить(6,"Asia/Yakutsk");
	СписокЧасовыхПоясов.Вставить(7,"Asia/Vladivostok");
	СписокЧасовыхПоясов.Вставить(8,"Asia/Magadan");

	Для каждого Элемент Из СписокЧасовыхПоясов Цикл
		НоваяСтрока = ЧасовыеПояса.Добавить();
		НоваяСтрока.Идентификатор = Элемент;
		НоваяСтрока.Представление = ПредставлениеЧасовогоПояса(Элемент);
	КонецЦикла;
		
	Возврат ЧасовыеПояса

КонецФункции // ПолучитьЧасовыеПояса()

// Возвращает описание заданного часового пояса.
// Если не задан, берется часовой пояс сервера.
//
// Параметры:
// ЧасовойПояс - Строка; Неопределено.
//
// Возвращаемое значение:
// Строка.
//
Функция ОписаниеЧасовогоПояса(Знач ЧасовойПояс) Экспорт
	
	Если Не ЗначениеЗаполнено(ЧасовойПояс) Тогда
		ЧасовойПояс = ЧасовойПояс();
	КонецЕсли;
	
	Возврат ЧасовойПояс + " (" + ПредставлениеЧасовогоПояса(ЧасовойПояс) + ")";
	
КонецФункции

// Подпись к количеству дней по склонениям.
//
Функция ПолучитьПодписьДней(ЧислоДней) Экспорт
	
	Если ЧислоДней > 10 И ЧислоДней < 20 Тогда
		Подпись = НСтр("ru = 'дней'");
	Иначе
		ПоследниеДвеЦифры = ЧислоДней - Цел(ЧислоДней / 100) * 100;
		ПоследняяЦифра = ЧислоДней - Цел(ЧислоДней / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'дней'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'дней'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'день'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'дня'");
			Иначе
				Подпись = НСтр("ru = 'дней'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Преобразовывает HTML текст в простой текст.
//
Функция ПолучитьТекстИзHTML(ТекстHTML) Экспорт
	
	Преобразователь = Новый ФорматированныйДокумент;
	Преобразователь.УстановитьHTML(ТекстHTML, Новый Структура);
	
	Возврат Преобразователь.ПолучитьТекст();
	
КонецФункции

// Функция - Представление местного времени с поправкой на универсальное
//
// Параметры:
//  МестноеВремя - Дата - местное время.
// 
// Возвращаемое значение:
//  Строка - представление в формате "(UTC[+/-]HH:mm)"
//
Функция ПредставлениеМестногоВремениСПоправкойНаУниверсальное(МестноеВремя) Экспорт
	
	СекундДоМестногоВремени = МестноеВремя - УниверсальноеВремя(МестноеВремя);
	
	Если СекундДоМестногоВремени >= 0 Тогда
		Возврат Формат(МестноеВремя, "ДЛФ=DT") + " (UTC+"+Формат('00010101' + СекундДоМестногоВремени,"ДФ=HH:mm")+")";
	Иначе
		СекундДоМестногоВремени = -СекундДоМестногоВремени;
		Возврат Формат(МестноеВремя, "ДЛФ=DT") + " (UTC-"+Формат('00010101' + СекундДоМестногоВремени,"ДФ=HH:mm")+")";
	КонецЕсли;
	
КонецФункции

// Функция - Секунд до местного времени
//
// Параметры:
//  МестноеВремя - Дата - местное время.
// 
// Возвращаемое значение:
//  Число - число секунд до местного времени от универсального.
//
Функция СекундДоМестногоВремени(МестноеВремя) Экспорт
	
	Возврат МестноеВремя - УниверсальноеВремя(МестноеВремя);

КонецФункции

// Процедура - Заполнить список часовых поясов
//
// Параметры:
//  СписокПоясов - СписокЗначений - заполняемый список.
//
Процедура ЗаполнитьСписокЧасовыхПоясов(СписокПоясов) Экспорт
	
	ЧасовыеПояса = ПолучитьДопустимыеЧасовыеПояса();
	МестноеВремя = ТекущаяДата();
	Для каждого ЧасовойПояс Из ЧасовыеПояса Цикл
		СекундДоМестногоВремени = МестноеВремя - УниверсальноеВремя(МестноеВремя, ЧасовойПояс);
		Если СекундДоМестногоВремени >= 0 Тогда
			СписокПоясов.Добавить(ЧасовойПояс, ЧасовойПояс + " (UTC+"+Формат('00010101' + СекундДоМестногоВремени,"ДФ=HH:mm; ДП=00:00")+")");
		Иначе
			СекундДоМестногоВремени = -СекундДоМестногоВремени;
			СписокПоясов.Добавить(ЧасовойПояс, ЧасовойПояс + " (UTC-"+Формат('00010101' + СекундДоМестногоВремени,"ДФ=HH:mm; ДП=00:00")+")");
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// Функция - Заменить классы отображения на стили HTML.
//
// Параметры:
//  ТекстHTML - Строка - строка для преобразования.
// 
// Возвращаемое значение:
//  Строка - строка HTML с замененными классами.
//
Функция ЗаменитьКлассыОтображенияНаСтилиHTML(ТекстHTML) Экспорт
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "class=""panel panel-success""", "style=""margin-bottom: 20px;background-color: #fff;border: 1px solid transparent;border-radius: 4px;-webkit-box-shadow: 0 1px 1px rgba(0,0,0,.05);box-shadow: 0 1px 1px rgba(0,0,0,.05); border-color: #d6e9c6;""");
	ТекстHTML = СтрЗаменить(ТекстHTML, "class=""panel panel-warning""", "style=""margin-bottom: 20px;background-color: #fff;border: 1px solid transparent;border-radius: 4px;-webkit-box-shadow: 0 1px 1px rgba(0,0,0,.05);box-shadow: 0 1px 1px rgba(0,0,0,.05); border-color: #faebcc;""");
	ТекстHTML = СтрЗаменить(ТекстHTML, "class=""panel panel-danger""",  "style=""margin-bottom: 20px;background-color: #fff;border: 1px solid transparent;border-radius: 4px;-webkit-box-shadow: 0 1px 1px rgba(0,0,0,.05);box-shadow: 0 1px 1px rgba(0,0,0,.05); border-color: #ebccd1;""");
	ТекстHTML = СтрЗаменить(ТекстHTML, "class=""panel panel-info""",    "style=""margin-bottom: 20px;background-color: #fff;border: 1px solid transparent;border-radius: 4px;-webkit-box-shadow: 0 1px 1px rgba(0,0,0,.05);box-shadow: 0 1px 1px rgba(0,0,0,.05); border-color: #bce8f1;""");
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "class=""panel-heading-success""", "style=""padding: 10px 15px;border-bottom: 1px solid transparent;border-top-left-radius: 3px;border-top-right-radius: 3px;color: #3c763d;background-color: #dff0d8;border-color: #d6e9c6;""");
	ТекстHTML = СтрЗаменить(ТекстHTML, "class=""panel-heading-warning""", "style=""padding: 10px 15px;border-bottom: 1px solid transparent;border-top-left-radius: 3px;border-top-right-radius: 3px;color: #8a6d3b;background-color: #fcf8e3;border-color: #faebcc;""");
	ТекстHTML = СтрЗаменить(ТекстHTML, "class=""panel-heading-danger""",  "style=""padding: 10px 15px;border-bottom: 1px solid transparent;border-top-left-radius: 3px;border-top-right-radius: 3px;color: #a94442;background-color: #f2dede;border-color: #ebccd1;""");
	ТекстHTML = СтрЗаменить(ТекстHTML, "class=""panel-heading-info""",    "style=""padding: 10px 15px;border-bottom: 1px solid transparent;border-top-left-radius: 3px;border-top-right-radius: 3px;color: #31708f;background-color: #d9edf7;border-color: #bce8f1;""");
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "class=""panel-title""","style=""orphans: 3;widows: 3;page-break-after: avoid;font-family: inherit;font-weight: 500;line-height: 1.1;color: inherit;margin-top: 0;margin-bottom: 0;font-size: 16px;""");
	ТекстHTML = СтрЗаменить(ТекстHTML, "class=""panel-body""", "style=""padding: 15px;""");
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "<a", "<a style=""background-color: transparent;color: inherit;text-decoration: underline;""");
	ТекстHTML = СтрЗаменить(ТекстHTML, "<blockquote", "<blockquote style=""padding: 0px 10px; margin: 0 0 0px; font-size: 12px; border-left: 5px solid #eee;""");
	ТекстHTML = СтрЗаменить(ТекстHTML, "<h3>", "<h3 style=""orphans: 3;widows: 3;page-break-after: avoid;font-family: inherit;font-weight: 500;line-height: 1.1;color: inherit;margin-top: 20px;margin-bottom: 10px;font-size: 24px;"">");
	ТекстHTML = СтрЗаменить(ТекстHTML, "<br>---<br>", "<hr style=""border: none;background-color: #dfdfdf;color: #dfdfdf; height: 1px;"">");
	
	Возврат ТекстHTML;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ВзаимоотношениеОбслуживающаяОрганизацияАбонент" Тогда
		ПараметрыСеанса.ВзаимоотношениеОбслуживающаяОрганизацияАбонент = Перечисления.ВидыВзаимоотношений.ОбслуживающаяОрганизацияАбонент;
		УстановленныеПараметры.Добавить("ВзаимоотношениеОбслуживающаяОрганизацияАбонент");
		
	ИначеЕсли ИмяПараметра = "ВзаимоотношениеПровайдерОбслуживающаяОрганизация" Тогда
		ПараметрыСеанса.ВзаимоотношениеПровайдерОбслуживающаяОрганизация = Перечисления.ВидыВзаимоотношений.ПровайдерОбслуживающаяОрганизация;
		УстановленныеПараметры.Добавить("ВзаимоотношениеПровайдерОбслуживающаяОрганизация");
		
	ИначеЕсли ИмяПараметра = "ВзаимоотношениеПровайдерАбонент" Тогда
		ПараметрыСеанса.ВзаимоотношениеПровайдерАбонент = Перечисления.ВидыВзаимоотношений.ПровайдерАбонент;
		УстановленныеПараметры.Добавить("ВзаимоотношениеПровайдерАбонент");
		
	ИначеЕсли ИмяПараметра = "ПустаяОбслуживающаяОрганизация" Тогда
		ПараметрыСеанса.ПустаяОбслуживающаяОрганизация = Справочники.ОбслуживающиеОрганизации.ПустаяСсылка();
		УстановленныеПараметры.Добавить("ПустаяОбслуживающаяОрганизация");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомераДокумента(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	Префикс = ОбщегоНазначенияУСППовтИсп.ПрефиксСервиса(Источник.Сервис);
	Если Найти(Лев(Источник.Номер, 3), Префикс) <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры
 
#КонецОбласти
