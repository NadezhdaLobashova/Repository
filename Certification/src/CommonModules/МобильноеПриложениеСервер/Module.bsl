Функция GetPersData(Запрос) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросJSON = Запрос.ПолучитьТелоКакСтроку();
		
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ЗапросJSON);
	СтруктураЗапроса = ПрочитатьJSON(ЧтениеJSON);
	
	СтруктураПользователя = ПолучитьGUIDПользователя(СтруктураЗапроса);
	
	
	Если СтруктураПользователя = Неопределено Тогда
		Ответ = Новый HTTPСервисОтвет(204);
	Иначе
			
		ЗаписьJSONОтвет = Новый ЗаписьJSON;
		ЗаписьJSONОтвет.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
		ЗаписатьJSON(ЗаписьJSONОтвет, СтруктураПользователя);
		ОтветJSON = ЗаписьJSONОтвет.Закрыть();
		
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки(ОтветJSON);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьGUIDПользователя(Пользователь) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка,
		|	Пользователи.Наименование КАК Наименование,
		|	Пользователи.GUID_УРВ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Наименование = &Пользователь";
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Пользователь);
	Запрос.УстановитьПараметр("Пользователь", ПользовательИБ.ПолноеИмя);
	
	МассивРолей = "";
	Для Каждого Роль ИЗ ПользовательИБ.Роли Цикл
		МассивРолей = МассивРолей + Роль.Имя + "!@#";
	КонецЦикла;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда 
		
		ДанныеПользователя = Новый Структура;
		ДанныеПользователя.Вставить("GUID_УРВ",Результат.GUID_УРВ);
		ДанныеПользователя.Вставить("Наименование", Результат.Наименование);
		ДанныеПользователя.Вставить("МассивРолей",МассивРолей);
				
		Возврат ДанныеПользователя;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ПолучитьНачальныеДанные(GUID_МП) Экспорт
		
	
	//Заполнение массива ВидыРабочегоВремени.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРабочегоВремени.Ссылка,
		|	ВидыРабочегоВремени.Наименование,
		|	ВидыРабочегоВремени.Коэффициент,
		|	NULL КАК GUID_УРВ,
		|	ВидыРабочегоВремени.Предопределенный
		|ИЗ
		|	Справочник.ВидыРабочегоВремени КАК ВидыРабочегоВремени
		|ГДЕ
		|	ВидыРабочегоВремени.ПометкаУдаления = ЛОЖЬ";
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	МассивВидыРабочегоВремени = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ВидРабочегоВремени = Новый Структура("GUID_УРВ, Наименование, Коэффициент,Предопределенный");
		ЗаполнитьЗначенияСвойств(ВидРабочегоВремени, ВыборкаДетальныеЗаписи);
		
		ВидРабочегоВремени.GUID_УРВ = Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
		
		МассивВидыРабочегоВремени.Добавить(ВидРабочегоВремени);
		
	КонецЦикла;
	
	//Заполнение массива Контрагенты.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.ИНН КАК ИНН,
		|	NULL КАК GUID_УРВ
		|ИЗ
		|	Справочник.Абоненты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ПометкаУдаления = ЛОЖЬ";
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	МассивКонтрагенты = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Контрагент = Новый Структура("GUID_УРВ, Наименование, ИНН");
		ЗаполнитьЗначенияСвойств(Контрагент, ВыборкаДетальныеЗаписи);
		
		Контрагент.GUID_УРВ = Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
		
		МассивКонтрагенты.Добавить(Контрагент);
		
	КонецЦикла;
	
	//Заполнение массива Проекты.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Ссылка,
		|	Проекты.Наименование,
		|	Проекты.ОбобщенноеНаименование,
		|	Проекты.УчетПоКонтрагентам,
		|	NULL КАК GUID_УРВ
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.ПометкаУдаления = ЛОЖЬ";
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	МассивПроекты = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Проект = Новый Структура("GUID_УРВ, Наименование, ОбобщенноеНаименование, УчетПоКонтрагентам");
		ЗаполнитьЗначенияСвойств(Проект, ВыборкаДетальныеЗаписи);
		
		Проект.GUID_УРВ = Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
		
		МассивПроекты.Добавить(Проект);
		
	КонецЦикла;
	
	//Заполнение массива ЭтапыПроектов.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	NULL КАК GUID_УРВ,
		|	ЭтапыПроектов.Ссылка,
		|	ЭтапыПроектов.Наименование,
		|	ЭтапыПроектов.Владелец,
		|	ЭтапыПроектов.Неактуальный
		|ИЗ
		|	Справочник.ЭтапыПроектов КАК ЭтапыПроектов
		|ГДЕ
		|	ЭтапыПроектов.ПометкаУдаления = ЛОЖЬ";
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	МассивЭтапыПроектов = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЭтапПроекта = Новый Структура("GUID_УРВ, Наименование, Владелец, Неактуальный");
		ЗаполнитьЗначенияСвойств(ЭтапПроекта, ВыборкаДетальныеЗаписи);
		
		ЭтапПроекта.GUID_УРВ = Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
		ЭтапПроекта.Владелец = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Владелец),Строка(ВыборкаДетальныеЗаписи.Владелец.УникальныйИдентификатор()),""); 
		
		МассивЭтапыПроектов.Добавить(ЭтапПроекта);
		
	КонецЦикла;
	
	//Заполнение массива Работы.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	NULL КАК GUID_УРВ,
		|	Работы.Ссылка,
		|	Работы.ОсновнойПроект,
		|	Работы.Наименование,
		|	Работы.ПолноеНаименование,
		|	Работы.ВидРаботы
		|ИЗ
		|	Справочник.Работы КАК Работы
		|ГДЕ
		|	Работы.ПометкаУдаления = ЛОЖЬ";
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	МассивРаботы = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Работа = Новый Структура("GUID_УРВ, Наименование, ОсновнойПроект, ПолноеНаименование, ВидРаботы");
		ЗаполнитьЗначенияСвойств(Работа, ВыборкаДетальныеЗаписи);
		
		
		Работа.GUID_УРВ = Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
		Работа.ОсновнойПроект = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОсновнойПроект),Строка(ВыборкаДетальныеЗаписи.ОсновнойПроект.УникальныйИдентификатор()),"");
		Работа.ПолноеНаименование = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПолноеНаименование),Строка(ВыборкаДетальныеЗаписи.ПолноеНаименование),"");
		Работа.ВидРаботы = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВидРаботы),Строка(ВыборкаДетальныеЗаписи.ВидРаботы),"");
		
		МассивРаботы.Добавить(Работа);
		
	КонецЦикла;
	
	
	//Заполнение массива Задачи.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Код,
		|	Задачи.Ссылка,
		|	Задачи.Владелец,
		|	Задачи.Наименование,
		|	Задачи.Описание,
		|	Задачи.ДатаВыполнения,
		|	Задачи.ОценкаВремени,
		|	Задачи.Статус,
		|	Задачи.ДатаСоздания,
		|	Задачи.ЭтапПроекта,
		|	NULL КАК GUID_УРВ
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	НЕ Задачи.ПометкаУдаления
		|	И Задачи.Статус <> &СтатусЗакрытой
		|	И Задачи.Статус <> &СтатусПроверИЗакрытой
		|	И Задачи.Статус <> &СтатусОтклон";
	Запрос.УстановитьПараметр("СтатусЗакрытой",Перечисления.СтатусыЗадач.Закрыто);
	Запрос.УстановитьПараметр("СтатусОтклон",Перечисления.СтатусыЗадач.Отклонена);
	Запрос.УстановитьПараметр("СтатусПроверИЗакрытой",Перечисления.СтатусыЗадач.ПровереноИЗакрыто);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	МассивЗадачи = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Задача = Новый Структура("GUID_УРВ, Код, Наименование, Владелец, Описание, ДатаВыполнения, ОценкаВремени, Статус, ДатаСоздания, ЭтапПроекта");
		ЗаполнитьЗначенияСвойств(Задача, ВыборкаДетальныеЗаписи);
		
		Задача.GUID_УРВ = Строка(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
		Задача.ДатаВыполнения = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаВыполнения),Строка(ВыборкаДетальныеЗаписи.ДатаВыполнения),"");
		Задача.ДатаСоздания = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаСоздания),Строка(ВыборкаДетальныеЗаписи.ДатаСоздания),"");
		Задача.Владелец = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Владелец),Строка(ВыборкаДетальныеЗаписи.Владелец.УникальныйИдентификатор()),"");
		Задача.Статус = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Статус), Строка(ВыборкаДетальныеЗаписи.Статус),"");
		Задача.ЭтапПроекта = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЭтапПроекта),Строка(ВыборкаДетальныеЗаписи.ЭтапПроекта.УникальныйИдентификатор()),"");
		
		
		МассивЗадачи.Добавить(Задача);
		
	КонецЦикла;
	
	//Заполнение регистра с праздниками/выходными	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПраздничныеВыходныеДни.Дата,
		|	ПраздничныеВыходныеДни.ВидДня
		|ИЗ
		|	РегистрСведений.ПраздничныеВыходныеДни КАК ПраздничныеВыходныеДни
		|ГДЕ
		|	ПраздничныеВыходныеДни.Дата >= &Дата";
	
	Запрос.УстановитьПараметр("Дата", Дата(2018, 01, 01));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивПраздников = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		День = Новый Структура;
		
		День.Вставить("Дата",Строка(ВыборкаДетальныеЗаписи.Дата));
		День.Вставить("ВидДня",Строка(ВыборкаДетальныеЗаписи.ВидДня));
		
		МассивПраздников.Добавить(День);
	КонецЦикла;	
	
	
	СтруктураНачальныхДанных = Новый Структура;
	
	//СтруктураНачальныхДанных.Вставить("РазрешенноеЧислоДнейВводЛУРВ",Константы.РазрешенноеЧислоДнейВводЛУРВ.Получить());
	//СтруктураНачальныхДанных.Вставить("ТекущаяДатаСеанса", Строка(ТекущаяДатаСеанса()));
	
	СтруктураНачальныхДанных.Вставить("ВидыРабочегоВремени", МассивВидыРабочегоВремени);
	СтруктураНачальныхДанных.Вставить("Контрагенты", МассивКонтрагенты);
	СтруктураНачальныхДанных.Вставить("Проекты", МассивПроекты);
    СтруктураНачальныхДанных.Вставить("Работы", МассивРаботы);
	СтруктураНачальныхДанных.Вставить("ЭтапыПроектов", МассивЭтапыПроектов);
	СтруктураНачальныхДанных.Вставить("Задачи", МассивЗадачи);
	СтруктураНачальныхДанных.Вставить("Праздники", МассивПраздников);
	СтруктураНачальныхДанных.Вставить("Константа_ОсновнойВидРаботы", Строка(Константы.ОсновнойВидРаботы.Получить().УникальныйИдентификатор()));
	СтруктураНачальныхДанных.Вставить("Константа_РазрешенноеЧислоДнейВводЛУРВ", Константы.РазрешенноеЧислоДнейВводЛУРВ.Получить());
	
	Возврат СтруктураНачальныхДанных;	
	
КонецФункции

Функция FirstSync(Запрос) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросJSON = Запрос.ПолучитьТелоКакСтроку();
		
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ЗапросJSON);
	СтруктураЗапроса = ПрочитатьJSON(ЧтениеJSON);
		
	НачальныеДанные = ПолучитьНачальныеДанные(СтруктураЗапроса);
	
	
	Если НачальныеДанные = Неопределено Тогда
		Ответ = Новый HTTPСервисОтвет(204);
	Иначе
			
		ЗаписьJSONОтвет = Новый ЗаписьJSON;
		ЗаписьJSONОтвет.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
		ЗаписатьJSON(ЗаписьJSONОтвет, НачальныеДанные);
		ОтветJSON = ЗаписьJSONОтвет.Закрыть();
		
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки(ОтветJSON);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ;	
	
КонецФункции

Функция CreateDoc(Запрос) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросJSON = Запрос.ПолучитьТелоКакСтроку();
		
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ЗапросJSON);
	СтруктураЗапроса = ПрочитатьJSON(ЧтениеJSON);	
	
	РезультатСоздания = ЗаписьНовогоДокумента(СтруктураЗапроса);
	
	Если ТипЗнч(РезультатСоздания) <> Тип("Структура") ИЛИ НЕ РезультатСоздания.Успешно Тогда
		ЗаписьJSONОтвет = Новый ЗаписьJSON;
		ЗаписьJSONОтвет.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
		ЗаписатьJSON(ЗаписьJSONОтвет, РезультатСоздания);
		ОтветJSON = ЗаписьJSONОтвет.Закрыть();

		Ответ = Новый HTTPСервисОтвет(206);
		Ответ.УстановитьТелоИзСтроки(ОтветJSON);
	Иначе
		
		ЗаписьJSONОтвет = Новый ЗаписьJSON;
		ЗаписьJSONОтвет.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
		ЗаписатьJSON(ЗаписьJSONОтвет, РезультатСоздания);
		ОтветJSON = ЗаписьJSONОтвет.Закрыть();

		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки(ОтветJSON);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ;	
	
КонецФункции

Функция ЗаписьНовогоДокумента(СтруктураДокумента) Экспорт
	
	РезультатСоздания = Новый Структура("Успешно, ОписаниеОперации");
	
	Если СтруктураДокумента.GUID_Док <> "" Тогда
		ДокССылкаГуид = Документы.УчетФактическихДанных.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДокумента.GUID_Док));
	Иначе
		ДокССылкаГуид = Документы.УчетФактическихДанных.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ДокССылкаГуид.Пустая() Тогда
		
		ДокументКЗаписи = ДокССылкаГуид.Ссылка.ПолучитьОбъект();
		
	Иначе	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	УчетФактическихДанных.Ссылка
			|ИЗ
			|	Документ.УчетФактическихДанных КАК УчетФактическихДанных
			|ГДЕ
			|	УчетФактическихДанных.Дата = &Дата
			|	И УчетФактическихДанных.Сотрудник = &Сотрудник";
		
		Запрос.УстановитьПараметр("Дата", СтруктураДокумента.Дата);
		Запрос.УстановитьПараметр("Сотрудник", Справочники.Пользователи.НайтиПоРеквизиту("GUID_УРВ",СтруктураДокумента.Сотрудник));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ДокументКЗаписи = ВыборкаДетальныеЗаписи.Следующий().Ссылка.ПолучитьОбъект();
		Иначе
			ДокументКЗаписи = Документы.УчетФактическихДанных.СоздатьДокумент();
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ДокументКЗаписи.Дата = Дата(СтруктураДокумента.Дата);
		ДокументКЗаписи.Сотрудник = Справочники.Пользователи.НайтиПоРеквизиту("GUID_УРВ",СтруктураДокумента.Сотрудник);
		ДокументКЗаписи.Комментарий = СтруктураДокумента.Комментарий + " Создано в Мобильном приложении УРВ.";
		ДокументКЗаписи.Месяц = Дата(СтруктураДокумента.Месяц);
		
		Если НЕ ДокументКЗаписи.ЭтоНовый() Тогда
			ДокументКЗаписи.Время.Очистить();	
		КонецЕсли;
		
		Для Каждого СтрокаВМассиве Из СтруктураДокумента.ТЧ_Время Цикл
			
			НоваяСтрокаТЧ = ДокументКЗаписи.Время.Добавить();
			
			НоваяСтрокаТЧ.Работа = Справочники.Работы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаВМассиве.Работа));
			НоваяСтрокаТЧ.Дата = Дата(СтрокаВМассиве.Дата);
			НоваяСтрокаТЧ.Часов = СтрокаВМассиве.Часов;
			НоваяСтрокаТЧ.Проект = Справочники.Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаВМассиве.Проект));
			НоваяСтрокаТЧ.ЭтапПроекта = Справочники.ЭтапыПроектов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаВМассиве.ЭтапПроекта));
			Если СтрокаВМассиве.Задача = "" Тогда
				НоваяСтрокаТЧ.Задача = Справочники.Задачи.ПустаяСсылка();
			Иначе	
				НоваяСтрокаТЧ.Задача = Справочники.Задачи.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаВМассиве.Задача));
			КонецЕсли;
			НоваяСтрокаТЧ.Описание = СтрокаВМассиве.Описание;
			НоваяСтрокаТЧ.Выходной = СтрокаВМассиве.Выходной;
			НоваяСтрокаТЧ.ВидРабочегоВремени = Справочники.ВидыРабочегоВремени.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаВМассиве.ВидРабочегоВремени));
			Если СтрокаВМассиве.Контрагент = "" Тогда
				НоваяСтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			Иначе	
				НоваяСтрокаТЧ.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаВМассиве.Контрагент));
			КонецЕсли;	
			НоваяСтрокаТЧ.ИдентификаторСтроки = СтрокаВМассиве.ИдентификаторСтроки;
			
		КонецЦикла;
		
		ДокументКЗаписи.Записать(РежимЗаписиДокумента.Проведение);
		
		РезультатСоздания.Успешно = Истина;
		РезультатСоздания.ОписаниеОперации = Строка(ДокументКЗаписи.Ссылка.УникальныйИдентификатор());
	Исключение
		РезультатСоздания.Успешно = Ложь;
		РезультатСоздания.ОписаниеОперации = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат РезультатСоздания;
	
КонецФункции