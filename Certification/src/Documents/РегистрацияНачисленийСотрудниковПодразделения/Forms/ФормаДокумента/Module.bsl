
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.ФормаУтвердить.Видимость = РольДоступна("ПолныеПрава") Или РольДоступна("Экономист");
	Если Объект.Утвержден Тогда
		Элементы.ФормаУтвердить.Заголовок = "Утвержден. Отправить повторно в ЗУП.";	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСотрудникПриИзменении(Элемент)
	ПересчитатьДанныеСтроки();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияКоличествоПриИзменении(Элемент)
	ПересчитатьДанныеСтроки();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВидРаботПриИзменении(Элемент)
	ПересчитатьДанныеСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДанныеСтроки()
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	Структура_                  = СотрудникиСервер.ТекущаяСтавкаСотрудникаДолжностьПодразделениеПоВидамРабот(ТекущиеДанные.Сотрудник,Объект.Дата,ТекущиеДанные.ВидРабот, ТекущиеДанные.Количество,Объект.Дата);
	ТекущиеДанные.Ставка        = Структура_.Ставка;
	ТекущиеДанные.Сумма         = Структура_.Сумма;
	ТекущиеДанные.Должность     = Структура_.Должность;
КонецПроцедуры


&НаКлиенте
Процедура Утвердить(Команда)

	Если Объект.Начисления.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("УтвердитьЗавершение", ЭтотОбъект), "После утверждения документ будет отправлен в ЗУП! Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		Возврат;
	КонецЕсли;
	
	ОповеститьОбИзменении(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УтвердитьНаСервере();

КонецПроцедуры

&НаСервере
Процедура УтвердитьНаСервере()
	//Создание проекта в ЗУП
	Попытка
		ВыполнитьWSCreateDocZUPСервер();
	Исключение
		Сообщить(ОписаниеОшибки());	
	КонецПопытки;
	
	Если Объект.Утвержден Тогда
		Элементы.ФормаУтвердить.Заголовок = "Утвержден. Отправить повторно в ЗУП.";	
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьWSCreateDocZUPСервер()
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыИнтеграции = УРВСервер.ПолучитьНастройкиИнтеграции(Перечисления.Интеграции.СозданиеДокументовНачисленияВЗУП);
	
	Если ПараметрыИнтеграции = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось получить параметры подключения к сервису ЗУП";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ИмяПользователя 	= ПараметрыИнтеграции.Пользователь; 
	Пароль 				= ПараметрыИнтеграции.Пароль; 
	АдресПодключения 	= ПараметрыИнтеграции.АдресПодключения;
	ИмяБазы             = ПараметрыИнтеграции.ИмяБазы;
	Сервер              = ПараметрыИнтеграции.Сервер;
	
	Попытка
		тСоединение = Новый HTTPСоединение(Сервер,, ИмяПользователя, Пароль);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось подключиться к сервису ЗУП";
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("РежимНачисления", 	XMLСтрока(Объект.РежимНачисления));
	СтруктураЗапроса.Вставить("ПодразделениеGUID", 	Строка(Объект.Подразделение.УникальныйИдентификатор()));
	СтруктураЗапроса.Вставить("ПериодРегистрации", 	Формат(Объект.ПериодРегистрации, "ДФ=yyyyMMdd"));
	СтруктураЗапроса.Вставить("Дата", 				Формат(Объект.Дата, "ДФ=yyyyMMdd"));
	СтруктураЗапроса.Вставить("GUIDУРВ",  			Строка(Объект.Ссылка.УникальныйИдентификатор()));
	СтруктураЗапроса.Вставить("Комментарий",  		Строка(Объект.Комментарий));
	СтруктураЗапроса.Вставить("Ответственный",  	Строка(Объект.Ответственный));
	МассивТЧ = Новый Массив;
	
	Для Каждого СтрНач Из Объект.Начисления Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Сотрудник", 		Строка(СтрНач.Сотрудник));
		СтруктураСтроки.Вставить("ТипНачисления", 	Строка(СтрНач.ТипНачисления));
		СтруктураСтроки.Вставить("ПроектGUID", 		Строка(СтрНач.Проект.GUIDЗУП));
		СтруктураСтроки.Вставить("Сумма", 			СтрНач.Сумма);
		СтруктураСтроки.Вставить("ВидНачисления", 	Строка(СтрНач.ВидНачисления));
		СтруктураСтроки.Вставить("ВидРабот", 		Строка(СтрНач.ВидРабот.ВидыРабот));
		СтруктураСтроки.Вставить("Количество", 		СтрНач.Количество);
		СтруктураСтроки.Вставить("Ставка", 			СтрНач.Ставка);
		СтруктураСтроки.Вставить("Должность", 		Строка(СтрНач.Должность));
		МассивТЧ.Добавить(СтруктураСтроки);
	КонецЦикла;	
	СтруктураЗапроса.Вставить("МассивТЧ", МассивТЧ);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);
	ЗапросJSON = ЗаписьJSON.Закрыть();
	
	Текст0		= "ЗУП: Создание ""Регистрация начислений сотрудников подразделения"".";
	Успешно		= Ложь;
	тHTTPЗапрос	= Новый HTTPЗапрос(ИмяБазы + АдресПодключения);
	Попытка
		Если ТипЗнч(ЗапросJSON) = Тип("ДвоичныеДанные") Тогда
			тHTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ЗапросJSON);
		Иначе
			тHTTPЗапрос.УстановитьТелоИзСтроки(ЗапросJSON);
		КонецЕсли;
		тHTTPОтвет = тСоединение.ОтправитьДляОбработки(тHTTPЗапрос);			
		тОтвет = тHTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если ТипЗнч(тHTTPОтвет) = Тип("HTTPОтвет") Тогда
			ОтветJSON = тHTTPОтвет.ПолучитьТелоКакСтроку();
			
			Если тHTTPОтвет.КодСостояния = 200 Тогда
				Успешно		= Истина;
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ОтветJSON);
				СтруктураОтвета 		= ПрочитатьJSON(ЧтениеJSON);
				Объект.GUIDЗУП = СтруктураОтвета.GUID_ZGU;
				Объект.Утвержден = Истина;
				Записать();
				
				Сообщить("Данные в ЗУП успешно обновлены!", СтатусСообщения.Важное);
			ИначеЕсли тHTTPОтвет.КодСостояния = 204 Тогда
				ЗаписьЖурналаРегистрации("ВыполнитьWSCreateDocZUP", УровеньЖурналаРегистрации.Ошибка, ,,Текст0 + "Не удалось выполнить операцию!");	
				Сообщить(Текст0 + "Не удалось выполнить операцию!", СтатусСообщения.Важное);
			ИначеЕсли тHTTPОтвет.КодСостояния = 205 Тогда
				ЗаписьЖурналаРегистрации("ВыполнитьWSCreateDocZUP", УровеньЖурналаРегистрации.Ошибка, ,,Текст0 + "Ошибка: " + ОтветJSON + ". Код состояния: " + тHTTPОтвет.КодСостояния);	
				Сообщить(Текст0 + "Ошибка: " + ОтветJSON, СтатусСообщения.ОченьВажное);
			Иначе
				ЗаписьЖурналаРегистрации("ВыполнитьWSCreateDocZUP", УровеньЖурналаРегистрации.Ошибка, ,,Текст0 + "Ошибка: " + ОтветJSON + ". Код состояния: " + тHTTPОтвет.КодСостояния);	
				Сообщить(Текст0 + "Ошибка: " + ОтветJSON + ". Код состояния: " + тHTTPОтвет.КодСостояния, СтатусСообщения.ОченьВажное);
			КонецЕсли;
		Иначе
			ЗаписьЖурналаРегистрации("ВыполнитьWSCreateDocZUP", УровеньЖурналаРегистрации.Ошибка, ,,"Ошибка: " + Текст0 + "Не удалось подключиться к ИС ЗУП.");	
			Сообщить(Текст0 + "Не удалось подключиться к ИС ЗУП.", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
	Исключение
		Ошибка	= ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ВыполнитьWSCreateDocZUP", УровеньЖурналаРегистрации.Ошибка, ,,"Ошибка: " + Ошибка);	
		Сообщить("Ошибка: " + Ошибка + " (в ВыполнитьWSCreateProjectZUP)");
	КонецПопытки;
	
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	СуммаСтрок = 0;
	Для Каждого Эл Из Элементы.Начисления.ВыделенныеСтроки Цикл
		Строка = Объект.Начисления.НайтиПоИдентификатору(Эл);
		СуммаСтрок = СуммаСтрок + Строка.Сумма;
	КонецЦикла;	
КонецПроцедуры

