#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Установить исключительную управляемую блокировку на массив переданных обращений.
//
// Параметры:
//   Обращения - Массив - массив ссылок на обращения, или одна ссылка ДокументСсылка.Обращение.
//
Процедура ЗаблокироватьОбъекты(Обращения) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	
	Если ТипЗнч(Обращения) = Тип("Массив") Тогда
		Для каждого Обращение Из Обращения Цикл
			
			Если ТипЗнч(Обращение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
				Продолжить;
			КонецЕсли;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.Обращение");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Обращение);
		КонецЦикла;
	Иначе	
		Если ТипЗнч(Обращения) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат;
		КонецЕсли;	
		ЭлементБлокировки = Блокировка.Добавить("Документ.Обращение");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Обращения);
	КонецЕсли;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Возвращает вид события создания объекта.
//
Функция ВидСобытия_Создание() Экспорт
	
    Возврат Справочники.ВидыБизнесСобытий.СозданиеОбращения;	
	
КонецФункции

// Возвращает вид события изменения объекта.
//
Функция ВидСобытия_Изменение() Экспорт
	
    Возврат Справочники.ВидыБизнесСобытий.ИзменениеОбращения;	
	
КонецФункции

// Возвращает вид события перенаправления объекта.
//
Функция ВидСобытия_Перенаправление() Экспорт
	
    Возврат Справочники.ВидыБизнесСобытий.ПеренаправлениеОбращения;	
	
КонецФункции

// Возвращает последнюю дату закрытия обращения по истории состояний.
//
Функция ПоследняяДатаЗакрытия(Обращение) Экспорт
	
	ДатаЗакрытия = '00010101000000';
	
	ЗапросПоЗакрытию = Новый Запрос;
	
	ЗапросПоЗакрытию.Текст =
		"ВЫБРАТЬ
		|	ИсторияСостоянийОбращенийСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.ИсторияСостоянийОбращений.СрезПоследних(
		|			,
		|			Обращение = &Обращение
		|				И Состояние = &СостояниеЗакрыто) КАК ИсторияСостоянийОбращенийСрезПоследних";
		
	ЗапросПоЗакрытию.УстановитьПараметр("Обращение", Обращение);
	ЗапросПоЗакрытию.УстановитьПараметр("СостояниеЗакрыто", Перечисления.СостоянияОбращений.Закрыто);
	
	РезультатПоЗакрытию = ЗапросПоЗакрытию.Выполнить();
	Если Не РезультатПоЗакрытию.Пустой() Тогда
		ДатаЗакрытия = РезультатПоЗакрытию.Выгрузить()[0].Период;
	КонецЕсли;
	
	Возврат ДатаЗакрытия;
	
КонецФункции

// Отправляет письмо о закрытии обращения пользователю
//
Процедура ОтправитьПисьмоОЗакрытииОбращения(Обращение) Экспорт
	
    СвойстваОбращения = Новый Структура;
    СвойстваОбращения.Вставить("Сервис", "Сервис");
    СвойстваОбращения.Вставить("Витрина", "Витрина");
    СвойстваОбращения.Вставить("Инициатор", "Инициатор");
    СвойстваОбращения.Вставить("АдресДляПереписки", "АдресДляПереписки");
    СвойстваОбращения.Вставить("УведомлятьПользователейОЗакрытииОбращений", "Сервис.УведомлятьПользователейОЗакрытииОбращений");
    // {Рарус_shav 2018.10.23 74401
    СвойстваОбращения.Вставить("Проект", "Проект");
	// }Рарус_shav 2018.10.23 74401
	
	ДанныеОбращения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Обращение, СвойстваОбращения);
	
	// {Рарус_shav 2018.11.29 76804
	// Определять уведомлять или не уведомлять предлагаю в зависимости от проекта. Для этого можно задействовать РС ШаблоныТекстовПисем. 
	// Т.е. если в РС найден шаблон текста с типом Письмо о закрытии обращения для проекта, совпадающего с указанным в обращении - письмо отправляется.
	УчетнаяЗаписьПоШаблону = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныТекстовПисем.УчетнаяЗапись КАК УчетнаяЗапись
		|ИЗ
		|	РегистрСведений.ШаблоныТекстовПисем КАК ШаблоныТекстовПисем
		|ГДЕ
		|	ШаблоныТекстовПисем.Проект = &Проект
		|	И ШаблоныТекстовПисем.ТипШаблона = &ТипШаблона";
	
	Запрос.УстановитьПараметр("Проект", ДанныеОбращения.Проект);
	Запрос.УстановитьПараметр("ТипШаблона", Справочники.ТипыШаблоновТекстов.ПисьмоЗакрытиеОбращения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДанныеОбращения.УведомлятьПользователейОЗакрытииОбращений = Истина;
		УчетнаяЗаписьПоШаблону = ВыборкаДетальныеЗаписи.УчетнаяЗапись;
	Иначе
		ДанныеОбращения.УведомлятьПользователейОЗакрытииОбращений = Ложь;	
	КонецЕсли;	
	// }Рарус_shav 2018.11.29 76804
	
	Если Не ДанныеОбращения.УведомлятьПользователейОЗакрытииОбращений Тогда
		Возврат;
	КонецЕсли;
    
    Если ЗначениеЗаполнено(ДанныеОбращения.АдресДляПереписки) Тогда
        АдресаКонтакта = Новый Массив;
        ДанныеКонтакта = Новый Структура;
        ДанныеКонтакта.Вставить("Адрес", ДанныеОбращения.АдресДляПереписки); 
        ДанныеКонтакта.Вставить("Представление", ДанныеОбращения.АдресДляПереписки);
        ДанныеКонтакта.Вставить("Контакт", ДанныеОбращения.Инициатор); 
        АдресаКонтакта.Добавить(ДанныеКонтакта);
    Иначе
        АдресаКонтакта = КонтактнаяИнформацияУСП.АктуальныеАдресаОтправкиПользователяСервиса(ДанныеОбращения.Инициатор);
    КонецЕсли;
	
	Если АдресаКонтакта.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Отправка письма о закрытии обращения'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация, Метаданные.Документы.Обращение, Обращение,
				СтрШаблон(НСтр("ru = 'У инициатора ""%1"" не задан адрес электронной почты.'"), ДанныеОбращения.Инициатор));
		Возврат;
	КонецЕсли;
	
	ДанныеКонтакта = АдресаКонтакта[0];
    
    УчетнаяЗапись = ВзаимодействияУСП.УчетнаяЗаписьПоддержки(ДанныеОбращения.Сервис, ДанныеОбращения.Витрина);
	// {Рарус_shav 2018.11.29 76804
	// Реализовать подстановку учетной записи для отправки письма-уведомления о закрытии обращения через РС ШаблоныТекстовПисем.
	Если ЗначениеЗаполнено(УчетнаяЗаписьПоШаблону) Тогда
		УчетнаяЗапись = УчетнаяЗаписьПоШаблону;
	КонецЕсли;
	
	// Если обращение было создано автоматически по письму на электронную почту и есть электронный адрес для отправки письма
	// Если обращение было создано вручную пользователем, то пока должна стоять заглушка
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьПоШаблону) ИЛИ НЕ Обращение.КаналПолучения = Справочники.КаналыПолученияОбращений.ЭлектроннаяПочта Тогда
		Возврат;
	КонецЕсли;	
	// }Рарус_shav 2018.11.29 76804
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='У сервиса ""%1"" не установлена учетная запись для отправки письма о закрытии обращения.'"),
				ДанныеОбращения.Сервис);
	КонецЕсли; 
	
	// {Рарус_shav 2018.10.23 74401	
	//ШаблонПисьма = Справочники.ШаблоныТекстов.ШаблонПоТипу(
	//    Справочники.ТипыШаблоновТекстов.ПисьмоЗакрытиеОбращения, 
	//    ДанныеОбращения.Сервис, ДанныеОбращения.Витрина);
    ШаблонПисьма = Справочники.ШаблоныТекстов.ШаблонПоТипу(
        Справочники.ТипыШаблоновТекстов.ПисьмоЗакрытиеОбращения, 
        ДанныеОбращения.Сервис, ДанныеОбращения.Витрина, ДанныеОбращения.Проект);
	// }Рарус_shav 2018.10.23 74401	
	
	Если Не ЗначениеЗаполнено(ШаблонПисьма) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='У сервиса ""%1"" не установлен шаблон письма для отправки письма о закрытии обращения.'"),
				ДанныеОбращения.Сервис);
	КонецЕсли; 
    
    ТаблицаКартинок = Новый ТаблицаЗначений; // Для сохранения вложений картинок
    Письмо = ВзаимодействияУСП.ЗаготовкаИсходящегоПисьма(ШаблонПисьма, Обращение, УчетнаяЗапись, ТаблицаКартинок);
	// {Рарус_shav 2018.12.06 76804 #4
	Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма[
	                      ?(РольДоступна(Метаданные.Роли.ПолныеПрава), "Черновик", "Исходящее")];
	Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;					  
	// }Рарус_shav 2018.12.06 76804 #4					  
    ВзаимодействияУСП.ДобавитьПолучателяПисьма(Письмо, ДанныеКонтакта);	
	Письмо.Записать();
    ВзаимодействияУСП.ДобавитьКартинкиВПисьмо(Письмо, ТаблицаКартинок);
    ВзаимодействияУСП.УстановитьПредметПисьма(Письмо, Обращение);
    
КонецПроцедуры

// Устанавливает исполнителя обращения по умолчанию.
//
// Параметры:
//  Обращение - ДокументОбъект.Обращение - обращение для установки исполнителя.
//
Процедура УстановитьИсполнителяПоУмолчанию(Обращение) Экспорт
    
    ОбслуживающаяОрганизация = Неопределено;
    ЛинияПоддержки = Неопределено;
    
    Если ЗначениеЗаполнено(Обращение.Инициатор) Тогда
        Запрос = Новый Запрос;
        Запрос.Текст =
            "ВЫБРАТЬ РАЗЛИЧНЫЕ
            |   ПользователиАбонентов.Абонент
            |ПОМЕСТИТЬ АбонентыПользователя
            |ИЗ
            |   РегистрСведений.ПользователиАбонентов КАК ПользователиАбонентов
            |ГДЕ
            |   ПользователиАбонентов.ПользовательСервиса = &ПользовательСервиса
            |;
            |
            |////////////////////////////////////////////////////////////////////////////////
            |ВЫБРАТЬ РАЗЛИЧНЫЕ
            |   ВзаимоотношенияАбонентовСрезПоследних.ВедущийАбонент КАК Абонент
            |ПОМЕСТИТЬ ОбслуживающиеОрганизацииПользователя
            |ИЗ
            |   РегистрСведений.ВзаимоотношенияАбонентов.СрезПоследних КАК ВзаимоотношенияАбонентовСрезПоследних
            |ГДЕ
            |   ВзаимоотношенияАбонентовСрезПоследних.ВидВзаимоотношений = ЗНАЧЕНИЕ(Перечисление.ВидыВзаимоотношений.ОбслуживающаяОрганизацияАбонент)
            |   И ВзаимоотношенияАбонентовСрезПоследних.Абонент В
            |           (ВЫБРАТЬ
            |               АбонентыПользователя.Абонент
            |           ИЗ
            |               АбонентыПользователя КАК АбонентыПользователя)
            |;
            |
            |////////////////////////////////////////////////////////////////////////////////
            |ВЫБРАТЬ РАЗЛИЧНЫЕ
            |   АбонентыОбслуживающихОрганизаций.ОбслуживающаяОрганизация
            |ИЗ
            |   РегистрСведений.АбонентыОбслуживающихОрганизаций КАК АбонентыОбслуживающихОрганизаций
            |ГДЕ
            |   АбонентыОбслуживающихОрганизаций.Абонент В
            |           (ВЫБРАТЬ
            |               ОбслуживающиеОрганизацииПользователя.Абонент
            |           ИЗ
            |               ОбслуживающиеОрганизацииПользователя КАК ОбслуживающиеОрганизацииПользователя)";
        Запрос.УстановитьПараметр("ПользовательСервиса", Обращение.Инициатор);
        Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();
        Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
            ОбслуживающаяОрганизация = Выборка.ОбслуживающаяОрганизация;
        КонецЕсли;
    КонецЕсли;
    Если ЗначениеЗаполнено(ОбслуживающаяОрганизация) Тогда
        ЛинияПоддержки = ОбслуживающиеОрганизацииПовтИсп.ПерваяЛинияПоддержки(ОбслуживающаяОрганизация);
    Иначе
        ЛинияПоддержки = Справочники.Витрины.ПерваяЛиния(Обращение.Витрина);
		Если ЗначениеЗаполнено(ЛинияПоддержки) Тогда
        	ОбслуживающаяОрганизация = Справочники.ЛинииПоддержки.ОбслуживающаяОрганизация(ЛинияПоддержки);
		Иначе
			ЛинияПоддержки = ОбслуживающиеОрганизацииПовтИсп.ПерваяЛинияПоддержки(Справочники.ОбслуживающиеОрганизации.СлужбаПоддержки);
			ОбслуживающаяОрганизация = Справочники.ОбслуживающиеОрганизации.СлужбаПоддержки;
		КонецЕсли;
    КонецЕсли; 
    
    Обращение.ОбслуживающаяОрганизация = ОбслуживающаяОрганизация;
    Обращение.ЛинияПоддержки = ЛинияПоддержки;
    Обращение.Исполнитель = ЛинияПоддержки;
    
КонецПроцедуры

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет, подходит ли объект к шаблону бизнес-процесса
//
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат БизнесСобытия.ШаблонПодходитДляАвтозапускаБизнесПроцессаПоКарточке(ШаблонСсылка, 
		ПредметСсылка, Подписчик, ВидСобытия, Условие);
	
КонецФункции

// Возвращает инициатора и обслуживающие организации обращения
// 
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет",Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПоКонтактам(ТекстВременнаяТаблица = "", Объединить = Ложь) Экспорт
	
	ШаблонВыбрать = ?(Объединить,"ВЫБРАТЬ РАЗЛИЧНЫЕ","ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ");
	
	ТекстЗапроса = "
	|%ШаблонВыбрать%
	|	Обращение.Инициатор КАК Контакт " + ТекстВременнаяТаблица + "
	|ИЗ
	|	Документ.Обращение КАК Обращение
	|ГДЕ
	|	Обращение.Ссылка = &Предмет
	|	И (НЕ Обращение.Инициатор = ЗНАЧЕНИЕ(Справочник.ПользователиСервисов.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ШаблонВыбрать%", ШаблонВыбрать);
	
	Если Объединить Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ ВСЕ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьПоказательКоличествоОбращений(Параметры) Экспорт
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = 
    	"ВЫБРАТЬ
        |   Обращение.Ссылка,
        |   Обращение.КарточкаБазыЗнаний,
        |   Обращение.Дата
        |ИЗ
        |   Документ.Обращение КАК Обращение
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияПоказателей КАК ЗначенияПоказателей
        |       ПО Обращение.Ссылка = ЗначенияПоказателей.Регистратор
        |ГДЕ
        |   Обращение.Проведен
        |   И ЗначенияПоказателей.Регистратор ЕСТЬ NULL
        |   И Обращение.КарточкаБазыЗнаний <> НЕОПРЕДЕЛЕНО";
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    РегистрыНакопления.ЗначенияПоказателей.УстановитьИспользованиеИтогов(Ложь);
    Пока Выборка.Следующий() Цикл
        Набор = РегистрыНакопления.ЗначенияПоказателей.СоздатьНаборЗаписей();
        Набор.Отбор.Регистратор.Установить(Выборка.Ссылка);
        Запись = Набор.Добавить();
        Запись.Регистратор = Выборка.Ссылка;
        Запись.Период = Выборка.Дата;
        Запись.Показатель = Перечисления.ПоказателиКарточек.КоличествоОбращений;
        Запись.Объект = Выборка.КарточкаБазыЗнаний;
        Запись.Значение = 1;
        Набор.Записать();
    КонецЦикла;
    РегистрыНакопления.ЗначенияПоказателей.УстановитьИспользованиеИтогов(Истина);
    
КонецПроцедуры

#КонецОбласти

#КонецЕсли