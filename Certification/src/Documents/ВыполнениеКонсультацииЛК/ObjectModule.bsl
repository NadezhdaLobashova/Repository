
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ДополнительныеСвойства.Свойство("Отказ") И ДополнительныеСвойства.Отказ = Истина Тогда
		Отказ = ДополнительныеСвойства.Отказ;
		ВозВрат;
	КонецЕсли;
	
	Движения.РасписаниеКонсультаций.Очистить();
	Движения.РасписаниеКонсультаций.Записать();
	Движения.РезультатыКонсультаций.Очистить();
	Движения.РезультатыКонсультаций.Записать();
	
	ДвиженияДокумента = ПолучитьДвижения(РежимПроведения, Отказ);
	Если ДвиженияДокумента = Неопределено Тогда
		Отказ = Истина;
		ВозВрат;
	КонецЕсли;
	
	ДвиженияРасписаниеКонсультаций = ДвиженияДокумента["РасписаниеКонсультаций"];
	Движения.РасписаниеКонсультаций.Загрузить(ДвиженияРасписаниеКонсультаций);
	Движения.РасписаниеКонсультаций.Записывать = Истина;
	
	ДвиженияРезультатыКонсультаций = ДвиженияДокумента["РезультатыКонсультаций"];
	Движения.РезультатыКонсультаций.Загрузить(ДвиженияРезультатыКонсультаций);
	Движения.РезультатыКонсультаций.Записывать = Истина;
	Движения.Записать();
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	БоР_ОбщийМодуль.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если ДополнительныеСвойства.Свойство("НеЗаполнятьСобытие") И ДополнительныеСвойства.НеЗаполнятьСобытие Тогда
		// не создавать
	Иначе
		СоздатьПровестиДокументСобытие(РежимЗаписи);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Автор) Тогда
		Автор = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = ТекущаяДата();
	КонецЕсли;	
	
КонецПроцедуры

// БоР :  14.01.2017 21:32:07
Функция ПолучитьДвижения(РежимПроведения, Отказ) Экспорт

	#Область ПараметрыСообщения
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Сотрудник"						, Сотрудник);
	ПараметрыСообщения.Вставить("ДатаВремяНачала"				, ДатаВремяНачала);
	ПараметрыСообщения.Вставить("Сообщение_УстановитьДанные"	, ЭтотОбъект);
	#КонецОбласти	
	
	Запрос = Новый Запрос;
	
	#Область Запрос
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасписаниеКонсультацийСрезПоследних.Сотрудник,
	|	РасписаниеКонсультацийСрезПоследних.Работа,
	|	РасписаниеКонсультацийСрезПоследних.Проект,
	//|	РасписаниеКонсультацийСрезПоследних.Задание,
	//|	РасписаниеКонсультацийСрезПоследних.ПакетЧасов,
	|	РасписаниеКонсультацийСрезПоследних.Событие,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала,
	|	РасписаниеКонсультацийСрезПоследних.Контрагент,
	|	РасписаниеКонсультацийСрезПоследних.КонтактноеЛицо,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РасписаниеКонсультацийСрезПоследних.Продолжительность,
	|	РасписаниеКонсультацийСрезПоследних.ВидУслуги,
	|	РасписаниеКонсультацийСрезПоследних.ТемаВопроса,
	|	РасписаниеКонсультацийСрезПоследних.Состояние,
	|	РасписаниеКонсультацийСрезПоследних.КомментарийЗаписи,
	|	РасписаниеКонсультацийСрезПоследних.ТипЗаписи,
	|	РасписаниеКонсультацийСрезПоследних.КрайнийСрок,
	|	РасписаниеКонсультацийСрезПоследних.ЗапретитьЗамещение,
	|	РасписаниеКонсультацийСрезПоследних.КонтактныеТелефоны,
	|	РасписаниеКонсультацийСрезПоследних.СрочнаяЗапись
	|ПОМЕСТИТЬ ВТТекущееРасписание
	|ИЗ
	|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних(
	|			&МоментВремени,
	|			Сотрудник = &Сотрудник
	|				И ДатаВремяНачала = &ДатаВремяНачала) КАК РасписаниеКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТекущееРасписание.Сотрудник,
	|	ВТТекущееРасписание.ДатаВремяНачала,
	|	ВТТекущееРасписание.ДатаВремяОкончания,
	|	ВТТекущееРасписание.Продолжительность,
	|	ВТТекущееРасписание.Контрагент,
	|	ВТТекущееРасписание.КонтактноеЛицо,
	|	ВТТекущееРасписание.Работа,
	|	ВТТекущееРасписание.Проект,
	//|	ВТТекущееРасписание.Задание,
	//|	ВТТекущееРасписание.ПакетЧасов,
	|	ВТТекущееРасписание.Событие,
	|	ВТТекущееРасписание.ВидУслуги,
	|	ВТТекущееРасписание.ТемаВопроса,
	|	ВТТекущееРасписание.Состояние,
	|	ВТТекущееРасписание.КомментарийЗаписи,
	|	ВТТекущееРасписание.ТипЗаписи,
	|	ВТТекущееРасписание.СрочнаяЗапись
	|ИЗ
	|	ВТТекущееРасписание КАК ВТТекущееРасписание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период,
	|	ВыполнениеКонсультацииЛК.Сотрудник,
	|	ВыполнениеКонсультацииЛК.ДатаВремяНачала,
	|	ВТТекущееРасписание.ДатаВремяОкончания,
	|	ВТТекущееРасписание.Продолжительность,
	|	ВТТекущееРасписание.Работа,
	|	ВТТекущееРасписание.Проект,
	//|	ВТТекущееРасписание.Задание,
	//|	ВТТекущееРасписание.ПакетЧасов,
	|	ВТТекущееРасписание.Событие,
	|	ВыполнениеКонсультацииЛК.Контрагент,
	|	ВыполнениеКонсультацииЛК.КонтактноеЛицо,
	|	ВТТекущееРасписание.КомментарийЗаписи,
	|	ВТТекущееРасписание.КрайнийСрок,
	|	ВТТекущееРасписание.ЗапретитьЗамещение,
	|	ВТТекущееРасписание.КонтактныеТелефоны,
	|	ВТТекущееРасписание.ТипЗаписи,
	|	ВТТекущееРасписание.СрочнаяЗапись,
	|	ВыполнениеКонсультацииЛК.ВидУслуги,
	|	ВыполнениеКонсультацииЛК.ТемаВопроса,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Выполнено) КАК Состояние
	|ИЗ
	|	Документ.ВыполнениеКонсультацииЛК КАК ВыполнениеКонсультацииЛК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТекущееРасписание КАК ВТТекущееРасписание
	|		ПО ВыполнениеКонсультацииЛК.Сотрудник = ВТТекущееРасписание.Сотрудник
	|			И ВыполнениеКонсультацииЛК.ДатаВремяНачала = ВТТекущееРасписание.ДатаВремяНачала
	|ГДЕ
	|	ВыполнениеКонсультацииЛК.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период,
	|	ВыполнениеКонсультацииЛК.Сотрудник,
	|	ВыполнениеКонсультацииЛК.ДатаВремяНачала,
	|	&Ссылка КАК ДокументВыполнения,
	|	ВТТекущееРасписание.ДатаВремяОкончания,
	|	ВТТекущееРасписание.Продолжительность,
	|	ВТТекущееРасписание.Работа,
	|	ВТТекущееРасписание.Проект,
	//|	ВТТекущееРасписание.Задание,
	//|	ВТТекущееРасписание.ПакетЧасов,
	|	ВТТекущееРасписание.Событие,
	|	ВыполнениеКонсультацииЛК.Контрагент,
	|	ВыполнениеКонсультацииЛК.КонтактноеЛицо,
	|	ВТТекущееРасписание.КомментарийЗаписи,
	|	ВТТекущееРасписание.ТипЗаписи,
	|	ВТТекущееРасписание.СрочнаяЗапись,
	|	ВыполнениеКонсультацииЛК.ВидУслуги,
	|	ВыполнениеКонсультацииЛК.ТемаВопроса,
	|	ВыполнениеКонсультацииЛК.Результат,
	|	ВыполнениеКонсультацииЛК.ВопросКлиента,
	|	ВыполнениеКонсультацииЛК.ОтветСотрудника,
	|	ВыполнениеКонсультацииЛК.ДатаВремяНачалаФакт,
	|	ВыполнениеКонсультацииЛК.ДатаВремяОкончанияФакт,
	|	ВыполнениеКонсультацииЛК.ПродолжительностьФакт,
	|	ВЫБОР
	|		КОГДА ВыполнениеКонсультацииЛК.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.НеОказанаКонсультация)
	|			ТОГДА ВыполнениеКонсультацииЛК.ПричинаНеоказания
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПричиныНеоказанияКонсультацииЛК.ПустаяСсылка)
	|	КОНЕЦ КАК ПричинаНеоказания
	|ИЗ
	|	Документ.ВыполнениеКонсультацииЛК КАК ВыполнениеКонсультацииЛК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТекущееРасписание КАК ВТТекущееРасписание
	|		ПО ВыполнениеКонсультацииЛК.Сотрудник = ВТТекущееРасписание.Сотрудник
	|			И ВыполнениеКонсультацииЛК.ДатаВремяНачала = ВТТекущееРасписание.ДатаВремяНачала
	|ГДЕ
	|	ВыполнениеКонсультацииЛК.Ссылка = &Ссылка";
	
	#КонецОбласти
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		МоментВремени = Неопределено;
	Иначе
		МоментВремени = МоментВремени();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МоментВремени"	, МоментВремени);
	Запрос.УстановитьПараметр("ДатаВремяНачала"	, ДатаВремяНачала);
	Запрос.УстановитьПараметр("Сотрудник"		, Сотрудник);
	Запрос.УстановитьПараметр("Период"			, Дата);
	Запрос.УстановитьПараметр("Ссылка"			, Ссылка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатТекущееРасписание = РезультатыЗапроса[РезультатыЗапроса.Количество() - 3];
	Выборка = РезультатТекущееРасписание.Выбрать();
	Если Не Выборка.Следующий() Тогда
		ПараметрыСообщения.Вставить("Сообщение_Поле"		, "Сотрудник");
		ШаблонСообщения = "Запись [&ДатаВремяНачала, &Сотрудник]. &ПС Не запланировано.";
		БоР_ОбщийМодуль.Сообщить_С(ШаблонСообщения, ПараметрыСообщения);
		Отказ = Истина;
		ВозВрат Неопределено;
	КонецЕсли;
	Если Выборка.Состояние <> Перечисления.СостоянияЭлементаРасписанияЛК.ЗаписанКлиент Тогда
		ПараметрыСообщения.Вставить("Сообщение_Поле"		, "Сотрудник");
		ПараметрыСообщения.Вставить("Состояние"				, Выборка.Состояние);
		ШаблонСообщения = "Запись [&ДатаВремяНачала, &Сотрудник]. &ПС Состояние записи - &Состояние. Должно быть """ + Перечисления.СостоянияЭлементаРасписанияЛК.ЗаписанКлиент + """";
		БоР_ОбщийМодуль.Сообщить_С(ШаблонСообщения, ПараметрыСообщения);
		Отказ = Истина;
		ВозВрат Неопределено;
	КонецЕсли;
	Если Выборка.Контрагент <> Контрагент Тогда
		ПараметрыСообщения.Вставить("Сообщение_Поле"		, "Контрагент");
		ПараметрыСообщения.Вставить("Контрагент"			, Выборка.Контрагент);
		ШаблонСообщения = "Запись [&ДатаВремяНачала, &Сотрудник]. &ПС Записан другой контрагент &Контрагент";
		БоР_ОбщийМодуль.Сообщить_С(ШаблонСообщения, ПараметрыСообщения);
		Отказ = Истина;
		ВозВрат Неопределено;
	КонецЕсли;
	Если Не Выборка.Работа.ТребуетВыполнения Тогда
		ПараметрыСообщения.Вставить("Сообщение_Поле"		, "Работа");
		ПараметрыСообщения.Вставить("Работа"				, Выборка.Работа);
		ШаблонСообщения = "Запись [&ДатаВремяНачала, &Сотрудник]. &ПС Работа &Работа не требует регистрации выполнения.";
		БоР_ОбщийМодуль.Сообщить_С(ШаблонСообщения, ПараметрыСообщения);
		Отказ = Истина;
		ВозВрат Неопределено;
	КонецЕсли;
	Если Не Выборка.Работа.РаботаПоРасписанию Тогда
		ПараметрыСообщения.Вставить("Сообщение_Поле"		, Выборка.Работа);
		ШаблонСообщения = "Запись [&ДатаВремяНачала, &Сотрудник]. &ПС Работа &Работа - не работа по расписанию, выполнение регистрируется документом """ + Метаданные.Документы.ВыполнениеРаботы.Синоним + """.";
		БоР_ОбщийМодуль.Сообщить_С(ШаблонСообщения, ПараметрыСообщения);
		Отказ = Истина;
		ВозВрат Неопределено;
	КонецЕсли;
	
	//РезультатТекущиеРезультаты = РезультатыЗапроса[РезультатыЗапроса.Количество() - 3];
	//Выборка = РезультатТекущиеРезультаты.Выбрать();
	//Если Выборка.Следующий() Тогда
	//	ПараметрыСообщения.Вставить("Сообщение_Поле"		, "Контрагент");
	//	ШаблонСообщения = "Запись [&ДатаВремяНачала, &Сотрудник]. &ПС	Результат уже зарегистрирован";
	//	БоР_ОбщийМодуль.Сообщить_С(ШаблонСообщения, ПараметрыСообщения);
	//	Отказ = Истина;
	//	ВозВрат Неопределено;
	//КонецЕсли;
	//
	Если Отказ Тогда
		ВозВрат Неопределено
	КонецЕсли;
	
	ДвиженияДокумента = Новый Структура;
	ДвиженияДокумента.Вставить("РезультатыКонсультаций", РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выгрузить());
	ДвиженияДокумента.Вставить("РасписаниеКонсультаций", РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выгрузить());
	ВозВрат ДвиженияДокумента;
	
КонецФункции

// БоР :  18.01.2017 2:23:06
Процедура СоздатьПровестиДокументСобытие(РежимЗаписи) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ТребуетсяСобытие = Ложь;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ТребуетсяСобытие = Проведен;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ТребуетсяСобытие = Истина;
	КонецЕсли;
	
	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	//Лобашова 89291 17.07.2019 +
	Событие = НайтиСобытие();
	//Лобашова 89291 17.07.2019 -
	Если ЗначениеЗаполнено(Событие) Тогда
		НовоеОбращение = Событие.ПолучитьОбъект();
		Если Не ТребуетсяСобытие И Не НовоеОбращение.ПометкаУдаления Тогда // Надо удалить
			НовоеОбращение.УстановитьПометкуУдаления(Истина);
		ИначеЕсли ТребуетсяСобытие И НовоеОбращение.ПометкаУдаления Тогда // Надо отменить
			НовоеОбращение.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
	ИначеЕсли ТребуетсяСобытие Тогда
		НовоеОбращение = Документы.Обращение.СоздатьДокумент();
	КонецЕсли;
	Если Не ТребуетсяСобытие Тогда
		ВозВрат;
	КонецЕсли;
	#Область ОБД
	//ШаблонСобытия = ВидУслуги.Шаблон;
	СведенияОПользователе = РегистрыСведений.СведенияОПользователях.СведенияОПользователе(Сотрудник);

	//ДокументОбъект.Дата								= Дата;
	//ДокументОбъект.CRM_Организация					= Сведения.ОбслуживающаяОрганизация;
	//ПодразделениеСотрудника = СотрудникиСервер.ТекущаяСтавкаСотрудникаДолжностьПодразделени(СтрокаТаблицаДляЗаполнения.Сотрудник,ТекущаяДата,Неопределено);
	//ДокументОбъект.CRM_Подразделение				= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Сотрудник, "ОсновноеПодразделение");
	//ДокументОбъект.CRM_ФактическаяДатаЗавершения	= ДатаВремяОкончанияФакт;
	//
	//Если ЗначениеЗаполнено(ШаблонСобытия.Важность) Тогда
	//	ДокументОбъект.Важность							= ШаблонСобытия.Важность;
	//Иначе
	//	ДокументОбъект.Важность							= Перечисления.Важность.Средняя;
	//КонецЕсли;
	//
	//ДокументОбъект.ВалютаДокумента					= Константы.ВалютаУправленческогоУчета.Получить();
	//Структура = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, Дата);
	//ДокументОбъект.КурсДокумента					= Структура.Курс;
	//ДокументОбъект.КратностьДокумента				= Структура.Кратность;
	//
	//ДокументОбъект.ВидОбъекта						= Перечисления.ВидыОбъектовСобытия.Контрагент;
	//Если ЗначениеЗаполнено(ШаблонСобытия.ВидСобытия) Тогда
	//	ДокументОбъект.ВидСобытия						= ШаблонСобытия.ВидСобытия;
	//Иначе
	//	ДокументОбъект.ВидСобытия						= Перечисления.ВидыСобытий.ТелефонныйЗвонок;
	//КонецЕсли;
	//ДокументОбъект.ГруппаСобытия					= ВидУслуги.ГруппаСобытия;
	//ДокументОбъект.Контрагент						= Контрагент;
	//ДокументОбъект.КонтактноеЛицо					= КонтактноеЛицо;
	////ДокументОбъект.КонтактноеЛицоБезКонтрагента	= КонтактноеЛицо;
	////ДокументОбъект.МинутыGApi						= 1;
	//ДокументОбъект.НачалоСобытия					= ДатаВремяНачалаФакт;
	//ДокументОбъект.ОкончаниеСобытия					= ДатаВремяОкончанияФакт;
	//ДокументОбъект.ОписаниеСобытия					= ВидУслуги.Шаблон.Наименование;
	//ДокументОбъект.Ответственный					= Сотрудник;
	//ДокументОбъект.CRM_Автор						= Пользователи.ТекущийПользователь();
	//
	//ДокументОбъект.СодержаниеСобытия				= ВидУслуги.Шаблон.СодержаниеСобытия + Символы.ПС	+ ПолучитьТекстСобытия();
	//
	//
	//ДокументОбъект.СостояниеСобытия					= Перечисления.СостоянияСобытий.Завершено;
	//ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойТипЦенПродажи");
	//ДокументОбъект.СуммаВключаетНДС					= ТипЦен.ЦенаВключаетНДС;
	//ДокументОбъект.ТипСобытия						= ВидУслуги.Шаблон.ТипСобытия;//Перечисления.ВходящееИсходящееСобытие.Входящее
	//ДокументОбъект.УчитыватьНДС						= Истина;
	//ДокументОбъект.РасчетТрудозатрат();
	//
	//ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//Если Не ЗначениеЗаполнено(Событие) Тогда
	//	Событие = ДокументОбъект.Ссылка;
	//КонецЕсли;
	//
	//НаборЗаписей = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект		.Установить(Событие);
	//
	//Для каждого СтрокаКатегорииСобытия Из КатегорииСобытия Цикл
	//	Запись = НаборЗаписей.Добавить();
	//	Запись.Объект				= Событие;
	//	Запись.Категория			= СтрокаКатегорииСобытия.Категория;
	//КонецЦикла;
	//
	//НаборЗаписей.Записать();
	 #КонецОбласти
	 
	 //Лобашова 89291 17.07.2019 +
	 //НовоеОбращение = Документы.Обращение.СоздатьДокумент();
	 Если  Результат = Перечисления.РезультатыКонсультации.НеОказанаКонсультация ИЛИ Результат = Перечисления.РезультатыКонсультации.ОказанаКонсультация  Тогда
		НовоеОбращение.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбращений.Закрыто");
		НовоеОбращение.ДатаЗакрытия = ТекущаяУниверсальнаяДата();
	 //Лобашова 89291 17.07.2019 -
		НовоеОбращение.Тема = ТемаВопроса;
		НовоеОбращение.Дата = ТекущаяУниверсальнаяДата();
		НовоеОбращение.Заполнить(Неопределено);
		НовоеОбращение.ТипОбращения = Перечисления.ТипыОбращений.Консультация;
		НовоеОбращение.КаналПолучения = Справочники.КаналыПолученияОбращений.РасписаниеЛК;
		НовоеОбращение.ОписаниеХранилище = Новый ХранилищеЗначения(ВопросКлиента + Символы.ПС + ОтветСотрудника);
	 
	 //НовоеОбращение.Витрина = ДанныеВитрин.ВитриныПоУчетнымЗаписям.Получить(ДанныеПисьма.УчетнаяЗапись);
	 //Если Не ЗначениеЗаполнено(НовоеОбращение.Витрина) Тогда
	 //	ПолучателиПисьма = ДанныеПисьма.ПолучателиПисьма.Выбрать();
	 //	Пока ПолучателиПисьма.Следующий() Цикл
	 //		НовоеОбращение.Витрина = ДанныеВитрин.ВитриныПоАдресам.Получить(НРег(СтрЗаменить(ПолучателиПисьма.Адрес,"'","")));
	 //		Если ЗначениеЗаполнено(НовоеОбращение.Витрина) Тогда
	 //			Прервать;
	 //		КонецЕсли;
	 //	КонецЦикла;
	 //КонецЕсли; 
	 ////Вторая попытка найти витрину, по получателям копий.
	 //Если Не ЗначениеЗаполнено(НовоеОбращение.Витрина) Тогда
	 //	ПолучателиПисьма = ДанныеПисьма.ПолучателиКопий.Выбрать();
	 //	Пока ПолучателиПисьма.Следующий() Цикл
	 //		НовоеОбращение.Витрина = ДанныеВитрин.ВитриныПоАдресам.Получить(НРег(СтрЗаменить(ПолучателиПисьма.Адрес,"'","")));
	 //		Если ЗначениеЗаполнено(НовоеОбращение.Витрина) Тогда
	 //			Прервать;
	 //		КонецЕсли;
	 //	КонецЦикла;
	 //КонецЕсли;
	 
		НовоеОбращение.Сервис = Контрагент.Владелец;
		НовоеОбращение.Инициатор = КонтактноеЛицо;
		//НовоеОбращение.АдресДляПереписки = ДанныеПисьма.ОтправительАдрес;
		 
		НовоеОбращение.Абонент = Контрагент;
		НовоеОбращение.АбонентОбслуживающейОрганизации = Обслуживание.АбонентОбслуживающейОрганизацииАбонента(НовоеОбращение.Абонент);
		НовоеОбращение.ЛинияПоддержки = СведенияОПользователе.ЛинияПоддержки;
		НовоеОбращение.ОбслуживающаяОрганизация  = СведенияОПользователе.ОбслуживающаяОрганизация;
		НовоеОбращение.Исполнитель = Сотрудник;
 
		//Документы.Обращение.УстановитьИсполнителяПоУмолчанию(НовоеОбращение);
	 КонецЕсли;
	 //НовоеОбращение.Важность = ДанныеЗаполненияПоУмолчанию.Важность;
	 //НовоеОбращение.Проект = ДанныеЗаполненияПоУмолчанию.Проект;
	 ////{Рарус kruser 2018.12.25 78093
	 //НовоеОбращение.ЭтапПроекта = ДанныеЗаполненияПоУмолчанию.ЭтапПроекта;
	 ////}Рарус kruser 2018.12.25 78093
	 //НовоеОбращение.ЛинияПоддержки = ДанныеЗаполненияПоУмолчанию.ЛинияПоддержки;
	 
	 НовоеОбращение.Записать(РежимЗаписиДокумента.Проведение);
	 //Лобашова 89291 22.07.2019 +
	 Если ЗначениеЗаполнено(ПричинаНеоказания) Тогда		
		НоваяСтрока = Справочники.Комментарии.СоздатьЭлемент();
		НоваяСтрока.ВладелецКомментария = НовоеОбращение.Ссылка;
		НоваяСтрока.Дата = ТекущаяДата();
		НоваяСтрока.Автор = Сотрудник;
		НоваяСтрока.Комментарий = ПричинаНеоказания;
		НоваяСтрока.ВнутренняяПереписка = Истина;
		НоваяСтрока.Записать();
	КонецЕсли;
	//Лобашова 89291 22.07.2019 -
	 Событие = НовоеОбращение.Ссылка;
	 
	 // Создание письма о регистрации обращения
	 //ДанныеКонтакта = Новый Структура;
	 //ДанныеКонтакта.Вставить("Контакт", ДанныеПисьма.ОтправительКонтакт);
	 //ДанныеКонтакта.Вставить("Адрес", ДанныеПисьма.ОтправительАдрес);
	 //ДанныеКонтакта.Вставить("Представление", ДанныеПисьма.ОтправительПредставление);
	 //
	 //Взаимодействия.УстановитьПредмет(ДанныеПисьма.Письмо, НовоеОбращение.Ссылка, Истина);
	 
	 //Если ЗначениеЗаполнено(НовоеОбращение.Сервис) Тогда
	 //	ОтправитьПисьмоОРегистрацииОбращения(Обращение, ДанныеКонтакта, ДанныеПисьма.Письмо);
	 //КонецЕсли;
	 //

	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	
КонецПроцедуры

//Лобашова 89291 17.07.2019 +
Функция  НайтиСобытие()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасписаниеКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
		|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
		|	РасписаниеКонсультацийСрезПоследних.Событие КАК Событие
		|ИЗ
		|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних КАК РасписаниеКонсультацийСрезПоследних
		|ГДЕ
		|	РасписаниеКонсультацийСрезПоследних.Сотрудник = &Сотрудник
		|	И РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала = &ДатаВремяНачала";
	
	Запрос.УстановитьПараметр("ДатаВремяНачала", ДатаВремяНачала);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Событие;
	КонецЦикла;
	Возврат Документы.Обращение.ПустаяСсылка();
КонецФункции
//Лобашова 89291 17.07.2019 -

// БоР : Формирует текст для заполнения в событие 18.01.2017 18:40:34
Функция ПолучитьТекстСобытия() Экспорт
	ТекстСобытия = "";
	
	Если Результат = Перечисления.РезультатыКонсультации.ОказанаКонсультация Тогда
		ТекстСобытия = 
		"Текст вопроса:
		|" + ВопросКлиента + "
		|
		|Ответ:
		|" + ОтветСотрудника + "
		|";
	ИначеЕсли Результат = Перечисления.РезультатыКонсультации.НеОказанаКонсультация Тогда
		ТекстСобытия = 
		"Консультация не оказана, причина:
		|" + ПричинаНеоказания.ШаблонТекстаДляСобытия + "
		|";
	Иначе
		ТекстСобытия = 
		"Текст вопроса:
		|" + ВопросКлиента + "
		|
		|Ответ:
		|" + ОтветСотрудника + "
		|";
	КонецЕсли;
	ВозВрат ТекстСобытия;
КонецФункции
