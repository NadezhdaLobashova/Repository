
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Сотрудник = ПараметрыСеанса.ТекущийПользователь;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// {Рарус Evgenn 2016.05.10
	// Документ не должен быть снят с проведения, если его часы приняты.
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Регистратор", Ссылка);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ОтработанноеВремя1.Регистратор
		               |ИЗ
		               |	РегистрНакопления.ОтработанноеВремя КАК ОтработанноеВремя
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремя КАК ОтработанноеВремя1
		               |		ПО ОтработанноеВремя.ЭтапПроекта = ОтработанноеВремя1.ЭтапПроекта
		               |			И ОтработанноеВремя.Дата = ОтработанноеВремя1.Дата
		               |			И ОтработанноеВремя.Сотрудник = ОтработанноеВремя1.Сотрудник
		               |			И ОтработанноеВремя.ИдентификаторСтроки = ОтработанноеВремя1.ИдентификаторСтроки
		               |			И (ОтработанноеВремя1.Регистратор <> &Регистратор)
		               |ГДЕ
		               |	ОтработанноеВремя.Регистратор = &Регистратор";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Отказ = Истина;
			Сообщить("По этому документу уже выполнен прием часов, отмена проведения невозможна: " + Выборка.Регистратор);
			Если РольДоступна("Экономист") ИЛИ РольДоступна("ПолныеПрава") Тогда
				Отказ = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// }Рарус Evgenn 2016.05.10
	Для Каждого СтрокаРабот Из Время Цикл
		Если Не ЗначениеЗаполнено(СтрокаРабот.ИдентификаторСтроки) Тогда
			СтрокаРабот.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	ПроведениеСервер.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольПередПроведением(ЭтотОбъект, Отказ);
	
	//ПроведениеСервер.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ, "ПланированиеПроектов_Факт");
	ПроведениеСервер.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ, "ОтработанноеВремя");
	
	Движения.Записать();

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	РазрешенноеЧислоДнейВводЛУРВ = Константы.РазрешенноеЧислоДнейВводЛУРВ.Получить();
	ДатаБлокировки = ?(РазрешенноеЧислоДнейВводЛУРВ >0, ПолучитьДатуЗапрета(РазрешенноеЧислоДнейВводЛУРВ),Дата(1,1,1));
	
	ПолныеПрава = РольДоступна("ПолныеПрава");
	Экономист = РольДоступна("Экономист");
	
	Для Каждого СтрокаВремя из Время Цикл
		Если СтрокаВремя.Проект.УчетПоКонтрагентам и Не ЗначениеЗаполнено(СтрокаВремя.КонтрагентАбонент) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Необходимо указать контрагента!";
			Сообщение.Поле = "Время[" + (СтрокаВремя.НомерСтроки - 1) + "].КонтрагентАбонент";
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		Если СтрокаВремя.Работа.ВидыРабот.ВидРаботы = Перечисления.ВидыРабот.РегламентированнаяРабота Тогда
		Если Не ЗначениеЗаполнено(СтрокаВремя.Проект) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Необходимо указать проект!";
			Сообщение.Поле = "Время[" + (СтрокаВремя.НомерСтроки - 1) + "].Проект";
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Сообщить();
			Отказ = Истина;
		ИначеЕсли СтрокаВремя.Проект.ДатаНачала > Месяц или СтрокаВремя.Проект.ДатаОкончания < Месяц Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Данный проект находится в архиве!";
				Сообщение.Поле = "Время[" + (СтрокаВремя.НомерСтроки - 1) + "].Проект";
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаВремя.Дата < НачалоМесяца(Месяц) или СтрокаВремя.Дата > КонецМесяца(Месяц) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Указанная дата находится за расчетным периодом!";
			Сообщение.Поле = "Время[" + (СтрокаВремя.НомерСтроки - 1) + "].Дата";
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ПолныеПрава И НЕ Экономист и НЕ ДатаБлокировки = Дата(1,1,1) Тогда
			Если СтрокаВремя.Дата < ДатаБлокировки Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Невозможно ввести дату раньше, чем " + СокрЛП(Формат(ДатаБлокировки,"ДЛФ=Д"))+ "!";
				Сообщение.Поле = "Время[" + (СтрокаВремя.НомерСтроки - 1) + "].Дата";
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьДатуЗапрета(РазрешенноеЧислоДнейВводЛУРВ) 
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПраздничныеВыходныеДни.Дата КАК Дата
	                      |ПОМЕСТИТЬ ВТ_ДниБлокировки
	                      |ИЗ
	                      |	РегистрСведений.ПраздничныеВыходныеДни КАК ПраздничныеВыходныеДни
	                      |ГДЕ
	                      |	ПраздничныеВыходныеДни.Дата < КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	                      |	И ПраздничныеВыходныеДни.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейКалендаря.Рабочий)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ ПЕРВЫЕ 30
	                      |	ВТ_ДниБлокировки.Дата КАК ДатаЗапрета
	                      |ИЗ
	                      |	ВТ_ДниБлокировки КАК ВТ_ДниБлокировки
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВТ_ДниБлокировки.Дата УБЫВ");
	Запрос.УстановитьПараметр("ТекущаяДата",НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("КоличествоДней",РазрешенноеЧислоДнейВводЛУРВ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 30", "ПЕРВЫЕ " + Строка(РазрешенноеЧислоДнейВводЛУРВ));
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Сортировать("ДатаЗапрета");
    Возврат ?(Результат.Количество()>0,Результат[0].ДатаЗапрета,Дата(1,1,1))	
КонецФункции	

Процедура ПриКопировании(ОбъектКопирования)
	Для Каждого СтрокаРабот Из Время Цикл
		СтрокаРабот.ИдентификаторСтроки = "";
	КонецЦикла;
КонецПроцедуры

	
















