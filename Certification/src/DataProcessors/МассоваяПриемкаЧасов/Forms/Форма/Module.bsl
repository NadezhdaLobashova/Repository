
&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере()
	
	Если Объект.РежимНачисления = Перечисления.РежимНачисленияЗарплаты.РасчетПервойПоловиныМесяца Тогда
		ДатаКонцаПериода = НачалоМесяца(Объект.Месяц) + 60*60*24*15-1;
	ИначеЕсли Объект.РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет Тогда
		ДатаКонцаПериода 	= КонецМесяца(Объект.Месяц);
	Иначе 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(КадроваяИсторияСрезПоследних.Период) КАК Период,
	|	КадроваяИсторияСрезПоследних.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ вт_МаксПоКадровым
	|ИЗ
	|	РегистрСведений.КадроваяИстория.СрезПоследних(
	|			&Дата,
	|			Сотрудник = &Сотрудник
	|				ИЛИ &Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК КадроваяИсторияСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	КадроваяИсторияСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вт_МаксПоКадровым.Сотрудник КАК Сотрудник,
	|	КадроваяИстория.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТ_КадровыеДанные
	|ИЗ
	|	вт_МаксПоКадровым КАК вт_МаксПоКадровым
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИстория КАК КадроваяИстория
	|		ПО вт_МаксПоКадровым.Период = КадроваяИстория.Период
	|			И вт_МаксПоКадровым.Сотрудник = КадроваяИстория.Сотрудник
	|ГДЕ
	|	(КадроваяИстория.Подразделение = &Подразделение
	|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НепринятыеЧасыИПричиныСрезПоследних.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	МАКСИМУМ(НепринятыеЧасыИПричиныСрезПоследних.Причина) КАК Причина,
	|	МАКСИМУМ(ВЫРАЗИТЬ(НепринятыеЧасыИПричиныСрезПоследних.Описание КАК СТРОКА(500))) КАК Описание
	|ПОМЕСТИТЬ втНепринятыеЧасы
	|ИЗ
	|	РегистрСведений.НепринятыеЧасыИПричины.СрезПоследних(&Дата, ) КАК НепринятыеЧасыИПричиныСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	НепринятыеЧасыИПричиныСрезПоследних.ИдентификаторСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтработанноеВремяОстатки.Дата КАК Дата,
	|	ОтработанноеВремяОстатки.ЭтапПроекта КАК ЭтапПроекта,
	|	ОтработанноеВремяОстатки.ЭтапПроекта КАК НовыйЭтапПроекта,
	|	ОтработанноеВремяОстатки.Задача КАК Задача,
	|	ОтработанноеВремяОстатки.Задача КАК НоваяЗадача,
	|	ОтработанноеВремяОстатки.Обращение КАК Обращение,
	|	ОтработанноеВремяОстатки.Обращение КАК НовоеОбращение,
	|	ОтработанноеВремяОстатки.ЧасыОстаток КАК Часы,
	|	ОтработанноеВремяОстатки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ОтработанноеВремяОстатки.Работа КАК Работа,
	|	ОтработанноеВремяОстатки.Подразделение КАК Подразделение,
	|	ОтработанноеВремяОстатки.Подразделение КАК НовоеПодразделение,
	|	УчетФактическихДанныхВремя.Описание КАК Описание,
	|	УчетФактическихДанныхВремя.КонтрагентАбонент КАК КонтрагентАбонент,
	|	ОтработанноеВремяОстатки.Проект КАК Проект,
	|	ОтработанноеВремяОстатки.ВидРабочегоВремени КАК ВидРабочегоВремени,
	|	ОтработанноеВремяОстатки.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ втОтработанноеВремя
	|ИЗ
	|	РегистрНакопления.ОтработанноеВремя.Остатки(
	|			&Дата,
	|			(Сотрудник = &Сотрудник
	|				ИЛИ &Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|				И (Проект = &Проект
	|					ИЛИ &Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка))
	|				И Дата <= &КонецПериода
	|				И Работа.ВидРаботы <> ЗНАЧЕНИЕ(Перечисление.ВидыРабот.ОкладнаяРабота)) КАК ОтработанноеВремяОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УчетФактическихДанных.Время КАК УчетФактическихДанныхВремя
	|		ПО ОтработанноеВремяОстатки.Проект = УчетФактическихДанныхВремя.Проект
	|			И ОтработанноеВремяОстатки.ЭтапПроекта = УчетФактическихДанныхВремя.ЭтапПроекта
	|			И ОтработанноеВремяОстатки.Сотрудник = УчетФактическихДанныхВремя.Ссылка.Сотрудник
	|			И ОтработанноеВремяОстатки.ИдентификаторСтроки = УчетФактическихДанныхВремя.ИдентификаторСтроки
	|ГДЕ
	|	(УчетФактическихДанныхВремя.КонтрагентАбонент = &КонтрагентАбонент
	|			ИЛИ &КонтрагентАбонент = ЗНАЧЕНИЕ(Справочник.Абоненты.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втОтработанноеВремя.Дата КАК Дата,
	|	втОтработанноеВремя.ЭтапПроекта КАК ЭтапПроекта,
	|	втОтработанноеВремя.НовыйЭтапПроекта КАК НовыйЭтапПроекта,
	|	втОтработанноеВремя.Задача КАК Задача,
	|	втОтработанноеВремя.НоваяЗадача КАК НоваяЗадача,
	|	втОтработанноеВремя.Обращение КАК Обращение,
	|	втОтработанноеВремя.НовоеОбращение КАК НовоеОбращение,
	|	втОтработанноеВремя.Часы КАК Часы,
	|	втОтработанноеВремя.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	втОтработанноеВремя.Работа КАК Работа,
	|	втОтработанноеВремя.Подразделение КАК Подразделение,
	|	втОтработанноеВремя.Подразделение КАК НовоеПодразделение,
	|	втОтработанноеВремя.Описание КАК Описание,
	|	втОтработанноеВремя.КонтрагентАбонент КАК КонтрагентАбонент,
	|	втОтработанноеВремя.Проект КАК Проект,
	|	втОтработанноеВремя.ВидРабочегоВремени КАК ВидРабочегоВремени,
	|	втОтработанноеВремя.Сотрудник КАК Сотрудник,
	|	втНепринятыеЧасы.Причина КАК ПричинаНепринятия,
	|	втНепринятыеЧасы.Описание КАК ОписаниеПричины
	|ИЗ
	|	ВТ_КадровыеДанные КАК ВТ_КадровыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОтработанноеВремя КАК втОтработанноеВремя
	|			ЛЕВОЕ СОЕДИНЕНИЕ втНепринятыеЧасы КАК втНепринятыеЧасы
	|			ПО втОтработанноеВремя.ИдентификаторСтроки = втНепринятыеЧасы.ИдентификаторСтроки
	|		ПО ВТ_КадровыеДанные.Сотрудник = втОтработанноеВремя.Сотрудник
	|ГДЕ
	|	ЕСТЬNULL(втОтработанноеВремя.Часы, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проект,
	|	Сотрудник,
	|	Работа,
	|	Дата
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Дата", 				ТекущаяДата());
	Запрос.УстановитьПараметр("КонецПериода", 		ДатаКонцаПериода);
	Запрос.УстановитьПараметр("Проект", 			Объект.Проект);
	Запрос.УстановитьПараметр("Сотрудник", 			Объект.Сотрудник);
	Запрос.УстановитьПараметр("Подразделение", 		Объект.Подразделение);
	Запрос.УстановитьПараметр("КонтрагентАбонент", 	Объект.КонтрагентАбонент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТЧ = Объект.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаДетальныеЗаписи);
		СтрокаТЧ.Время				= ЧасыВоВремя( СтрокаТЧ.Часы);
		СтрокаТЧ.ВремяНачала		= ВыборкаДетальныеЗаписи.Дата;
		СтрокаТЧ.ВремяОкончания		= ЧасыВоВремя(ВыборкаДетальныеЗаписи.Часы, СтрокаТЧ.ВремяНачала);
		СтрокаТЧ.Коэффициент		= СтрокаТЧ.ВидРабочегоВремени.Коэффициент;
		СтрокаТЧ.ЭффективныеЧасы	= СтрокаТЧ.Часы * СтрокаТЧ.Коэффициент;
		СтрокаТЧ.ЭффективноеВремя	= ЧасыВоВремя(СтрокаТЧ.ЭффективныеЧасы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЧасыВоВремя(Часы, ДатаВремя = '00010101')
	Время = ДатаВремя + Часы * 3600;
	Возврат ?(Секунда(Время) < 30, НачалоМинуты(Время), КонецМинуты(Время) + 1);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)

	Если Не ЗначениеЗаполнено(Объект.Месяц) Тогда
		Сообщить("Сначала необходимо выбрать месяц!");
		Возврат;
	КонецЕсли;

	Если Объект.Работы.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОстаткамЗавершение", ЭтотОбъект), "При заполнении табличная часть ""Работы"" будет очищена! Продолжить?", РежимДиалогаВопрос.ДаНет);
        Возврат;
	Иначе
		ЗаполнитьПоОстаткамНаСервере();
	КонецЕсли;
	
	Свернута = Истина;
	РазвернутьТаблицуВДеревоЗначений();
КонецПроцедуры

&НаСервере
Процедура РазвернутьТаблицуВДеревоЗначений()
	
	ДФД = ДеревоРабот.ПолучитьЭлементы();
	ДФД.Очистить();

	Проекты = Объект.Работы.Выгрузить();
	Проекты.Свернуть("Проект", "ЭффективныеЧасы");
	
	Сотрудники = Объект.Работы.Выгрузить();
	Сотрудники.Свернуть("Проект, Сотрудник", "ЭффективныеЧасы");
	
	РаботыВ = Объект.Работы.Выгрузить();
	РаботыВ.Свернуть("Проект, Сотрудник, Работа", "ЭффективныеЧасы");
	
	Для Каждого СтрПроект Из Проекты Цикл
		СтрокаПроекта = ДФД.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПроекта, СтрПроект);
		СтрокаПроекта.Уровень = 1;
		             
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Проект", СтрокаПроекта.Проект);
		
		МассивСотрудников = Сотрудники.НайтиСтроки(СтруктураПоиска);
		
		СтрокаПроекта = СтрокаПроекта.ПолучитьЭлементы();
		Для Каждого СтрСотр Из МассивСотрудников Цикл
			СтрокаСотрудника = СтрокаПроекта.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСотрудника, СтрСотр);
			СтрокаСотрудника.Уровень = 2;
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Проект", СтрПроект.Проект);
			СтруктураПоиска.Вставить("Сотрудник", СтрСотр.Сотрудник);
			
			МассивВидовРабот = РаботыВ.НайтиСтроки(СтруктураПоиска);
			СтрокаСотрудника = СтрокаСотрудника.ПолучитьЭлементы();
			Для Каждого СтрокаВР Из МассивВидовРабот Цикл
				СтрокаВидовРабот = СтрокаСотрудника.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВидовРабот, СтрокаВР);
				СтрокаВидовРабот.Уровень = 3;
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Проект", СтрПроект.Проект);
				СтруктураПоиска.Вставить("Сотрудник", СтрСотр.Сотрудник);
				СтруктураПоиска.Вставить("Работа", СтрокаВидовРабот.Работа);
			
				МассивРабот = Объект.Работы.НайтиСтроки(СтруктураПоиска);
				СтрокаВидовРабот = СтрокаВидовРабот.ПолучитьЭлементы();
				Для Каждого СтрокаТЧ Из МассивРабот Цикл
					СтрокаЗаявителей = СтрокаВидовРабот.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаЗаявителей, СтрокаТЧ);
					СтрокаЗаявителей.Уровень = 4;
				КонецЦикла;
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Работы.Очистить();
	ЗаполнитьПоОстаткамНаСервере();
	Свернута = Истина;
	РазвернутьТаблицуВДеревоЗначений();
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Объект.Месяц) Тогда
		Объект.Месяц = НачалоМесяца(ТекущаяДата());
	КонецЕсли;	
	ЭтотОбъект.МесяцСтрокой = Формат(Объект.Месяц, "ДФ = ""гггг ММММ""");		
КонецПроцедуры


&НаКлиенте
Процедура МесяцСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Направление = 1 Тогда
		Объект.Месяц = КонецМесяца(Объект.Месяц) + 1;
	Иначе
		Объект.Месяц = НачалоМесяца(НачалоМесяца(Объект.Месяц) - 1);
	КонецЕсли;
	
	ЭтотОбъект.МесяцСтрокой = Формат(Объект.Месяц, "ДФ = ""гггг ММММ""");
КонецПроцедуры


&НаКлиенте
Процедура СоздатьДокументы(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьДокументыЗавершение", ЭтаФорма), "Будут созданы документы ""Прием часов"". Продолжить?", РежимДиалогаВопрос.ДаНет);	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПроверкаДанных = ПроверитьКорректностьДанных();
		Если Не ПроверкаДанных Тогда
			Возврат;
		КонецЕсли;	
		СоздатьДокументыНаСервере();
		Сообщить("Создание документов завершено");
		
		Объект.Работы.Очистить();
		ЗаполнитьПоОстаткамНаСервере();
		РазвернутьТаблицуВДеревоЗначений();	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьКорректностьДанных()
	ДанныеКорректны = Истина;
	
	Для Каждого СтрокаДерева0 Из ДеревоРабот.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаДерева1 Из СтрокаДерева0.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаДерева2 Из СтрокаДерева1.ПолучитьЭлементы() Цикл
				Для Каждого СтрокаДерева3 Из СтрокаДерева2.ПолучитьЭлементы() Цикл
					Если СтрокаДерева3.Коэффициент < 1 И Не ЗначениеЗаполнено(СтрокаДерева3.ВидДействияСНепринятымиЧасами) Тогда 
						ДанныеКорректны = Ложь;
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Не заполнено поле ""Непринятые часы"" " + Символы.ПС + 
										"Проект: " + СтрокаДерева3.Проект + Символы.ПС + 
										"Сотрудник: " + СтрокаДерева3.Сотрудник + Символы.ПС +
										"Работа: " + СтрокаДерева3.Работа + Символы.ПС +
										"Дата: " + СтрокаДерева3.Дата + Символы.ПС +
										"Коэффициент: " + СтрокаДерева3.Коэффициент + Символы.ПС + Символы.ПС;
						Сообщение.Сообщить();
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
	Возврат ДанныеКорректны;
КонецФункции // ПроверитьКорректностьДанных()

	
	
&НаСервере
Процедура СоздатьДокументыНаСервере()
	
	Если Объект.РежимНачисления = Перечисления.РежимНачисленияЗарплаты.РасчетПервойПоловиныМесяца Тогда
		ДатаКонцаПериода = НачалоМесяца(Объект.Месяц) + 60*60*24*15-1;
	ИначеЕсли Объект.РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет Тогда
		ДатаКонцаПериода = КонецМесяца(Объект.Месяц);
	Иначе 
		Возврат;
	КонецЕсли;
	
	//Если делаем расчет в текущем режиме начисления, нужно создавать не концом периода, а текущей датой
	Если ДатаКонцаПериода > ТекущаяДата() Тогда
		ДатаКонцаПериода = ТекущаяДата();
	КонецЕсли;	
	
	Для Каждого СтрокаДерева0 Из ДеревоРабот.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаДерева1 Из СтрокаДерева0.ПолучитьЭлементы() Цикл
			ДокументПриемки = Документы.ПриемЧасов.СоздатьДокумент();
			ДокументПриемки.Дата = ДатаКонцаПериода;
			ДокументПриемки.Комментарий = "Создан автоматически массовой приемкой часов";
			ДокументПриемки.Проект = СтрокаДерева1.Проект;
			ДокументПриемки.Сотрудник = СтрокаДерева1.Сотрудник;
			ДокументПриемки.Месяц = Объект.Месяц;
			ДокументПриемки.РежимНачисления = Объект.РежимНачисления;
			Для Каждого СтрокаДерева2 Из СтрокаДерева1.ПолучитьЭлементы() Цикл
				Для Каждого СтрокаДерева3 Из СтрокаДерева2.ПолучитьЭлементы() Цикл
					СтрРабот = ДокументПриемки.Работы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрРабот, СтрокаДерева3);
					
					Если СтрокаДерева3.Коэффициент < 1 И ЗначениеЗаполнено(СтрокаДерева3.ПричинаНепринятия) Тогда
						НаборНЧ = РегистрыСведений.НепринятыеЧасыИПричины.СоздатьМенеджерЗаписи();
						НаборНЧ.Период = ДатаКонцаПериода;
						НаборНЧ.ИдентификаторСтроки = СтрокаДерева3.ИдентификаторСтроки;
						НаборНЧ.ПериодНачисления = Объект.Месяц;
						НаборНЧ.ВидДействия = СтрокаДерева3.ВидДействияСНепринятымиЧасами;
						НаборНЧ.Причина = СтрокаДерева3.ПричинаНепринятия;
						НаборНЧ.Описание = СтрокаДерева3.ОписаниеПричины;
						НаборНЧ.Записать();
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
			Попытка
				ДокументПриемки.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить("Не удалось создать документ по причине: " + ОписаниеОшибки());
			КонецПопытки;	
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьСтроки(Команда)
	Если Свернута Тогда
		РазвернутьСтроки();
		Свернута = Ложь;
	Иначе
		СвернутьСтроки();
		Свернута = Истина;
	КонецЕсли;	
КонецПроцедуры
 
&НаКлиенте
Процедура РазвернутьСтроки()
	Для Каждого Строка Из ДеревоРабот.ПолучитьЭлементы() Цикл
		Элементы.ДеревоРабот.Развернуть(Строка.ПолучитьИдентификатор());
		Для Каждого Строка2 Из Строка.ПолучитьЭлементы() Цикл
			Элементы.ДеревоРабот.Развернуть(Строка2.ПолучитьИдентификатор());
			Для Каждого Строка3 Из Строка2.ПолучитьЭлементы() Цикл
				Элементы.ДеревоРабот.Развернуть(Строка3.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
 
&НаКлиенте
Процедура СвернутьСтроки()
	Для Каждого Строка Из ДеревоРабот.ПолучитьЭлементы() Цикл
		Элементы.ДеревоРабот.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДР = УРВПовтИспКлиентСервер.ПолучитьДоступностьРолей();
	ДоступныВсеПроекты = ДР.ПолныеПрава  ИЛИ ДР.Экономист; 
	Если НЕ ДоступныВсеПроекты Тогда
		СписокВыбора = ПолучитьСписокПроектовСервер();
		ДополнительныеПараметры = Новый Структура();
		
		ПоказатьВыборИзСписка(
			Новый ОписаниеОповещения("ПроектНачалоВыбора_Завершение", ЭтотОбъект, ДополнительныеПараметры), 
			СписокВыбора, Элементы.Проект);		
			
		СтандартнаяОбработка = Ложь; 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПроектНачалоВыбора_Завершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.Проект = ВыбранныйЭлемент.Значение;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПроектовСервер()
	Возврат ОбщегоНазначения.ПолучитьСписокДоступныхПроектов();
КонецФункции

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	Если Элементы.ДеревоРабот.ТекущаяСтрока = Неопределено Тогда 
		Сообщить("Выберите строку, которую необходимо разбить");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ПриемЧасов.Форма.ФормаВыбораВремени", , ЭтаФорма,,,, Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора = Результат;
	Если РезультатВыбора = КодВозвратаДиалога.Отмена Или РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НовоеВремя = РезультатВыбора.НовоеВремя;
	
	НомерСтроки = Элементы.ДеревоРабот.ТекущаяСтрока;
	ТекущаяСтрока = ДеревоРабот.НайтиПоИдентификатору(НомерСтроки);
	Если ТекущаяСтрока.Уровень < 3 Тогда 
		Возврат;
	КонецЕсли;
	
	РеквизитДерево = ЭтаФорма["ДеревоРабот"];
	ИДРодителя = ТекущаяСтрока.ПолучитьРодителя().ПолучитьИдентификатор();
	Приемник = РеквизитДерево.НайтиПоИдентификатору(ИДРодителя);
	НоваяСтрока = СкопироватьСтрокуДерева(РеквизитДерево, Приемник, ТекущаяСтрока);
	
	НоваяСтрока.ИдентификаторСкорректированнойСтроки = Строка(Новый УникальныйИдентификатор);

	ТекущаяСтрока.ВремяОкончания = '00010101' + (ТекущаяСтрока.ВремяОкончания - НовоеВремя);
	ОбновитьПоляВремени(ТекущаяСтрока);
	
	НоваяСтрока.ВремяНачала = ТекущаяСтрока.ВремяОкончания;
	ОбновитьПоляВремени(НоваяСтрока);
	ПересчитатьИтогиПоГруппировкам(НоваяСтрока);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    // Источник может быть уже перенесен
    // Это произходит если выделены несколько элементов
    // одной и той же ветви дерева на разных уровнях иерархии
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
    КонецЦикла;

    Возврат НоваяСтрока;

КонецФункции

&НаКлиенте    
Процедура ОбновитьПоляВремени(ТекущиеДанные)
	
	ТекущиеДанные.ВремяОкончания = НачалоМинуты(ТекущиеДанные.ВремяОкончания);
	ТекущиеДанные.ВремяНачала = НачалоМинуты(ТекущиеДанные.ВремяНачала);

	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания) Тогда
		Время = ТекущиеДанные.ВремяОкончания - ТекущиеДанные.ВремяНачала;
		
		ТекущиеДанные.Время = Дата(1,1,1) + Время;
		ТекущиеДанные.Часы = Время / 3600;

		Если ТекущиеДанные.Часы < ТекущиеДанные.ЭффективныеЧасы Тогда
			ТекущиеДанные.ЭффективныеЧасы = ТекущиеДанные.Часы;
			ТекущиеДанные.ЭффективноеВремя = ТекущиеДанные.Время;
		    
			Если ТекущиеДанные.Часы > 0 Тогда
				ТекущиеДанные.Коэффициент = ТекущиеДанные.ЭффективныеЧасы / ТекущиеДанные.Часы;
			Иначе
			    ТекущиеДанные.Коэффициент = 0;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьВремя(Команда)
	
	ОткрытьФорму("Документ.ПриемЧасов.Форма.ФормаВыбораВремени", , ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьВремяЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВремяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора = Результат;
	Если РезультатВыбора = КодВозвратаДиалога.Отмена Или РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РаспределитьЧасов = РезультатВыбора.НовыеЧасы;
	
	ЧасыПоСтрокам = 0;
	Для Каждого Идентификатор Из Элементы.ДеревоРабот.ВыделенныеСтроки Цикл
		Строка = ДеревоРабот.НайтиПоИдентификатору(Идентификатор);
		Если Строка.Уровень < 3 Тогда 
			Продолжить;
		КонецЕсли;	
		ЧасыПоСтрокам = ЧасыПоСтрокам + Строка.Часы;
	КонецЦикла;
	
	Коэффициент = РаспределитьЧасов / ЧасыПоСтрокам;
	Для Каждого Идентификатор Из Элементы.ДеревоРабот.ВыделенныеСтроки Цикл
		Строка = ДеревоРабот.НайтиПоИдентификатору(Идентификатор);
		Если Строка.Уровень < 3 Тогда 
			Продолжить;
		КонецЕсли;	
		Строка.Коэффициент = Коэффициент; 
		Строка.ЭффективныеЧасы = Строка.Часы * Коэффициент;
		Строка.ЭффективноеВремя = ЧасыВоВремя(Строка.ЭффективныеЧасы);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоэффициент(Команда)
	
	ОткрытьФорму("Обработка.МассоваяПриемкаЧасов.Форма.ФормаВыбораКоэффициента", , ЭтаФорма,,,, Новый ОписаниеОповещения("УстановитьКоэффициентЗавершение",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоэффициентЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
    Если ТипЗнч(Значение) <> Тип("Структура") Тогда
        ВозВрат;
    КонецЕсли;
	Коэффициент 					= Значение.Коэффициент;
	ВидДействияСНепринятымиЧасами 	= Значение.ВидДействияСНепринятымиЧасами;
	ПричинаНепринятия 				= Значение.ПричинаНепринятия;
	ОписаниеПричины 				= Значение.ОписаниеПричины;

	Для Каждого ИдентификаторСтроки Из Элементы.ДеревоРабот.ВыделенныеСтроки Цикл
		СтрокаТЧ = ДеревоРабот.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаТЧ.Уровень < 3 Тогда 
			Продолжить;
		КонецЕсли;	
		ЭффективныеЧасы = СтрокаТЧ.Часы * Коэффициент;
		СтрокаТЧ.Коэффициент = Коэффициент;
		СтрокаТЧ.ВидДействияСНепринятымиЧасами = ВидДействияСНепринятымиЧасами;
		СтрокаТЧ.ПричинаНепринятия = ПричинаНепринятия;
		СтрокаТЧ.ОписаниеПричины = ОписаниеПричины;
		СтрокаТЧ.ЭффективныеЧасы = ЭффективныеЧасы;
		СтрокаТЧ.ЭффективноеВремя = ЧасыВоВремя(ЭффективныеЧасы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАкт(Команда)
	
	ОткрытьФорму("Документ.ПриемЧасов.Форма.ФормаВыбораАкта", , ЭтаФорма,,,, Новый ОписаниеОповещения("УстановитьАктЗавершение",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("Структура") Тогда
	    ВозВрат;
	КонецЕсли;
	Акт 						= Значение.Акт;
	ВСчетБудущегоАкта 			= Значение.ВСчетБудущегоАкта;
	КомментарийДляБудущегоАкта 	= Значение.КомментарийДляБудущегоАкта;

	Для Каждого ИдентификаторСтроки Из Элементы.ДеревоРабот.ВыделенныеСтроки Цикл
		СтрокаТЧ = ДеревоРабот.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаТЧ.Уровень < 3 Тогда 
			Продолжить;
		КонецЕсли;	
		СтрокаТЧ.Акт = Акт;
		СтрокаТЧ.ВСчетБудущегоАкта = ВСчетБудущегоАкта;
		СтрокаТЧ.КомментарийДляБудущегоАкта = КомментарийДляБудущегоАкта;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйЭтап(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Проект", Объект.Проект);
	ОткрытьФорму("Документ.ПриемЧасов.Форма.ФормаВыбораНовогоЭтапа", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьНовыйЭтапЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйЭтапЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЭтапДляЗаполнения = ДополнительныеПараметры.ЭтапДляЗаполнения;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Идентификатор Из Элементы.ДеревоРабот.ВыделенныеСтроки Цикл
		Строка = ДеревоРабот.НайтиПоИдентификатору(Идентификатор);
		Если Строка.Уровень < 3 Тогда 
			Продолжить;
		КонецЕсли;	
		Строка.НовыйЭтапПроекта = ЭтапДляЗаполнения;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНовыйЭтапЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЭтапДляЗаполнения = Результат;
	Если НЕ ЗначениеЗаполнено(ЭтапДляЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьНовыйЭтапЗавершение", ЭтотОбъект, Новый Структура("ЭтапДляЗаполнения", ЭтапДляЗаполнения)), "Установить для выделенных строк новый этап: """ + ЭтапДляЗаполнения + """?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовоеПодразделение(Команда)
	
	ОткрытьФорму("Документ.ПриемЧасов.Форма.ФормаВыбораНовогоПодразделения", , ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьНовоеПодразделениеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНовоеПодразделениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПодразделениеДляЗаполнения = Результат;
	Если НЕ ЗначениеЗаполнено(ПодразделениеДляЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьНовоеПодразделениеЗавершение", ЭтотОбъект, Новый Структура("ПодразделениеДляЗаполнения", ПодразделениеДляЗаполнения)), "Установить для выделенных строк новое подразделение: """ + ПодразделениеДляЗаполнения + """?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры


&НаКлиенте
Процедура УстановитьНовоеПодразделениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПодразделениеДляЗаполнения = ДополнительныеПараметры.ПодразделениеДляЗаполнения;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Идентификатор Из Элементы.ДеревоРабот.ВыделенныеСтроки Цикл
		Строка = ДеревоРабот.НайтиПоИдентификатору(Идентификатор);
		Если Строка.Уровень < 3 Тогда 
			Продолжить;
		КонецЕсли;	
		Строка.НовоеПодразделение = ПодразделениеДляЗаполнения;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРаботКоэффициентПриИзменении(Элемент)
	ЭффективныеЧасы = Элементы.ДеревоРабот.ТекущиеДанные.Часы * Элементы.ДеревоРабот.ТекущиеДанные.Коэффициент;
	Элементы.ДеревоРабот.ТекущиеДанные.ЭффективныеЧасы = ЭффективныеЧасы;
	Элементы.ДеревоРабот.ТекущиеДанные.ЭффективноеВремя = ЧасыВоВремя(ЭффективныеЧасы);
	
	ПересчитатьИтогиПоГруппировкам(Элементы.ДеревоРабот.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиПоГруппировкам(ТекущиеДанные)

	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель <> Неопределено Тогда
		
		ЭффективныеЧасы = 0;
		Для Каждого ЭлементД Из ТекущийРодитель.ПолучитьЭлементы() Цикл
			ЭффективныеЧасы = ЭффективныеЧасы + ЭлементД.ЭффективныеЧасы;	
		КонецЦикла;	
		ТекущийРодитель.ЭффективныеЧасы = ЭффективныеЧасы;
		ПересчитатьИтогиПоГруппировкам(ТекущийРодитель);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВесьИтог(СтрокаДерева)

	Для Каждого ЭлементД Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Если ЭлементД.ПолучитьЭлементы().Количество() = 0 Тогда
			ПересчитатьИтогиПоГруппировкам(ЭлементД);
		Иначе
			ПересчитатьВесьИтог(ЭлементД);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоРаботПослеУдаления(Элемент)
	ПересчитатьВесьИтог(ДеревоРабот);	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоРаботАктПриИзменении(Элемент)
	ТекСтрока = Элементы.ДеревоРабот.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Акт) Тогда
		ТекСтрока.ВСчетБудущегоАкта = Ложь;
		ТекСтрока.КомментарийДляБудущегоАкта = "";
	КонецЕсли;	
		
КонецПроцедуры

