
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	БоР_ОбщийМодуль.ЗаполнитьРеквизитыИзПараметров(ЭтаФорма, Неопределено);
	Элементы.ОказанаКонсультация	.Доступность = Ложь;
	Элементы.НеОказанаКонсультация	.Доступность = Ложь;
	Элементы.ОкончаниеРазговора		.Доступность = Ложь;
	Элементы.ДекорацияКружок		.Видимость = Ложь;
	Телефон = ПолучитьТелефоны(Контрагент, КонтактноеЛицо);
	
	ЗакрыватьПриЗакрытииВладельца	= Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОказанаКонсультация(Команда)
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Сотрудник"				, Сотрудник);
	СтруктураЭлемента.Вставить("ДатаВремяНачала"		, ДатаВремяНачала);
	СтруктураЭлемента.Вставить("Контрагент"				, Контрагент);
	СтруктураЭлемента.Вставить("КонтактноеЛицо"			, КонтактноеЛицо);
	СтруктураЭлемента.Вставить("ВидУслуги"				, ВидУслуги);
	СтруктураЭлемента.Вставить("ТемаВопроса"			, ТемаВопроса);
	СтруктураЭлемента.Вставить("КомментарийЗаписи"		, КомментарийЗаписи);
	СтруктураЭлемента.Вставить("Результат"				, ПредопределенноеЗначение("Перечисление.РезультатыКонсультации.ОказанаКонсультация"));
	СтруктураЭлемента.Вставить("ДатаВремяНачалаФакт"	, ДатаВремяНачалаФакт);
	СтруктураЭлемента.Вставить("ДатаВремяОкончанияФакт"	, ДатаВремяОкончанияФакт);
	СтруктураЭлемента.Вставить("ПродолжительностьФакт"	, ПродолжительностьФакт);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки", ПутьКМетаданнымОбработки);
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, СтруктураЭлемента);
	ДополнительныеПараметры = Новый Структура;
	//Лобашова 11.03.2019 81724 +
	//ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаВыполненияЛК";//ФормаВводаПараметровВыполнения
	//БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ОтразитьВыполнение_Завершение", ДополнительныеПараметры);
	
	//Создание документа ВыполнениеКонсультацииЛК, а в нем документа Обращение
	РезультатСоздания = СоздатьИОткрытьДокументОбращение();
	
	Если Не РезультатСоздания.СтандартнаяОбработка Тогда
		ВозВрат ;
	КонецЕсли;
	
	
	Событие = БоР_ОбщийМодуль.ПолучитьПолеОбъекта(РезультатСоздания.ДокументВыполнения, "Событие") ;
	//Событие = РезультатСоздания.ДокументВыполнения;
	//БоР_ОбщийМодуль.ЗаполнитьРеквизитыИзПараметров(ЭтаФорма, Неопределено);   //??
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ"				, Событие);
	ПараметрыФормы.Вставить("ТолькоПросмотр"	, Ложь);

	ЗначенияЗаполнения =  Новый Структура;
	
	ЗначенияЗаполнения.Вставить("Тема"	, ТемаВопроса);
	ЗначенияЗаполнения.Вставить("Проект"	, Проект);
	ЗначенияЗаполнения.Вставить("Результат"	, ПредопределенноеЗначение("Перечисление.РезультатыКонсультации.ОказанаКонсультация"));
	
	СтрокаТрудозатраты = Новый Структура;
	СтрокаТрудозатраты.Вставить("Работа", Работа);
	СтрокаТрудозатраты.Вставить("Длительность", ПродолжительностьФакт);
	СтрокаТрудозатраты.Вставить("Пользователь", Сотрудник);
	СтрокаТрудозатраты.Вставить("ДатаТрудозатрат", Формат(ДатаВремяНачала,"ДЛФ=Д"));
	ЗначенияЗаполнения.Вставить("Трудозатраты"	, СтрокаТрудозатраты);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	//СтруктураВозВрата = Новый Структура;
	//СтруктураВозВрата.Вставить("РезультатОткрытия"			, Истина);
	//Закрыть(СтруктураВозВрата);

	ИмяФормыДляОткрытия = "Документ." + БоР_ОбщийМодуль.ПолучитьИмяОбъектаПоСсылке(Событие) + ".ФормаОбъекта";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ОтразитьВыполнение_Завершение", Неопределено);
	
	//Лобашова 11.03.2019 81724 -	
КонецПроцедуры

//Лобашова 30.04.2019 81724 +
&НаСервере
Функция СоздатьИОткрытьДокументОбращение();
	
	Возврат СоздатьДокументыНаСервере();
	
КонецФункции

&НаСервере
Функция СоздатьДокументыНаСервере() Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	МассивДокументов = Новый Массив;
	ДокументОбъект = Документы.ВыполнениеКонсультацииЛК.СоздатьДокумент();
	ДокументОбъект.Дата						= ТекущаяДата;
	ДокументОбъект.ИсточникСоздания			= "РасписаниеЛК";
	ДокументОбъект.Сотрудник				= Сотрудник;
	ДокументОбъект.ДатаВремяНачала			= ДатаВремяНачала;
	ДокументОбъект.Контрагент				= Контрагент;
	ДокументОбъект.КонтактноеЛицо			= КонтактноеЛицо;
	ДокументОбъект.ВидУслуги				= ВидУслуги;
	ДокументОбъект.ТемаВопроса				= ТемаВопроса;
	ДокументОбъект.Результат				= ПредопределенноеЗначение("Перечисление.РезультатыКонсультации.ОказанаКонсультация");
	//ДокументОбъект.ВопросКлиента			= ВопросКлиента;
	//ДокументОбъект.ОтветСотрудника			= ОтветСотрудника;
	ДокументОбъект.ДатаВремяНачалаФакт		= ДатаВремяНачалаФакт;
	ДокументОбъект.ДатаВремяОкончанияФакт	= ДатаВремяОкончанияФакт;
	ДокументОбъект.ПродолжительностьФакт	= ПродолжительностьФакт;
	//ДокументОбъект.ПричинаНеоказания		= ПричинаНеоказания;
	
	МассивДокументов.Добавить(ДокументОбъект);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			ОтменитьТранзакцию();
			#Область Вывод_сообщений
			СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
			Если СообщенияПользователю.Количество() > 0 Тогда // есть что сказать
				ТекстОшибки = "";
				Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
					ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + СообщениеПользователю.Текст;
				КонецЦикла;
				Сообщить(ТекстОшибки);
			Иначе
				ТекстОшибки = "Ошибка при создании документа " + ДокументОбъект.Метаданные().Синоним + "" + Символы.ПС;
				Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			#КонецОбласти
			ВозВрат Ложь;
		КонецПопытки;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	ОтветФункции =  новый Структура;
	ОтветФункции.Вставить("СтандартнаяОбработка", Истина);
	ОтветФункции.Вставить("ДокументВыполнения", ДокументОбъект.Ссылка);

	ВозВрат ОтветФункции;
КонецФункции

//Лобашова 30.04.2019 81724 -

&НаКлиенте
Процедура НеОказанаКонсультация(Команда)
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Сотрудник"				, Сотрудник);
	СтруктураЭлемента.Вставить("ДатаВремяНачала"		, ДатаВремяНачала);
	СтруктураЭлемента.Вставить("Контрагент"				, Контрагент);
	СтруктураЭлемента.Вставить("КонтактноеЛицо"			, КонтактноеЛицо);
	СтруктураЭлемента.Вставить("ВидУслуги"				, ВидУслуги);
	СтруктураЭлемента.Вставить("ТемаВопроса"			, ТемаВопроса);
	СтруктураЭлемента.Вставить("КомментарийЗаписи"		, КомментарийЗаписи);
	СтруктураЭлемента.Вставить("Результат"				, ПредопределенноеЗначение("Перечисление.РезультатыКонсультации.НеОказанаКонсультация"));
	СтруктураЭлемента.Вставить("ДатаВремяНачалаФакт"	, ДатаВремяНачалаФакт);
	СтруктураЭлемента.Вставить("ДатаВремяОкончанияФакт"	, ДатаВремяОкончанияФакт);
	СтруктураЭлемента.Вставить("ПродолжительностьФакт"	, ПродолжительностьФакт);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки", ПутьКМетаданнымОбработки);
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, СтруктураЭлемента);
	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаВыполненияЛК";//ФормаВводаПараметровВыполнения
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ОтразитьВыполнение_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВыполнение_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	//Фурман 2018-04-11-19-31 {
	//Было: Закрыть(СтруктураВозВрата);
	// Использовалось модальное открытие этого окна
	Оповестить("Обработка_РасписаниеЛК_Форма_Обновить");
	Закрыть();
	//}Фурман 2018-04-11-19-31
	
	
	
	//ПараметрыДокумента = Результат;
	//Если ПараметрыДокумента = Неопределено Тогда
	//	ВозВрат;
	//КонецЕсли;
	//Если ТипЗнч(ПараметрыДокумента) <> Тип("Структура") Тогда
	//	ВозВрат;
	//КонецЕсли;
	//ПараметрыДокумента.Вставить("Действие"			, "Отразить выполнение");
	//Закрыть(ПараметрыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗапись(Команда)
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Сотрудник"				, Сотрудник);
	СтруктураЭлемента.Вставить("ДатаВремяНачала"		, ДатаВремяНачала);
	СтруктураЭлемента.Вставить("ИсходнаяСтруктура"		, ИсходнаяСтруктура);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки", ПутьКМетаданнымОбработки);
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, СтруктураЭлемента);
	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаОтменыЗаписиКлиента";//ФормаВводаПараметровОтменыЗаписи
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ОтменитьЗапись_Завершение", ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗапись_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	Закрыть(СтруктураВозВрата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗапись(Команда)
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Сотрудник"				, Сотрудник);
	СтруктураЭлемента.Вставить("ДатаВремяНачала"		, ДатаВремяНачала);
	СтруктураЭлемента.Вставить("ИсходнаяСтруктура"		, ИсходнаяСтруктура);
	СтруктураЭлемента.Вставить("ДатаВремяОкончания"		, ДатаВремяОкончания);
	СтруктураЭлемента.Вставить("Продолжительность"		, Продолжительность);
	СтруктураЭлемента.Вставить("Работа"					, Работа);
	СтруктураЭлемента.Вставить("Проект"					, Проект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки", ПутьКМетаданнымОбработки);
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, СтруктураЭлемента);
	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаПереносаЗаписи";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ПеренестиЗапись_Завершение", ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗапись_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	Закрыть(СтруктураВозВрата);

КонецПроцедуры

&НаКлиенте
Процедура НачалоРазговора(Команда)
	ДатаВремяНачалаФакт = ТекущаяДата();
	
	Элементы.НачалоРазговора		.Доступность = Ложь;
	Элементы.ОкончаниеРазговора		.Доступность = Истина;
	Элементы.ОтменитьЗапись			.Доступность = Ложь;
	Элементы.ПеренестиЗапись		.Доступность = Ложь;
	Элементы.ДекорацияКружок		.Видимость = Истина;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ОкончаниеРазговора;
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРазговора(Команда)
	ДатаВремяОкончанияФакт	= ТекущаяДата();
	БоР_ОбщийМодульКлиентСервер.УРВ_ДатаВремяОкончанияПриИзменении(ДатаВремяНачалаФакт, ДатаВремяОкончанияФакт, ПродолжительностьФакт, "ДатаВремяОкончанияФакт", "", , Ложь);
	//ПродолжительностьФакт = (ДатаВремяОкончанияФакт - ДатаВремяНачалаФакт)/60;
	
	Элементы.ОкончаниеРазговора		.Доступность = Ложь;
	Элементы.ОказанаКонсультация	.Доступность = Истина;
	Элементы.НеОказанаКонсультация	.Доступность = Истина;
	Элементы.ДекорацияКружок		.Видимость = Ложь;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ОказанаКонсультация;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Элементы.ОкончаниеРазговора.Доступность Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТелефоны(Контрагент, КонтактноеЛицо)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	#Область Запрос
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	КонтактнаяИнформация.Представление КАК Представление
	//|ИЗ
	//|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//|ГДЕ
	//|	КонтактнаяИнформация.Объект = &КонтактноеЛицо
	//|	И КонтактнаяИнформация.Тип = &ТипКонтактнойИнформации
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	КонтактнаяИнформация.Представление
	//|ИЗ
	//|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//|ГДЕ
	//|	КонтактнаяИнформация.Объект = &Контрагент
	//|	И КонтактнаяИнформация.Тип = &ТипКонтактнойИнформации";
	"ВЫБРАТЬ
		|	ПользователиАбонентов.ПользовательСервиса.Наименование КАК Наименование,
		|	ПользователиАбонентов.ПользовательСервиса.Код КАК Код,
		|	ПользователиАбонентов.ПользовательСервиса.Ссылка КАК КонтактноеЛицо,
		|	ПользователиАбонентов.ПользовательСервиса КАК ПользовательСервиса
		|ПОМЕСТИТЬ ВТКонтактныеЛица
		|ИЗ
		|	РегистрСведений.ПользователиАбонентов КАК ПользователиАбонентов
		|ГДЕ
		|	ПользователиАбонентов.Абонент = &Контрагент
		|	И НЕ ПользователиАбонентов.ПользовательСервиса.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КонтактноеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ПользователиСервисовКонтактнаяИнформация.Представление, """""""") КАК Представление
		|ИЗ
		|	ВТКонтактныеЛица КАК ВТКонтактныеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПользователиСервисов.КонтактнаяИнформация КАК ПользователиСервисовКонтактнаяИнформация
		|		ПО ВТКонтактныеЛица.КонтактноеЛицо = ПользователиСервисовКонтактнаяИнформация.Ссылка
		|			И (ПользователиСервисовКонтактнаяИнформация.Тип = &ТипКонтактнойИнформации)
		|ГДЕ
		|	ПользователиСервисовКонтактнаяИнформация.Тип = &ТипКонтактнойИнформации";
	#КонецОбласти
	Запрос.УстановитьПараметр("Контрагент"				, Контрагент);
	Запрос.УстановитьПараметр("КонтактноеЛицо"			, КонтактноеЛицо);
	Запрос.УстановитьПараметр("ТипКонтактнойИнформации"	,Перечисления.ТипыКонтактнойИнформации.Телефон);

	ТаблицаКонтактнойИнформации = Запрос.Выполнить().Выгрузить();
	СтрокаТелефонов = "";
	Для каждого СтрокаКИ Из ТаблицаКонтактнойИнформации Цикл
		СтрокаТелефонов = СтрокаТелефонов + ?(ЗначениеЗаполнено(СтрокаТелефонов), ";", "") + СтрокаКИ.Представление;
	КонецЦикла;
	
	ВозВрат СтрокаТелефонов;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьЕщеРаз(Команда)
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Сотрудник"				, Сотрудник);
	СтруктураЭлемента.Вставить("ДатаВремяНачала"		, ДатаВремяНачала);
	СтруктураЭлемента.Вставить("Контрагент"				, Контрагент);
	СтруктураЭлемента.Вставить("КонтактноеЛицо"			, КонтактноеЛицо);
	СтруктураЭлемента.Вставить("ИсходнаяСтруктура"		, ИсходнаяСтруктура);
	СтруктураЭлемента.Вставить("Работа"					, Работа);
	СтруктураЭлемента.Вставить("Проект"					, Проект);
	СтруктураЭлемента.Вставить("КомментарийЗаписи"		, КомментарийЗаписи);
	СтруктураЭлемента.Вставить("КонтактныеТелефоны"		, КонтактныеТелефоны);
	СтруктураЭлемента.Вставить("ВидУслуги"				, ВидУслуги);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки", ПутьКМетаданнымОбработки);
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, СтруктураЭлемента);
	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаПовторнойЗаписи";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ЗаписатьЕщеРазЗавершение", ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЕщеРазЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	
	Оповестить("Обработка_РасписаниеЛК_Форма_Обновить");

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Оповестить("Обработка_РасписаниеЛК_Форма_УстановитьБлокировкуФормы");
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Оповестить("Обработка_РасписаниеЛК_Форма_СнятьБлокировкуФормы");
КонецПроцедуры

//&НаСервере
//Процедура СоздатьЗаписьНаЛКНаСервере(ПараметрыДокумента) Экспорт
//	
//	ТекущаяДата = ТекущаяДата();
//	ДокументОбъект = Документы.ЗаписьНаЛК.СоздатьДокумент();
//	ДокументОбъект.Дата					= ТекущаяДата;
//	ДокументОбъект.ИсточникСоздания		= "РасписаниеЛК";
//	ДокументОбъект.Сотрудник			= ПараметрыДокумента.Сотрудник;
//	ДокументОбъект.ДатаВремяНачала		= ПараметрыДокумента.ДатаВремяНачала;
//	ДокументОбъект.Контрагент			= ПараметрыДокумента.Контрагент;
//	ДокументОбъект.КонтактноеЛицо		= ПараметрыДокумента.КонтактноеЛицо;
//	ДокументОбъект.ВидУслуги		= ПараметрыДокумента.ВидУслуги;
//	ДокументОбъект.ТемаВопроса			= ПараметрыДокумента.ТемаВопроса;
//	ДокументОбъект.КомментарийЗаписи	= ПараметрыДокумента.КомментарийЗаписи;
//	ДокументОбъект.ТипЗаписи			= Перечисления.ТипыЗаписейЛК.Обычная;
//	ДокументОбъект.СрочнаяЗапись		= ПараметрыДокумента.СрочнаяЗапись;
//	Попытка
//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
//	Исключение
//		ТекстОшибки = "Ошибка при создании документа ""Запись на ЛК""" + Символы.ПС;
//		Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//		ВозВрат;
//	КонецПопытки;

//КонецПроцедуры
