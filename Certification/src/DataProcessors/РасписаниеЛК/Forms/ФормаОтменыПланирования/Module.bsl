
#Область Условное_оформление

// БоР : Задолбало руками везде настраивать 21.01.2017 0:32:21
&НаСервере
Процедура НастроитьУсловноеОформление() Экспорт
	РегистрыСведений.ЦветаРасписанияЛК.НастроитьУсловноеОформление(УсловноеОформление, "ТаблицаРасписанияИтоговыйСтатус", "ТаблицаРасписания.ИтоговыйСтатус");
КонецПроцедуры

#КонецОбласти

#Область События_формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	БоР_ОбщийМодуль.ЗаполнитьРеквизитыИзПараметров(ЭтаФорма, Неопределено);
	Если ЭтоАдресВременногоХранилища(Адрес_ДанныеСлотов) Тогда
		ДанныеСлотов = ПолучитьИзВременногоХранилища(Адрес_ДанныеСлотов);
		Если ТипЗнч(ДанныеСлотов) = Тип("Массив") Тогда
			Для каждого СтрокаСотрудника Из ДанныеСлотов Цикл
				Для каждого СтрокаСлота Из СтрокаСотрудника.Слоты Цикл
					СтрокаТаблицаСлотов = ТаблицаСлотов.Добавить();
					СтрокаТаблицаСлотов.Сотрудник			= СтрокаСлота.Сотрудник;
					СтрокаТаблицаСлотов.Дата				= НачалоДня(СтрокаСлота.ДатаВремяНачала);
					СтрокаТаблицаСлотов.ДатаВремяНачала		= СтрокаСлота.ДатаВремяНачала;
					СтрокаТаблицаСлотов.ДатаВремяОкончания	= СтрокаСлота.ДатаВремяОкончания;
					СтрокаТаблицаСлотов.Продолжительность	= (СтрокаСлота.ДатаВремяОкончания - СтрокаСлота.ДатаВремяНачала) / 60;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ТаблицаСлотов.Количество() = 0 Тогда
		СтрокаТаблицаСлотов = ТаблицаСлотов.Добавить();
	КонецЕсли;
	Списком = ТаблицаСлотов.Количество() > 1;
	УстановитьВидимостьДоступность(ЭтаФорма);
	ПараметрыСлота = ПолучитьПараметрыСлота(ТаблицаСлотов[0]);
	ЗаполнитьТаблицуКонфликтовНаСервере(ПараметрыСлота, ТаблицаРасписания);
	НастроитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

#Область Обработчики_изменений

&НаКлиенте
Процедура ТаблицаСлотовСотрудник0ПриИзменении(Элемент)
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовДатаВремяНачала0ПриИзменении(Элемент)
	БоР_ОбщийМодульКлиентСервер.УРВ_ДатаВремяНачалаПриИзменении(ТаблицаСлотов[0].ДатаВремяНачала, ТаблицаСлотов[0].ДатаВремяОкончания, ТаблицаСлотов[0].Продолжительность, "ТаблицаСлотов[0].ДатаВремяНачала", "", Неопределено, ТаблицаСлотов[0].Дата);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовДатаВремяОкончания0ПриИзменении(Элемент)
	БоР_ОбщийМодульКлиентСервер.УРВ_ДатаВремяОкончанияПриИзменении(ТаблицаСлотов[0].ДатаВремяНачала, ТаблицаСлотов[0].ДатаВремяОкончания, ТаблицаСлотов[0].Продолжительность, "ТаблицаСлотов[0].ДатаВремяОкончания", "", Неопределено);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовПродолжительность0ПриИзменении(Элемент)
	БоР_ОбщийМодульКлиентСервер.УРВ_ПродолжительностьПриИзменении(ТаблицаСлотов[0].ДатаВремяНачала, ТаблицаСлотов[0].ДатаВремяОкончания, ТаблицаСлотов[0].Продолжительность, "ТаблицаСлотов[0].Продолжительность", "", Неопределено);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовДата0ПриИзменении(Элемент)
	БоР_ОбщийМодульКлиентСервер.УРВ_БазоваяДатаПриИзменении(ТаблицаСлотов[0].ДатаВремяНачала, ТаблицаСлотов[0].ДатаВремяОкончания, ТаблицаСлотов[0].Дата);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовСотрудникПриИзменении(Элемент)
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовДатаВремяНачалаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
	БоР_ОбщийМодульКлиентСервер.УРВ_ДатаВремяНачалаПриИзменении(ТекущиеДанные.ДатаВремяНачала, ТекущиеДанные.ДатаВремяОкончания, ТекущиеДанные.Продолжительность, "ТаблицаСлотов[" + ТаблицаСлотов.Индекс(ТекущиеДанные) + "].ДатаВремяНачала", "", Неопределено, ТекущиеДанные.Дата);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовДатаВремяОкончанияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
	БоР_ОбщийМодульКлиентСервер.УРВ_ДатаВремяОкончанияПриИзменении(ТекущиеДанные.ДатаВремяНачала, ТекущиеДанные.ДатаВремяОкончания, ТекущиеДанные.Продолжительность, "ТаблицаСлотов[" + ТаблицаСлотов.Индекс(ТекущиеДанные) + "].ДатаВремяОкончания", "", Неопределено);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовПродолжительностьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
	БоР_ОбщийМодульКлиентСервер.УРВ_ПродолжительностьПриИзменении(ТекущиеДанные.ДатаВремяНачала, ТекущиеДанные.ДатаВремяОкончания, ТекущиеДанные.Продолжительность, "ТаблицаСлотов[" + ТаблицаСлотов.Индекс(ТекущиеДанные) + "].Продолжительность", "", Неопределено);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовДатаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
	БоР_ОбщийМодульКлиентСервер.УРВ_БазоваяДатаПриИзменении(ТекущиеДанные.ДатаВремяНачала, ТекущиеДанные.ДатаВремяОкончания, ТекущиеДанные.Дата);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры
#КонецОбласти

#Область Изменения_Шапка
#КонецОбласти

&НаКлиенте
Процедура СпискомПриИзменении(Элемент)
	Если Не Списком И ТаблицаСлотов.Количество() = 0 Тогда
		ТаблицаСлотов.Добавить();
	КонецЕсли;
	УстановитьВидимостьДоступность(ЭтаФорма);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовПриАктивизацииСтроки(Элемент)
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если ТаблицаСлотов.Количество() = 0 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указаны параметры записи.";
		Сообщение.Поле = "ТаблицаСлотовСотрудник0";
		Сообщение.Сообщить();
	ИначеЕсли Списком Тогда
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаТЧФормы("ТаблицаСлотов", "Сотрудник"			, ЭтаФорма, Отказ);
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаТЧФормы("ТаблицаСлотов", "ДатаВремяНачала"		, ЭтаФорма, Отказ);
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаТЧФормы("ТаблицаСлотов", "ДатаВремяОкончания"	, ЭтаФорма, Отказ);
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаТЧФормы("ТаблицаСлотов", "Продолжительность"	, ЭтаФорма, Отказ);
	Иначе
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаФормы("Сотрудник"			, "Сотрудник"				, ТаблицаСлотов[0].Сотрудник			, Отказ);
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаФормы("ДатаВремяНачала"		, "Дата время начала"		, ТаблицаСлотов[0].ДатаВремяНачала		, Отказ);
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаФормы("ДатаВремяОкончания"	, "Дата время окончания"	, ТаблицаСлотов[0].ДатаВремяОкончания	, Отказ);
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаФормы("Продолжительность"	, "Продолжительность"		, ТаблицаСлотов[0].Продолжительность	, Отказ);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОК(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СоздатьДокументыОтменаПланированияЗагрузкиЗаПериодЛКНаСервере() Тогда
		ВозВрат;
	КонецЕсли;
	СтруктураВозВрата = Новый Структура;
	СтруктураВозВрата.Вставить("РезультатОткрытия"			, Истина);
	Закрыть(СтруктураВозВрата);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(ЭтаФорма)
	ЭтаФорма.Элементы.ТаблицаСлотов		.Видимость = ЭтаФорма.Списком;
	ЭтаФорма.Элементы.ГруппаДанныеСлота	.Видимость = Не ЭтаФорма.Списком;
КонецПроцедуры

#Область Заполнение_конфликтов

// БоР :  18.07.2017 22:14:39
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПараметрыСлота(ДанныеДляЗаполнения) Экспорт
	Если ДанныеДляЗаполнения = Неопределено Тогда
		ВозВрат Неопределено;
	КонецЕсли;
	ПараметрыСлота = Новый Структура;
	ПараметрыСлота.Вставить("Сотрудник"				, ДанныеДляЗаполнения.Сотрудник);
	ПараметрыСлота.Вставить("ДатаВремяНачала"		, ДанныеДляЗаполнения.ДатаВремяНачала);
	ПараметрыСлота.Вставить("ДатаВремяОкончания"	, ДанныеДляЗаполнения.ДатаВремяОкончания);
	ВозВрат ПараметрыСлота;
КонецФункции

&НаКлиенте
Процедура ОбновитьТаблицуКонфликтовНаСервере() Экспорт
	Если Списком Тогда
		ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
	ИначеЕсли ТаблицаСлотов.Количество() = 0 Тогда
		ТекущиеДанные = Неопределено;
	Иначе
		ТекущиеДанные = ТаблицаСлотов[0];
	КонецЕсли;
	ПараметрыСлота = ПолучитьПараметрыСлота(ТекущиеДанные);
	
	ТаблицаРасписания.Очистить();
	ТаблицаРасписанияНаСервер = ТаблицаРасписания; // странно, что это работает ...
	ЗаполнитьТаблицуКонфликтовНаСервере(ПараметрыСлота, ТаблицаРасписанияНаСервер);
	Для каждого СтрокаРасписания Из ТаблицаРасписанияНаСервер Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаРасписания.Добавить(), СтрокаРасписания);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуКонфликтовНаСервере(ПараметрыСлота, ТаблицаРасписания)
	
	Если ПараметрыСлота = Неопределено Тогда
		ТаблицаРасписания.Очистить();
		ВозВрат;
	КонецЕсли;
	ТекущаяДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ
	|	РасписаниеКонсультацийСрезПоследних.Регистратор,
	|	РасписаниеКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	РасписаниеКонсультацийСрезПоследних.Работа КАК Работа,
	|	РасписаниеКонсультацийСрезПоследних.Проект КАК Проект,
	//|	РасписаниеКонсультацийСрезПоследних.Задание КАК Задание,
	//|	РасписаниеКонсультацийСрезПоследних.ПакетЧасов КАК ПакетЧасов,
	|	РасписаниеКонсультацийСрезПоследних.Событие КАК Событие,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
	|	РасписаниеКонсультацийСрезПоследних.Контрагент,
	|	РасписаниеКонсультацийСрезПоследних.КонтактноеЛицо,
	|	РасписаниеКонсультацийСрезПоследних.НеДействует,
	|	РасписаниеКонсультацийСрезПоследних.Состояние,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РасписаниеКонсультацийСрезПоследних.Продолжительность,
	|	РасписаниеКонсультацийСрезПоследних.ВидУслуги,
	|	РасписаниеКонсультацийСрезПоследних.ТемаВопроса,
	|	РасписаниеКонсультацийСрезПоследних.КомментарийЗаписи
	|ПОМЕСТИТЬ ВТТекущееРасписание
	|ИЗ
	|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних(
	|			&Момент,
	|			Сотрудник = &Сотрудник
	|				И ДатаВремяНачала >= &НачалоПериода
	|				И ДатаВремяНачала <= &КонецПериода) КАК РасписаниеКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
	|	И РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала < &ДатаВремяОкончания
	|	И РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания > &ДатаВремяНачала
	|	И РасписаниеКонсультацийСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Свободно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВремяНачала,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыКонсультацийСрезПоследних.Регистратор КАК Регистратор,
	|	РезультатыКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	РезультатыКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
	|	РезультатыКонсультацийСрезПоследних.Контрагент,
	|	РезультатыКонсультацийСрезПоследних.КонтактноеЛицо,
	|	РезультатыКонсультацийСрезПоследних.Результат,
	|	РезультатыКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РезультатыКонсультацийСрезПоследних.Продолжительность,
	|	РезультатыКонсультацийСрезПоследних.ВидУслуги,
	|	РезультатыКонсультацийСрезПоследних.ТемаВопроса,
	|	РезультатыКонсультацийСрезПоследних.ВопросКлиента,
	|	РезультатыКонсультацийСрезПоследних.ОтветСотрудника
	|ПОМЕСТИТЬ ВТТекущиеРезультаты
	|ИЗ
	|	РегистрСведений.РезультатыКонсультаций.СрезПоследних(
	|			&Момент,
	|			Сотрудник = &Сотрудник
	|				И ДатаВремяНачала В
	|					(ВЫБРАТЬ
	|						ВТТекущееРасписание.ДатаВремяНачала
	|					ИЗ
	|						ВТТекущееРасписание)) КАК РезультатыКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РезультатыКонсультацийСрезПоследних.НеДействует
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВремяНачала,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТекущееРасписание.Регистратор КАК РегистраторЗаписи,
	|	ВТТекущееРасписание.Сотрудник КАК Сотрудник,
	|	ВТТекущееРасписание.Работа КАК Работа,
	|	ВТТекущееРасписание.Проект КАК Проект,
	//|	ВТТекущееРасписание.Задание КАК Задание,
	//|	ВТТекущееРасписание.ПакетЧасов КАК ПакетЧасов,
	|	ВТТекущееРасписание.Событие КАК Событие,
	|	ВТТекущееРасписание.ДатаВремяНачала КАК ДатаВремяНачала,
	|	ВТТекущееРасписание.Контрагент,
	|	ВТТекущееРасписание.КонтактноеЛицо,
	|	ВТТекущееРасписание.НеДействует,
	|	ВТТекущееРасписание.Состояние,
	|	ВТТекущееРасписание.ДатаВремяОкончания,
	|	ВТТекущееРасписание.Продолжительность,
	|	ВТТекущееРасписание.ВидУслуги,
	|	ВТТекущееРасписание.ТемаВопроса,
	|	ВТТекущееРасписание.КомментарийЗаписи,
	|	ЕСТЬNULL(ВТТекущиеРезультаты.Результат, ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ПустаяСсылка)) КАК Результат,
	|	ЕСТЬNULL(ВТТекущиеРезультаты.Регистратор, НЕОПРЕДЕЛЕНО) КАК РегистраторРезультата,
	|	ВЫБОР
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ОказанаКонсультация)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация)
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.НеОказанаКонсультация)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Свободно)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Свободно)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Запланировано)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Запланировано)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.ЗаписанКлиент)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ЗаписанКлиент)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Блокировка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Блокировка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ПустаяСсылка)
	|	КОНЕЦ КАК ИтоговыйСтатус
	|ИЗ
	|	ВТТекущееРасписание КАК ВТТекущееРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеРезультаты КАК ВТТекущиеРезультаты
	|		ПО ВТТекущееРасписание.Сотрудник = ВТТекущиеРезультаты.Сотрудник
	|			И ВТТекущееРасписание.ДатаВремяНачала = ВТТекущиеРезультаты.ДатаВремяНачала
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаВремяНачала";
	#КонецОбласти
	
	Момент = Неопределено;
	
	#Область Пока_убрал
	
	//ДР = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьДоступностьРолей();
	//ДоступностьПодчиненныхПодразделенийЛК	= Истина;
	//ДоступностьСвоегоПодразделенияЛК		= Истина;
	//ДоступностьВсегоДляПП					= БоР_ОбщийМодульКлиентСервер.ВБулево(БоР_ОбщийМодульКлиентСервер.ПолучитьНастройку("ЛК_ПолнымПравамДоступныВсеСотрудники"));
	//Если ЗначениеЗаполнено(Сотрудник) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотруднику", "Сотрудник = &Сотрудник");
	//	Запрос.УстановитьПараметр("Сотрудник"		, Сотрудник);
	//ИначеЕсли ДР.ПолныеПрава И ДоступностьВсегоДляПП Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотруднику", "ИСТИНА");
	//Иначе // все доступные
	//	// возможно, надо заменить "В" на соединения с ВТ, но при малом объеме списка - и так неплохо
	//	МассивСотрудников = РегистрыСведений.РолиСотрудниковЛК.ПолучитьМассивДоступныхСотрудников(ДоступностьПодчиненныхПодразделенийЛК, ДоступностьСвоегоПодразделенияЛК);
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотруднику", "Сотрудник В (&МассивСотрудников)");
	//	Запрос.УстановитьПараметр("МассивСотрудников"			, МассивСотрудников);
	//КонецЕсли;
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Момент"				, Момент);
	Запрос.УстановитьПараметр("Сотрудник"			, ПараметрыСлота.Сотрудник);
	Запрос.УстановитьПараметр("ДатаВремяНачала"		, ПараметрыСлота.ДатаВремяНачала);
	Запрос.УстановитьПараметр("ДатаВремяОкончания"	, ПараметрыСлота.ДатаВремяОкончания);
	Запрос.УстановитьПараметр("НачалоПериода"		, НачалоДня(ПараметрыСлота.ДатаВремяНачала));
	Запрос.УстановитьПараметр("КонецПериода"		, КонецДня(ПараметрыСлота.ДатаВремяНачала));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	
	ТаблицаРасписанияТЗ = РезультатЗапроса.Выгрузить();
	ТаблицаРасписания.Загрузить(ТаблицаРасписанияТЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонфликтующиеЗаписи()
	ЭтаФорма.ПодключитьОбработчикОжидания("ОбновитьТаблицуКонфликтовНаСервере", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция СоздатьДокументыОтменаПланированияЗагрузкиЗаПериодЛКНаСервере() Экспорт
	
	ТекущаяДата = ТекущаяДата();
	Если Списком Тогда
		ТаблицаДляЗаполнения = ТаблицаСлотов.Выгрузить();
	Иначе
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТаблицаСлотов[0]);
		ТаблицаДляЗаполнения = ТаблицаСлотов.Выгрузить(МассивСтрок);
	КонецЕсли;
	
	БоР_ОбщийМодуль.ПронумероватьТЗ(ТаблицаДляЗаполнения);
	Если Не ПроверитьСамопересечения(ТаблицаДляЗаполнения) Тогда
		ВозВрат Ложь;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	Для каждого СтрокаТаблицаДляЗаполнения Из ТаблицаДляЗаполнения Цикл
		ДокументОбъект = Документы.ОтменаПланированияЗагрузкиЗаПериодЛК.СоздатьДокумент();
		ДокументОбъект.Дата					= ТекущаяДата;
		ДокументОбъект.ИсточникСоздания		= "РасписаниеЛК";
		ДокументОбъект.Сотрудник			= СтрокаТаблицаДляЗаполнения.Сотрудник;
		ДокументОбъект.ДатаВремяНачала		= СтрокаТаблицаДляЗаполнения.ДатаВремяНачала;
		ДокументОбъект.ДатаВремяОкончания	= СтрокаТаблицаДляЗаполнения.ДатаВремяОкончания;
		ДокументОбъект.Продолжительность	= СтрокаТаблицаДляЗаполнения.Продолжительность;
		МассивДокументов.Добавить(ДокументОбъект);
	КонецЦикла;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			ОтменитьТранзакцию();
			#Область Вывод_сообщений
			СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
			Если СообщенияПользователю.Количество() > 0 Тогда // есть что сказать
				ТекстОшибки = "";
				Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
					ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + СообщениеПользователю.Текст;
				КонецЦикла;
				Сообщить(ТекстОшибки);
			Иначе
				ТекстОшибки = "Ошибка при создании документа ""Отмена планирования загрузки за период""" + Символы.ПС;
				Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			#КонецОбласти
			ВозВрат Ложь;
		КонецПопытки;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	ВозВрат Истина;

КонецФункции

&НаСервере
Функция ПроверитьСамопересечения(ТаблицаДляЗаполнения) Экспорт
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ
	|	ТаблицаДляЗаполнения.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДляЗаполнения.ДатаВремяНачала КАК ДатаВремяНачала,
	|	ТаблицаДляЗаполнения.ДатаВремяОкончания КАК ДатаВремяОкончания,
	|	ТаблицаДляЗаполнения.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТРаботы
	|ИЗ
	|	&ТаблицаДляЗаполнения КАК ТаблицаДляЗаполнения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВремяНачала,
	|	ДатаВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРаботы.НомерСтроки КАК НомерСтроки1,
	|	ВТРаботы.ДатаВремяНачала КАК ДатаВремяНачала,
	|	ВТРаботы.ДатаВремяОкончания КАК ДатаВремяОкончания,
	|	ВТРаботы.Сотрудник КАК Сотрудник,
	|	ВТРаботы2.НомерСтроки КАК НомерСтроки2,
	|	ВТРаботы2.ДатаВремяНачала КАК П_ДатаВремяНачала,
	|	ВТРаботы2.ДатаВремяОкончания КАК П_ДатаВремяОкончания
	|ИЗ
	|	ВТРаботы КАК ВТРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаботы КАК ВТРаботы2
	|		ПО ВТРаботы.ДатаВремяНачала < ВТРаботы2.ДатаВремяОкончания
	|			И ВТРаботы.ДатаВремяОкончания > ВТРаботы2.ДатаВремяНачала
	|			И ВТРаботы.НомерСтроки < ВТРаботы2.НомерСтроки
	|			И ВТРаботы.Сотрудник = ВТРаботы2.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки1,
	|	НомерСтроки2
	|ИТОГИ
	|	МАКСИМУМ(ДатаВремяНачала),
	|	МАКСИМУМ(ДатаВремяОкончания),
	|	МАКСИМУМ(Сотрудник)
	|ПО
	|	НомерСтроки1";
	#КонецОбласти	

	Запрос.УстановитьПараметр("ТаблицаДляЗаполнения"		, ТаблицаДляЗаполнения);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатСамоПересечения = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	ВыборкаСтрок = РезультатСамоПересечения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтрок.Следующий() Цикл
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Сообщение_Поле"		, "ТаблицаСлотов[" + (ВыборкаСтрок.НомерСтроки1 - 1) + "].ДатаВремяНачала");
		ПараметрыСообщения.Вставить("ДатаВремяНачала"		, ВыборкаСтрок.ДатаВремяНачала);
		ПараметрыСообщения.Вставить("ДатаВремяОкончания"	, ВыборкаСтрок.ДатаВремяОкончания);
		ПараметрыСообщения.Вставить("Сотрудник"				, ВыборкаСтрок.Сотрудник);
		ПараметрыСообщения.Вставить("НомерСтроки1"			, ВыборкаСтрок.НомерСтроки1);
		ШаблонСообщения = "Строка &НомерСтроки1 [&Сотрудник, &ДатаВремяНачала - &ДатаВремяОкончания] конфликтует с другими строками:";
		БоР_ОбщийМодуль.Сообщить_С(ШаблонСообщения, ПараметрыСообщения);
		
		ВыборкаДетали = ВыборкаСтрок.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			ПараметрыСообщения.Вставить("Сообщение_Поле"		, "ТаблицаСлотов[" + (ВыборкаДетали.НомерСтроки2 - 1) + "].ДатаВремяНачала");
			ПараметрыСообщения.Вставить("П_ДатаВремяНачала"		, ВыборкаДетали.П_ДатаВремяНачала);
			ПараметрыСообщения.Вставить("П_ДатаВремяОкончания"	, ВыборкаДетали.П_ДатаВремяОкончания);
			ПараметрыСообщения.Вставить("НомерСтроки2"			, ВыборкаДетали.НомерСтроки2);
			ШаблонСообщения = "	Строка &НомерСтроки2 [&Сотрудник, &П_ДатаВремяНачала - &П_ДатаВремяОкончания]";
			БоР_ОбщийМодуль.Сообщить_С(ШаблонСообщения, ПараметрыСообщения);
			Отказ = Истина;
		КонецЦикла;
	КонецЦикла;
	
	ВозВрат Не Отказ;

	//ЗаполнитьТаблицуКонфликтовНаСервере();
	
КонецФункции

