
#Область Обработка_Описания
&НаКлиенте
Процедура ОписаниеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		СтандартнаяОбработка = Ложь;
		ЗапуститьПриложение(ДанныеСобытия.Href);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеФДПриИзменении(Элемент)
	БоР_ОбщийМодульКлиентСервер.ЗавернутьФорматированныйДокументВ_XML(ОписаниеФД, ОписаниеXML);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОписание(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОписаниеXML"					, ОписаниеXML);
	
	ДополнительныеПараметры = Новый Структура;
	
	ИмяФормыДляОткрытия = "Обработка.РасписаниеЛК.Форма.ФормаВводаОписания";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "РедактироватьОписание_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОписание_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	ОписаниеXML	= Результат.ОписаниеXML;
	БоР_ОбщийМодульКлиентСервер.РазвернутьФорматированныйДокументИзXML(ОписаниеXML, ОписаниеФД, ОписаниеHTML);
КонецПроцедуры
#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	БоР_ОбщийМодуль.ЗаполнитьРеквизитыИзПараметров(ЭтаФорма, Неопределено);
	БоР_ОбщийМодульКлиентСервер.РазвернутьФорматированныйДокументИзXML(ОписаниеXML, ОписаниеФД, ОписаниеHTML);
	УстановитьВидимостьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(ЭтаФорма)
	РаботаПоРасписанию			= БоР_ОбщийМодуль.ПолучитьПолеОбъекта(ЭтаФорма.ИсходнаяСтруктура.Работа, "РаботаПоРасписанию");
	ТребуетВыполнения			= БоР_ОбщийМодуль.ПолучитьПолеОбъекта(ЭтаФорма.ИсходнаяСтруктура.Работа, "ТребуетВыполнения");
	ЭтаФорма.Элементы.УстановитьДоступноДляСамозаписи	.Видимость		= Не ЭтаФорма.ИсходнаяСтруктура.ДоступноДляСамозаписи И РаботаПоРасписанию;
	ЭтаФорма.Элементы.СнятьДоступноДляСамозаписи		.Видимость		= ЭтаФорма.ИсходнаяСтруктура.ДоступноДляСамозаписи И РаботаПоРасписанию;
	ЭтаФорма.Элементы.ЗаписатьКлиента					.Видимость		= РаботаПоРасписанию;
	ЭтаФорма.Элементы.ПеренестиСрочнуюЗапись			.Видимость		= РаботаПоРасписанию;
	ЭтаФорма.Элементы.ОтразитьВыполнение				.Видимость		= Не РаботаПоРасписанию И ТребуетВыполнения;
	ЭтаФорма.Элементы.Продолжительность					.ТолькоПросмотр	= РаботаПоРасписанию;
	ЭтаФорма.Элементы.ДатаВремяОкончания				.ТолькоПросмотр	= РаботаПоРасписанию;
	
	
	
	ЭтаФорма.Элементы.ЗаписатьКлиента					.Доступность	= ЭтаФорма.ДоступныеДействия.ДоступноИзменение;
	ЭтаФорма.Элементы.Перепланировать					.Доступность	= ЭтаФорма.ДоступныеДействия.ДоступноПерепланирование;
	ЭтаФорма.Элементы.ПеренестиСрочнуюЗапись			.Доступность	= ЭтаФорма.ДоступныеДействия.ДоступноПерепланирование;
	ЭтаФорма.Элементы.ЗаблокироватьЗапись				.Доступность	= ЭтаФорма.ДоступныеДействия.ДоступноБлокировка;
	ЭтаФорма.Элементы.Освободить						.Доступность	= ЭтаФорма.ДоступныеДействия.ДоступноОтменаБлокировки;
	ЭтаФорма.Элементы.УстановитьДоступноДляСамозаписи	.Доступность	= ЭтаФорма.ДоступныеДействия.ДоступныВсеДействия;
	ЭтаФорма.Элементы.СнятьДоступноДляСамозаписи		.Доступность	= ЭтаФорма.ДоступныеДействия.ДоступныВсеДействия;
	//Лобашова 30.05.2019 87280 +
	Если ЭтаФорма.ДоступныеДействия.ДоступноПросмотрДругихСотрудников Тогда
		ЭтаФорма.Элементы.ОтразитьВыполнение				.Доступность	= ЭтаФорма.ДоступныеДействия.ДоступноСоздание;
	КонецЕсли;
	//Лобашова 30.05.2019 87280 -
	 
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКлиента(Команда)
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Сотрудник"				, Сотрудник);
	СтруктураЭлемента.Вставить("ДатаВремяНачала"		, ДатаВремяНачала);
	СтруктураЭлемента.Вставить("ИсходнаяСтруктура"		, ИсходнаяСтруктура);
	СтруктураЭлемента.Вставить("Работа"					, Работа);
	СтруктураЭлемента.Вставить("Проект"					, Проект);
	СтруктураЭлемента.Вставить("Автор"					, Автор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки", ПутьКМетаданнымОбработки);
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, СтруктураЭлемента);
	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаЗаписиКлиента";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ЗаписатьКлиента_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКлиента_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	Закрыть(СтруктураВозВрата);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьЗапись(Команда)
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник"				, Сотрудник);
	ДанныеСотрудника.Вставить("Слоты"					, Новый Массив);
	
	СвойстваСлота = Новый Структура;
	СвойстваСлота.Вставить("Сотрудник"				, Сотрудник);
	СвойстваСлота.Вставить("ДатаВремяНачала"		, ДатаВремяНачала);
	СвойстваСлота.Вставить("ДатаВремяОкончания"		, ДатаВремяОкончания);
	СвойстваСлота.Вставить("Продолжительность"		, Продолжительность);
	СвойстваСлота.Вставить("ОписаниеXML"			, ОписаниеXML);
			
	ДанныеСотрудника.Слоты.Добавить(СвойстваСлота);
	
	ДанныеСлотов = Новый Массив;
	ДанныеСлотов.Добавить(ДанныеСотрудника);
	
	Адрес_ДанныеСлотов = ПоместитьВоВременноеХранилище(ДанныеСлотов, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Адрес_ДанныеСлотов"		, Адрес_ДанныеСлотов);
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки"	, ПутьКМетаданнымОбработки);

	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаБлокировки";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ЗаблокироватьЗапись_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьЗапись_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	Закрыть(СтруктураВозВрата);

КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник"				, Сотрудник);
	ДанныеСотрудника.Вставить("Слоты"					, Новый Массив);
	
	СвойстваСлота = Новый Структура;
	СвойстваСлота.Вставить("Сотрудник"				, Сотрудник);
	СвойстваСлота.Вставить("ДатаВремяНачала"		, ДатаВремяНачала);
	СвойстваСлота.Вставить("ДатаВремяОкончания"		, ДатаВремяОкончания);
	СвойстваСлота.Вставить("Продолжительность"		, Продолжительность);
			
	ДанныеСотрудника.Слоты.Добавить(СвойстваСлота);
	
	ДанныеСлотов = Новый Массив;
	ДанныеСлотов.Добавить(ДанныеСотрудника);
	
	Адрес_ДанныеСлотов = ПоместитьВоВременноеХранилище(ДанныеСлотов, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Адрес_ДанныеСлотов"		, Адрес_ДанныеСлотов);
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки"	, ПутьКМетаданнымОбработки);

	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаОтменыПланирования";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "Освободить_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	Закрыть(СтруктураВозВрата);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступноДляСамозаписи(Команда)
	УстанавливаемыеСвойства = Новый Структура;
	УстанавливаемыеСвойства.Вставить("ДоступноДляСамозаписи"				, Истина);
	
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Сотрудник"					, Сотрудник);
	СтруктураЭлемента.Вставить("ДатаВремяНачала"			, ДатаВремяНачала);
	СтруктураЭлемента.Вставить("УстанавливаемыеСвойства"	, УстанавливаемыеСвойства);
	
	Если Не УстановкаСвойствЭлементаРасписанияЛКНаСервере(СтруктураЭлемента) Тогда
		ВозВрат;
	КонецЕсли;
	СтруктураВозВрата = Новый Структура;
	СтруктураВозВрата.Вставить("РезультатОткрытия"			, Истина);
	Закрыть(СтруктураВозВрата);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьДоступноДляСамозаписи(Команда)
	УстанавливаемыеСвойства = Новый Структура;
	УстанавливаемыеСвойства.Вставить("ДоступноДляСамозаписи"				, Ложь);
	
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Сотрудник"					, Сотрудник);
	СтруктураЭлемента.Вставить("ДатаВремяНачала"			, ДатаВремяНачала);
	СтруктураЭлемента.Вставить("УстанавливаемыеСвойства"	, УстанавливаемыеСвойства);
	
	Если Не УстановкаСвойствЭлементаРасписанияЛКНаСервере(СтруктураЭлемента) Тогда
		ВозВрат;
	КонецЕсли;
	СтруктураВозВрата = Новый Структура;
	СтруктураВозВрата.Вставить("РезультатОткрытия"			, Истина);
	Закрыть(СтруктураВозВрата);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановкаСвойствЭлементаРасписанияЛКНаСервере(СтруктураЭлемента) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СвойстваЭлементовРасписанияЛК.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сотрудник			= СтруктураЭлемента.Сотрудник;
	МенеджерЗаписи.ДатаВремяНачала		= СтруктураЭлемента.ДатаВремяНачала;
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Сотрудник			= СтруктураЭлемента.Сотрудник;
	МенеджерЗаписи.ДатаВремяНачала		= СтруктураЭлемента.ДатаВремяНачала;
	ОбновитьТаблицу = Ложь;
	ЗаписатьИзменения = Ложь;
	Для каждого УстанавливаемоеСвойство Из СтруктураЭлемента.УстанавливаемыеСвойства Цикл
		Если МенеджерЗаписи[УстанавливаемоеСвойство.Ключ] <> УстанавливаемоеСвойство.Значение Тогда
			ЗаписатьИзменения = Истина;
			ОбновитьТаблицу = Истина;
		КонецЕсли;
		МенеджерЗаписи[УстанавливаемоеСвойство.Ключ] = УстанавливаемоеСвойство.Значение;
	КонецЦикла;
	Если ЗаписатьИзменения Тогда
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			ТекстОшибки = "Ошибка при записи свойств элемента расписания" + Символы.ПС;
			Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВозВрат Ложь;
		КонецПопытки;
	КонецЕсли;

	ВозВрат ОбновитьТаблицу;
	
КонецФункции

&НаКлиенте
Процедура ПеренестиСрочнуюЗапись(Команда)
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Сотрудник"				, Сотрудник);
	СтруктураЭлемента.Вставить("ДатаВремяНачала"		, ДатаВремяНачала);
	СтруктураЭлемента.Вставить("ИсходнаяСтруктура"		, ИсходнаяСтруктура);
	СтруктураЭлемента.Вставить("Работа"					, Работа);
	СтруктураЭлемента.Вставить("Проект"					, Проект);
	СтруктураЭлемента.Вставить("Автор"					, Автор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки", ПутьКМетаданнымОбработки);
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, СтруктураЭлемента);
	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаПереносаСрочнойЗаписи";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ПеренестиСрочнуюЗапись_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСрочнуюЗапись_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	Закрыть(СтруктураВозВрата);

КонецПроцедуры

&НаКлиенте
Процедура Перепланировать(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		ВозВрат;
	КонецЕсли;
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник"				, Сотрудник);
	ДанныеСотрудника.Вставить("Слоты"					, Новый Массив);
	
	СвойстваСлота = Новый Структура;
	СвойстваСлота.Вставить("Сотрудник"				, Сотрудник);
	СвойстваСлота.Вставить("ДатаВремяНачала"		, ДатаВремяНачала);
	СвойстваСлота.Вставить("ДатаВремяОкончания"		, ДатаВремяОкончания);
	СвойстваСлота.Вставить("Продолжительность"		, Продолжительность);
	СвойстваСлота.Вставить("Работа"					, ИсходнаяСтруктура.Работа);
	СвойстваСлота.Вставить("Проект"					, ИсходнаяСтруктура.Проект);
	СвойстваСлота.Вставить("Автор"					, ИсходнаяСтруктура.Автор);
	СвойстваСлота.Вставить("Контрагент"				, ИсходнаяСтруктура.Контрагент);
	СвойстваСлота.Вставить("КонтактноеЛицо"			, ИсходнаяСтруктура.КонтактноеЛицо);
	//СвойстваСлота.Вставить("Задание"				, ИсходнаяСтруктура.Задание);
	//СвойстваСлота.Вставить("ПакетЧасов"				, ИсходнаяСтруктура.ПакетЧасов);
	СвойстваСлота.Вставить("Событие"				, ИсходнаяСтруктура.Событие);
	СвойстваСлота.Вставить("КрайнийСрок"			, ИсходнаяСтруктура.КрайнийСрок);
	СвойстваСлота.Вставить("ОписаниеXML"			, ИсходнаяСтруктура.ОписаниеXML);
	СвойстваСлота.Вставить("ОписаниеТекст"			, ИсходнаяСтруктура.ОписаниеТекст);

	ДанныеСотрудника.Слоты.Добавить(СвойстваСлота);
	
	ДанныеСлотов = Новый Массив;
	ДанныеСлотов.Добавить(ДанныеСотрудника);
	
	Адрес_ДанныеСлотов = ПоместитьВоВременноеХранилище(ДанныеСлотов, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Адрес_ДанныеСлотов"		, Адрес_ДанныеСлотов);
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки"	, ПутьКМетаданнымОбработки);
	ПараметрыФормы.Вставить("Работа"					, ИсходнаяСтруктура.Работа);
	ПараметрыФормы.Вставить("Проект"					, ИсходнаяСтруктура.Проект);
	ПараметрыФормы.Вставить("Контрагент"				, ИсходнаяСтруктура.Контрагент);
	ПараметрыФормы.Вставить("КонтактноеЛицо"			, ИсходнаяСтруктура.КонтактноеЛицо);
	//ПараметрыФормы.Вставить("Задание"					, ИсходнаяСтруктура.Задание);
	//ПараметрыФормы.Вставить("ПакетЧасов"				, ИсходнаяСтруктура.ПакетЧасов);
	ПараметрыФормы.Вставить("Событие"					, ИсходнаяСтруктура.Событие);
	ПараметрыФормы.Вставить("Автор"						, ИсходнаяСтруктура.Автор);
	ПараметрыФормы.Вставить("Перепланирование"			, Истина);

	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаПланирования";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "Перепланировать_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Перепланировать_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	Закрыть(СтруктураВозВрата);

КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВыполнение(Команда)
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Сотрудник"				, Сотрудник);
	СтруктураЭлемента.Вставить("ДатаВремяНачала"		, ДатаВремяНачала);
	СтруктураЭлемента.Вставить("ИсходнаяСтруктура"		, ИсходнаяСтруктура);
	СтруктураЭлемента.Вставить("Работа"					, Работа);
	СтруктураЭлемента.Вставить("Проект"					, Проект);
	СтруктураЭлемента.Вставить("Автор"					, Автор);
	
	СтруктураЭлемента.Вставить("Контрагент"				, ИсходнаяСтруктура.Контрагент);
	СтруктураЭлемента.Вставить("КонтактноеЛицо"			, ИсходнаяСтруктура.КонтактноеЛицо);
	СтруктураЭлемента.Вставить("ИсходнаяСтруктура"		, ИсходнаяСтруктура);
	СтруктураЭлемента.Вставить("Работа"					, Работа);
	СтруктураЭлемента.Вставить("Проект"					, Проект);
	СтруктураЭлемента.Вставить("Автор"					, Автор);
	СтруктураЭлемента.Вставить("КомментарийЗаписи"		, ИсходнаяСтруктура.КомментарийЗаписи);
	СтруктураЭлемента.Вставить("КонтактныеТелефоны"		, ИсходнаяСтруктура.КонтактныеТелефоны);
	СтруктураЭлемента.Вставить("ДатаВремяОкончания"		, ИсходнаяСтруктура.ДатаВремяОкончания);
	СтруктураЭлемента.Вставить("Продолжительность"		, ИсходнаяСтруктура.Продолжительность);
	//СтруктураЭлемента.Вставить("Задание"				, ИсходнаяСтруктура.Задание);
	//СтруктураЭлемента.Вставить("ПакетЧасов"				, ИсходнаяСтруктура.ПакетЧасов);
	СтруктураЭлемента.Вставить("Событие"				, ИсходнаяСтруктура.Событие);
	СтруктураЭлемента.Вставить("КрайнийСрок"			, ИсходнаяСтруктура.КрайнийСрок);
	СтруктураЭлемента.Вставить("ОписаниеXML"			, ИсходнаяСтруктура.ОписаниеXML);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки", ПутьКМетаданнымОбработки);
	//Лобашова 29.04.2019 81724 +
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, СтруктураЭлемента);
	
	//документ ВыполнениеРаботы
	Событие = СоздатьИОткрытьДокументОбращение(РежимЗаписиДокумента.Проведение, СтруктураЭлемента) ;
	СтруктураЭлемента.Вставить("Событие"				, Событие);

	РезультатСоздания = СоздатьИОткрытьДокументВыполнениеРаботы(СтруктураЭлемента);
	
	ПараметрыФормы.Вставить("ТолькоПросмотр"	, Ложь);

	ЗначенияЗаполнения =  Новый Структура;
	
	ЗначенияЗаполнения.Вставить("Тема"	, СтруктураЭлемента.КомментарийЗаписи);
	ЗначенияЗаполнения.Вставить("Проект"	, СтруктураЭлемента.Проект);
	ЗначенияЗаполнения.Вставить("Результат"	, ПредопределенноеЗначение("Перечисление.РезультатыКонсультации.ВыполненаРабота"));
	
	СтрокаТрудозатраты = Новый Структура;
	СтрокаТрудозатраты.Вставить("Работа", СтруктураЭлемента.Работа);
	СтрокаТрудозатраты.Вставить("Длительность", СтруктураЭлемента.Продолжительность);
	СтрокаТрудозатраты.Вставить("Пользователь", СтруктураЭлемента.Сотрудник);
	СтрокаТрудозатраты.Вставить("ДатаТрудозатрат", Формат(СтруктураЭлемента.ДатаВремяНачала,"ДЛФ=Д"));
	ЗначенияЗаполнения.Вставить("Трудозатраты"	, СтрокаТрудозатраты);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ИмяФормыДляОткрытия = "Документ." + БоР_ОбщийМодуль.ПолучитьИмяОбъектаПоСсылке(Событие) + ".ФормаОбъекта";
	//ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаВыполнения";
	//Лобашова 29.04.2019 81724 -
	ДополнительныеПараметры = Новый Структура;
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ЗаписатьКлиента_Завершение", ДополнительныеПараметры);
	
	//Лобашова 29.04.2019 81724 +
	Если Не РезультатСоздания.Выполнено Тогда
		ВозВрат ;
	КонецЕсли;
	
	
	//Лобашова 29.04.2019 81724 -
КонецПроцедуры

//Лобашова 30.04.2019 81724 +
&НаСервере
Функция СоздатьИОткрытьДокументОбращение(РежимЗаписи, СтруктураЭлемента);
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ТребуетсяСобытие = Ложь;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		ТребуетсяСобытие = Истина;
	КонецЕсли;
	
	Если Не ТребуетсяСобытие Тогда
		ВозВрат Неопределено;
	КонецЕсли;

	 НовоеОбращение = Документы.Обращение.СоздатьДокумент();
	 НовоеОбращение.Тема = "";
	 НовоеОбращение.Дата = ТекущаяУниверсальнаяДата();
	 НовоеОбращение.Заполнить(Неопределено);
	 НовоеОбращение.ТипОбращения = Перечисления.ТипыОбращений.Консультация; //?
	 НовоеОбращение.КаналПолучения = Справочники.КаналыПолученияОбращений.ТелефонГорячейЛинии; //?
	 НовоеОбращение.ОписаниеХранилище = Новый ХранилищеЗначения(СтруктураЭлемента.ОписаниеXML);
	 НовоеОбращение.Сервис = СтруктураЭлемента.Контрагент.Владелец;
	 НовоеОбращение.Инициатор = СтруктураЭлемента.КонтактноеЛицо;
	 НовоеОбращение.Проект = СтруктураЭлемента.Проект;
	 
	 НовоеОбращение.Абонент = СтруктураЭлемента.Контрагент;
	 НовоеОбращение.АбонентОбслуживающейОрганизации = Обслуживание.АбонентОбслуживающейОрганизацииАбонента(НовоеОбращение.Абонент);
	 
	 Документы.Обращение.УстановитьИсполнителяПоУмолчанию(НовоеОбращение);
	 
	 НовоеОбращение.Записать(РежимЗаписи);
	 
	 Событие = НовоеОбращение.Ссылка;
	 
	Возврат Событие;
КонецФункции

&НаСервере
Функция СоздатьИОткрытьДокументВыполнениеРаботы(СтруктураЭлемента) Экспорт
	ТекущаяДата = ТекущаяДата();
	
	МассивДокументов = Новый Массив;
	ДокументОбъект = Документы.ВыполнениеРаботы.СоздатьДокумент();
	ДокументОбъект.Дата						= ТекущаяДата;
	ДокументОбъект.ИсточникСоздания			= "РасписаниеЛК";
	ДокументОбъект.Сотрудник				= СтруктураЭлемента.Сотрудник;
	ДокументОбъект.ДатаВремяНачала			= СтруктураЭлемента.ДатаВремяНачала;
	ДокументОбъект.КомментарийЗаписи		= СтруктураЭлемента.КомментарийЗаписи;
	ДокументОбъект.ДатаВремяНачалаФакт		= СтруктураЭлемента.ДатаВремяНачала;
	ДокументОбъект.ДатаВремяОкончанияФакт	= СтруктураЭлемента.ДатаВремяОкончания;
	ДокументОбъект.ПродолжительностьФакт	= СтруктураЭлемента.Продолжительность;
	ДокументОбъект.ОписаниеXML				= СтруктураЭлемента.ОписаниеXML;
	ДокументОбъект.Автор                    = СтруктураЭлемента.Автор;
	ДокументОбъект.Событие                  = СтруктураЭлемента.Событие;
	ДокументОбъект.ДатаСоздания             = ТекущаяДата;
	МассивДокументов.Добавить(ДокументОбъект);

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			ОтменитьТранзакцию();
			#Область Вывод_сообщений
			СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
			Если СообщенияПользователю.Количество() > 0 Тогда // есть что сказать
				ТекстОшибки = "";
				Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
					ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + СообщениеПользователю.Текст;
				КонецЦикла;
				Сообщить(ТекстОшибки);
			Иначе
				ТекстОшибки = "Ошибка при создании документа " + ДокументОбъект.Метаданные().Синоним + "" + Символы.ПС;
				Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			#КонецОбласти
			ВозВрат Ложь;
		КонецПопытки;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	ОтветФункции =  новый Структура;
	ОтветФункции.Вставить("Выполнено", Истина);
	ОтветФункции.Вставить("ДокументВыполнения", ДокументОбъект.Ссылка);

	ВозВрат ОтветФункции;
КонецФункции
//Лобашова 30.04.2019 81724 -

&НаКлиенте
Процедура ОтразитьВыполнение_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	Закрыть(СтруктураВозВрата);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалаПриИзменении(Элемент)
	БоР_ОбщийМодульКлиентСервер.УРВ_ДатаВремяНачалаПриИзменении(ДатаВремяНачала, ДатаВремяОкончания, Продолжительность, "ДатаВремяНачала");
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончанияПриИзменении(Элемент)
	БоР_ОбщийМодульКлиентСервер.УРВ_ДатаВремяОкончанияПриИзменении(ДатаВремяНачала, ДатаВремяОкончания, Продолжительность, "ДатаВремяОкончания", , );
КонецПроцедуры

&НаКлиенте
Процедура ПродолжительностьПриИзменении(Элемент)
	БоР_ОбщийМодульКлиентСервер.УРВ_ПродолжительностьПриИзменении(ДатаВремяНачала, ДатаВремяОкончания, Продолжительность, "Продолжительность", , );
КонецПроцедуры
