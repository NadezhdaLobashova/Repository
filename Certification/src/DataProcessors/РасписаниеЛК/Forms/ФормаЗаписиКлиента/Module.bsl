
&НаКлиенте
Процедура ОК(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		ВозВрат;
	КонецЕсли;
	
	СоздатьДокументыИЗакрытьФорму();
	
КонецПроцедуры

// БоР :  05.02.2017 1:34:53
&НаКлиенте
Процедура СоздатьДокументыИЗакрытьФорму()
	
	Сообщение = "";
	Успешно = СоздатьДокументыНаСервере(Сообщение);
	Если Успешно Тогда
		СтруктураВозВрата = Новый Структура;
		СтруктураВозВрата.Вставить("РезультатОткрытия"			, Истина);
		Закрыть(СтруктураВозВрата);
		ВозВрат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки"	, ПутьКМетаданнымОбработки);
	ПараметрыФормы.Вставить("Сотрудник"					, Сотрудник);
	ПараметрыФормы.Вставить("ДатаВремяНачала"			, ДатаВремяНачала);
	ПараметрыФормы.Вставить("Проект"					, Проект);
	ПараметрыФормы.Вставить("Работа"					, Работа);
	ПараметрыФормы.Вставить("Заголовок"					, "Запись не удалась, выберите другое доступное время");
	ПараметрыФормы.Вставить("Сообщение"					, Сообщение);

	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаВыбораДругогоВремени";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "СоздатьДокументыИЗакрытьФорму_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыИЗакрытьФорму_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Сотрудник		= СтруктураВозВрата.Сотрудник;
	ДатаВремяНачала	= СтруктураВозВрата.ДатаВремяНачала;
	СоздатьДокументыИЗакрытьФорму();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	БоР_ОбщийМодуль.ЗаполнитьРеквизитыИзПараметров(ЭтаФорма, Неопределено);
	НастроитьУсловноеОформление();
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Телефон = ПолучитьТелефоны(Контрагент, КонтактноеЛицо);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицуРасписания() Экспорт
	
	//ДнейВПрошлое = Константы.КоличествоДнейПросмотраКонсультацийВПрошлое.Получить();
	//ДнейВБудущее = Константы.КоличествоДнейПросмотраКонсультацийВБудущее.Получить();
	ДнейВПрошлое = БоР_ОбщийМодульКлиентСервер.ВЧисло(БоР_ОбщийМодуль.ПолучитьНастройку("КоличествоДнейПросмотраКонсультацийВПрошлое"));
	ДнейВБудущее = БоР_ОбщийМодульКлиентСервер.ВЧисло(БоР_ОбщийМодуль.ПолучитьНастройку("КоличествоДнейПросмотраКонсультацийВБудущее"));
	
	ТекущаяДата = ТекущаяДата();
	ДатаНачала = НачалоДня(ТекущаяДата) - 86400 * ДнейВПрошлое;
	ДатаОкончания = КонецДня(ТекущаяДата) + 86400 * ДнейВБудущее;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ
	|	РасписаниеКонсультацийСрезПоследних.Регистратор КАК Регистратор,
	|	РасписаниеКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	РасписаниеКонсультацийСрезПоследних.Работа КАК Работа,
	|	РасписаниеКонсультацийСрезПоследних.Проект КАК Проект,
	//|	РасписаниеКонсультацийСрезПоследних.Задание КАК Задание,
	//|	РасписаниеКонсультацийСрезПоследних.ПакетЧасов КАК ПакетЧасов,
	|	РасписаниеКонсультацийСрезПоследних.Событие КАК Событие,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
	|	РасписаниеКонсультацийСрезПоследних.Контрагент,
	|	РасписаниеКонсультацийСрезПоследних.КонтактноеЛицо,
	|	РасписаниеКонсультацийСрезПоследних.НеДействует,
	|	РасписаниеКонсультацийСрезПоследних.Состояние,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РасписаниеКонсультацийСрезПоследних.Продолжительность,
	|	РасписаниеКонсультацийСрезПоследних.ВидУслуги,
	|	РасписаниеКонсультацийСрезПоследних.ТемаВопроса,
	|	РасписаниеКонсультацийСрезПоследних.КомментарийЗаписи,
	|	РасписаниеКонсультацийСрезПоследних.ТипЗаписи,
	|	РасписаниеКонсультацийСрезПоследних.СрочнаяЗапись
	|ПОМЕСТИТЬ ВТТекущееРасписание
	|ИЗ
	|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних(
	|			&Момент,
	|			ДатаВремяНачала >= &ДатаНачала
	|				И ДатаВремяНачала <= &ДатаОкончания) КАК РасписаниеКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
	|	И РасписаниеКонсультацийСрезПоследних.Контрагент = &Контрагент
	|	И РасписаниеКонсультацийСрезПоследних.Контрагент <> ЗНАЧЕНИЕ(Справочник.Абоненты.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыКонсультацийСрезПоследних.Регистратор,
	|	РезультатыКонсультацийСрезПоследних.Сотрудник,
	|	РезультатыКонсультацийСрезПоследних.ДатаВремяНачала,
	|	РезультатыКонсультацийСрезПоследних.Контрагент,
	|	РезультатыКонсультацийСрезПоследних.КонтактноеЛицо,
	|	РезультатыКонсультацийСрезПоследних.Результат,
	|	РезультатыКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РезультатыКонсультацийСрезПоследних.Продолжительность,
	|	РезультатыКонсультацийСрезПоследних.ВидУслуги,
	|	РезультатыКонсультацийСрезПоследних.ТемаВопроса,
	|	РезультатыКонсультацийСрезПоследних.ВопросКлиента,
	|	РезультатыКонсультацийСрезПоследних.ОтветСотрудника
	|ПОМЕСТИТЬ ВТТекущиеРезультаты
	|ИЗ
	|	РегистрСведений.РезультатыКонсультаций.СрезПоследних(
	|			&Момент,
	|			ДатаВремяНачала >= &ДатаНачала
	|				И ДатаВремяНачала <= &ДатаОкончания) КАК РезультатыКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РезультатыКонсультацийСрезПоследних.НеДействует
	|	И РезультатыКонсультацийСрезПоследних.Контрагент = &Контрагент
	|	И РезультатыКонсультацийСрезПоследних.Контрагент <> ЗНАЧЕНИЕ(Справочник.Абоненты.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТекущееРасписание.Регистратор КАК РегистраторЗаписи,
	|	ВТТекущиеРезультаты.Регистратор КАК РегистраторРезультата,
	|	ВТТекущееРасписание.Сотрудник КАК Сотрудник,
	|	ВТТекущееРасписание.Работа КАК Работа,
	|	ВТТекущееРасписание.Проект КАК Проект,
	//|	ВТТекущееРасписание.Задание КАК Задание,
	//|	ВТТекущееРасписание.ПакетЧасов КАК ПакетЧасов,
	|	ВТТекущееРасписание.Событие КАК Событие,
	|	ВТТекущееРасписание.ДатаВремяНачала КАК ДатаВремяНачала,
	|	ВТТекущееРасписание.Контрагент,
	|	ВТТекущееРасписание.КонтактноеЛицо,
	|	ВТТекущееРасписание.НеДействует,
	|	ВТТекущееРасписание.Состояние,
	|	ВТТекущееРасписание.ДатаВремяОкончания,
	|	ВТТекущееРасписание.Продолжительность,
	|	ВТТекущееРасписание.ВидУслуги,
	|	ВТТекущееРасписание.ТемаВопроса,
	|	ВТТекущееРасписание.КомментарийЗаписи,
	|	ВТТекущееРасписание.ТипЗаписи,
	|	ВТТекущееРасписание.СрочнаяЗапись,
	|	ЕСТЬNULL(ВТТекущиеРезультаты.Результат, ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ПустаяСсылка)) КАК Результат,
	|	ВЫБОР
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ОказанаКонсультация)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация)
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.НеОказанаКонсультация)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Запланировано)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Запланировано)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.ЗаписанКлиент)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ЗаписанКлиент)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Блокировка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Блокировка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ПустаяСсылка)
	|	КОНЕЦ КАК ИтоговыйСтатус,
	|	ВТТекущиеРезультаты.ВопросКлиента,
	|	ВТТекущиеРезультаты.ОтветСотрудника
	|ИЗ
	|	ВТТекущееРасписание КАК ВТТекущееРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеРезультаты КАК ВТТекущиеРезультаты
	|		ПО ВТТекущееРасписание.Сотрудник = ВТТекущиеРезультаты.Сотрудник
	|			И ВТТекущееРасписание.ДатаВремяНачала = ВТТекущиеРезультаты.ДатаВремяНачала
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВремяНачала,
	|	Сотрудник";
	#КонецОбласти

	Момент = Неопределено;
	
	Запрос.УстановитьПараметр("Момент"				, Момент);
	Запрос.УстановитьПараметр("ДатаНачала"			, ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"		, КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("Контрагент"			, Контрагент);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	ТаблицаРасписания.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецФункции

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Телефон = ПолучитьТелефоны(Контрагент, КонтактноеЛицо);
	ЗаполнитьТаблицуРасписания();
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	Телефон = ПолучитьТелефоны(Контрагент, КонтактноеЛицо);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасписанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаРасписания.ДанныеСтроки(ВыбраннаяСтрока);
	Если ЗначениеЗаполнено(ТекущиеДанные.РегистраторРезультата) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РегистраторЗаписи"				, ТекущиеДанные.РегистраторЗаписи);
		ДополнительныеПараметры.Вставить("РегистраторРезультата"			, ТекущиеДанные.РегистраторРезультата);
		
		ЭлементыМеню = Новый СписокЗначений;
		ЭлементыМеню.Добавить("Документ записи");
		ЭлементыМеню.Добавить("Документ выполнения");
		ЭлементыМеню.Добавить("Событие");

		ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаРасписанияВыборЗавершение", ЭтаФорма, ДополнительныеПараметры); 
		ПоказатьВыборИзМеню(ОписаниеОповещения, ЭлементыМеню);
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.РегистраторЗаписи) И ТипЗнч(ТекущиеДанные.РегистраторЗаписи) = Тип("ДокументСсылка.ЗаписьНаЛК") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ"				, ТекущиеДанные.РегистраторЗаписи);
		ПараметрыФормы.Вставить("ТолькоПросмотр"	, Истина);
		ОткрытьФорму("Документ.ЗаписьНаЛК.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,, , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасписанияВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры;
	
	Если ВыбранныйЭлемент.Значение = "Документ записи" Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.РегистраторЗаписи) И ТипЗнч(ТекущиеДанные.РегистраторЗаписи) = Тип("ДокументСсылка.ЗаписьНаЛК") Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ"				, ТекущиеДанные.РегистраторЗаписи);
			ПараметрыФормы.Вставить("ТолькоПросмотр"	, Истина);
			ОткрытьФорму("Документ.ЗаписьНаЛК.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,, , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	ИначеЕсли ВыбранныйЭлемент.Значение = "Документ выполнения" Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.РегистраторРезультата) И ТипЗнч(ТекущиеДанные.РегистраторРезультата) = Тип("ДокументСсылка.ВыполнениеКонсультацииЛК") Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ"				, ТекущиеДанные.РегистраторРезультата);
			ПараметрыФормы.Вставить("ТолькоПросмотр"	, Истина);
			ОткрытьФорму("Документ.ВыполнениеКонсультацииЛК.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,, , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	ИначеЕсли ВыбранныйЭлемент.Значение = "Событие" Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.РегистраторРезультата) И ТипЗнч(ТекущиеДанные.РегистраторРезультата) = Тип("ДокументСсылка.ВыполнениеКонсультацииЛК") Тогда
			Событие = ТекущиеДанные.РегистраторРезультата.Событие;
			Если ЗначениеЗаполнено(Событие) И ТипЗнч(Событие) = Тип("ДокументСсылка.Событие") Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Ключ"				, Событие);
				ПараметрыФормы.Вставить("ТолькоПросмотр"	, Истина);
				ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,, , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область Условное_оформление
&НаСервере
Процедура НастроитьУсловноеОформление() Экспорт
	РегистрыСведений.ЦветаРасписанияЛК.НастроитьУсловноеОформление(УсловноеОформление, "ТаблицаРасписанияИтоговыйСтатус", "ТаблицаРасписания.ИтоговыйСтатус");
КонецПроцедуры
#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьТелефоны(Контрагент, КонтактноеЛицо)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ
		|	ПользователиАбонентов.ПользовательСервиса.Наименование КАК Наименование,
		|	ПользователиАбонентов.ПользовательСервиса.Код КАК Код,
		|	ПользователиАбонентов.ПользовательСервиса.Ссылка КАК КонтактноеЛицо,
		|	ПользователиАбонентов.ПользовательСервиса КАК ПользовательСервиса
		|ПОМЕСТИТЬ ВТКонтактныеЛица
		|ИЗ
		|	РегистрСведений.ПользователиАбонентов КАК ПользователиАбонентов
		|ГДЕ
		|	ПользователиАбонентов.Абонент = &Контрагент
		|	И НЕ ПользователиАбонентов.ПользовательСервиса.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КонтактноеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ПользователиСервисовКонтактнаяИнформация.Представление, """""""") КАК Представление
		|ИЗ
		|	ВТКонтактныеЛица КАК ВТКонтактныеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПользователиСервисов.КонтактнаяИнформация КАК ПользователиСервисовКонтактнаяИнформация
		|		ПО ВТКонтактныеЛица.КонтактноеЛицо = ПользователиСервисовКонтактнаяИнформация.Ссылка
		|			И (ПользователиСервисовКонтактнаяИнформация.Тип = &ТипКонтактнойИнформации)
		|ГДЕ
		|	ПользователиСервисовКонтактнаяИнформация.Тип = &ТипКонтактнойИнформации";
	#КонецОбласти
	Запрос.УстановитьПараметр("Контрагент"				, Контрагент);
	Запрос.УстановитьПараметр("КонтактноеЛицо"			, КонтактноеЛицо);
	Запрос.УстановитьПараметр("ТипКонтактнойИнформации"	, Перечисления.ТипыКонтактнойИнформации.Телефон);

	ТаблицаКонтактнойИнформации = Запрос.Выполнить().Выгрузить();
	СтрокаТелефонов = "";
	Для каждого СтрокаКИ Из ТаблицаКонтактнойИнформации Цикл
		СтрокаТелефонов = СтрокаТелефонов + ?(ЗначениеЗаполнено(СтрокаТелефонов), ";", "") + СтрокаКИ.Представление;
	КонецЦикла;
	
	ВозВрат СтрокаТелефонов;
	
КонецФункции

&НаСервере
Функция СоздатьДокументыНаСервере(ТекстОшибки = Неопределено) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	МассивДокументов = Новый Массив;
	ДокументОбъект = Документы.ЗаписьНаЛК.СоздатьДокумент();
	ДокументОбъект.Дата					= ТекущаяДата;
	ДокументОбъект.ИсточникСоздания		= "РасписаниеЛК";
	ДокументОбъект.Сотрудник			= Сотрудник;
	ДокументОбъект.ДатаВремяНачала		= ДатаВремяНачала;
	ДокументОбъект.Контрагент			= Контрагент;
	ДокументОбъект.КонтактноеЛицо		= КонтактноеЛицо;
	ДокументОбъект.ВидУслуги			= ВидУслуги;
	ДокументОбъект.ТемаВопроса			= ТемаВопроса;
	ДокументОбъект.КомментарийЗаписи	= КомментарийЗаписи;
	ДокументОбъект.ТипЗаписи			= Перечисления.ТипыЗаписейЛК.Обычная;
	ДокументОбъект.СрочнаяЗапись		= СрочнаяЗапись;
	ДокументОбъект.КонтактныеТелефоны	= КонтактныеТелефоны;
	МассивДокументов.Добавить(ДокументОбъект);

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			ОтменитьТранзакцию();
			#Область Вывод_сообщений
			СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
			Если СообщенияПользователю.Количество() > 0 Тогда // есть что сказать
				ТекстОшибки = "";
				Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
					ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + СообщениеПользователю.Текст;
				КонецЦикла;
				Сообщить(ТекстОшибки);
			Иначе
				ТекстОшибки = "Ошибка при создании документа " + ДокументОбъект.Метаданные().Синоним + "" + Символы.ПС;
				Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			#КонецОбласти
			ВозВрат Ложь;
		КонецПопытки;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	ВозВрат Истина;

КонецФункции

//Лобашова 07.03.2019 81724 +
&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", СписокПользователей(Этаформа.ЭтотОбъект.Контрагент));
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.КонтактноеЛицо.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Функция СписокПользователей(Абонент)
    
   Запрос = Новый Запрос;
   Запрос.Текст =
   "ВЫБРАТЬ РАЗЛИЧНЫЕ
   |	ПользователиАбонентов.ПользовательСервиса КАК ПользовательСервиса
   |ИЗ
   |	РегистрСведений.ПользователиАбонентов КАК ПользователиАбонентов
   |ГДЕ
   |	ПользователиАбонентов.Абонент = &Абонент"
   ;
   Запрос.УстановитьПараметр("Абонент", Абонент);
   Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПользовательСервиса");
    
КонецФункции

//Лобашова 07.03.2019 81724 -

