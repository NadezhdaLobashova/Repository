
&НаКлиенте
Перем ОбновитьИнтерфейс;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьУведомленияПоУмолчанию();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Настройки были изменены. Сохранить изменения?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьУведомленияПоУмолчанию();
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ПодпискаПолученоПисьмоПоОбращениюПриИзменении(Элемент)
	
	ЗаписатьУведомленияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаПолученКомментарийОтПользователяПриИзменении(Элемент)
	
	ЗаписатьУведомленияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаПеренаправлениеОбращенияПриИзменении(Элемент)
	
	ЗаписатьУведомленияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаПеренаправлениеКонсультацииПриИзменении(Элемент)
	
	ЗаписатьУведомленияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаПеренаправлениеОшибкиПриИзменении(Элемент)
	
	ЗаписатьУведомленияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаПеренаправлениеПожеланияПриИзменении(Элемент)
	
	ЗаписатьУведомленияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаВыполнениеЗадачиПриИзменении(Элемент)
	
	ЗаписатьУведомленияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаПеренаправлениеЗадачиПриИзменении(Элемент)
	
	ЗаписатьУведомленияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаПодошелСрокЗадачиПриИзменении(Элемент)
	УстановитьДоступностьЭлементовФормы();
	ЗаписатьУведомленияПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура СрокПодошелСрокЗадачиПриИзменении(Элемент)
	ЗаписатьУведомленияПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаПросроченаЗадачаПриИзменении(Элемент)
	УстановитьДоступностьЭлементовФормы();
	ЗаписатьУведомленияПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаСозданиеЗадачиПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
	ЗаписатьУведомленияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПросроченаЗадачаОдинРазПриИзменении(Элемент)
	
	Если ЧастотаПросроченаЗадачаОдинРаз Тогда
		
		Если ЧастотаПросроченаЗадача <> 0 Тогда
			
			ЧастотаПросроченаЗадача = 0;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПросроченаЗадача = 0 Тогда
			
			ЧастотаПросроченаЗадача = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	ЗаписатьУведомленияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПросроченаЗадачаПриИзменении(Элемент)
	
	Если ЧастотаПросроченаЗадача = 0 Тогда
		
		Если Не ЧастотаПросроченаЗадачаОдинРаз Тогда
			
			ЧастотаПросроченаЗадачаОдинРаз = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПросроченаЗадачаОдинРаз Тогда
			
			ЧастотаПросроченаЗадачаОдинРаз = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	ЗаписатьУведомленияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПодошелСрокЗадачиОдинРазПриИзменении(Элемент)
	
	Если ЧастотаПодошелСрокЗадачиОдинРаз Тогда
		
		Если ЧастотаПодошелСрокЗадачи <> 0 Тогда
			
			ЧастотаПодошелСрокЗадачи = 0;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПодошелСрокЗадачи = 0 Тогда
			
			ЧастотаПодошелСрокЗадачи = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	ЗаписатьУведомленияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаПодошелСрокЗадачиПриИзменении(Элемент)
	
	Если ЧастотаПодошелСрокЗадачи = 0 Тогда
		
		Если Не ЧастотаПодошелСрокЗадачиОдинРаз Тогда
			
			ЧастотаПодошелСрокЗадачиОдинРаз = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если ЧастотаПодошелСрокЗадачиОдинРаз Тогда
			
			ЧастотаПодошелСрокЗадачиОдинРаз = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	ЗаписатьУведомленияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьУведомленияОЗадачахНаЛиниюПоддержкиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Очистить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Очистить настройки уведомлений всех пользователей?'");
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьУведомленияПоУмолчанию()
	
	НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию =
		РаботаСУведомлениями.ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	
	ПодпискаПолученоПисьмоПоОбращению = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПолученоПисьмоПоОбращению);
		
	ПодпискаПолученКомментарийОтПользователя = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПолученКомментарийОтПользователя);
		
	ПодпискаПеренаправлениеОбращения = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПеренаправлениеОбращения);
        
    ПодпискаПеренаправлениеКонсультации = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПеренаправлениеКонсультации);
		
	ПодпискаПеренаправлениеОшибки = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПеренаправлениеОшибки);
		
	ПодпискаПеренаправлениеПожелания = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПеренаправлениеПожелания);
		
	ПодпискаПеренаправлениеЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи);
		
	ПодпискаПодошелСрокЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		
	ПодпискаПросроченаЗадача = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПросроченаЗадача);
		
	ПодпискаСозданиеЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
		
	ПодпискаВыполнениеЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи);
	
	СрокПодошелСрокЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.СрокУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		
	ЧастотаПодошелСрокЗадачи = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		
	Если ЧастотаПодошелСрокЗадачи = 0 Тогда
		ЧастотаПодошелСрокЗадачиОдинРаз = Истина;
	Иначе
		ЧастотаПодошелСрокЗадачиОдинРаз = Ложь;
	КонецЕсли;
	
	ЧастотаПросроченаЗадача = РаботаСУведомлениями.ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.ЧастотаУведомления,
		Перечисления.СобытияУведомлений.ПросроченаЗадача);
		
	Если ЧастотаПросроченаЗадача = 0 Тогда
		ЧастотаПросроченаЗадачаОдинРаз = Истина;
	Иначе
		ЧастотаПросроченаЗадачаОдинРаз = Ложь;
	КонецЕсли;
	
	// Запишем настройку уведомлений по умолчанию при первом открытии
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиУведомленийПоУмолчанию.Настройка
		|ИЗ
		|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиУведомленийПоУмолчанию");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		ЗаписатьУведомленияПоУмолчанию();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьУведомленияПоУмолчанию()
	
	Модифицированность = Ложь;
    
	РаботаСУведомлениями.УстановитьРазрешитьИзменятьНастройкиУведомлений(НастройкаРазрешитьПользователямИзменятьНастройкиПоУмолчанию);
	
    УстановитьНастройку(Справочники.ВидыБизнесСобытий.ПолученоПисьмоПоОбращению, ПодпискаПолученоПисьмоПоОбращению);
    УстановитьНастройку(Справочники.ВидыБизнесСобытий.ПолученКомментарийОтПользователя, ПодпискаПолученКомментарийОтПользователя);
    УстановитьНастройку(Справочники.ВидыБизнесСобытий.ПеренаправлениеОбращения, ПодпискаПеренаправлениеОбращения);
	УстановитьНастройку(Справочники.ВидыБизнесСобытий.ПеренаправлениеКонсультации, ПодпискаПеренаправлениеКонсультации);
	УстановитьНастройку(Справочники.ВидыБизнесСобытий.ПеренаправлениеОшибки, ПодпискаПеренаправлениеОшибки);
	УстановитьНастройку(Справочники.ВидыБизнесСобытий.ПеренаправлениеПожелания, ПодпискаПеренаправлениеПожелания);
	УстановитьНастройку(Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи, ПодпискаПеренаправлениеЗадачи);
	УстановитьНастройку(Справочники.ВидыБизнесСобытий.СозданиеЗадачи, ПодпискаСозданиеЗадачи);
	УстановитьНастройку(Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи, ПодпискаВыполнениеЗадачи);
	УстановитьНастройку(Перечисления.СобытияУведомлений.ПодошелСрокЗадачи, ПодпискаПодошелСрокЗадачи);
	УстановитьНастройку(Перечисления.СобытияУведомлений.ПодошелСрокЗадачи, СрокПодошелСрокЗадачи, Перечисления.НастройкиУведомлений.СрокУведомления);
	УстановитьНастройку(Перечисления.СобытияУведомлений.ПодошелСрокЗадачи, ЧастотаПодошелСрокЗадачи, Перечисления.НастройкиУведомлений.ЧастотаУведомления);
	УстановитьНастройку(Перечисления.СобытияУведомлений.ПросроченаЗадача, ПодпискаПросроченаЗадача);
	УстановитьНастройку(Перечисления.СобытияУведомлений.ПросроченаЗадача, ЧастотаПросроченаЗадача, Перечисления.НастройкиУведомлений.ЧастотаУведомления);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройку(ВидСобытия, Значение, ТипНастройки = Неопределено)
    
    Если ТипНастройки = Неопределено Тогда
        ТипНастройки = Перечисления.НастройкиУведомлений.Подписка;
    КонецЕсли;
    РаботаСУведомлениями.УстановитьНастройкуПоУмолчанию(ТипНастройки, ВидСобытия, Значение);
    
КонецПроцедуры

&НаСервере
Процедура ОчиститьСервер()
	
	НаборЗаписей = РегистрыСведений.ПодпискиНаУведомления.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.НастройкиУведомленияОЗадачах.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.НастройкиУведомлений.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Элементы.ЧастотаПросроченаЗадача.Доступность = Не ЧастотаПросроченаЗадачаОдинРаз;
	Элементы.ЧастотаПодошелСрокЗадачи.Доступность = Не ЧастотаПодошелСрокЗадачиОдинРаз;
	Элементы.ГруппаПодошелСрокЗадачи.Доступность = ПодпискаПодошелСрокЗадачи;
	Элементы.ГруппаПереключательПросроченаЗадача.Доступность = ПодпискаПросроченаЗадача;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ИспользоватьБизнесПроцессыИЗадачи = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
	
	Элементы.ГруппаПереключательПросроченаЗадача.Видимость = ИспользоватьБизнесПроцессыИЗадачи;
	Элементы.ГруппаПодошелСрокЗадачи.Видимость = ИспользоватьБизнесПроцессыИЗадачи;
	Элементы.ГруппаПодпискаСозданиеЗадачи.Видимость = ИспользоватьБизнесПроцессыИЗадачи;
		

КонецПроцедуры

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Сервер

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти