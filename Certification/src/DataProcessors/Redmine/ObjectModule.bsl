// Redmine API для 1С  v.1.0
// более подробную информация по REST API для Redmine можно посмотреть на официальном ресурсе
// http://www.redmine.org/projects/redmine/wiki/Rest_api
// В библиотеке реализованы блоки: Проекты, Задачи, Затраты времени.
// частично реализована работа с файлами.
// В текущей версии обработка ошибок не реализована
// © Чечин Петр Юрьевич. 2014
// email: stop_time@list.ru


//в переменной содержится XDTO пакет, который загружается из макета
Перем МодельДанных;
Перем РедмайнСервер;
Перем РедмайнКлюч;
Перем РедмайнПуть;
Перем РедмайнПорт;

///////////////////////////////////////////////////////////////////////////////
//
// 	ОТЛАДКА
//

//Функция ПолучитьИмяТестовогоФайла()
//	Возврат "C:\test.xml";	
//КонецФункции

///////////////////////////////////////////////////////////////////////////////
//
// РАБОТА С XDTO
//


//Описание: Загружает XDTO пакет из макета 
Процедура Инициализировать() Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ПолучитьМакет("СхеммаДанных").ПолучитьТекст());
	
	//// Внимание. Второй параметр - ТипXDTO не указываем, т.к. перед этим явно записали его в файл. 
	//Все же рекомендуется ВСЕГДА указывать второй параметр, чтобы избежать некорректной трактовки XML файла. 
	//Нельзя гарантировать, что внутри файла тип указан.
	
	ОбъектМодель = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	МодельДанных = Новый ФабрикаXDTO(ОбъектМодель);
	
	РедмайнСервер = "rm.rarus.ru";
	РедмайнКлюч = "fb2eff03513051e7b7e4c1bf57e5dcd8c452f12f";
	РедмайнПуть = "/redmine";
	
КонецПроцедуры

//Описание: Возвращает соответсвия с заголовками для запроса, вставляет обязательный заголовок с ключом. 
//          добавляет дополнительные заголовки при необходимости
//Параметры: ДопЗаголовоки - Соответсвие - дополнительные заголовки
//Возвращаемое значение: Соответсвие - со всеми заголовками
Функция ЗаголовокЗапроса(ДопЗаголовоки = Неопределено)
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type","application/xml");
	Заголовки.Вставить("X-Redmine-API-Key",РедмайнКлюч);
	Если ДопЗаголовоки <> Неопределено Тогда
		Для Каждого текПара Из ДопЗаголовоки Цикл
			Заголовки.Вставить(текПара.Ключ,текПара.Значение);	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Заголовки;
КонецФункции

//Описание: Отправляет Get запрос по указанному пути, из структуры параметров формирует
// строку запроса для http сервера, возвращает текст файла ответа
//Параметры: 
//  Путь      - Строка    - путь ресурса к которуму идет запрос.
//  Параметры - Структура - содержит пары параметр и значение для запроса
//Возвращаемое значение:
//  Строка - Текст ответа сервера
//
Функция GetЗапрос(Путь,Параметры)
	СтрокаПараметров = "";
	ЭтоПервый = Истина;
//	//через запятую можем перечислить одно или несколько следующих значений
//	//  children, attachments, relations, changesets, journals, watchers
	//Параметры.Вставить("include","children, attachments, relations, changesets, journals, watchers");
	Для каждого текПараметр из Параметры Цикл
		//не заполненные параметры игнорируются
		Если текПараметр.Значение="" Тогда
			Продолжить;
		КонецЕсли;
		Если текПараметр.Ключ = "updated_on" ИЛИ текПараметр.Ключ = "id" Тогда
			Знак = "=>=";
		Иначе 
			Знак = "=";
		КонецЕсли;	
		СтрокаПараметров=СтрокаПараметров + ?(ЭтоПервый,"","&") + текПараметр.Ключ + Знак + текПараметр.Значение;
		ЭтоПервый=Ложь;
	КонецЦикла;
	СтрокаПараметров = ?(СтрокаПараметров="","","?"+СтрокаПараметров);
	РезультатИмяФайла = ПолучитьИмяВременногоФайла();//ПолучитьИмяТестовогоФайла();
	Соединение = Новый HTTPСоединение(РедмайнСервер,РедмайнПорт , , , , Ложь);//Соединяем
	ТекстЗапроса = РедмайнПуть+"/"+Путь+".xml"+СтрокаПараметров;
	//ЗАПРОС
	ЗапросКСайту = Новый HTTPЗапрос(ТекстЗапроса,ЗаголовокЗапроса());
	Соединение.Получить(ЗапросКСайту, РезультатИмяФайла);
	Текст = Новый ЧтениеТекста(РезультатИмяФайла,КодировкаТекста.UTF8);
	Возврат Текст.Прочитать();
    
	
КонецФункции

//Описание: Создает из XTDO объекта структуру, вложенные объекты ОбъектXDTO превращаются в структуры,
//          СписокXDTO - превращаются в массив. Из простых типов используем только тип "Строка"
//Параметры: 
//  АнализируемыйОбъект - ОбъектXDTO - любой объект типа ОбъектXDTO
//Возвращаемое значение: 
//  Структура - отражение входного объекта в Структуру
Функция СтруктураИзОбъектаXDTO(АнализируемыйОбъект)
	СтруктураОбъекта = Новый Структура();
	Для каждого СвойстваОбъекта Из АнализируемыйОбъект.Свойства() Цикл
		Если ТипЗнч(АнализируемыйОбъект[СвойстваОбъекта.Имя])=Тип("Строка") Тогда
			СтруктураОбъекта.Вставить(СвойстваОбъекта.Имя,АнализируемыйОбъект[СвойстваОбъекта.Имя]);
		ИначеЕсли ТипЗнч(АнализируемыйОбъект[СвойстваОбъекта.Имя])=Тип("ОбъектXDTO") Тогда
			СтруктураОбъекта.Вставить(СвойстваОбъекта.Имя, СтруктураИзОбъектаXDTO(АнализируемыйОбъект[СвойстваОбъекта.Имя]));
		ИначеЕсли ТипЗнч(АнализируемыйОбъект[СвойстваОбъекта.Имя])=Тип("СписокXDTO") Тогда
			МассивОбъектов = Новый Массив;
			Для каждого текОбъект Из АнализируемыйОбъект[СвойстваОбъекта.Имя] Цикл
				МассивОбъектов.Добавить(СтруктураИзОбъектаXDTO(текОбъект));
			КонецЦикла;
			СтруктураОбъекта.Вставить(СвойстваОбъекта.Имя,МассивОбъектов);
		КонецЕсли;
	КонецЦикла;
	Возврат СтруктураОбъекта;
КонецФункции

//Описание: Из входного xml файла, возвращает объет в виде структуры
//Параметры: ТекстФайла - Строка - текст обрабатываемого xml
//           ТипДанных - Строка - строка с названием типа данных из используемого пакета XDTO
//Возвращаемое значение: 
// Структура - Описанный в файле объект в виде структуры
Функция СтруктураИзФайлаXML(ТекстФайла,ТипДанных)
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(ТекстФайла);
	ТипДанныхXDTO = ФабрикаXDTO.Тип("e-mail@stop_time@list.ru",ТипДанных);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ,ТипДанныхXDTO);
	СтруктураОбъекта = СтруктураИзОбъектаXDTO(ОбъектXDTO);	
	ЧтениеХМЛ.Закрыть();
	Возврат СтруктураОбъекта;
КонецФункции

//Описание: Возвращает список задач, через параметры можно ограничивать список
//Параметры: Параметры - Структура - фильтры для выборки
//Возвращаемое значение: Структура - список задач
Функция СписокЗадач(Параметры = Неопределено) Экспорт
	ВыбратьВсе = Ложь;
	//Если Параметры = Неопределено Тогда
	//	ВыбратьВсе = Истина;
	//	Параметры=ПараметрыСпискаЗадач();	
	//КонецЕсли;
	
	Смещение = Параметры.offset;
	РазмерПорции = Параметры.limit;
	
	ТекстОтвета =  GetЗапрос("issues",Параметры);
	Если Не ЗначениеЗаполнено(ТекстОтвета) Тогда
		Возврат Неопределено;	
	КонецЕсли;	
	Результат = СтруктураИзФайлаXML(ТекстОтвета,"Issues");	
			
	//если выбрать нужно все задачи, читаем порциями и добавляем в массив
	Если ВыбратьВсе Тогда
		ВсегоЗадач = 0;
		Если Результат.Свойство("total_count",ВсегоЗадач) Тогда
			КолОбращений = ВсегоЗадач/РазмерПорции-1;
			КолОбращений = ?(Цел(КолОбращений)<КолОбращений,Цел(КолОбращений)+1,КолОбращений);
			Для н = 1 по КолОбращений Цикл
				Параметры.offset = н*РазмерПорции;
				ТекстОтвета =  GetЗапрос("issues",Параметры);
				ПромежуточныйРезультат = СтруктураИзФайлаXML(ТекстОтвета,"Issues");	
				//если нет подходящих под фильтр задач, этого свойсва в ответе не будет
				Если НЕ ПромежуточныйРезультат.Свойство("issue") Тогда
					Продолжить;	
				КонецЕсли;
				
				//скопируем массив задач из промежуточного результата в конечный
				//если задача 1 то она возвращается структурой
				Если ТипЗнч(ПромежуточныйРезультат.issue)=Тип("Структура") Тогда
					Результат.issue.Добавить(ПромежуточныйРезультат.issue);
				Иначе 
					Для каждого текЗадача из ПромежуточныйРезультат.issue Цикл
						Результат.issue.Добавить(текЗадача);		
					КонецЦикла;
				КонецЕсли;
				//в результирующей структуре подправим свойство лимит
				Результат.limit = Число(Результат.limit)+РазмерПорции;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//Описание:Возвращает структуру заданной идентефикатором задачи.
//Параметры:  Идентификатор - Строка - Номер задачи
//            Параметры - Структура - дополнительные данные которые нужны для задачи(изменения, файлы..)
//Возвращаемое значение:
//  Структура - данны задачи с заданным идентификатором
Функция Задача(Идентификатор, Параметры = Неопределено) Экспорт
	Если Параметры = Неопределено Тогда Параметры = Новый Структура КонецЕсли;
	ТекстОтвета = GetЗапрос("issues/"+Идентификатор,Параметры);	
	Результат =  СтруктураИзФайлаXML(ТекстОтвета,"issue");
	Возврат Результат;
КонецФункции

&НаСервере
Функция ОбновитьСписокЗадач(ПолныйПеречень = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПроектов.RedmineID КАК RedmineID,
		|	МАКСИМУМ(ЕСТЬNULL(Задачи.ДатаОбновления, &ТекущаяДата)) КАК ДатаОбновления,
		|	ЭтапыПроектов.Ссылка КАК ЭтапПроекта,
		|	ЭтапыПроектов.Владелец КАК Проекты
		|ИЗ
		|	Справочник.ЭтапыПроектов КАК ЭтапыПроектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Задачи КАК Задачи
		|		ПО ЭтапыПроектов.Владелец = Задачи.Владелец
		|ГДЕ
		|	ЭтапыПроектов.RedmineID <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыПроектов.RedmineID,
		|	ЭтапыПроектов.Ссылка";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для СтатусЗадачиН = 1 По 9 цикл
			смещение = 0;
			КоличествоБольше100 = Истина;
			
			Пока КоличествоБольше100 Цикл 
				параметрыВыборки = Новый Структура;		
		////		
				параметрыВыборки.Вставить("include", "attachments");
	/////
				параметрыВыборки.Вставить("offset",смещение); 	//смещение
				параметрыВыборки.Вставить("project_id", ВыборкаДетальныеЗаписи.RedmineID);//фильтр по проекту
				//параметрыВыборки.Вставить("include", "attachments");
				параметрыВыборки.Вставить("status_id", СтатусЗадачиН);
				параметрыВыборки.Вставить("limit",100);	//количество задач в выборке, по умолчанию 25, максимум 100
				Если Не ПолныйПеречень Тогда
					параметрыВыборки.Вставить("updated_on", Формат(ВыборкаДетальныеЗаписи.ДатаОбновления, "ДФ=yyyy-MM-dd"));
				КонецЕсли;	
				ЗадачиПроекта = СписокЗадач(параметрыВыборки);
				
				Если ЗадачиПроекта = Неопределено Тогда
					КоличествоБольше100 = Ложь;
					Продолжить;
				Конецесли;	
				
				Если НЕ ЗадачиПроекта.Свойство("issue") Тогда
					КоличествоБольше100 = Ложь;
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(ЗадачиПроекта.issue) = Тип("Массив") Тогда
					Для ИндЗадачи = 0 По ЗадачиПроекта.issue.Количество()-1 Цикл
						ТекЗадача = ЗадачиПроекта.issue[ИндЗадачи];
						
						ПолныеПараметры = Новый Структура;		
						ПолныеПараметры.Вставить("offset",0); 	//смещение
						ПолныеПараметры.Вставить("limit",100);	//количество задач в выборке, по умолчанию 25, максимум 100
						ПолныеПараметры.Вставить("include","children, attachments, relations, changesets, journals, watchers");
						ТекЗадачаПолная = Задача(ТекЗадача.id, ПолныеПараметры);
						
						ЗапросЗадача = Новый Запрос;
						ЗапросЗадача.Текст = 
							"ВЫБРАТЬ
							|	Задачи.Ссылка
							|ИЗ
							|	Справочник.Задачи КАК Задачи
							|ГДЕ
							|	Задачи.Код = &Код";
						
						ЗапросЗадача.УстановитьПараметр("Код", ТекЗадача.id);
						
						РезультатЗапросаЗадача = ЗапросЗадача.Выполнить();
						
						ВыборкаДетальныеЗаписиЗадача = РезультатЗапросаЗадача.Выбрать();
						
						Если НЕ ТекЗадача.Свойство("assigned_to") Тогда
							Если ЗадачиПроекта.issue.Количество() < 100 Тогда
								КоличествоБольше100 = Ложь;
							Иначе
								Смещение = Смещение + 100;
							КонецЕсли;	
							Продолжить;
						КонецЕсли;
						Попытка
							Исполнитель = Справочники.ПользователиRedmine.НайтиПоРеквизиту("idИсполнитель", ТекЗадача.assigned_to.id);
							Если Исполнитель = Справочники.ПользователиRedmine.ПустаяСсылка() Тогда
								Исполнитель = Справочники.ПользователиRedmine.СоздатьЭлемент();	
								Исполнитель.idИсполнитель = ТекЗадача.assigned_to.id;
								Исполнитель.Наименование = ТекЗадача.assigned_to.name;
								Исполнитель.Записать();
							КонецЕсли;
						Исключение
							Сообщить(ТекЗадача.id);
						КонецПопытки;	
							
							
						Автор = Справочники.ПользователиRedmine.НайтиПоРеквизиту("idИсполнитель", ТекЗадача.author.id);
						Если Автор = Справочники.ПользователиRedmine.ПустаяСсылка() Тогда
							Автор = Справочники.ПользователиRedmine.СоздатьЭлемент();	
							Автор.idИсполнитель = ТекЗадача.author.id;
							Автор.Наименование = ТекЗадача.author.name;
							Автор.Записать();
						КонецЕсли;
						
						Если ВыборкаДетальныеЗаписиЗадача.Следующий() Тогда
							ЗадачаОб = ВыборкаДетальныеЗаписиЗадача.Ссылка.ПолучитьОбъект();
							Если Ложь Тогда
								ЗадачаОб = Справочники.Задачи.СоздатьЭлемент();
							КонецЕсли;
							ЗадачаОб.ДатаВыполнения = ПреобразоватьДату(ТекЗадача.due_date);
							ЗадачаОб.ДатаОбновления = ПреобразоватьДату(ТекЗадача.updated_on, Истина);
							//ЗадачаОб.Код 			= ПреобразоватьДату(ТекЗадача.id);
							ЗадачаОб.Владелец		= ВыборкаДетальныеЗаписи.Проекты;
							ЗадачаОб.ЭтапПроекта	= ВыборкаДетальныеЗаписи.ЭтапПроекта;
							ЗадачаОб.Автор			= Автор.Ссылка;//ТекЗадача.author.name + ТекЗадача.assigned_to.id;
							ЗадачаОб.Назначена 		= Исполнитель.Ссылка;//ТекЗадача.assigned_to.name + ТекЗадача.assigned_to.id; 
							ЗадачаОб.Наименование 	= ТекЗадача.subject;
							ЗадачаОб.Описание 		= ТекЗадача.description;
							ЗадачаОб.Статус			= ПолучитьСтатусЗадачи(ТекЗадача.status.id);
							Попытка 
								Если ЗадачаОб.ОценкаВремени <> Число(ТекЗадача.estimated_hours) ИЛИ (ЗначениеЗаполнено(ЗадачаОб.ОценкаВремени) И ЗадачаОб.ИсторияОценок.Количество() = 0) Тогда
									НовОценка = ЗадачаОб.ИсторияОценок.Добавить();
									НовОценка.Дата = ЗадачаОб.ДатаОбновления;
									НовОценка.ОценкаВремени = ТекЗадача.estimated_hours;
								КонецЕсли;
							Исключение
							КонецПопытки;	
							ЗадачаОб.ОценкаВремени 	= ТекЗадача.estimated_hours;
							ЗадачаОб.СсылкаRedMine	= "http://rm.rarus.ru/redmine/issues/" + Строка(ТекЗадача.id);
							ЗадачаОб.Приоритет		= ТекЗадача.priority.name;
							Попытка
								Если ТекЗадача.Свойство("category") Тогда
									ЗадачаОб.Категория      = НайтиСоздатьКатегорию(ТекЗадача.category.name);
									ЗадачаОб.КатегорияСтар      = Перечисления.КатегорииЗадач[ТекЗадача.category.name];
							    КонецЕсли;
							Исключение
							КонецПопытки;
							Если Исполнитель.Разработчик И НЕ ЗначениеЗаполнено(ЗадачаОб.ДатаПередачиРазработчику) Тогда
								ЗадачаОб.ДатаПередачиРазработчику = ЗадачаОб.ДатаОбновления;	
							КонецЕсли;	
							ЗаполнитьПользовательскиеПоля(ЗадачаОб, ТекЗадача);
							//Отбор = Новый Структура;
							//Отбор.Вставить("Дата", ЗадачаОб.ДатаСоздания);
							//Строки = ЗадачаОб.ИсторияЗадачи.НайтиСтроки(Отбор);
							//Если Строки.Количество() = 0 Тогда
							//	НовИстория = ЗадачаОб.ИсторияЗадачи.Добавить();
							//	НовИстория.Дата = ЗадачаОб.ДатаСоздания;
							//	НовИстория.Изменил = ЗадачаОб.Автор;
							//	НовИстория.Назначена = ЗадачаОб.Назначена;
							//	НовИстория.Статус = ЗадачаОб.Статус;
							//КонецЕсли;	
							ЗаполнитьИсторию(ЗадачаОб, ТекЗадачаПолная);
						Иначе
							ПолныеПараметры = Новый Структура;		
							ПолныеПараметры.Вставить("offset",0); 	//смещение
							ПолныеПараметры.Вставить("limit",100);	//количество задач в выборке, по умолчанию 25, максимум 100
							ПолныеПараметры.Вставить("include","children, attachments, relations, changesets, journals, watchers");
							ТекЗадачаПолная = Задача(ТекЗадача.id, ПолныеПараметры);
						
							ЗадачаОб = Справочники.Задачи.СоздатьЭлемент();

							ЗадачаОб.ДатаВыполнения = ПреобразоватьДату(ТекЗадача.due_date);
							ЗадачаОб.ДатаОбновления = ПреобразоватьДату(ТекЗадача.updated_on, Истина);
							ЗадачаОб.ДатаСоздания 	= ПреобразоватьДату(ТекЗадача.created_on, Истина);
							ЗадачаОб.Код 			= ТекЗадача.id;
							ЗадачаОб.Назначена 		= Исполнитель.Ссылка;//ТекЗадача.assigned_to.name + ТекЗадача.assigned_to.id; 
							ЗадачаОб.Наименование 	= ТекЗадача.subject;
							ЗадачаОб.Описание 		= ТекЗадача.description;
							ЗадачаОб.Автор			= Автор.Ссылка;//ТекЗадача.author.name + ТекЗадача.assigned_to.id;
							ЗадачаОб.Владелец		= ВыборкаДетальныеЗаписи.Проекты;
							ЗадачаОб.ЭтапПроекта	= ВыборкаДетальныеЗаписи.ЭтапПроекта;
							ЗадачаОб.Статус			= ПолучитьСтатусЗадачи(ТекЗадача.status.id);
							Попытка 
								Если ЗадачаОб.ОценкаВремени <> Число(ТекЗадача.estimated_hours) ИЛИ (ЗначениеЗаполнено(ЗадачаОб.ОценкаВремени) И ЗадачаОб.ИсторияОценок.Количество() = 0) Тогда
									НовОценка = ЗадачаОб.ИсторияОценок.Добавить();
									НовОценка.Дата = ЗадачаОб.ДатаОбновления;
									НовОценка.ОценкаВремени = ТекЗадача.estimated_hours;
								КонецЕсли;
							Исключение
							КонецПопытки;	
							ЗадачаОб.ОценкаВремени 	= ТекЗадача.estimated_hours;
							ЗадачаОб.СсылкаRedMine			= "http://rm.rarus.ru/redmine/issues/" + Строка(ТекЗадача.id);
							ЗадачаОб.Приоритет		= ТекЗадача.priority.name;
							Попытка
								Если ТекЗадача.Свойство("category") Тогда
									ЗадачаОб.Категория      = НайтиСоздатьКатегорию(ТекЗадача.category.name);//Перечисления.КатегорииЗадач[ТекЗадача.category.name];
									ЗадачаОб.КатегорияСтар      = Перечисления.КатегорииЗадач[ТекЗадача.category.name];
							    КонецЕсли;
							Исключение
							КонецПопытки;
							Если Исполнитель.Разработчик И НЕ ЗначениеЗаполнено(ЗадачаОб.ДатаПередачиРазработчику) Тогда
								ЗадачаОб.ДатаПередачиРазработчику = ЗадачаОб.ДатаОбновления;	
							КонецЕсли;	
							ЗаполнитьПользовательскиеПоля(ЗадачаОб, ТекЗадача);
							Отбор = Новый Структура;
							Отбор.Вставить("Дата", ЗадачаОб.ДатаСоздания);
							Строки = ЗадачаОб.ИсторияЗадачи.НайтиСтроки(Отбор);
							Если Строки.Количество() = 0 Тогда
								НовИстория = ЗадачаОб.ИсторияЗадачи.Добавить();
								НовИстория.Дата = ЗадачаОб.ДатаСоздания;
								НовИстория.Изменил = ЗадачаОб.Автор;
								НовИстория.Назначена = ЗадачаОб.Назначена;
								НовИстория.Статус = ЗадачаОб.Статус;
							КонецЕсли;	
							ЗаполнитьИсторию(ЗадачаОб, ТекЗадачаПолная);
						КонецЕсли;
						Попытка
				        	ЗадачаОб.Записать();
						Исключение
						КонецПопытки;
					КонецЦикла
				ИначеЕсли ТипЗнч(ЗадачиПроекта.issue) = Тип("Структура") Тогда
					ТекЗадача = ЗадачиПроекта.issue;
					
					ПолныеПараметры = Новый Структура;		
					ПолныеПараметры.Вставить("offset",0); 	//смещение
					ПолныеПараметры.Вставить("limit",100);	//количество задач в выборке, по умолчанию 25, максимум 100
					ПолныеПараметры.Вставить("include","children, attachments, relations, changesets, journals, watchers");
					ТекЗадачаПолная = Задача(ТекЗадача.id, ПолныеПараметры);
							
					ЗапросЗадача = Новый Запрос;
					ЗапросЗадача.Текст = 
						"ВЫБРАТЬ
						|	Задачи.Ссылка
						|ИЗ
						|	Справочник.Задачи КАК Задачи
						|ГДЕ
						|	Задачи.Код = &Код";
					
					ЗапросЗадача.УстановитьПараметр("Код", ТекЗадача.id);
					
					РезультатЗапросаЗадача = ЗапросЗадача.Выполнить();
					
					ВыборкаДетальныеЗаписиЗадача = РезультатЗапросаЗадача.Выбрать();
					
					Если НЕ ТекЗадача.Свойство("assigned_to") Тогда
						Если ЗадачиПроекта.issue.Количество() < 100 Тогда
							КоличествоБольше100 = Ложь;
						Иначе
							Смещение = Смещение + 100;
						КонецЕсли;	
						Продолжить;
					КонецЕсли;
					Исполнитель = Справочники.ПользователиRedmine.НайтиПоРеквизиту("idИсполнитель", ТекЗадача.assigned_to.id);
					Если Исполнитель = Справочники.ПользователиRedmine.ПустаяСсылка() Тогда
						Исполнитель = Справочники.ПользователиRedmine.СоздатьЭлемент();	
						Исполнитель.idИсполнитель = ТекЗадача.assigned_to.id;
						Исполнитель.Наименование = ТекЗадача.assigned_to.name;
						Исполнитель.Записать();
					КонецЕсли;
					
					Автор = Справочники.ПользователиRedmine.НайтиПоРеквизиту("idИсполнитель", ТекЗадача.author.id);
					Если Автор = Справочники.ПользователиRedmine.ПустаяСсылка() Тогда
						Автор = Справочники.ПользователиRedmine.СоздатьЭлемент();	
						Автор.idИсполнитель = ТекЗадача.author.id;
						Автор.Наименование = ТекЗадача.author.name;
						Автор.Записать();
					КонецЕсли;
					
					Если ВыборкаДетальныеЗаписиЗадача.Следующий() Тогда
						ЗадачаОб = ВыборкаДетальныеЗаписиЗадача.Ссылка.ПолучитьОбъект();
						Если Ложь Тогда
							ЗадачаОб = Справочники.Задачи.СоздатьЭлемент();
						КонецЕсли;
						ЗадачаОб.ДатаВыполнения = ПреобразоватьДату(ТекЗадача.due_date);
						ЗадачаОб.ДатаОбновления = ПреобразоватьДату(ТекЗадача.updated_on, Истина);
						//ЗадачаОб.Код 			= ПреобразоватьДату(ТекЗадача.id);
						ЗадачаОб.Владелец		= ВыборкаДетальныеЗаписи.Проекты;
						ЗадачаОб.ЭтапПроекта	= ВыборкаДетальныеЗаписи.ЭтапПроекта;
						ЗадачаОб.Автор			= Автор.Ссылка;//ТекЗадача.author.name + ТекЗадача.assigned_to.id;
						ЗадачаОб.Назначена 		= Исполнитель.Ссылка;//ТекЗадача.assigned_to.name + ТекЗадача.assigned_to.id; 
						ЗадачаОб.Наименование 	= ТекЗадача.subject;
						ЗадачаОб.Описание 		= ТекЗадача.description;
						ЗадачаОб.Статус			= ПолучитьСтатусЗадачи(ТекЗадача.status.id);
						Попытка 
							Если ЗадачаОб.ОценкаВремени <> Число(ТекЗадача.estimated_hours) ИЛИ (ЗначениеЗаполнено(ЗадачаОб.ОценкаВремени) И ЗадачаОб.ИсторияОценок.Количество() = 0) Тогда
								НовОценка = ЗадачаОб.ИсторияОценок.Добавить();
								НовОценка.Дата = ЗадачаОб.ДатаОбновления;
								НовОценка.ОценкаВремени = ТекЗадача.estimated_hours;
							КонецЕсли;
						Исключение
						КонецПопытки;	
						ЗадачаОб.ОценкаВремени 	= ТекЗадача.estimated_hours;
						ЗадачаОб.СсылкаRedMine	= "http://rm.rarus.ru/redmine/issues/" + Строка(ТекЗадача.id);
						ЗадачаОб.Приоритет		= ТекЗадача.priority.name;
						Попытка
							Если ТекЗадача.Свойство("category") Тогда
								ЗадачаОб.Категория      = НайтиСоздатьКатегорию(ТекЗадача.category.name);//Перечисления.КатегорииЗадач[ТекЗадача.category.name];
								ЗадачаОб.КатегорияСтар      = Перечисления.КатегорииЗадач[ТекЗадача.category.name];
						    КонецЕсли;
						Исключение
						КонецПопытки;
						Если Исполнитель.Разработчик И НЕ ЗначениеЗаполнено(ЗадачаОб.ДатаПередачиРазработчику) Тогда
							ЗадачаОб.ДатаПередачиРазработчику = ЗадачаОб.ДатаОбновления;	
						КонецЕсли;	
						ЗаполнитьПользовательскиеПоля(ЗадачаОб, ТекЗадача);
						//Отбор = Новый Структура;
						//Отбор.Вставить("Дата", ЗадачаОб.ДатаСоздания);
						//Строки = ЗадачаОб.ИсторияЗадачи.НайтиСтроки(Отбор);
						//Если Строки.Количество() = 0 Тогда
						//	НовИстория = ЗадачаОб.ИсторияЗадачи.Добавить();
						//	НовИстория.Дата = ЗадачаОб.ДатаСоздания;
						//	НовИстория.Изменил = ЗадачаОб.Автор;
						//	НовИстория.Назначена = ЗадачаОб.Назначена;
						//	НовИстория.Статус = ЗадачаОб.Статус;
						//КонецЕсли;	
						ЗаполнитьИсторию(ЗадачаОб, ТекЗадачаПолная);
					Иначе
						ПолныеПараметры = Новый Структура;		
						ПолныеПараметры.Вставить("offset",0); 	//смещение
						ПолныеПараметры.Вставить("limit",100);	//количество задач в выборке, по умолчанию 25, максимум 100
						ПолныеПараметры.Вставить("include","children, attachments, relations, changesets, journals, watchers");
						ТекЗадачаПолная = Задача(ТекЗадача.id, ПолныеПараметры);
						
						ЗадачаОб = Справочники.Задачи.СоздатьЭлемент();

						ЗадачаОб.ДатаВыполнения = ПреобразоватьДату(ТекЗадача.due_date);
						ЗадачаОб.ДатаОбновления = ПреобразоватьДату(ТекЗадача.updated_on, Истина);
						ЗадачаОб.ДатаСоздания 	= ПреобразоватьДату(ТекЗадача.created_on, Истина);
						ЗадачаОб.Код 			= ТекЗадача.id;
						ЗадачаОб.Назначена 		= Исполнитель.Ссылка;//ТекЗадача.assigned_to.name + ТекЗадача.assigned_to.id; 
						ЗадачаОб.Наименование 	= ТекЗадача.subject;
						ЗадачаОб.Описание 		= ТекЗадача.description;
						ЗадачаОб.Автор			= Автор.Ссылка;//ТекЗадача.author.name + ТекЗадача.assigned_to.id;
						ЗадачаОб.Владелец		= ВыборкаДетальныеЗаписи.Проекты;
						ЗадачаОб.ЭтапПроекта	= ВыборкаДетальныеЗаписи.ЭтапПроекта;
						ЗадачаОб.Статус			= ПолучитьСтатусЗадачи(ТекЗадача.status.id);
						Попытка 
							Если ЗадачаОб.ОценкаВремени <> Число(ТекЗадача.estimated_hours) ИЛИ (ЗначениеЗаполнено(ЗадачаОб.ОценкаВремени) И ЗадачаОб.ИсторияОценок.Количество() = 0) Тогда
								НовОценка = ЗадачаОб.ИсторияОценок.Добавить();
								НовОценка.Дата = ЗадачаОб.ДатаОбновления;
								НовОценка.ОценкаВремени = ТекЗадача.estimated_hours;
							КонецЕсли;
						Исключение
						КонецПопытки;	
						ЗадачаОб.ОценкаВремени 	= ТекЗадача.estimated_hours;
						ЗадачаОб.СсылкаRedMine	= "http://rm.rarus.ru/redmine/issues/" + Строка(ТекЗадача.id);
						ЗадачаОб.Приоритет		= ТекЗадача.priority.name;
						Попытка
							Если ТекЗадача.Свойство("category") Тогда
								ЗадачаОб.Категория      = НайтиСоздатьКатегорию(ТекЗадача.category.name);//Перечисления.КатегорииЗадач[ТекЗадача.category.name];
								ЗадачаОб.КатегорияСтар      = Перечисления.КатегорииЗадач[ТекЗадача.category.name];
						    КонецЕсли;
						Исключение
						КонецПопытки;
						Если Исполнитель.Разработчик И НЕ ЗначениеЗаполнено(ЗадачаОб.ДатаПередачиРазработчику) Тогда
							ЗадачаОб.ДатаПередачиРазработчику = ЗадачаОб.ДатаОбновления;	
						КонецЕсли;	
						ЗаполнитьПользовательскиеПоля(ЗадачаОб, ТекЗадача);
						
						Отбор = Новый Структура;
						Отбор.Вставить("Дата", ЗадачаОб.ДатаСоздания);
						Строки = ЗадачаОб.ИсторияЗадачи.НайтиСтроки(Отбор);
						Если Строки.Количество() = 0 Тогда
							НовИстория = ЗадачаОб.ИсторияЗадачи.Добавить();
							НовИстория.Дата = ЗадачаОб.ДатаСоздания;
							НовИстория.Изменил = ЗадачаОб.Автор;
							НовИстория.Назначена = ЗадачаОб.Назначена;
							НовИстория.Статус = ЗадачаОб.Статус;
						КонецЕсли;	
						ЗаполнитьИсторию(ЗадачаОб, ТекЗадачаПолная);
						
					КонецЕсли;
					Попытка
			        	ЗадачаОб.Записать();
					Исключение
					КонецПопытки;
				КонецЕсли;	
				Если ЗадачиПроекта.issue.Количество() < 100 Тогда
					КоличествоБольше100 = Ложь;
				Иначе
					Смещение = Смещение + 100;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;
	
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ОбновитьСписокЗадачПоПроекту(ПолныйПеречень = Ложь, Проект) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПроектов.RedmineID КАК RedmineID,
		|	МАКСИМУМ(Задачи.ДатаОбновления) КАК ДатаОбновления,
		|	ЭтапыПроектов.Ссылка КАК ЭтапПроекта,
		|	ЭтапыПроектов.Владелец КАК Проект
		|ИЗ
		|	Справочник.ЭтапыПроектов КАК ЭтапыПроектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Задачи КАК Задачи
		|		ПО ЭтапыПроектов.Владелец = Задачи.Владелец
		|ГДЕ
		|	ЭтапыПроектов.Владелец = &Проект
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыПроектов.RedmineID,
		|	ЭтапыПроектов.Ссылка";
	Запрос.УстановитьПараметр("Проект", Проект);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для СтатусЗадачиН = 1 По 9 цикл
			смещение = 0;
			КоличествоБольше100 = Истина;
			
			Пока КоличествоБольше100 Цикл 
				параметрыВыборки = Новый Структура;		
		////		
				параметрыВыборки.Вставить("include", "attachments");
	/////
				параметрыВыборки.Вставить("offset",смещение); 	//смещение
				параметрыВыборки.Вставить("project_id", ВыборкаДетальныеЗаписи.RedmineID);//фильтр по проекту
				//параметрыВыборки.Вставить("include", "attachments");
				параметрыВыборки.Вставить("status_id", СтатусЗадачиН);
				параметрыВыборки.Вставить("limit",100);	//количество задач в выборке, по умолчанию 25, максимум 100
				Если Не ПолныйПеречень Тогда
					параметрыВыборки.Вставить("updated_on", Формат(ВыборкаДетальныеЗаписи.ДатаОбновления, "ДФ=yyyy-MM-dd"));
				КонецЕсли;	
				ЗадачиПроекта = СписокЗадач(параметрыВыборки);
				
				Если НЕ ЗадачиПроекта.Свойство("issue") Тогда
					КоличествоБольше100 = Ложь;
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(ЗадачиПроекта.issue) = Тип("Массив") Тогда
					Для ИндЗадачи = 0 По ЗадачиПроекта.issue.Количество()-1 Цикл
						ТекЗадача = ЗадачиПроекта.issue[ИндЗадачи];
						
						ПолныеПараметры = Новый Структура;		
						ПолныеПараметры.Вставить("offset",0); 	//смещение
						ПолныеПараметры.Вставить("limit",100);	//количество задач в выборке, по умолчанию 25, максимум 100
						ПолныеПараметры.Вставить("include","children, attachments, relations, changesets, journals, watchers");
						ТекЗадачаПолная = Задача(ТекЗадача.id, ПолныеПараметры);
						
						ЗапросЗадача = Новый Запрос;
						ЗапросЗадача.Текст = 
							"ВЫБРАТЬ
							|	Задачи.Ссылка
							|ИЗ
							|	Справочник.Задачи КАК Задачи
							|ГДЕ
							|	Задачи.Код = &Код";
						
						ЗапросЗадача.УстановитьПараметр("Код", ТекЗадача.id);
						
						РезультатЗапросаЗадача = ЗапросЗадача.Выполнить();
						
						ВыборкаДетальныеЗаписиЗадача = РезультатЗапросаЗадача.Выбрать();
						
						Если НЕ ТекЗадача.Свойство("assigned_to") Тогда
							Продолжить;
						КонецЕсли;
						Попытка
							Исполнитель = Справочники.ПользователиRedmine.НайтиПоРеквизиту("idИсполнитель", ТекЗадача.assigned_to.id);
							Если Исполнитель = Справочники.ПользователиRedmine.ПустаяСсылка() Тогда
								Исполнитель = Справочники.ПользователиRedmine.СоздатьЭлемент();	
								Исполнитель.idИсполнитель = ТекЗадача.assigned_to.id;
								Исполнитель.Наименование = ТекЗадача.assigned_to.name;
								Исполнитель.Записать();
							КонецЕсли;
						Исключение
							Сообщить(ТекЗадача.id);
						КонецПопытки;	
							
							
						Автор = Справочники.ПользователиRedmine.НайтиПоРеквизиту("idИсполнитель", ТекЗадача.author.id);
						Если Автор = Справочники.ПользователиRedmine.ПустаяСсылка() Тогда
							Автор = Справочники.ПользователиRedmine.СоздатьЭлемент();	
							Автор.idИсполнитель = ТекЗадача.author.id;
							Автор.Наименование = ТекЗадача.author.name;
							Автор.Записать();
						КонецЕсли;
						
						Если ВыборкаДетальныеЗаписиЗадача.Следующий() Тогда
							ЗадачаОб = ВыборкаДетальныеЗаписиЗадача.Ссылка.ПолучитьОбъект();
							Если Ложь Тогда
								ЗадачаОб = Справочники.Задачи.СоздатьЭлемент();
							КонецЕсли;
							ЗадачаОб.ДатаВыполнения = ПреобразоватьДату(ТекЗадача.due_date);
							ЗадачаОб.ДатаОбновления = ПреобразоватьДату(ТекЗадача.updated_on, Истина);
							//ЗадачаОб.Код 			= ПреобразоватьДату(ТекЗадача.id);
							ЗадачаОб.Владелец		= ВыборкаДетальныеЗаписи.Проект;
							ЗадачаОб.ЭтапПроекта	= ВыборкаДетальныеЗаписи.ЭтапПроекта;
							ЗадачаОб.Автор			= Автор.Ссылка;//ТекЗадача.author.name + ТекЗадача.assigned_to.id;
							ЗадачаОб.Назначена 		= Исполнитель.Ссылка;//ТекЗадача.assigned_to.name + ТекЗадача.assigned_to.id; 
							ЗадачаОб.Наименование 	= ТекЗадача.subject;
							ЗадачаОб.Описание 		= ТекЗадача.description;
							ЗадачаОб.Статус			= ПолучитьСтатусЗадачи(ТекЗадача.status.id);
							Попытка 
								Если ЗадачаОб.ОценкаВремени <> Число(ТекЗадача.estimated_hours) ИЛИ (ЗначениеЗаполнено(ЗадачаОб.ОценкаВремени) И ЗадачаОб.ИсторияОценок.Количество() = 0) Тогда
									НовОценка = ЗадачаОб.ИсторияОценок.Добавить();
									НовОценка.Дата = ЗадачаОб.ДатаОбновления;
									НовОценка.ОценкаВремени = ТекЗадача.estimated_hours;
								КонецЕсли;
							Исключение
							КонецПопытки;	
							ЗадачаОб.ОценкаВремени 	= ТекЗадача.estimated_hours;
							ЗадачаОб.СсылкаRedMine	= "http://rm.rarus.ru/redmine/issues/" + Строка(ТекЗадача.id);
							ЗадачаОб.Приоритет		= ТекЗадача.priority.name;
							Попытка
								Если ТекЗадача.Свойство("category") Тогда
									ЗадачаОб.Категория      = НайтиСоздатьКатегорию(ТекЗадача.category.name);
									ЗадачаОб.КатегорияСтар      = Перечисления.КатегорииЗадач[ТекЗадача.category.name];
							    КонецЕсли;
							Исключение
							КонецПопытки;
							Если Исполнитель.Разработчик И НЕ ЗначениеЗаполнено(ЗадачаОб.ДатаПередачиРазработчику) Тогда
								ЗадачаОб.ДатаПередачиРазработчику = ЗадачаОб.ДатаОбновления;	
							КонецЕсли;	
							ЗаполнитьПользовательскиеПоля(ЗадачаОб, ТекЗадача);
							//Отбор = Новый Структура;
							//Отбор.Вставить("Дата", ЗадачаОб.ДатаСоздания);
							//Строки = ЗадачаОб.ИсторияЗадачи.НайтиСтроки(Отбор);
							//Если Строки.Количество() = 0 Тогда
							//	НовИстория = ЗадачаОб.ИсторияЗадачи.Добавить();
							//	НовИстория.Дата = ЗадачаОб.ДатаСоздания;
							//	НовИстория.Изменил = ЗадачаОб.Автор;
							//	НовИстория.Назначена = ЗадачаОб.Назначена;
							//	НовИстория.Статус = ЗадачаОб.Статус;
							//КонецЕсли;	
							ЗаполнитьИсторию(ЗадачаОб, ТекЗадачаПолная);
						Иначе
							ПолныеПараметры = Новый Структура;		
							ПолныеПараметры.Вставить("offset",0); 	//смещение
							ПолныеПараметры.Вставить("limit",100);	//количество задач в выборке, по умолчанию 25, максимум 100
							ПолныеПараметры.Вставить("include","children, attachments, relations, changesets, journals, watchers");
							ТекЗадачаПолная = Задача(ТекЗадача.id, ПолныеПараметры);
						
							ЗадачаОб = Справочники.Задачи.СоздатьЭлемент();

							ЗадачаОб.ДатаВыполнения = ПреобразоватьДату(ТекЗадача.due_date);
							ЗадачаОб.ДатаОбновления = ПреобразоватьДату(ТекЗадача.updated_on, Истина);
							ЗадачаОб.ДатаСоздания 	= ПреобразоватьДату(ТекЗадача.created_on, Истина);
							ЗадачаОб.Код 			= ТекЗадача.id;
							ЗадачаОб.Назначена 		= Исполнитель.Ссылка;//ТекЗадача.assigned_to.name + ТекЗадача.assigned_to.id; 
							ЗадачаОб.Наименование 	= ТекЗадача.subject;
							ЗадачаОб.Описание 		= ТекЗадача.description;
							ЗадачаОб.Автор			= Автор.Ссылка;//ТекЗадача.author.name + ТекЗадача.assigned_to.id;
							ЗадачаОб.Владелец		= ВыборкаДетальныеЗаписи.Проект;
							ЗадачаОб.ЭтапПроекта	= ВыборкаДетальныеЗаписи.ЭтапПроекта;
							ЗадачаОб.Статус			= ПолучитьСтатусЗадачи(ТекЗадача.status.id);
							Попытка 
								Если ЗадачаОб.ОценкаВремени <> Число(ТекЗадача.estimated_hours) ИЛИ (ЗначениеЗаполнено(ЗадачаОб.ОценкаВремени) И ЗадачаОб.ИсторияОценок.Количество() = 0) Тогда
									НовОценка = ЗадачаОб.ИсторияОценок.Добавить();
									НовОценка.Дата = ЗадачаОб.ДатаОбновления;
									НовОценка.ОценкаВремени = ТекЗадача.estimated_hours;
								КонецЕсли;
							Исключение
							КонецПопытки;	
							ЗадачаОб.ОценкаВремени 	= ТекЗадача.estimated_hours;
							ЗадачаОб.СсылкаRedMine			= "http://rm.rarus.ru/redmine/issues/" + Строка(ТекЗадача.id);
							ЗадачаОб.Приоритет		= ТекЗадача.priority.name;
							Попытка
								Если ТекЗадача.Свойство("category") Тогда
									ЗадачаОб.Категория      = НайтиСоздатьКатегорию(ТекЗадача.category.name);//Перечисления.КатегорииЗадач[ТекЗадача.category.name];
									ЗадачаОб.КатегорияСтар      = Перечисления.КатегорииЗадач[ТекЗадача.category.name];
							    КонецЕсли;
							Исключение
							КонецПопытки;
							Если Исполнитель.Разработчик И НЕ ЗначениеЗаполнено(ЗадачаОб.ДатаПередачиРазработчику) Тогда
								ЗадачаОб.ДатаПередачиРазработчику = ЗадачаОб.ДатаОбновления;	
							КонецЕсли;	
							ЗаполнитьПользовательскиеПоля(ЗадачаОб, ТекЗадача);
							Отбор = Новый Структура;
							Отбор.Вставить("Дата", ЗадачаОб.ДатаСоздания);
							Строки = ЗадачаОб.ИсторияЗадачи.НайтиСтроки(Отбор);
							Если Строки.Количество() = 0 Тогда
								НовИстория = ЗадачаОб.ИсторияЗадачи.Добавить();
								НовИстория.Дата = ЗадачаОб.ДатаСоздания;
								НовИстория.Изменил = ЗадачаОб.Автор;
								НовИстория.Назначена = ЗадачаОб.Назначена;
								НовИстория.Статус = ЗадачаОб.Статус;
							КонецЕсли;	
							ЗаполнитьИсторию(ЗадачаОб, ТекЗадачаПолная);
						КонецЕсли;
				        ЗадачаОб.Записать();
					КонецЦикла
				ИначеЕсли ТипЗнч(ЗадачиПроекта.issue) = Тип("Структура") Тогда
					ТекЗадача = ЗадачиПроекта.issue;
					
					ПолныеПараметры = Новый Структура;		
					ПолныеПараметры.Вставить("offset",0); 	//смещение
					ПолныеПараметры.Вставить("limit",100);	//количество задач в выборке, по умолчанию 25, максимум 100
					ПолныеПараметры.Вставить("include","children, attachments, relations, changesets, journals, watchers");
					ТекЗадачаПолная = Задача(ТекЗадача.id, ПолныеПараметры);
							
					ЗапросЗадача = Новый Запрос;
					ЗапросЗадача.Текст = 
						"ВЫБРАТЬ
						|	Задачи.Ссылка
						|ИЗ
						|	Справочник.Задачи КАК Задачи
						|ГДЕ
						|	Задачи.Код = &Код";
					
					ЗапросЗадача.УстановитьПараметр("Код", ТекЗадача.id);
					
					РезультатЗапросаЗадача = ЗапросЗадача.Выполнить();
					
					ВыборкаДетальныеЗаписиЗадача = РезультатЗапросаЗадача.Выбрать();
					
					Если НЕ ТекЗадача.Свойство("assigned_to") Тогда
						Продолжить;
					КонецЕсли;
					Исполнитель = Справочники.ПользователиRedmine.НайтиПоРеквизиту("idИсполнитель", ТекЗадача.assigned_to.id);
					Если Исполнитель = Справочники.ПользователиRedmine.ПустаяСсылка() Тогда
						Исполнитель = Справочники.ПользователиRedmine.СоздатьЭлемент();	
						Исполнитель.idИсполнитель = ТекЗадача.assigned_to.id;
						Исполнитель.Наименование = ТекЗадача.assigned_to.name;
						Исполнитель.Записать();
					КонецЕсли;
					
					Автор = Справочники.ПользователиRedmine.НайтиПоРеквизиту("idИсполнитель", ТекЗадача.author.id);
					Если Автор = Справочники.ПользователиRedmine.ПустаяСсылка() Тогда
						Автор = Справочники.ПользователиRedmine.СоздатьЭлемент();	
						Автор.idИсполнитель = ТекЗадача.author.id;
						Автор.Наименование = ТекЗадача.author.name;
						Автор.Записать();
					КонецЕсли;
					
					Если ВыборкаДетальныеЗаписиЗадача.Следующий() Тогда
						ЗадачаОб = ВыборкаДетальныеЗаписиЗадача.Ссылка.ПолучитьОбъект();
						Если Ложь Тогда
							ЗадачаОб = Справочники.Задачи.СоздатьЭлемент();
						КонецЕсли;
						ЗадачаОб.ДатаВыполнения = ПреобразоватьДату(ТекЗадача.due_date);
						ЗадачаОб.ДатаОбновления = ПреобразоватьДату(ТекЗадача.updated_on, Истина);
						//ЗадачаОб.Код 			= ПреобразоватьДату(ТекЗадача.id);
						ЗадачаОб.Владелец		= ВыборкаДетальныеЗаписи.Проект;
						ЗадачаОб.ЭтапПроекта	= ВыборкаДетальныеЗаписи.ЭтапПроекта;
						ЗадачаОб.Автор			= Автор.Ссылка;//ТекЗадача.author.name + ТекЗадача.assigned_to.id;
						ЗадачаОб.Назначена 		= Исполнитель.Ссылка;//ТекЗадача.assigned_to.name + ТекЗадача.assigned_to.id; 
						ЗадачаОб.Наименование 	= ТекЗадача.subject;
						ЗадачаОб.Описание 		= ТекЗадача.description;
						ЗадачаОб.Статус			= ПолучитьСтатусЗадачи(ТекЗадача.status.id);
						Попытка 
							Если ЗадачаОб.ОценкаВремени <> Число(ТекЗадача.estimated_hours) ИЛИ (ЗначениеЗаполнено(ЗадачаОб.ОценкаВремени) И ЗадачаОб.ИсторияОценок.Количество() = 0) Тогда
								НовОценка = ЗадачаОб.ИсторияОценок.Добавить();
								НовОценка.Дата = ЗадачаОб.ДатаОбновления;
								НовОценка.ОценкаВремени = ТекЗадача.estimated_hours;
							КонецЕсли;
						Исключение
						КонецПопытки;	
						ЗадачаОб.ОценкаВремени 	= ТекЗадача.estimated_hours;
						ЗадачаОб.СсылкаRedMine	= "http://rm.rarus.ru/redmine/issues/" + Строка(ТекЗадача.id);
						ЗадачаОб.Приоритет		= ТекЗадача.priority.name;
						Попытка
							Если ТекЗадача.Свойство("category") Тогда
								ЗадачаОб.Категория      = НайтиСоздатьКатегорию(ТекЗадача.category.name);//Перечисления.КатегорииЗадач[ТекЗадача.category.name];
								ЗадачаОб.КатегорияСтар      = Перечисления.КатегорииЗадач[ТекЗадача.category.name];
						    КонецЕсли;
						Исключение
						КонецПопытки;
						Если Исполнитель.Разработчик И НЕ ЗначениеЗаполнено(ЗадачаОб.ДатаПередачиРазработчику) Тогда
							ЗадачаОб.ДатаПередачиРазработчику = ЗадачаОб.ДатаОбновления;	
						КонецЕсли;	
						ЗаполнитьПользовательскиеПоля(ЗадачаОб, ТекЗадача);
						//Отбор = Новый Структура;
						//Отбор.Вставить("Дата", ЗадачаОб.ДатаСоздания);
						//Строки = ЗадачаОб.ИсторияЗадачи.НайтиСтроки(Отбор);
						//Если Строки.Количество() = 0 Тогда
						//	НовИстория = ЗадачаОб.ИсторияЗадачи.Добавить();
						//	НовИстория.Дата = ЗадачаОб.ДатаСоздания;
						//	НовИстория.Изменил = ЗадачаОб.Автор;
						//	НовИстория.Назначена = ЗадачаОб.Назначена;
						//	НовИстория.Статус = ЗадачаОб.Статус;
						//КонецЕсли;	
						ЗаполнитьИсторию(ЗадачаОб, ТекЗадачаПолная);
					Иначе
						ПолныеПараметры = Новый Структура;		
						ПолныеПараметры.Вставить("offset",0); 	//смещение
						ПолныеПараметры.Вставить("limit",100);	//количество задач в выборке, по умолчанию 25, максимум 100
						ПолныеПараметры.Вставить("include","children, attachments, relations, changesets, journals, watchers");
						ТекЗадачаПолная = Задача(ТекЗадача.id, ПолныеПараметры);
						
						ЗадачаОб = Справочники.Задачи.СоздатьЭлемент();

						ЗадачаОб.ДатаВыполнения = ПреобразоватьДату(ТекЗадача.due_date);
						ЗадачаОб.ДатаОбновления = ПреобразоватьДату(ТекЗадача.updated_on, Истина);
						ЗадачаОб.ДатаСоздания 	= ПреобразоватьДату(ТекЗадача.created_on, Истина);
						ЗадачаОб.Код 			= ТекЗадача.id;
						ЗадачаОб.Назначена 		= Исполнитель.Ссылка;//ТекЗадача.assigned_to.name + ТекЗадача.assigned_to.id; 
						ЗадачаОб.Наименование 	= ТекЗадача.subject;
						ЗадачаОб.Описание 		= ТекЗадача.description;
						ЗадачаОб.Автор			= Автор.Ссылка;//ТекЗадача.author.name + ТекЗадача.assigned_to.id;
						ЗадачаОб.Владелец		= ВыборкаДетальныеЗаписи.Проект;
						ЗадачаОб.ЭтапПроекта	= ВыборкаДетальныеЗаписи.ЭтапПроекта;
						ЗадачаОб.Статус			= ПолучитьСтатусЗадачи(ТекЗадача.status.id);
						Попытка 
							Если ЗадачаОб.ОценкаВремени <> Число(ТекЗадача.estimated_hours) ИЛИ (ЗначениеЗаполнено(ЗадачаОб.ОценкаВремени) И ЗадачаОб.ИсторияОценок.Количество() = 0) Тогда
								НовОценка = ЗадачаОб.ИсторияОценок.Добавить();
								НовОценка.Дата = ЗадачаОб.ДатаОбновления;
								НовОценка.ОценкаВремени = ТекЗадача.estimated_hours;
							КонецЕсли;
						Исключение
						КонецПопытки;	
						ЗадачаОб.ОценкаВремени 	= ТекЗадача.estimated_hours;
						ЗадачаОб.СсылкаRedMine	= "http://rm.rarus.ru/redmine/issues/" + Строка(ТекЗадача.id);
						ЗадачаОб.Приоритет		= ТекЗадача.priority.name;
						Попытка
							Если ТекЗадача.Свойство("category") Тогда
								ЗадачаОб.Категория      = НайтиСоздатьКатегорию(ТекЗадача.category.name);//Перечисления.КатегорииЗадач[ТекЗадача.category.name];
								ЗадачаОб.КатегорияСтар      = Перечисления.КатегорииЗадач[ТекЗадача.category.name];
						    КонецЕсли;
						Исключение
						КонецПопытки;
						Если Исполнитель.Разработчик И НЕ ЗначениеЗаполнено(ЗадачаОб.ДатаПередачиРазработчику) Тогда
							ЗадачаОб.ДатаПередачиРазработчику = ЗадачаОб.ДатаОбновления;	
						КонецЕсли;	
						ЗаполнитьПользовательскиеПоля(ЗадачаОб, ТекЗадача);
						
						Отбор = Новый Структура;
						Отбор.Вставить("Дата", ЗадачаОб.ДатаСоздания);
						Строки = ЗадачаОб.ИсторияЗадачи.НайтиСтроки(Отбор);
						Если Строки.Количество() = 0 Тогда
							НовИстория = ЗадачаОб.ИсторияЗадачи.Добавить();
							НовИстория.Дата = ЗадачаОб.ДатаСоздания;
							НовИстория.Изменил = ЗадачаОб.Автор;
							НовИстория.Назначена = ЗадачаОб.Назначена;
							НовИстория.Статус = ЗадачаОб.Статус;
						КонецЕсли;	
						ЗаполнитьИсторию(ЗадачаОб, ТекЗадачаПолная);
						
					КонецЕсли;
			        ЗадачаОб.Записать();
				КонецЕсли;
				Если ЗадачиПроекта.issue.Количество() < 100 Тогда
					КоличествоБольше100 = Ложь;
				Иначе
					Смещение = Смещение + 100;
				КонецЕсли;	

			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;
	
	
	Возврат Истина;
КонецФункции


Функция НайтиСоздатьКатегорию(Категория)
	НайденнаяКатегория = Справочники.КатегорииЗадач.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КатегорииЗадач.Ссылка
		|ИЗ
		|	Справочник.КатегорииЗадач КАК КатегорииЗадач
		|ГДЕ
		|	КатегорииЗадач.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", СокрЛП(Категория));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НайденнаяКатегория = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		НовКатегория = Справочники.КатегорииЗадач.СоздатьЭлемент();
		НовКатегория.Наименование = СокрЛП(Категория);
		Попытка
			НовКатегория.Записать();
			НайденнаяКатегория = НовКатегория.Ссылка;
		Исключение
		КонецПопытки;	
	КонецЕсли;;
	
	Возврат НайденнаяКатегория;	
КонецФункции

Процедура ЗаполнитьПользовательскиеПоля(ЗадачаОб, ТекЗадача);
	Если НЕ ТекЗадача.Свойство("custom_fields") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекЗадача.custom_fields.custom_field) = Тип("Массив") Тогда
		Для Каждого НастрПоле Из ТекЗадача.custom_fields.custom_field Цикл
			ИмяПоля = НастрПоле.name;
			ИмяПоляДля1С = СтрЗаменить(ИмяПоля, " ", "");
			
			Если Метаданные.Справочники.Задачи.реквизиты.Найти(ИмяПоляДля1С) <> Неопределено Тогда
				Если Не ТипЗнч(НастрПоле.value) = Тип("Структура") Тогда
					ЗадачаОб[ИмяПоляДля1С] = НастрПоле.value;	
				Иначе
					ЗадачаОб[ИмяПоляДля1С] = "";	
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
	Иначе
		ИмяПоля = ТекЗадача.custom_fields.custom_field.name;
		ИмяПоляДля1С = СтрЗаменить(ИмяПоля, " ", "");
		НастрПоле = ТекЗадача.custom_fields.custom_field;
		Если Метаданные.Справочники.Задачи.реквизиты.Найти(ИмяПоляДля1С) <> Неопределено Тогда
			Если Не ТипЗнч(НастрПоле.value) = Тип("Структура") Тогда
				ЗадачаОб[ИмяПоляДля1С] = НастрПоле.value;	
			Иначе
				ЗадачаОб[ИмяПоляДля1С] = Неопределено;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЗаполнитьИсторию(ЗадачаОб, ТекЗадачаПолная);
	Если Ложь Тогда
		ЗадачаОб = Справочники.Задачи.СоздатьЭлемент();	
	КонецЕсли;
	
	Если НЕ ТекЗадачаПолная.journals.Свойство("journal") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекЗадачаПолная.journals.journal) = Тип("Массив") Тогда
		Для Каждого СтрЖурнал Из ТекЗадачаПолная.journals.journal Цикл
			ДатаОбновления = ПреобразоватьДату(СтрЖурнал.created_on, Истина);	
			Отбор = Новый Структура;
			Отбор.Вставить("Дата", ДатаОбновления);
			Строки = ЗадачаОб.ИсторияЗадачи.НайтиСтроки(Отбор);
			Если Строки.Количество() = 0 Тогда
				НовИстория 				= ЗадачаОб.ИсторияЗадачи.Добавить();
				НовИстория.Дата 		= ДатаОбновления;
				Если СтрЖурнал.details.Свойство("detail") Тогда
					Статус = Неопределено;
					Назначена = Неопределено;
					ОценкаВремени = Неопределено;
					Если ТипЗнч(СтрЖурнал.details.detail) = Тип("Массив") Тогда
						Для Каждого СтрДет Из СтрЖурнал.details.detail Цикл
							Если СтрДет.name = "status_id" Тогда
								Статус = ПолучитьСтатусЗадачи(СтрДет.new_value);	
							КонецЕсли;	
							Если СтрДет.name = "assigned_to_id" Тогда
								Попытка
									Назначена =Справочники.ПользователиRedmine.НайтиПоРеквизиту("idИсполнитель",  СтрДет.new_value);	
								Исключение
								КонецПопытки;	
							КонецЕсли;	
							Если СтрДет.name = "estimated_hours" Тогда
								ОценкаВремени = СтрДет.new_value;	
							КонецЕсли;	

							
						КонецЦикла;	
					ИначеЕсли ТипЗнч(СтрЖурнал.details.detail) = Тип("Структура") Тогда	
						СтрДет = СтрЖурнал.details.detail;
						Если СтрДет.name = "status_id" Тогда
							Статус = ПолучитьСтатусЗадачи(СтрДет.new_value);	
						КонецЕсли;	
						Если СтрДет.name = "assigned_to_id" Тогда
							Попытка
								Назначена =Справочники.ПользователиRedmine.НайтиПоРеквизиту("idИсполнитель",  СтрДет.new_value);	
							Исключение
							КонецПопытки;	
						КонецЕсли;	
						Если СтрДет.name = "estimated_hours" Тогда
							ОценкаВремени = СтрДет.new_value;	
						КонецЕсли;	
					КонецЕсли;	
					НовИстория.Статус 		= Статус;
					НовИстория.Назначена 	= Назначена;
					НовИстория.ОценкаВремени = ОценкаВремени;
				КонецЕсли;
				НовИстория.Изменил      = Справочники.ПользователиRedmine.НайтиПоРеквизиту("idИсполнитель", СтрЖурнал.user.id);
				Если ТипЗнч(СтрЖурнал.notes) = Тип("Строка") Тогда
					НовИстория.ОписаниеИзменений = СтрЖурнал.notes;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ТекЗадачаПолная.journals.journal) = Тип("Структура") Тогда
		СтрЖурнал = ТекЗадачаПолная.journals.journal;
		ДатаОбновления = ПреобразоватьДату(СтрЖурнал.created_on, Истина);	
		Отбор = Новый Структура;
		Отбор.Вставить("Дата", ДатаОбновления);
		Строки = ЗадачаОб.ИсторияЗадачи.НайтиСтроки(Отбор);
		Если Строки.Количество() = 0 Тогда
			НовИстория 				= ЗадачаОб.ИсторияЗадачи.Добавить();
			НовИстория.Дата 		= ДатаОбновления;
			Если СтрЖурнал.details.Свойство("detail") Тогда
				Статус = Неопределено;
				Назначена = Неопределено;
				ОценкаВремени = Неопределено;
				Если ТипЗнч(СтрЖурнал.details.detail) = Тип("Массив") Тогда
					Для Каждого СтрДет Из СтрЖурнал.details.detail Цикл
						Если СтрДет.name = "status_id" Тогда
							Статус = ПолучитьСтатусЗадачи(СтрДет.new_value);	
						КонецЕсли;	
						Если СтрДет.name = "assigned_to_id" Тогда
							Попытка
								Назначена =Справочники.ПользователиRedmine.НайтиПоРеквизиту("idИсполнитель",  СтрДет.new_value);	
							Исключение
							КонецПопытки;	
						КонецЕсли;	
						Если СтрДет.name = "estimated_hours" Тогда
							ОценкаВремени = СтрДет.new_value;	
						КонецЕсли;	
					КонецЦикла;	
				ИначеЕсли ТипЗнч(СтрЖурнал.details.detail) = Тип("Структура") Тогда	
					СтрДет = СтрЖурнал.details.detail;
					Если СтрДет.name = "status_id" Тогда
						Статус = ПолучитьСтатусЗадачи(СтрДет.new_value);	
					КонецЕсли;	
					Если СтрДет.name = "assigned_to_id" Тогда
						Попытка
							Назначена =Справочники.ПользователиRedmine.НайтиПоРеквизиту("idИсполнитель",  СтрДет.new_value);	
						Исключение
						КонецПопытки;	
					КонецЕсли;	
					Если СтрДет.name = "estimated_hours" Тогда
						ОценкаВремени = СтрДет.new_value;	
					КонецЕсли;	
				КонецЕсли;	
				НовИстория.Статус 		= Статус;
				НовИстория.Назначена 	= Назначена;
				НовИстория.ОценкаВремени 	= ОценкаВремени;
			КонецЕсли;
			НовИстория.Изменил      = Справочники.ПользователиRedmine.НайтиПоРеквизиту("idИсполнитель", СтрЖурнал.user.id);
			Если ТипЗнч(СтрЖурнал.notes) = Тип("Строка") Тогда
				НовИстория.ОписаниеИзменений = СтрЖурнал.notes;
			КонецЕсли;	
			НовИстория.Изменил      = Справочники.ПользователиRedmine.НайтиПоРеквизиту("idИсполнитель", СтрЖурнал.user.id);
			Если ТипЗнч(СтрЖурнал.notes) = Тип("Строка") Тогда
				НовИстория.ОписаниеИзменений = СтрЖурнал.notes;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	ЗадачаОб.ИсторияЗадачи.Сортировать("Дата");	
	//ПосчитаемПоказателиПоИстории
	Отбор = Новый Структура;
	Отбор.Вставить("Статус", Перечисления.СтатусыЗадач.Решена);
	Строки = ЗадачаОб.ИсторияЗадачи.НайтиСтроки(Отбор);
	ЗадачаОб.СтатусРешена = Строки.Количество(); 
	
	Отбор = Новый Структура;
	Отбор.Вставить("Статус", Перечисления.СтатусыЗадач.ТребуетсяИсправление);
	Строки = ЗадачаОб.ИсторияЗадачи.НайтиСтроки(Отбор);
	ЗадачаОб.СтатусТребуетсяИсправление = Строки.Количество(); 
	
	Отбор = Новый Структура;
	Отбор.Вставить("Статус", Перечисления.СтатусыЗадач.ТребуетсяОбратнаяСвязь);
	Строки = ЗадачаОб.ИсторияЗадачи.НайтиСтроки(Отбор);
	ЗадачаОб.СтатусТребуетсяОбратнаяСвязь = Строки.Количество(); 
	
	ДоРешена = 0;
	ДоПровереноИЗакрыто = 0;
	ЗадачаРешена = Ложь;
	ЗадачаПроверена = Ложь;
	Для Каждого СтрИст Из ЗадачаОб.ИсторияЗадачи Цикл
		Если СтрИст.Статус = Перечисления.СтатусыЗадач.Решена И НЕ ЗадачаРешена Тогда
			ЗадачаОб.ДоСтатусаРешена = ДоРешена;
			ЗадачаРешена = Истина;
		ИначеЕсли СтрИст.Статус = Перечисления.СтатусыЗадач.ПровереноИЗакрыто И НЕ ЗадачаПроверена Тогда
			ЗадачаОб.ДоСтатусаПровереноИЗакрыто = ДоПровереноИЗакрыто;
			ЗадачаПроверена = Истина;
		Иначе
			Если НЕ ЗадачаРешена Тогда 
				ДоРешена = ДоРешена + 1;
			ИначеЕсли НЕ ЗадачаПроверена Тогда
				ДоПровереноИЗакрыто = ДоПровереноИЗакрыто + 1;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Если Не ЗадачаРешена Тогда
		ЗадачаОб.ДоСтатусаРешена = Строка(ДоРешена) + "+";
	КонецЕсли;	
	
	Если Не ЗадачаПроверена Тогда
		ЗадачаОб.ДоСтатусаПровереноИЗакрыто = Строка(ДоПровереноИЗакрыто) + "+";
	КонецЕсли;	
	
	Копия = ЗадачаОб.ИсторияЗадачи.Выгрузить(, "Назначена");
	Копия.Свернуть("Назначена");
	
	КоличесвтоРазработчиков = 0;
	Для Каждого СтрИс Из Копия Цикл
		Если СтрИс.Назначена.Разработчик Тогда
			КоличесвтоРазработчиков = КоличесвтоРазработчиков + 1;	
		КонецЕсли;	
	КонецЦикла;	
	
	ЗадачаОб.КоличествоРазработчиков = КоличесвтоРазработчиков;
КонецПроцедуры	

Функция ПолучитьСтатусЗадачи(ИД)
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить("1", Перечисления.СтатусыЗадач.Новая);
	СоответствиеСтатусов.Вставить("2", Перечисления.СтатусыЗадач.ВРаботе);
	СоответствиеСтатусов.Вставить("3", Перечисления.СтатусыЗадач.Решена);
	СоответствиеСтатусов.Вставить("4", Перечисления.СтатусыЗадач.ТребуетсяОбратнаяСвязь);
	СоответствиеСтатусов.Вставить("5", Перечисления.СтатусыЗадач.ПровереноИЗакрыто);
	СоответствиеСтатусов.Вставить("6", Перечисления.СтатусыЗадач.Отклонена);
	СоответствиеСтатусов.Вставить("7", Перечисления.СтатусыЗадач.Закрыто);
	СоответствиеСтатусов.Вставить("8", Перечисления.СтатусыЗадач.ТребуетсяИсправление);
	СоответствиеСтатусов.Вставить("9", Перечисления.СтатусыЗадач.ВОбновление);
	Возврат СоответствиеСтатусов.Получить(ИД);
КонецФункции	

Функция ПреобразоватьДату(ДатаВходящая, Время = Ложь)
	
	Если ТипЗнч(ДатаВходящая) = Тип("Строка") Тогда 
		Если НЕ Время Тогда
			Возврат Дата(СтрЗаменить(Лев(ДатаВходящая, 10), "-", ""));
		Иначе
			Возврат Дата(СтрЗаменить(Лев(ДатаВходящая, 10), "-", "") + СтрЗаменить(Сред(ДатаВходящая, 12,8 ), ":", "")) + 3600*6;
		КонецЕсли;	
	Иначе
		Возврат Дата(1,1,1);
	КонецЕсли;	
КонецФункции	

//
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//
////Описание: Возвращает список проектов
////Параметры:  Параметры - Структура - фильтры списка
////Возвращаемое значение: Структура - список проектов с указанными фильтрами
Функция СписокПроектов(Параметры = Неопределено) Экспорт
	ВыбратьВсе = Ложь;
	Если Параметры = Неопределено Тогда
		ВыбратьВсе = Истина;
		Параметры=ПараметрыСпискаПроектов();	
	КонецЕсли;
	
	Смещение = Параметры.offset;
	РазмерПорции = Параметры.limit;
	
	ТекстОтвета =  GetЗапрос("projects",Параметры);
	Результат = СтруктураИзФайлаXML(ТекстОтвета,"projects");	
			
	//если выбрать нужно все задачи, читаем порциями и добавляем в массив
	Если ВыбратьВсе Тогда
		ВсегоЭлементов = 0;
		Если Результат.Свойство("total_count",ВсегоЭлементов) Тогда
			КолОбращений = ВсегоЭлементов/РазмерПорции-1;
			КолОбращений = ?(Цел(КолОбращений)<КолОбращений,Цел(КолОбращений)+1,КолОбращений);
			Для н = 1 по КолОбращений Цикл
				Параметры.offset = н*РазмерПорции;
				ТекстОтвета =  GetЗапрос("projects",Параметры);
				ПромежуточныйРезультат = СтруктураИзФайлаXML(ТекстОтвета,"projects");	
				//если нет подходящих под фильтр задач, этого свойсва в ответе не будет
				Если НЕ ПромежуточныйРезультат.Свойство("project") Тогда
					Продолжить;	
				КонецЕсли;
				
				//скопируем массив задач из промежуточного результата в конечный
				//если задача 1 то она возвращается структурой
				Если ТипЗнч(ПромежуточныйРезультат.project)=Тип("Структура") Тогда
					Результат.project.Добавить(ПромежуточныйРезультат.project);
				Иначе 
					Для каждого текЗадача из ПромежуточныйРезультат.project Цикл
						Результат.project.Добавить(текЗадача);		
					КонецЦикла;
				КонецЕсли;
				//в результирующей структуре подправим свойство лимит
				Результат.limit = Число(Результат.limit)+РазмерПорции;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//ВЕРСИИ


//Описание: Возвращает структуру параметров для спика затрат времени
//Возвращаемое значение: Структура - структура с возможными ключами и пустыми занчениями
Функция ПараметрыСпискаВерсий() Экспорт
	Результат = Новый Структура;		
	Результат.Вставить("offset",0); //смещение
	Результат.Вставить("limit",10);//количество задач в выборке, по умолчанию 25, максимум 100
	Возврат Результат;	
КонецФункции


//Описание: Возвращает список затрат времени
//Параметры: Параметры - Структура - набор фильтров
//Возвращаемое значение: Структура - Список затрат времени
Функция ПолучитьВерсии(Параметры = Неопределено) Экспорт
	ВыбратьВсе = Ложь;
	//Если Параметры = Неопределено Тогда
	//	ВыбратьВсе = Истина;
	//	Параметры=ПараметрыСпискаВерсий();	
	//КонецЕсли;
	//
	//Смещение = Параметры.offset;
	//РазмерПорции = Параметры.limit;
	
	ТекстОтвета =  GetЗапрос("Versions",Параметры);
	Результат = СтруктураИзФайлаXML(ТекстОтвета,"Versions");	
	
	////если выбрать нужно все задачи, читаем порциями и добавляем в массив
	//Если ВыбратьВсе Тогда
	//	ВсегоЭлементов = 0;
	//	Если Результат.Свойство("total_count",ВсегоЭлементов) Тогда
	//		КолОбращений = ВсегоЭлементов/РазмерПорции-1;
	//		КолОбращений = ?(Цел(КолОбращений)<КолОбращений,Цел(КолОбращений)+1,КолОбращений);
	//		Для н = 1 по КолОбращений Цикл
	//			Параметры.offset = н*РазмерПорции;
	//			ТекстОтвета =  GetЗапрос("time_entries",Параметры);
	//			ПромежуточныйРезультат = СтруктураИзФайлаXML(ТекстОтвета,"time_entries");	
	//			//если нет подходящих под фильтр задач, этого свойсва в ответе не будет
	//			Если НЕ ПромежуточныйРезультат.Свойство("time_entry") Тогда
	//				Продолжить;	
	//			КонецЕсли;
	//			
	//			//скопируем массив задач из промежуточного результата в конечный
	//			//если задача 1 то она возвращается структурой
	//			Если ТипЗнч(ПромежуточныйРезультат.time_entry)=Тип("Структура") Тогда
	//				Результат.time_entry.Добавить(ПромежуточныйРезультат.time_entry);
	//			Иначе 
	//				Для каждого текЭлемент из ПромежуточныйРезультат.time_entry Цикл
	//					Результат.time_entry.Добавить(текЭлемент);		
	//				КонецЦикла;
	//			КонецЕсли;
	//			//в результирующей структуре подправим свойство лимит
	//			Результат.limit = Число(Результат.limit)+РазмерПорции;
	//		КонецЦикла;
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции




//Описание:Опредаторы содежращие ">", "<" or "=" должны быть переведены в hex-кодировку, чтобы они 
//корректно работали. используется для фильтра списка задач
//Параметры:  УсловиеФильтра - Строка - со знаком условия или словом между
//            ЗначениеФильтра - Строка - со значеним
//Возвращаемое значение:Строка - которая идет в параметр http запроса
//Функция СтрокаФильтра(УсловиеФильтра,ЗначениеФильтра)
//	Если УсловиеФильтра = "=" Тогда
//		Возврат ЗначениеФильтра
//	ИначеЕсли УсловиеФильтра = ">=" Тогда
//		Возврат "%3E%3D"+ЗначениеФильтра;
//	ИначеЕсли УсловиеФильтра = "<=" Тогда
//		Возврат "%3C%3D"+ЗначениеФильтра;
//	ИначеЕсли УсловиеФильтра = "<>" Тогда
//		Возврат "%3C%3E"+ЗначениеФильтра;
//	//для дат можно задавать интервал "><ДатаНач|ДатаКон"
//	ИначеЕсли УсловиеФильтра = "Между" Тогда		
//		Возврат "%3E%3C"+ЗначениеФильтра;
//	КонецЕсли;
//	
//КонецФункции

//Описание: Удаляет из структуры те ключи у которых не заполненно значение
//Параметры: ОбрабатываемаяСтруктура - Структура -обрабатываема структура
//Возвращаемое значение: Структура структура без ключей с пустыми значениями
//Процедура УдалитьПустыеПоля(ОбрабатываемаяСтруктура)
//	УдаляемыеКлючи = Новый Массив;
//	Для каждого текСтрока из ОбрабатываемаяСтруктура Цикл
//		Если текСтрока.Значение = "" Или текСтрока.Значение = Неопределено ИЛИ (НЕ ЗначениеЗаполнено(текСтрока.Значение))Тогда
//			УдаляемыеКлючи.Добавить(текСтрока.Ключ);
//		КонецЕсли;
//	КонецЦикла;
//	Для каждого текЭлемент из УдаляемыеКлючи цикл
//		ОбрабатываемаяСтруктура.Удалить(текЭлемент);
//	КонецЦикла;
//	
//КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//
// HTTP
//


//Описание: Отправляет Pos запрос по указанному пути, из структуры параметров формирует
// строку запроса для http сервера. Может отправлять файл. возвращает текст файла ответа
//Параметры: 
//  Путь      - Строка    - путь ресурса к которуму идет запрос.
//  Параметры - Структура - содержит пары параметр и значение для запроса
//  ИмяФайла  - Строка -Полный путь к отправляемому файлу (не обязательный)
//  ДопЗаголовоки - соответствие с дополнительными заголовками, нужно для операций с загрузкой файлов
//Возвращаемое значение:
//  Строка - Текст ответа сервера
//Функция PostЗапрос(Путь,Параметры ,ИмяФайла=Неопределено, ДопЗаголовоки = Неопределено)
//	СтрокаПараметров = "";
//	ЭтоПервый = Истина;
//	
//	Для каждого текПараметр из Параметры Цикл
//		//не заполненные параметры игнорируются
//		Если текПараметр.Значение="" Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		СтрокаПараметров=СтрокаПараметров+?(ЭтоПервый,"","&")+текПараметр.Ключ+"="+текПараметр.Значение;
//		ЭтоПервый=Ложь;
//	КонецЦикла;
//	СтрокаПараметров = ?(СтрокаПараметров="","","?"+СтрокаПараметров);
//	РезультатИмяФайла = ПолучитьИмяВременногоФайла();//ПолучитьИмяТестовогоФайла();//
//	Соединение = Новый HTTPСоединение(РедмайнСервер,РедмайнПорт , , , , Ложь);//Соединяем
//	ТекстЗапроса = РедмайнПуть+"/"+Путь+".xml"+СтрокаПараметров;
//	//ЗАПРОС
//	ЗапросКСайту = Новый HTTPЗапрос(ТекстЗапроса,ЗаголовокЗапроса(ДопЗаголовоки));
//	
//	Если ИмяФайла <> Неопределено Тогда
//		ЗапросКСайту.УстановитьИмяФайлаТела(ИмяФайла);
//	КонецЕсли;
//	Соединение.ОтправитьДляОбработки(ЗапросКСайту, РезультатИмяФайла);
//	Текст = Новый ЧтениеТекста(РезультатИмяФайла,КодировкаТекста.UTF8);
//	Возврат Текст.Прочитать();	
//КонецФункции

//Описание: Отправляет Put запрос по указанному пути, из структуры параметров формирует
// строку запроса для http сервера, возвращает текст файла ответа
//Параметры: 
//  Путь    - Строка    - путь ресурса к которуму идет запрос.
//  ИмяФайа - Строка - содержит полный путь к отправляемому файлу
//Возвращаемое значение:
//  Строка - Текст ответа сервера
//Функция PutЗапрос(Путь, ИмяФайла)
//	
//	РезультатИмяФайла = ПолучитьИмяВременногоФайла();//ПолучитьИмяТестовогоФайла();//
//	Соединение = Новый HTTPСоединение(РедмайнСервер,РедмайнПорт , , , , Ложь);//Соединяем
//	ТекстЗапроса = РедмайнПуть+"/"+Путь+".xml";
//	//ЗАПРОС
//	ЗапросКСайту = Новый HTTPЗапрос(ТекстЗапроса,ЗаголовокЗапроса());
//	ЗапросКСайту.УстановитьИмяФайлаТела(ИмяФайла);
//	
//	Соединение.Записать(ЗапросКСайту, РезультатИмяФайла);
//	Текст = Новый ЧтениеТекста(РезультатИмяФайла,КодировкаТекста.UTF8);
//	Возврат Текст.Прочитать();	
//	
//КонецФункции

//Описание: Отправляет Delete запрос по указанному пути
//Параметры: 
// Путь - Строка - путь на сервере 
//Процедура DeleteЗапрос(Путь)
//	Соединение = Новый HTTPСоединение(РедмайнСервер,РедмайнПорт , , , , Ложь);//Соединяем
//	ТекстЗапроса = РедмайнПуть+"/"+Путь+".xml";
//	//ЗАПРОС
//	ЗапросКСайту = Новый HTTPЗапрос(ТекстЗапроса,ЗаголовокЗапроса());
//	Соединение.Удалить(ЗапросКСайту);
//КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//
// ФАЙЛЫ
//

//Описание: Загружает файл на сервер и возвращает его токен
//Параметры: 
//  ИмяФайла - Строка - Полный путь на клиенте к загружаемому файлу
//Возвращаемое значение:
//  Структура - Содержит токен загруженного файла
//Функция ТокенЗагруженногоФайла(ИмяФайла) Экспорт
//	ДопЗаголовок = Новый Соответствие;
//	ДопЗаголовок.Вставить("Content-Type","application/octet-stream");
//	ТекстОтвета = PostЗапрос("uploads",Новый Структура,ИмяФайла,ДопЗаголовок);
//	Результат = СтруктураИзФайлаXML(ТекстОтвета,"upload");;
//	Возврат Результат;
//КонецФункции

//Описание: По идентификатору файла, возвращает описание в структуре
//Параметры: Идентификатор - Строка - Номер файла в таблице attachments 
//Возвращаемое значение:
//  Структура - описание файла
//Функция ПрикрепленныйФайл(Идентификатор) Экспорт
//	
//	ТекстОтвета = GetЗапрос("attachments/"+Идентификатор,Новый Структура);	
//	Результат =  СтруктураИзФайлаXML(ТекстОтвета,"attachment");
//	Возврат Результат;
//	
//КонецФункции

///////////////////////////////////////////////////////////////////////////////
//
//	ЗАДАЧИ
//

//Описание: возвращает структуру с параметрами для списка задач
//Возвращаемое значение: Структура - структура с возможными ключами и пустыми занчениями
//Функция ПараметрыСпискаЗадач() Экспорт
//	Результат = Новый Структура;		
//	Результат.Вставить("offset",0); //смещение
//	Результат.Вставить("limit",10);//количество задач в выборке, по умолчанию 25, максимум 100
//	Результат.Вставить("sort","");//колонка сортировки, добавляем ":desc" чтобы инвертировать
//	Результат.Вставить("project_id","");//фильтр по проекту
//	Результат.Вставить("subproject_id","");//Фильтр по субпроекту
//	Результат.Вставить("tracker_id","");//фильтр по трекеру
//	Результат.Вставить("status_id","");//фильтр по статусу
//	Результат.Вставить("assigned_to_id","");//фильтр по пользователю,через ид или api key
//	Возврат Результат;
//КонецФункции

//Описание: возвращает структуру с параметрами для запроса задачи
//Возвращаемое значение: Структура - структура с возможными ключами и пустыми занчениями
//Функция ПараметрыЗадачи() Экспорт
//	Результат = Новый Структура;
//	//через запятую можем перечислить одно или несколько следующих значений
//	//  children, attachments, relations, changesets, journals, watchers
//	Результат.Вставить("include","");
//	Возврат Результат;
//КонецФункции


//Описание: возвращает структуру с параметрами для новой задачи
//Возвращаемое значение: Структура - структура с возможными ключами и пустыми занчениями
//Функция ПараметрыНовойЗадачи() Экспорт
//	Результат = Новый Структура;
//	Результат.Вставить("project_id","");
//	Результат.Вставить("tracker_id","");
//	Результат.Вставить("status_id","");
//	Результат.Вставить("priority_id","");
//	Результат.Вставить("subject","");
//	Результат.Вставить("description","");
//	Результат.Вставить("category_id","");
//	Результат.Вставить("fixed_version_id","");
//	Результат.Вставить("assigned_to_id","");
//	Результат.Вставить("parent_issue_id","");
//	Результат.Вставить("custom_fields","");
//	Результат.Вставить("watcher_user_ids","");
//	Возврат Результат;
//	
//КонецФункции

//Описание:Создает задачу по заданным параметрам и возвращает структуру с ее данными.
//Параметры: Параметры - Структура - содержит параметры создаваемой задачи
//Возвращаемое значение:
//  Структура - созданная новая задача
//Функция НоваяЗадача(Параметры = Неопределено) Экспорт
//	Если Параметры = Неопределено Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	//очистить незаполненные параметры	
//	УдалитьПустыеПоля(Параметры);
//	
//	ТипОбъекта = МодельДанных.Тип("e-mail@stop_time@list.ru", "TypeNewIssue"); 
//	текОбъект = МодельДанных.Создать(ТипОбъекта); 
//	ЗаполнитьЗначенияСвойств(текОбъект,Параметры,,"custom_fields");
//	
//	//
//	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
//	ЗаписьXML = Новый ЗаписьXML; 	
//	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь); 	
//	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML); 	
//	ЗаписьXML.ЗаписатьОбъявлениеXML(); 	
//	МодельДанных.ЗаписатьXML(ЗаписьXML, текОбъект,"issue"); 
//	ЗаписьXML.Закрыть(); 	
//	//если задача успешно создаана то возвращается заполненная
//	ТекстОтвета = PostЗапрос("issues",Новый Структура,ИмяВременногоФайла);
//	Результат = СтруктураИзФайлаXML(ТекстОтвета,"issue");
//	
//	Возврат Результат;
//	
//КонецФункции

//Описание: возвращает структуру с параметрами для обновляемой задачи
//Возвращаемое значение: Структура - структура с возможными ключами и пустыми занчениями
//Функция ПараметрыИзменяемойЗадачи(Параметры = Неопределено) Экспорт 
//	Если Параметры = Неопределено Тогда
//		Результат = Новый Структура;	
//	КонецЕсли;
//	Результат.Вставить("notes","");//Поле которе есть только у обновления программы	
//	Результат.Вставить("estimated_hours","");//планируемое время
//	Результат.Вставить("spent_hours",""); //затраченное время
//	Возврат Результат;
//КонецФункции

//Описание: Обновляет задачу, возвращает ее же в качестве результата
//Параметры:  Идентификатор - Строка - Номер задачи
//            Параметры - Структура - Поля которые необходимо изменить
//Возвращаемое значение:
//  Структура - задача которую мы меняем
//Функция ИзмененнаяЗадача(Идентификатор,Параметры = Неопределено) Экспорт
//	Если Параметры = Неопределено Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	Если Идентификатор = "" Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	//очистить незаполненные параметры	
//	УдалитьПустыеПоля(Параметры);
//	
//	ТипОбъекта = МодельДанных.Тип("e-mail@stop_time@list.ru", "TypeNewIssue"); 
//	текОбъект = МодельДанных.Создать(ТипОбъекта); 
//	ЗаполнитьЗначенияСвойств(текОбъект,Параметры);
//	
//	//
//	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
//	ЗаписьXML = Новый ЗаписьXML; 	
//	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь); 	
//	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML); 	
//	ЗаписьXML.ЗаписатьОбъявлениеXML(); 	
//	МодельДанных.ЗаписатьXML(ЗаписьXML, текОбъект,"issue"); 
//	ЗаписьXML.Закрыть(); 	
//	//если задача успешно создаана то возвращается заполненная
//	ТекстОтвета = PutЗапрос("issues/"+Идентификатор,ИмяВременногоФайла);
//	Результат = СтруктураИзФайлаXML(ТекстОтвета,"issue");
//	
//	Возврат Результат;
//	
//КонецФункции

//Описание: Удаляет задачу с указанными номером
//Параметры:  Идентификатор - строка - номер удаляемой задачи
//Возвращаемое значение:
//Процедура УдалитьЗадачу(Идентификатор) Экспорт
//	DeleteЗапрос("issues/"+строка(Идентификатор));	
//КонецПроцедуры

//Процедура ДобавитьНаблюдателяЗадачи() Экспорт
//КонецПроцедуры

//Процедура УдалитьНаблюдателяЗадачи() Экспорт
//КонецПроцедуры

//Описание: (Пока не работает.) Присоединяет к задаче с указанным номером файл.
//Параметры: Идентификатор - Строка - номер задачи
//           ПолныйПуть - Строка - полный путь к присоединяемому файлу
//           Описание - Строка - описание файла
//Возвращаемое значение:
//Процедура ПрисоединитьФайл(Идентификатор,ПолныйПуть,Описание = "") Экспорт
//	Токен = ТокенЗагруженногоФайла(ПолныйПуть);
//	текФайл = Новый Файл(ПолныйПуть);
//	ИмяФайла = текФайл.Имя;
//	
//	
//	ТипОбъекта = МодельДанных.Тип("e-mail@stop_time@list.ru", "TypeAddFile"); 
//	ТипРеквизита1 = МодельДанных.Тип("e-mail@stop_time@list.ru", "TypeUploads"); 
//	ТипРеквизита2 = МодельДанных.Тип("e-mail@stop_time@list.ru", "TypeUpload"); 
//	текОбъект = МодельДанных.Создать(ТипОбъекта); 
//	текОбъект.type = "array";
//	текОбъект.uploads = МодельДанных.Создать(ТипРеквизита1); 
//	текОбъект.uploads.upload = МодельДанных.Создать(ТипРеквизита2);
//	текОписаниеФайла = текОбъект.uploads.upload;
//	ЗаполнитьЗначенияСвойств(текОписаниеФайла,Токен);
//	текОписаниеФайла.filename = ИмяФайла;
//	текОписаниеФайла.description = Описание;
//	//
//	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
//	ЗаписьXML = Новый ЗаписьXML; 	
//	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь); 	
//	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML); 	
//	ЗаписьXML.ЗаписатьОбъявлениеXML(); 	
//	МодельДанных.ЗаписатьXML(ЗаписьXML, текОбъект,"issue"); 
//	ЗаписьXML.Закрыть(); 	
//	//если задача успешно создаана то возвращается заполненная
//	ТекстОтвета = PutЗапрос("issues/"+Идентификатор,ИмяВременногоФайла);

//КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
////
////	ЗАТРАТЫ ВРЕМЕНИ
////

////Описание: Возвращает структуру параметров для спика затрат времени
////Возвращаемое значение: Структура - структура с возможными ключами и пустыми занчениями
//Функция ПараметрыСпискаЗатратыВремени() Экспорт
//	Результат = Новый Структура;		
//	Результат.Вставить("offset",0); //смещение
//	Результат.Вставить("limit",10);//количество задач в выборке, по умолчанию 25, максимум 100
//	Возврат Результат;	
//КонецФункции

////Описание: Возвращает список затрат времени
////Параметры: Параметры - Структура - набор фильтров
////Возвращаемое значение: Структура - Список затрат времени
//Функция СписокЗатратыВремени(Параметры = Неопределено) Экспорт
//	ВыбратьВсе = Ложь;
//	Если Параметры = Неопределено Тогда
//		ВыбратьВсе = Истина;
//		Параметры=ПараметрыСпискаЗатратыВремени();	
//	КонецЕсли;
//	
//	Смещение = Параметры.offset;
//	РазмерПорции = Параметры.limit;
//	
//	ТекстОтвета =  GetЗапрос("time_entries",Параметры);
//	Результат = СтруктураИзФайлаXML(ТекстОтвета,"time_entries");	
//	
//	//если выбрать нужно все задачи, читаем порциями и добавляем в массив
//	Если ВыбратьВсе Тогда
//		ВсегоЭлементов = 0;
//		Если Результат.Свойство("total_count",ВсегоЭлементов) Тогда
//			КолОбращений = ВсегоЭлементов/РазмерПорции-1;
//			КолОбращений = ?(Цел(КолОбращений)<КолОбращений,Цел(КолОбращений)+1,КолОбращений);
//			Для н = 1 по КолОбращений Цикл
//				Параметры.offset = н*РазмерПорции;
//				ТекстОтвета =  GetЗапрос("time_entries",Параметры);
//				ПромежуточныйРезультат = СтруктураИзФайлаXML(ТекстОтвета,"time_entries");	
//				//если нет подходящих под фильтр задач, этого свойсва в ответе не будет
//				Если НЕ ПромежуточныйРезультат.Свойство("time_entry") Тогда
//					Продолжить;	
//				КонецЕсли;
//				
//				//скопируем массив задач из промежуточного результата в конечный
//				//если задача 1 то она возвращается структурой
//				Если ТипЗнч(ПромежуточныйРезультат.time_entry)=Тип("Структура") Тогда
//					Результат.time_entry.Добавить(ПромежуточныйРезультат.time_entry);
//				Иначе 
//					Для каждого текЭлемент из ПромежуточныйРезультат.time_entry Цикл
//						Результат.time_entry.Добавить(текЭлемент);		
//					КонецЦикла;
//				КонецЕсли;
//				//в результирующей структуре подправим свойство лимит
//				Результат.limit = Число(Результат.limit)+РазмерПорции;
//			КонецЦикла;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции

////Описание: возвращает все атрибуты затраты времени по идентификатору
////Параметры: Идентификатор - Строка - номер затраты времени в базе
////Возвращаемое значение: Структура - затрата времени 
//Функция ЗатратаВремени(Идентификатор) Экспорт
//	ТекстОтвета = GetЗапрос("time_entries/"+Идентификатор,Новый Структура);	
//	Результат = СтруктураИзФайлаXML(ТекстОтвета,"time_entry");
//	Возврат Результат;
//КонецФункции

////Описание: возвращает праметры для новой затраты времени
////Параметры: ЭтоПроект - Булево - признак проекта, в зависимости от него различный набор параметров
////Возвращаемое значение: Структура - структура с возможными ключами и пустыми занчениями
//Функция ПараметрыЗатратыВремени(ЭтоПроект = Ложь) Экспорт
//	Результат = Новый Структура;
//	Если ЭтоПроект Тогда
//		Результат.Вставить("project_id","");
//	Иначе	
//		Результат.Вставить("issue_id","");
//	КонецЕсли;
//	Результат.Вставить("spent_on","");
//	Результат.Вставить("hours","");
//	Результат.Вставить("activity_id","");
//	Результат.Вставить("comments","");
//	
//	Возврат Результат;	
//КонецФункции

////Описание: Создает затрату времени и возвращает объект, который ее содержит
////Параметры: Параметры - Структура - Содержит реквизиты новой затраты времени
////Возвращаемое значение:
//Функция НоваяЗатратаВремени(Параметры) Экспорт 
//	Если Параметры = Неопределено Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	//очистить незаполненные параметры	
//	УдалитьПустыеПоля(Параметры);
//	Если Параметры.Свойство("project_id") Тогда
//		ТипОбъекта = МодельДанных.Тип("e-mail@stop_time@list.ru", "TypeNewTimeEntryProject");		
//	Иначе
//		ТипОбъекта = МодельДанных.Тип("e-mail@stop_time@list.ru", "TypeNewTimeEntryIssue");		
//	КонецЕсли;
//	
//	 
//	текОбъект = МодельДанных.Создать(ТипОбъекта); 
//	ЗаполнитьЗначенияСвойств(текОбъект,Параметры);
//	
//	//
//	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
//	ЗаписьXML = Новый ЗаписьXML; 	
//	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь); 	
//	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML); 	
//	ЗаписьXML.ЗаписатьОбъявлениеXML(); 	
//	МодельДанных.ЗаписатьXML(ЗаписьXML, текОбъект,"time_entry"); 
//	ЗаписьXML.Закрыть(); 	
//	
//	//если задача успешно создаана то возвращается заполненная
//	ТекстОтвета = PostЗапрос("time_entries",Новый Структура,ИмяВременногоФайла);
//	Результат = СтруктураИзФайлаXML(ТекстОтвета,"time_entry");
//	
//	Возврат Результат;

//КонецФункции

////Описание: Изменяет затрату времени
////Параметры: Идентификатор - Строка - Номер затраты времени в базе
////           Параметры - Структура - содержит изменяемые поля
////Возвращаемое значение:  Структура - измененная затара
//Функция ИзмененнаяЗатратаВремени(Идентификатор,Параметры) Экспорт
//	
//	Если Параметры = Неопределено Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	Если Идентификатор = "" Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	//очистить незаполненные параметры	
//	УдалитьПустыеПоля(Параметры);
//	
//	ТипОбъекта = МодельДанных.Тип("e-mail@stop_time@list.ru", "TypeTimeEntry"); 
//	текОбъект = МодельДанных.Создать(ТипОбъекта); 
//	ЗаполнитьЗначенияСвойств(текОбъект,Параметры);
//	
//	//
//	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
//	ЗаписьXML = Новый ЗаписьXML; 	
//	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь); 	
//	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML); 	
//	ЗаписьXML.ЗаписатьОбъявлениеXML(); 	
//	МодельДанных.ЗаписатьXML(ЗаписьXML, текОбъект,"time_entry"); 
//	ЗаписьXML.Закрыть(); 	
//	//если задача успешно создаана то возвращается заполненная
//	ТекстОтвета = PutЗапрос("time_entries/"+Идентификатор,ИмяВременногоФайла);
//	Результат = СтруктураИзФайлаXML(ТекстОтвета,"time_entry");
//	
//	Возврат Результат;
//КонецФункции

////Описание: Удаляет затрату времени по идентификатору
////Параметры: Идентификатор - Строка - идентификатор удаляемой затраты
//Процедура УдалитьЗатратуВремени(Идентификатор) Экспорт
//	DeleteЗапрос("time_entries/"+строка(Идентификатор));	
//КонецПроцедуры


/////////////////////////////////////////////////////////////////////////////////
////
////	ПРОЕКТЫ
////

//Описание: Возвращает параметры для филтра списка проектов
//Возвращаемое значение: Структура - структура с возможными ключами и пустыми занчениями
Функция ПараметрыСпискаПроектов() Экспорт
	Результат = Новый Структура;		
	Результат.Вставить("offset",0); //смещение
	Результат.Вставить("limit",5);//количество проектов в выборке, по умолчанию 25, максимум 100
	Результат.Вставить("include","");//возможные значения trackers, issue_categories, enabled_modules
	Возврат Результат;
КонецФункции


////Описание: Возвращает параметры для получения описания проекта
////Возвращаемое значение: Структура - структура с возможными ключами и пустыми занчениями
//Функция ПараметрыПроекта() Экспорт
//	Результат = Новый Структура;
//	//через запятую можем перечислить одно или несколько следующих значений
//	//  trackers, issue_categories, enabled_modules
//	Результат.Вставить("include","");
//	Возврат Результат;
//КонецФункции

////Описание: Возвращает описание 1 проекта
////Параметры: Параметры - Структура - Указываются дополнительная инфорамация к выводу
////Возвращаемое значение: Структура - реквизиты проекта
//Функция Проект(Идентификатор, Параметры = Неопределено) Экспорт
//	Если Параметры = Неопределено Тогда Параметры = Новый Структура КонецЕсли;
//	ТекстОтвета = GetЗапрос("projects/"+Идентификатор,Параметры);	
//	Результат =  СтруктураИзФайлаXML(ТекстОтвета,"project");
//	Возврат Результат;
//	
//КонецФункции

////Описание: Возвращает реквизиты необходимы для нового проекта
////Возвращаемое значение: Структура - структура с возможными ключами и пустыми занчениями
//Функция ПараметрыНовогоПроекта() Экспорт
//	Результат = Новый Структура;
//	Результат.Вставить("name","");
//	Результат.Вставить("identifier","");
//	Результат.Вставить("description","");
//	Возврат Результат;
//	
//КонецФункции

////Описание: Создает новый проект и возвращает его в качестве обекта
////Параметры: Параметры - Структура - заполненные реквизиты нового проекта
////Возвращаемое значение: Структура - проект с реквизитами
//Функция НовыйПроект(Параметры = Неопределено) Экспорт
//	Если Параметры = Неопределено Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	//очистить незаполненные параметры	
//	УдалитьПустыеПоля(Параметры);
//	
//	ТипОбъекта = МодельДанных.Тип("e-mail@stop_time@list.ru", "TypeProject"); 
//	текОбъект = МодельДанных.Создать(ТипОбъекта); 
//	ЗаполнитьЗначенияСвойств(текОбъект,Параметры);
//	
//	//
//	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
//	ЗаписьXML = Новый ЗаписьXML; 	
//	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь); 	
//	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML); 	
//	ЗаписьXML.ЗаписатьОбъявлениеXML(); 	
//	МодельДанных.ЗаписатьXML(ЗаписьXML, текОбъект,"project"); 
//	ЗаписьXML.Закрыть(); 	
//	//если задача успешно создаана то возвращается заполненная
//	ТекстОтвета = PostЗапрос("projects",Новый Структура,ИмяВременногоФайла);
//	Результат = СтруктураИзФайлаXML(ТекстОтвета,"project");
//	
//	Возврат Результат;
//	
//КонецФункции

////Описание: возвращает параметры для изменяемого проекта
////Возвращаемое значение: Структура - структура с возможными ключами и пустыми занчениями
//Функция ПараметрыИзменяемогоПроекта() Экспорт
//	Результат = Новый Структура;
//	Результат.Вставить("name","");
//	Результат.Вставить("identifier","");
//	Результат.Вставить("description","");
//	Результат.Вставить("is_public","");
//	Возврат Результат;
//КонецФункции

////Описание: Изменяет реквизиты проетка и возвращает его как объект
////Параметры: Параметры - Структура - Новое значение реквизитов
////Возвращаемое значение: Струтктура - объект проект
//Функция ИзмененныйПроект(Идентификатор,Параметры = Неопределено) Экспорт
//	Если Параметры = Неопределено Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	Если Идентификатор = "" Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	//очистить незаполненные параметры	
//	УдалитьПустыеПоля(Параметры);
//	
//	ТипОбъекта = МодельДанных.Тип("e-mail@stop_time@list.ru", "TypeProject"); 
//	текОбъект = МодельДанных.Создать(ТипОбъекта); 
//	ЗаполнитьЗначенияСвойств(текОбъект,Параметры);
//	
//	//
//	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
//	ЗаписьXML = Новый ЗаписьXML; 	
//	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь); 	
//	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, ПараметрыЗаписиXML); 	
//	ЗаписьXML.ЗаписатьОбъявлениеXML(); 	
//	МодельДанных.ЗаписатьXML(ЗаписьXML, текОбъект,"project"); 
//	ЗаписьXML.Закрыть(); 	
//	//если задача успешно создаана то возвращается заполненная
//	ТекстОтвета = PutЗапрос("projects/"+Идентификатор,ИмяВременногоФайла);
//	Результат = СтруктураИзФайлаXML(ТекстОтвета,"project");
//	
//	Возврат Результат;
//	
//КонецФункции

////Описание: Удаляет проект из базы
////Параметры: Идентификатор - Строка - Номер проекта в базе
//Процедура УдалитьПроект(Идентификатор) Экспорт
//	DeleteЗапрос("projects/"+строка(Идентификатор));	
//КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
//
//	ИНИЦИАЛИЗАЦИЯ ОБЪЕКТА
//
Инициализировать();///////////////////////////////////////////////////////////////////////////////
