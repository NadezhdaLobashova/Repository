
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Найденные Абоненты
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборЗаполнен", Ложь);
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборАбонентПустой", Истина);
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборАбонент", "");
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборИННПустой", Истина);
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборИНН", "");
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборЭлектроннаяПочтаПустой", Истина);
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборЭлектроннаяПочта", "");
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборТелефонПустой", Истина);
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборТелефон", "");
	
	//Историй обращений
	ИсторияОбращений.Параметры.УстановитьЗначениеПараметра("ОтборОбращенияЗаполнен", Ложь);
	ИсторияОбращений.Параметры.УстановитьЗначениеПараметра("ОтборАбонентПустой", Истина);
	ИсторияОбращений.Параметры.УстановитьЗначениеПараметра("ОтборПользовательПустой", Истина);
	ИсторияОбращений.Параметры.УстановитьЗначениеПараметра("ОтборАбонент", Неопределено);
	ИсторияОбращений.Параметры.УстановитьЗначениеПараметра("ОтборПользователь", Неопределено);
	
	Элементы.ИсторияОбращений.Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтаНеделя);	
КонецПроцедуры

&НаКлиенте
Процедура НаименованияАбонентаПриИзменении(Элемент)
	УстановитьОтборДинамическихСписков();
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	УстановитьОтборДинамическихСписков();
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаПриИзменении(Элемент)
	УстановитьОтборДинамическихСписков();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДинамическихСписков()
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборАбонентПустой", НЕ ЗначениеЗаполнено(Объект.НаименованиеАбонента));
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборАбонент", "%" + Объект.НаименованиеАбонента + "%");
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборИННПустой", НЕ ЗначениеЗаполнено(Объект.ИНН));
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборИНН", "%" + Объект.ИНН + "%");
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборЭлектроннаяПочтаПустой", НЕ ЗначениеЗаполнено(Объект.ЭлектроннаяПочта));
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборЭлектроннаяПочта", "%" + Объект.ЭлектроннаяПочта + "%");
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборТелефонПустой", НЕ ЗначениеЗаполнено(Объект.Телефон));
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборТелефон", "%" + Объект.Телефон + "%");
	
	НайденныеАбоненты.Параметры.УстановитьЗначениеПараметра("ОтборЗаполнен",  ЗначениеЗаполнено(Объект.НаименованиеАбонента) ИЛИ ЗначениеЗаполнено(Объект.ИНН) ИЛИ ЗначениеЗаполнено(Объект.ЭлектроннаяПочта) ИЛИ ЗначениеЗаполнено(Объект.Телефон));
	
	//Очистим данные, которые заполняются по каждому абоненту отдельно
	Договора.Очистить();
	Подписки.Очистить();
	ПрограммныеПродукты.Очистить();
	ОсновнойМенеджер 		= "";
	Регион 					= "";
	Группа 					= "";
	ЛатинскоеНаименование 	= "";
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборОбращения()
	ТекСтрокаАбонент = Элементы.НайденныеАбоненты.ТекущиеДанные;
	Если ТекСтрокаАбонент <> Неопределено Тогда
		
		Если ТекСтрокаАбонент.Свойство("Пользователь") И ЗначениеЗаполнено(ТекСтрокаАбонент.Пользователь) Тогда
			Пользователь = ТекСтрокаАбонент.Пользователь;
			Абонент = ПредопределенноеЗначение("Справочник.Абоненты.ПустаяСсылка");
		ИначеЕсли ТекСтрокаАбонент.Свойство("Абонент") И ЗначениеЗаполнено(ТекСтрокаАбонент.Абонент) Тогда
			Пользователь = ПредопределенноеЗначение("Справочник.ПользователиСервисов.ПустаяСсылка");
			Абонент = ТекСтрокаАбонент.Абонент;
		Иначе
			Пользователь = ПредопределенноеЗначение("Справочник.ПользователиСервисов.ПустаяСсылка");
			Абонент = ПредопределенноеЗначение("Справочник.Абоненты.ПустаяСсылка");
		КонецЕсли;
		
		ИсторияОбращений.Параметры.УстановитьЗначениеПараметра("ОтборАбонентПустой", НЕ ЗначениеЗаполнено(Абонент));
		ИсторияОбращений.Параметры.УстановитьЗначениеПараметра("ОтборПользовательПустой", НЕ ЗначениеЗаполнено(Пользователь));
		ИсторияОбращений.Параметры.УстановитьЗначениеПараметра("ОтборАбонент", Абонент);
		ИсторияОбращений.Параметры.УстановитьЗначениеПараметра("ОтборПользователь", Пользователь);
		ИсторияОбращений.Параметры.УстановитьЗначениеПараметра("ОтборОбращенияЗаполнен",  ЗначениеЗаполнено(Абонент) ИЛИ ЗначениеЗаполнено(Пользователь));
		
		Если ЗначениеЗаполнено(ТекСтрокаАбонент.Абонент) Тогда
			СформироватьДанныеОПодпискахИДоговорахОБД(ТекСтрокаАбонент.Абонент);
		КонецЕсли;	

	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПриИзменении(Элемент)
	УстановитьОтборДинамическихСписков();
КонецПроцедуры

&НаКлиенте
Процедура НайденныеАбонентыПриАктивизацииСтроки(Элемент)
	УстановитьОтборОбращения();
КонецПроцедуры


&НаСервере
Процедура СформироватьДанныеОПодпискахИДоговорахОБД(Абонент)
	
	Если НЕ ЗначениеЗаполнено(Абонент) Тогда
		Возврат
	КонецЕсли;	
	
	Попытка
		Прокси = URMExchangeСервер.УстановитьПодключениеКВебСервису();
	Исключение
		Возврат;
	КонецПопытки;
	
	ДанныеОБД = Прокси.CetSubscription(СокрЛП(Абонент.GUIDОБД));
	
 	Если НЕ ДанныеОБД.Result Тогда
		Возврат
	КонецЕсли;
	
	Подписки.Очистить();
	Договора.Очистить();
	ПрограммныеПродукты.Очистить();
	
	Для Каждого строкаПодпискиXDTO Из ДанныеОБД.Subscriptions Цикл
		строкаПодписка                     = Подписки.Добавить();
		строкаПодписка.ВидПодписки         = строкаПодпискиXDTO.Type;
		строкаПодписка.ПрограммныйПродукт  = строкаПодпискиXDTO.Product;
		строкаПодписка.Серия               = строкаПодпискиXDTO.Series;
		строкаПодписка.Срок                = строкаПодпискиXDTO.Period;
		строкаПодписка.ДатаНачала          = строкаПодпискиXDTO.StartDate;
		строкаПодписка.ДатаОкончания       = строкаПодпискиXDTO.EndDate;
	КонецЦикла;
	Подписки.Сортировать("ДатаОкончания убыв");
	
	Для Каждого строкаДоговораXDTO Из ДанныеОБД.Сontracts Цикл
		строкаДоговор               = Договора.Добавить();
		строкаДоговор.Номер         = строкаДоговораXDTO.Number;
		строкаДоговор.Дата          = строкаДоговораXDTO.Date;
		строкаДоговор.ВидОперации   = строкаДоговораXDTO.OperationType;
		строкаДоговор.ДатаНачала    = строкаДоговораXDTO.StartDate;
		строкаДоговор.ДатаОкончания = строкаДоговораXDTO.EndDate;
	КонецЦикла;
	Договора.Сортировать("ДатаОкончания убыв");
	
	ЛатинскоеНаименование = ДанныеОБД.LatinName;
	Регион                = ДанныеОБД.Region;
	Группа                = ДанныеОБД.Group;
	
	ЗапросОсновнойМенеджер = Новый Запрос("ВЫБРАТЬ
	                                      |	Пользователи.Ссылка КАК Ссылка
	                                      |ИЗ
	                                      |	Справочник.Пользователи КАК Пользователи
	                                      |ГДЕ
	                                      |	Пользователи.GUIDОБД = &GUIDОБД");
	ЗапросОсновнойМенеджер.УстановитьПараметр("GUIDОБД", Новый УникальныйИдентификатор(ДанныеОБД.ManagerGUID));
	Результат = ЗапросОсновнойМенеджер.Выполнить();
	Если Результат.Пустой() ИЛИ ДанныеОБД.ManagerGUID = "00000000-0000-0000-0000-000000000000" Тогда
		ОсновнойМенеджер = ДанныеОБД.ManagerName;
	Иначе
		тзРезультат = Результат.Выгрузить();
		ОсновнойМенеджер = тзРезультат[0].Ссылка;
	КонецЕсли;
	
	Для Каждого СтрокаПродуктXDTO Из ДанныеОБД.SoftwareProducts Цикл
		СтрокаПродукт = ПрограммныеПродукты.Добавить();
		СтрокаПродукт.Продукт = СтрокаПродуктXDTO.Product;
		СтрокаПродукт.Серия   = СтрокаПродуктXDTO.Series;
	КонецЦикла;	
	
	//НетДействующейПодписки = ?(Подписки.Количество() = 0 И Договора.Количество() = 0, Истина, Ложь);
	//
	//Если НетДействующейПодписки Тогда
	//	УстановитьНадписьОПодписке();
	//Иначе
	//	ВыбиратьДействующийДоговор = Ложь;
	//	Если НЕ Подписки.Количество() = 0 Тогда
	//		Если Подписки[0].ДатаОкончания > ТекущаяДата() ИЛИ Подписки[0].ДатаОкончания = Дата(1,1,1) Тогда 
	//			Элементы.Декорация1.Заголовок = СокрЛП(Подписки[0].ВидПодписки) + " до " + Формат(Подписки[0].ДатаОкончания, "ДЛФ=Д");
	//		Иначе
	//			ВыбиратьДействующийДоговор = Истина;
	//		КонецЕсли;
	//	Иначе
	//		ВыбиратьДействующийДоговор = Истина;
	//	КонецЕсли;
	//	
	//	Если ВыбиратьДействующийДоговор Тогда
	//		Если НЕ Договора.Количество() = 0 Тогда
	//			Если Договора[0].ДатаОкончания >= ТекущаяДата() ИЛИ Договора[0].ДатаОкончания = Дата(1,1,1) Тогда
	//				Элементы.Декорация1.Заголовок = СокрЛП(Договора[0].ВидОперации) + " до " + Формат(Договора[0].ДатаОкончания, "ДЛФ=Д");
	//			Иначе
	//				УстановитьНадписьОПодписке();
	//			КонецЕсли;	
	//		Иначе
	//			УстановитьНадписьОПодписке();
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;	
	
КонецПроцедуры

	

&НаКлиенте
Процедура ВставитьИзШаблона(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВставитьИзШаблонаЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сервис", Объект.Сервис);
	ПараметрыФормы.Вставить("Витрина", Объект.Витрина);
    
    ОткрытьФорму("Справочник.ШаблоныТекстов.ФормаВыбора",ПараметрыФормы,ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "СтраницаРегистрацияОбращения" Тогда
		ТекСтрокаАбонент = Элементы.НайденныеАбоненты.ТекущиеДанные;
		Если ТекСтрокаАбонент = Неопределено Тогда
			Возврат;
		КонецЕсли;	
			
		Если ТекСтрокаАбонент.Свойство("Пользователь") И ЗначениеЗаполнено(ТекСтрокаАбонент.Пользователь) Тогда
			ИнициаторРегистрация = ТекСтрокаАбонент.Пользователь;
			АбонентРегистрация = ТекСтрокаАбонент.Абонент;
		ИначеЕсли ТекСтрокаАбонент.Свойство("Абонент") И ЗначениеЗаполнено(ТекСтрокаАбонент.Абонент) Тогда
			ИнициаторРегистрация =  ПредопределенноеЗначение("Справочник.ПользователиСервисов.ПустаяСсылка");
			АбонентРегистрация = ТекСтрокаАбонент.Абонент;
		Иначе
			ИнициаторРегистрация = ПредопределенноеЗначение("Справочник.ПользователиСервисов.ПустаяСсылка");
			АбонентРегистрация = ПредопределенноеЗначение("Справочник.Абоненты.ПустаяСсылка");
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрировать(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПоискДанных;
	//Лобашова 25.03.2019 82241 +
	ОсновнойПроект = ПолучитьПроектНаСервере(АбонентРегистрация);
	//ЭлементыОтбора = Новый Структура("Абонент, Инициатор, Тема, Описание", АбонентРегистрация, ИнициаторРегистрация, ТемаРегистрация, ОписаниеРегистрация);	
	ЭлементыОтбора = Новый Структура("Абонент, Инициатор, Тема, Описание, Проект", АбонентРегистрация, ИнициаторРегистрация, ТемаРегистрация, ОписаниеРегистрация, ОсновнойПроект);
	//Лобашова 25.03.2019 82241 -
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЭлементыОтбора);
	ОткрытьФорму("Документ.Обращение.ФормаОбъекта", ПараметрыФормы);
	АбонентРегистрация = ПредопределенноеЗначение("Справочник.Абоненты.ПустаяСсылка");
	ИнициаторРегистрация = ПредопределенноеЗначение("Справочник.ПользователиСервисов.ПустаяСсылка");
	ТемаРегистрация = "";
	ОписаниеРегистрация = "";
	
КонецПроцедуры

//Лобашова 25.03.2019 82241 +
&НаСервере
Функция ПолучитьПроектНаСервере(Абонент)
	АбонентОбъект = Абонент.ПолучитьОбъект();
	Возврат АбонентОбъект.ОсновнойПроект;
КонецФункции
//Лобашова 25.03.2019 82241 -

&НаКлиенте
Процедура ИнициаторРегистрацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	//astyul, 74135, 22.10.2018
	Отбор.Вставить("Абонент", АбонентРегистрация);
	//astyul, 74135, 22.10.2018
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	Оповещение = Новый ОписаниеОповещения("ИнициаторНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПользователиСервисов.Форма.ПоискПользователяСкрытый", ПараметрыФормы, Элемент,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторНачалоВыбораЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Неопределено Тогда
		ИнициаторРегистрация = Результат.ПользовательСервиса;
	КонецЕсли; 
	
КонецПроцедуры





