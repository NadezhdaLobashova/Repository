#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    НастройкиИнтеграции = УРВСервер.ПолучитьНастройкиИнтеграции(Перечисления.Интеграции.НастройкиУправленияСеансамиОнлайн);
    Если НастройкиИнтеграции = Неопределено Тогда
        Отказ = Истина;
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнены настройки в рег. сведений, ""Настройки интеграции""!'"));
    КонецЕсли;
	
	ИННКлиента=Параметры.ИннКлиента;
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтключитьСеансы(Команда)
    
    МассивСеансов = Новый Массив;
	Для Каждого ВыбраннаяСтрока Из Элементы.ТаблицаАбонентов.ВыделенныеСтроки Цикл 
		НовСтр = ТаблицаАбонентов.НайтиПоИдентификатору(ВыбраннаяСтрока);    
    	МассивСеансов.Добавить(НовСтр.IDСеанса);
	КонецЦикла;	

    
	Если НЕ МассивСеансов.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрано ни одного сеанса для удаления!'"));
		Возврат;
    КонецЕсли;
    
    //Оповещение = Новый ОписаниеОповещения("НачатьУдаление", ЭтотОбъект, ПараметрКоманды);
    ТекстВопроса = НСтр("ru = 'Вы действительно хотите удалить сеансы?'");
    ПоказатьВопрос(Новый ОписаниеОповещения("ЗавершениеВопросаОтключенияСенасов", ЭтотОбъект,МассивСеансов), ТекстВопроса, РежимДиалогаВопрос.ДаНет,);    
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
    ОбновитьДанныеНаСервере();
КонецПроцедуры
	
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗавершениеВопросаОтключенияСенасов(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
  Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
    КонецЕсли;
    
  ОтключитьСеансыНаСервере(ДополнительныеПараметры);
    
КонецПроцедуры

&НаСервере
Функция СоздатьWSПрокси()
        	
	Пользователь = НастройкиИнтеграции.Пользователь; // "upp_user";
	Пароль 		 = НастройкиИнтеграции.Пароль;	     // "RFWrtF3RE*It";
	АдресСервисаУправленияСеансами = НастройкиИнтеграции.АдресПодключения;
    
	ОпределениеWSDL = Новый WSОпределения(АдресСервисаУправленияСеансами, Пользователь, Пароль, 100);
	
	WSПрокси = Новый WSПрокси(ОпределениеWSDL, "http://v8.1c.ru/SessionManagementExt", "SessionControlExt", "SessionControlExtSoap");
	
	WSПрокси.Пользователь = Пользователь;
	WSПрокси.Пароль 	  = Пароль;

	Возврат WSПрокси;
	
КонецФункции

&НаСервере
Функция СериализоватьДанные(Данные)
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();

	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
	СтрокаXML = ЗаписьXML.Закрыть();	
	
	Возврат СтрокаXML;
	
КонецФункции // ()

&НаСервере
Процедура ОтключитьСеансыНаСервере(МассивСеансов)
	
	Хранилище = Новый ХранилищеЗначения(МассивСеансов, Новый СжатиеДанных(9));
	Данные = СериализоватьДанные(Хранилище); 
	
	НеЗавершено = 0;
	Попытка
		WSПрокси = СоздатьWSПрокси();
		КоличествоЗавершенныхСеансов = WSПрокси.TerminateSessions(Строка(ПараметрыСеанса.ТекущийПользователь), Данные);
		НеЗавершено = МассивСеансов.Количество() - КоличествоЗавершенныхСеансов;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При создании объекта ""WSПрокси"" произошла следующая ошибка: " +ОписаниеОшибки()+ "!!");
	КонецПопытки;
	
    Если НеЗавершено > 0 Тогда
        ТекстСообщения = "Не завершено = " + НеЗавершено + " сеансов.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	ОбновитьДанныеНаСервере();

КонецПроцедуры // ()

&НаСервере
Функция ПолучитьДанныИзXML(XMLСтрока)
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(XMLСтрока);
	
	Данные = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);	
	Данные = Данные.Получить();
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеНаСервере()

	ТаблицаАбонентов.Очистить();
	
	Если ПустаяСтрока(ИннКлиента) Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		WSПрокси = СоздатьWSПрокси();
		Данные = WSПрокси.GetClientSessions(ИннКлиента);
		ЗначениеВДанныеФормы(ПолучитьДанныИзXML(Данные),ТаблицаАбонентов);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры // ()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
	ОбновитьДанныеНаСервере();
КонецПроцедуры

	
#КонецОбласти




