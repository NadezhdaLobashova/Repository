
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Год) Тогда 
		Год = НачалоГода(ТекущаяДата());
	КонецЕсли;
	
	Элементы.ПрограммаРазвития.ОтборСтрок = Новый ФиксированнаяСтруктура("Период", НачалоГода(Год));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГодПриИзменении(Элемент)
	Элементы.ПрограммаРазвития.ОтборСтрок = Новый ФиксированнаяСтруктура("Период", НачалоГода(Год));	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПрограммаРазвития) И НЕ ЗначениеЗаполнено(Сертификаты) Тогда	
		ВыполнитьWSGetDevelopmentProgram();
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбновитьПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
		
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Табличные части будут очищены, продолжить выполнение операции?'"), РежимДиалогаВопрос.ОКОтмена);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ОбновитьПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
        Возврат;		
	КонецЕсли;
	
	ПрограммаРазвития.Очистить();
	Сертификаты.Очистить();
	
	ВыполнитьWSGetDevelopmentProgram();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьWSGetDevelopmentProgram()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыИнтеграции = УРВСервер.ПолучитьНастройкиИнтеграции(Перечисления.Интеграции.ПолучениеПрограммыРазвитияИзЗУП);
	
	Если ПараметрыИнтеграции = Неопределено Тогда
		
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось получить параметры подключения к сервису ЗУП'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ИмяПользователя 	= ПараметрыИнтеграции.Пользователь; 
	Пароль 				= ПараметрыИнтеграции.Пароль; 
	АдресПодключения	= ПараметрыИнтеграции.АдресПодключения;
	ИмяБазы             = ПараметрыИнтеграции.ИмяБазы;
	Сервер              = ПараметрыИнтеграции.Сервер;
	
	Попытка
		ТекущееСоединение = Новый HTTPСоединение(Сервер,, ИмяПользователя, Пароль);
	Исключение
		
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось подключиться к сервису ЗУП'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецПопытки;
	
	СтруктураЗапроса 	= Новый Структура;	
	ТекущийПользователь	= Пользователи.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(ТекущийПользователь.ФизическоеЛицо) Тогда
		ФизическоеЛицо = Строка(ТекущийПользователь.ФизическоеЛицо);
	Иначе
		ФизическоеЛицо = ТекущийПользователь.Наименование;
	КонецЕсли;
	
	СтруктураЗапроса.Вставить("Сотрудник", ФизическоеЛицо);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);
	ЗапросJSON = ЗаписьJSON.Закрыть();
	
	Текст0				= НСтр("ru = 'ЗУП: Получение программы развития.'");
	Успешно				= Ложь;
	ТекущийHTTPЗапрос	= Новый HTTPЗапрос(ИмяБазы + АдресПодключения);
	
	Попытка
		
		Если ТипЗнч(ЗапросJSON) = Тип("ДвоичныеДанные") Тогда
			ТекущийHTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ЗапросJSON);
		Иначе
			ТекущийHTTPЗапрос.УстановитьТелоИзСтроки(ЗапросJSON);
		КонецЕсли;
		
		ТекущийHTTPОтвет 	= ТекущееСоединение.ОтправитьДляОбработки(ТекущийHTTPЗапрос);			
		ТекущийОтвет 		= ТекущийHTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если ТипЗнч(ТекущийHTTPОтвет) = Тип("HTTPОтвет") Тогда
			
			ОтветJSON = ТекущийHTTPОтвет.ПолучитьТелоКакСтроку();
			
			Если ТекущийHTTPОтвет.КодСостояния = 200 Тогда
				
				Успешно		= Истина;
				ЧтениеJSON 	= Новый ЧтениеJSON;
				
				ЧтениеJSON.УстановитьСтроку(ОтветJSON);
				
				СтруктураОтвета	= ПрочитатьJSON(ЧтениеJSON);
				
				Для Каждого СтруктураМассива Из СтруктураОтвета.ПрограммаРазвития Цикл
					
					НоваяСтрока = ПрограммаРазвития.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураМассива);
					
				КонецЦикла;
				
				Для Каждого СтруктураМассива Из СтруктураОтвета.Сертификаты Цикл
					
					НоваяСтрока = Сертификаты.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураМассива);
					
				КонецЦикла;
				
				Сообщение 		= Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Данные программы развития успешно получены!'");
				
				Сообщение.Сообщить();
				
			ИначеЕсли ТекущийHTTPОтвет.КодСостояния = 204 Тогда
				ЗаписьЖурналаРегистрации("ВыполнитьWSGetDevelopmentProgram", УровеньЖурналаРегистрации.Ошибка, ,,Текст0 + "Не удалось выполнить операцию!");	
				Сообщить(Текст0 + "Не удалось выполнить операцию!", СтатусСообщения.Важное);
			ИначеЕсли ТекущийHTTPОтвет.КодСостояния = 205 Тогда
				ЗаписьЖурналаРегистрации("ВыполнитьWSGetDevelopmentProgram", УровеньЖурналаРегистрации.Ошибка, ,,Текст0 + "Ошибка: " + ОтветJSON + ". Код состояния: " + ТекущийHTTPОтвет.КодСостояния);	
				Сообщить(Текст0 + "Ошибка: " + ОтветJSON, СтатусСообщения.ОченьВажное);
			Иначе
				ЗаписьЖурналаРегистрации("ВыполнитьWSGetDevelopmentProgram", УровеньЖурналаРегистрации.Ошибка, ,,Текст0 + "Ошибка: " + ОтветJSON + ". Код состояния: " + ТекущийHTTPОтвет.КодСостояния);	
				Сообщить(Текст0 + "Ошибка: " + ОтветJSON + ". Код состояния: " + ТекущийHTTPОтвет.КодСостояния, СтатусСообщения.ОченьВажное);
			КонецЕсли;
		Иначе
			ЗаписьЖурналаРегистрации("ВыполнитьWSGetDevelopmentProgram", УровеньЖурналаРегистрации.Ошибка, ,,"Ошибка: " + Текст0 + "Не удалось подключиться к ИС ЗУП.");	
			Сообщить(Текст0 + "Не удалось подключиться к ИС ЗУП.", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
	Исключение
		
		Ошибка	= ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ВыполнитьWSGetDevelopmentProgram", УровеньЖурналаРегистрации.Ошибка, ,,"Ошибка: " + Ошибка);	
		Сообщить("Ошибка: " + Ошибка + " (в ВыполнитьWSGetDevelopmentProgram)");
		
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти