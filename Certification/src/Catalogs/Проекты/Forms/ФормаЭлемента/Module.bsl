
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьДоступность();	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзменениеДанныхОБДПоПроекту" Тогда
		Объект.GUIDОБД       = Новый УникальныйИдентификатор(Параметр.GUIDОБД);
		Объект.Наименование  = Параметр.Наименование;
		Объект.ДатаНачала    = Параметр.ДатаНачала;
		Объект.ДатаОкончания = Параметр.ДатаОкончания;
		УстановитьВидимостьДоступность();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	//Если ЗначениеЗаполнено(Объект.GUIDОБД) Тогда
	//	Элементы.Наименование.Доступность  = Ложь;
	//	Элементы.ДатаНачала.Доступность    = Ложь;
	//	Элементы.ДатаОкончания.Доступность = Ложь;
	//КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ПроверитьИСоздатьОсновнойЭтап(ВыводитьСообщение)

	//Проверяем, есть ли уже основной этап
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПроектов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭтапыПроектов КАК ЭтапыПроектов
		|ГДЕ
		|	ЭтапыПроектов.Владелец = &Владелец
		|	И НЕ ЭтапыПроектов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		НовыйЭтап = Справочники.ЭтапыПроектов.СоздатьЭлемент();
		Новыйэтап.Владелец = Объект.Ссылка;
		НовыйЭтап.Наименование = Объект.Наименование + " (Основной этап)";
		Попытка
			НовыйЭтап.Записать();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Успешно создан этап: " + НовыйЭтап.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось создать этап по причине: " + ОписаниеОшибки();
		КонецПопытки;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Уже существует этап для проекта";
	КонецЕсли;	
	
	Если ВыводитьСообщение Тогда
		Сообщение.Сообщить();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОсновнойЭтап(Команда)
	ПроверитьИСоздатьОсновнойЭтап(Истина);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	Записать();
	
	//Лобашова 30.04.2019 85255 +
	//Эсли это копия информационной базы, то не выполняем обмен
	ПараметрыБлокировки=Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.получить().получить();
	Если НЕ(ПараметрыБлокировки.Свойство("РаботаСВнешнимиРесурсамиЗаблокирована")
		И ПараметрыБлокировки.Свойство("РазделениеВключено")
		И ПараметрыБлокировки.РаботаСВнешнимиРесурсамиЗаблокирована 
		И Не ПараметрыБлокировки.РазделениеВключено)  Тогда
	//Лобашова 30.04.2019 85255 -
	
			СозданиеПроектовИзУРВ = Константы.СозданиеПроектовИзУРВ.Получить();
			Если СозданиеПроектовИзУРВ И Не Объект.НеСинхронизировать И (РольДоступна("ПолныеПрава") Или РольДоступна("Экономист")) Тогда
				//Создание проекта в ЗУП
				Попытка
					ВыполнитьWSCreateProjectZUPСервер(Объект.Наименование, Объект.Ссылка.УникальныйИдентификатор(), ?(ЗначениеЗаполнено(Объект.Родитель), Объект.Родитель.УникальныйИдентификатор(), ""));
				Исключение
					Сообщить(ОписаниеОшибки());	
				КонецПопытки;
				
				//Создание проекта в ОБД
				Если ЗначениеЗаполнено(Объект.GUIDЗУП) Тогда
					Попытка
						ВыполнитьWSCreateProjectOBDСервер(Объект.Наименование, Объект.Ссылка.УникальныйИдентификатор(), ?(ЗначениеЗаполнено(Объект.Родитель), Объект.Родитель.УникальныйИдентификатор(), ""));
					Исключение
						Сообщить(ОписаниеОшибки());	
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
	
	//Лобашова 30.04.2019 85255 +
	КонецЕсли;
	//Лобашова 30.04.2019 85255 -
	
	ПроверитьИСоздатьОсновнойЭтап(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКнопка(Команда)
	ЗаписатьНаСервере();
	ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ЗаписатьНаСервере();
	ОбновитьОтображениеДанных();
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьWSCreateProjectZUPСервер(NameProject, GUIDURV, ProcreatorGUID)
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыИнтеграции = УРВСервер.ПолучитьНастройкиИнтеграции(Перечисления.Интеграции.СозданиеПроектаВЗУП);
	
	Если ПараметрыИнтеграции = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось получить параметры подключения к сервису ЗУП";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ИмяПользователя 	= ПараметрыИнтеграции.Пользователь; 
	Пароль 				= ПараметрыИнтеграции.Пароль; 
	АдресПодключения 	= ПараметрыИнтеграции.АдресПодключения;
	//Порт                = ПараметрыИнтеграции.Порт;
	ИмяБазы             = ПараметрыИнтеграции.ИмяБазы;
	Сервер              = ПараметрыИнтеграции.Сервер;
	
	Попытка
		тСоединение = Новый HTTPСоединение(Сервер,, ИмяПользователя, Пароль);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось подключиться к сервису ЗУП";
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("NameProject", NameProject);
	СтруктураЗапроса.Вставить("GUIDURV", Строка(GUIDURV));
	СтруктураЗапроса.Вставить("GUIDZUP", Строка(Объект.GUIDЗУП));
	СтруктураЗапроса.Вставить("ProcreatorGUID", Строка(ProcreatorGUID));
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);
	ЗапросJSON = ЗаписьJSON.Закрыть();
	
	Текст0		= "ЗУП: Создание проекта.";
	Успешно		= Ложь;
	тHTTPЗапрос	= Новый HTTPЗапрос(ИмяБазы + АдресПодключения);
	Попытка
		Если ТипЗнч(ЗапросJSON) = Тип("ДвоичныеДанные") Тогда
			тHTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ЗапросJSON);
		Иначе
			тHTTPЗапрос.УстановитьТелоИзСтроки(ЗапросJSON);
		КонецЕсли;
		тHTTPОтвет = тСоединение.ОтправитьДляОбработки(тHTTPЗапрос);			
		тОтвет = тHTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если ТипЗнч(тHTTPОтвет) = Тип("HTTPОтвет") Тогда
			ОтветJSON = тHTTPОтвет.ПолучитьТелоКакСтроку();
			
			Если тHTTPОтвет.КодСостояния = 200 Тогда
				Успешно		= Истина;
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ОтветJSON);
				СтруктураОтвета 		= ПрочитатьJSON(ЧтениеJSON);
				Объект.GUIDЗУП = СтруктураОтвета.GUID_ZGU;
				Записать();
				
				Сообщить("Данные в ЗУП успешно обновлены!", СтатусСообщения.Важное);
			ИначеЕсли тHTTPОтвет.КодСостояния = 204 Тогда
				ЗаписьЖурналаРегистрации("ВыполнитьWSCreateProjectZUP", УровеньЖурналаРегистрации.Ошибка, ,,Текст0 + "Не удалось выполнить операцию!");	
				Сообщить(Текст0 + "Не удалось выполнить операцию!", СтатусСообщения.Важное);
			ИначеЕсли тHTTPОтвет.КодСостояния = 205 Тогда
				ЗаписьЖурналаРегистрации("ВыполнитьWSCreateProjectZUP", УровеньЖурналаРегистрации.Ошибка, ,,Текст0 + "Ошибка: " + ОтветJSON + ". Код состояния: " + тHTTPОтвет.КодСостояния);	
				Сообщить(Текст0 + "Ошибка: " + ОтветJSON, СтатусСообщения.ОченьВажное);
			Иначе
				ЗаписьЖурналаРегистрации("ВыполнитьWSCreateProjectZUP", УровеньЖурналаРегистрации.Ошибка, ,,Текст0 + "Ошибка: " + ОтветJSON + ". Код состояния: " + тHTTPОтвет.КодСостояния);	
				Сообщить(Текст0 + "Ошибка: " + ОтветJSON + ". Код состояния: " + тHTTPОтвет.КодСостояния, СтатусСообщения.ОченьВажное);
			КонецЕсли;
		Иначе
			ЗаписьЖурналаРегистрации("ВыполнитьWSCreateProjectZUP", УровеньЖурналаРегистрации.Ошибка, ,,"Ошибка: " + Текст0 + "Не удалось подключиться к ИС ЗУП.");	
			Сообщить(Текст0 + "Не удалось подключиться к ИС ЗУП.", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
	Исключение
		Ошибка	= ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ВыполнитьWSCreateProjectZUP", УровеньЖурналаРегистрации.Ошибка, ,,"Ошибка: " + Ошибка);	
		Сообщить("Ошибка: " + Ошибка + " (в ВыполнитьWSCreateProjectZUP)");
	КонецПопытки;
	
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьWSCreateProjectOBDСервер(NameProject, GUIDURV, ProcreatorGUID)
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыИнтеграции = УРВСервер.ПолучитьНастройкиИнтеграции(Перечисления.Интеграции.СозданиеПроектаВОБД);
	
	Если ПараметрыИнтеграции = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось получить параметры подключения к сервису ОБД";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ИмяПользователя 	= ПараметрыИнтеграции.Пользователь; 
	Пароль 				= ПараметрыИнтеграции.Пароль; 
	АдресПодключения 	= ПараметрыИнтеграции.АдресПодключения;
	//Порт                = ПараметрыИнтеграции.Порт;
	ИмяБазы             = ПараметрыИнтеграции.ИмяБазы;
	Сервер              = ПараметрыИнтеграции.Сервер;
	
	Попытка
		тСоединение = Новый HTTPСоединение(Сервер,, ИмяПользователя, Пароль);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось подключиться к сервису ОБД";
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("NameProject", NameProject);
	СтруктураЗапроса.Вставить("GUIDURV", Строка(GUIDURV));
	СтруктураЗапроса.Вставить("GUIDZUP", Строка(Объект.GUIDЗУП));
	СтруктураЗапроса.Вставить("ProcreatorGUID", Строка(ProcreatorGUID));
	СтруктураЗапроса.Вставить("DateStart", Объект.ДатаНачала);
	СтруктураЗапроса.Вставить("DateFinish", Объект.ДатаОкончания);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);
	ЗапросJSON = ЗаписьJSON.Закрыть();
	
	Текст0		= "ОБД: Создание проекта.";
	Успешно		= Ложь;
	тHTTPЗапрос	= Новый HTTPЗапрос(ИмяБазы + АдресПодключения);
	Попытка
		Если ТипЗнч(ЗапросJSON) = Тип("ДвоичныеДанные") Тогда
			тHTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ЗапросJSON);
		Иначе
			тHTTPЗапрос.УстановитьТелоИзСтроки(ЗапросJSON);
		КонецЕсли;
		тHTTPОтвет = тСоединение.ОтправитьДляОбработки(тHTTPЗапрос);			
		тОтвет = тHTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если ТипЗнч(тHTTPОтвет) = Тип("HTTPОтвет") Тогда
			ОтветJSON = тHTTPОтвет.ПолучитьТелоКакСтроку();
			
			Если тHTTPОтвет.КодСостояния = 200 Тогда
				Успешно		= Истина;
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ОтветJSON);
				СтруктураОтвета 		= ПрочитатьJSON(ЧтениеJSON);
				Объект.GUIDОБД = СтруктураОтвета.GUID_OBD;
				Записать();
				
				Сообщить("Данные в ОБД успешно обновлены!", СтатусСообщения.Важное);
			ИначеЕсли тHTTPОтвет.КодСостояния = 204 Тогда
				ЗаписьЖурналаРегистрации("ВыполнитьWSCreateProjectOBD", УровеньЖурналаРегистрации.Ошибка, ,,Текст0 + "Не удалось выполнить операцию!");	
				Сообщить(Текст0 + "Не удалось выполнить операцию!", СтатусСообщения.Важное);
			ИначеЕсли тHTTPОтвет.КодСостояния = 205 Тогда
				ЗаписьЖурналаРегистрации("ВыполнитьWSCreateProjectOBD", УровеньЖурналаРегистрации.Ошибка, ,,Текст0 + "Ошибка: " + ОтветJSON + ". Код состояния: " + тHTTPОтвет.КодСостояния);	
				Сообщить(Текст0 + "Ошибка: " + ОтветJSON, СтатусСообщения.ОченьВажное);
			Иначе
				ЗаписьЖурналаРегистрации("ВыполнитьWSCreateProjectOBD", УровеньЖурналаРегистрации.Ошибка, ,,Текст0 + "Ошибка: " + ОтветJSON + ". Код состояния: " + тHTTPОтвет.КодСостояния);	
				Сообщить(Текст0 + "Ошибка: " + ОтветJSON + ". Код состояния: " + тHTTPОтвет.КодСостояния, СтатусСообщения.ОченьВажное);
			КонецЕсли;
		Иначе
			ЗаписьЖурналаРегистрации("ВыполнитьWSCreateProjectOBD", УровеньЖурналаРегистрации.Ошибка, ,,"Ошибка: " + Текст0 + "Не удалось подключиться к ИС ЗУП.");	
			Сообщить(Текст0 + "Не удалось подключиться к ИС ОБД.", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
	Исключение
		Ошибка	= ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ВыполнитьWSCreateProjectOBD", УровеньЖурналаРегистрации.Ошибка, ,,"Ошибка: " + Ошибка);	
		Сообщить("Ошибка: " + Ошибка + " (в ВыполнитьWSCreateProjectOBD)");
	КонецПопытки;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура RedmineProjectIdПриИзмененииНаСервере()
	Константы.ДатаСинхронизацииЗадачRedmineКорп.Установить(Дата("00010101"));
КонецПроцедуры

&НаКлиенте
Процедура RedmineProjectIdПриИзменении(Элемент)
	RedmineProjectIdПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если РольДоступна("ЗаполнениеВПроектахИД") И Не РольДоступна("ПолныеПрава") И Не РольДоступна("Экономист") Тогда
		Для Каждого Эл Из Элементы Цикл
			Попытка
				Эл.ТолькоПросмотр = Истина;
			Исключение
				Попытка
					Эл.Видимость = Ложь;
				Исключение
				КонецПопытки;
			КонецПопытки;	
		КонецЦикла;
		Элементы.RedmineProjectId.ТолькоПросмотр = Ложь;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Истина;
	КонецЕсли;	
	Если Не РольДоступна("ЗаполнениеВПроектахИД") И Не РольДоступна("ПолныеПрава") И Не РольДоступна("Экономист") Тогда
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаСоздатьОсновнойЭтап.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УчетПоКонтрагентамПриИзменении(Элемент)
	Элементы.КонтрагентАбонент.Доступность = НЕ Объект.УчетПоКонтрагентам;
КонецПроцедуры

//+++ Астахова, 04.07.2019
&НаКлиенте
Процедура URMExchangeОбновитьДанные(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.GUIDОБД) Тогда
		 Сообщение = Новый СообщениеПользователю;
		 Сообщение.Текст = "Обновление проекта из ОБД не возможно!
		 |Не указан GUID объекта!";
		 Сообщение.Сообщить();
		 Возврат;
	КонецЕсли;	
	Если URMExchangeСервер.ПолучитьКонстантуСозданиеПроектовИзУРВ() 
		 ИЛИ НЕ URMExchangeСервер.ПолучитьКонстантуОбменСОБД() Тогда
		  Сообщение = Новый СообщениеПользователю;
		  Сообщение.Текст = "Обновление проекта из ОБД не предусмотрено!";
		  Сообщение.Сообщить();
		  Возврат;
	КонецЕсли;  
	URMExchangeОбновитьДанныеНаСервере();	
КонецПроцедуры

&НаСервере
Процедура URMExchangeОбновитьДанныеНаСервере()
	ОбработкаОбъект = Обработки.СозданиеОбъектовURMExchange.Создать();
	СписокXDTO = ОбработкаОбъект.ЗагрузкаДанныхИзURM("GetProject");
    строкаПроектXDTO = Неопределено;
	Для Каждого строкаXDTO Из СписокXDTO Цикл
		Если строкаXDTO.GUIDProject = Объект.GUIDОБД Тогда
			строкаПроектXDTO = строкаXDTO;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Если строкаПроектXDTO = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Проект не найден в ОБД!";
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	Объект.Наименование  = строкаПроектXDTO.NameProject;
	Объект.ДатаНачала    = строкаПроектXDTO.StartDate;
	Объект.ДатаОкончания = строкаПроектXDTO.EndDate;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Данные успешно обновлены.";
	Сообщение.Сообщить();
КонецПроцедуры	


