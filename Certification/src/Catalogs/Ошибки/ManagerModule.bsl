#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Установить исключительную управляемую блокировку на массив переданных ошибок.
//
// Параметры:
//   Ошибки - Массив - массив ссылок на ошибки, или одна ссылка СправочникСсылка.Ошибки.
//
Процедура ЗаблокироватьОбъекты(Ошибки) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	
	Если ТипЗнч(Ошибки) = Тип("Массив") Тогда
		Для каждого Ошибка Из Ошибки Цикл
			
			Если ТипЗнч(Ошибки) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда 
				Продолжить;
			КонецЕсли;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Ошибки");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ошибка);
		КонецЦикла;
	Иначе	
		Если ТипЗнч(Ошибки) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат;
		КонецЕсли;	
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Ошибки");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ошибки);
	КонецЕсли;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Возвращает форматированное описание консультации.
//
// Параметры:
//  Ссылка - СправочникСсылка.Ошибки - ошибка, по которой нужно получить описание.
// 
// Возвращаемое значение:
//  ФорматированныйДокумент - описание ошибки.
//
Функция ФорматированноеОписание(Ссылка) Экспорт
    
    Свойства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
       "Наименование, ОписаниеХранилище, ВоспроизведениеХранилище, ОбходнойПутьХранилище");
    
    Воспроизведение = Новый ФорматированныйДокумент;
    Воспроизведение.УстановитьФорматированнуюСтроку(новый ФорматированнаяСтрока(НСтр("ru='Воспроизведение:'"), ШрифтыСтиля.ВыделенныйШрифт));
    ОбходнойПуть = Новый ФорматированныйДокумент;
    ОбходнойПуть.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(НСтр("ru='Обходной путь:'"), ШрифтыСтиля.ВыделенныйШрифт));
    Описание = Свойства.ОписаниеХранилище.Получить();
    Описание.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
    Описание.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
    ВзаимодействияУСП.ДобавитьФорматированныйДокументКФорматированномуДокументу(Описание, Воспроизведение); 
    ВзаимодействияУСП.ДобавитьФорматированныйДокументКФорматированномуДокументу(Описание, Свойства.ВоспроизведениеХранилище.Получить());
    Описание.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
    Описание.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
    ВзаимодействияУСП.ДобавитьФорматированныйДокументКФорматированномуДокументу(Описание, ОбходнойПуть); 
    ВзаимодействияУСП.ДобавитьФорматированныйДокументКФорматированномуДокументу(Описание, Свойства.ОбходнойПутьХранилище.Получить());
    
    Возврат Описание;
    
КонецФункции

// Возвращает вид события создания объекта.
//
Функция ВидСобытия_Создание() Экспорт
	
    Возврат Справочники.ВидыБизнесСобытий.СозданиеОшибки;	
	
КонецФункции

// Возвращает вид события изменения объекта.
//
Функция ВидСобытия_Изменение() Экспорт
	
    Возврат Справочники.ВидыБизнесСобытий.ИзменениеОшибки;	
	
КонецФункции

// Возвращает вид события перенаправления объекта.
//
Функция ВидСобытия_Перенаправление() Экспорт
	
    Возврат Справочники.ВидыБизнесСобытий.ПеренаправлениеОшибки;	
	
КонецФункции


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет, подходит ли объект к шаблону бизнес-процесса
//
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат БизнесСобытия.ШаблонПодходитДляАвтозапускаБизнесПроцессаПоКарточке(ШаблонСсылка, 
		ПредметСсылка, Подписчик, ВидСобытия, Условие);
	
КонецФункции

#КонецОбласти

#КонецЕсли