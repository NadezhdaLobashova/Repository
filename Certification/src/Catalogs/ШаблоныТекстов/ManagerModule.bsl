
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция - Шаблон по типу
//
// Параметры:
//  ТипШаблона - СправочникСсылка.ТипыШаблоновТекстов - тип шаблона текста
//  Сервис     - СправочникСсылка.Сервисы - сервис
//  Витрина    - СправочникСсылка.Витрины - витрина
// 
// Возвращаемое значение:
//   - Структура - структура шаблона:
//      * Ссылка - СправочникСсылка.ШаблоныТекстов - ссылка на шаблон текста (пустая, если это шаблон по-умолчанию).
//      * Наименование - Строка - наименование шаблона.
//      * ТипШаблона - СправочникСсылка.ТипыШаблоновТекстов - тип шаблона.
//      * Заголовок - Строка - заголовок шаблона.
//      * Текст - ФорматированныйДокумент - текст шаблона.
//
// {Рарус_shav 2018.10.23 74401
//Функция ШаблонПоТипу(ТипШаблона, Сервис, Витрина = Неопределено) Экспорт
Функция ШаблонПоТипу(ТипШаблона, Сервис, Витрина = Неопределено, Проект = Неопределено, УчетнаяЗапись = Неопределено) Экспорт
// }Рарус_shav 2018.10.23 74401	
	
    Запрос = Новый Запрос;
    Запрос.Текст = 
    	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   1 КАК Порядок,
        |   ШаблоныТекстовПисем.ШаблонТекста,
        |   ШаблоныТекстовПисем.ШаблонТекста.Наименование КАК Наименование,
        |   ШаблоныТекстовПисем.ШаблонТекста.Заголовок КАК Заголовок,
        |   ШаблоныТекстовПисем.ШаблонТекста.ТекстХранилище КАК ТекстХранилище,
        |   ШаблоныТекстовПисем.ШаблонТекста.ТипШаблона КАК ТипШаблона
        |ИЗ
        |   РегистрСведений.ШаблоныТекстовПисем КАК ШаблоныТекстовПисем
        |ГДЕ
        |   ШаблоныТекстовПисем.Сервис = &Сервис
        |   И ШаблоныТекстовПисем.Витрина = &Витрина
        |   И ШаблоныТекстовПисем.ТипШаблона = &ТипШаблона
		// {Рарус_shav 2018.10.23 74401
    	|	И ВЫБОР
    	|			КОГДА &ПроектНеПустой
    	|				ТОГДА ШаблоныТекстовПисем.Проект = &Проект
		|			ИНАЧЕ ИСТИНА
    	|		КОНЕЦ
    	|	И ВЫБОР
    	|			КОГДА &УчетнаяЗаписьНеПустая
    	|				ТОГДА ШаблоныТекстовПисем.УчетнаяЗапись = &УчетнаяЗапись
		|			ИНАЧЕ ИСТИНА
    	|		КОНЕЦ
		// }Рарус_shav 2018.10.23 74401
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   2,
        |   ШаблоныТекстовПисем.ШаблонТекста,
        |   ШаблоныТекстовПисем.ШаблонТекста.Наименование,
        |   ШаблоныТекстовПисем.ШаблонТекста.Заголовок,
        |   ШаблоныТекстовПисем.ШаблонТекста.ТекстХранилище,
        |   ШаблоныТекстовПисем.ШаблонТекста.ТипШаблона
        |ИЗ
        |   РегистрСведений.ШаблоныТекстовПисем КАК ШаблоныТекстовПисем
        |ГДЕ
        |   ШаблоныТекстовПисем.Сервис = &Сервис
        |   И ШаблоныТекстовПисем.Витрина = &ОсновнаяВитрина
        |   И ШаблоныТекстовПисем.ТипШаблона = &ТипШаблона
		// {Рарус_shav 2018.10.23 74401
    	|	И ВЫБОР
    	|			КОГДА &ПроектНеПустой
    	|				ТОГДА ШаблоныТекстовПисем.Проект = &Проект
		|			ИНАЧЕ ИСТИНА
    	|		КОНЕЦ
    	|	И ВЫБОР
    	|			КОГДА &УчетнаяЗаписьНеПустая
    	|				ТОГДА ШаблоныТекстовПисем.УчетнаяЗапись = &УчетнаяЗапись
		|			ИНАЧЕ ИСТИНА
    	|		КОНЕЦ
		// }Рарус_shav 2018.10.23 74401
        |
        |УПОРЯДОЧИТЬ ПО
        |   Порядок";
    
    Запрос.УстановитьПараметр("Сервис", Сервис);
    Запрос.УстановитьПараметр("ОсновнаяВитрина", БазаЗнанийПовтИсп.ОсновнаяВитринаСервиса(Сервис));
    Запрос.УстановитьПараметр("Витрина", Витрина);
    Запрос.УстановитьПараметр("ТипШаблона", ТипШаблона);
	// {Рарус_shav 2018.10.23 74401
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ПроектНеПустой", ЗначениеЗаполнено(Проект));
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("УчетнаяЗаписьНеПустая", ЗначениеЗаполнено(УчетнаяЗапись));
	// }Рарус_shav 2018.10.23 74401
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    ШаблонТекста = Новый Структура;
    
    Если Выборка.Следующий() Тогда 
        ШаблонТекста.Вставить("Ссылка", Выборка.ШаблонТекста);
        ШаблонТекста.Вставить("Наименование", Выборка.Наименование);
        ШаблонТекста.Вставить("ТипШаблона", Выборка.ТипШаблона);
        ШаблонТекста.Вставить("Заголовок", Выборка.Заголовок);
        ШаблонТекста.Вставить("Текст", Выборка.ТекстХранилище.Получить());
	Иначе
		// {Рарус_shav 2018.10.31 74401 #7
		//ШаблонТекста.Вставить("Ссылка", Справочники.ШаблоныТекстов.ПустаяСсылка());
		//ШаблонТекста.Вставить("Наименование", Строка(ТипШаблона));
		//ШаблонТекста.Вставить("ТипШаблона", ТипШаблона);
		//ТекстШаблона = ПолучитьШаблонПоУмолчанию(ТипШаблона);
		//ШаблонТекста.Вставить("Заголовок", Строка(ТипШаблона));
		//НачалоЗаголовка = Найти(ТекстШаблона,"<title>");
		//Если НачалоЗаголовка <> 0 Тогда
		//    ШаблонТекста.Вставить("Заголовок", Сред(ТекстШаблона, НачалоЗаголовка + 7, СтрНайти(ТекстШаблона, "</title>") - НачалоЗаголовка - 7));
		//КонецЕсли;    
		//ФорматированныйДокумент = Новый ФорматированныйДокумент;
		//ФорматированныйДокумент.УстановитьHTML(ТекстШаблона, Новый Структура);
		//ШаблонТекста.Вставить("Текст", ФорматированныйДокумент);
		
		//Выполним запрос с пустым проектом
		Запрос.УстановитьПараметр("Проект", Справочники.Проекты.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПроектНеПустой", Ложь);
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Запрос.УстановитьПараметр("УчетнаяЗаписьНеПустая", ЗначениеЗаполнено(УчетнаяЗапись));
	    Результат = Запрос.Выполнить();
	    Выборка = Результат.Выбрать();
    
	    ШаблонТекста = Новый Структура;
	    
		Если Выборка.Следующий() Тогда
	        ШаблонТекста.Вставить("Ссылка", Выборка.ШаблонТекста);
	        ШаблонТекста.Вставить("Наименование", Выборка.Наименование);
	        ШаблонТекста.Вставить("ТипШаблона", Выборка.ТипШаблона);
	        ШаблонТекста.Вставить("Заголовок", Выборка.Заголовок);
	        ШаблонТекста.Вставить("Текст", Выборка.ТекстХранилище.Получить());
		Иначе
			Запрос.УстановитьПараметр("Проект", Справочники.Проекты.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПроектНеПустой", Ложь);
			Запрос.УстановитьПараметр("УчетнаяЗапись", Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка());
			Запрос.УстановитьПараметр("УчетнаяЗаписьНеПустая", Ложь);
		    Результат = Запрос.Выполнить();
		    Выборка = Результат.Выбрать();
	    
		    ШаблонТекста = Новый Структура;
		    
			Если Выборка.Следующий() Тогда
		        ШаблонТекста.Вставить("Ссылка", Выборка.ШаблонТекста);
		        ШаблонТекста.Вставить("Наименование", Выборка.Наименование);
		        ШаблонТекста.Вставить("ТипШаблона", Выборка.ТипШаблона);
		        ШаблонТекста.Вставить("Заголовок", Выборка.Заголовок);
		        ШаблонТекста.Вставить("Текст", Выборка.ТекстХранилище.Получить());
			Иначе
				ШаблонТекста = Неопределено;
			КонецЕсли;	
		КонецЕсли;	
        // }Рарус_shav 2018.10.31 74401 #7
    КонецЕсли;
    
    Возврат ШаблонТекста;
    
КонецФункции

// Получить текст шаблона по умолчанию для указанного типа шаблона.
//
// Параметры:
//  Тип - СправочникСсылка.ТипыШаблоновТекстов, тип шаблона.
//  Расположение - Объект метаданных в котором расположен макет.
//  Язык - Строка, язык шаблона (по умолчанию русский).
//
// Возвращаемое значение:
//  Строка - текст шаблона.
//
Функция ПолучитьШаблонПоУмолчанию(Тип, Расположение = Неопределено, Язык = Неопределено) Экспорт
	
	Возврат ПолучитьМакетШаблона(ПолучитьИмяМакетаШаблона(Тип), Расположение, Язык);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
    
// Получить макет на указанном языке по имени и расположению.
//
// Параметры:
//  Имя - Строка, имя шаблона.
//  Расположение - Объект метаданных в котором расположен макет.
//  Язык - Строка, язык макета или Неопределено, если нужно использовать язык пользователя.
//
// Возвращаемое значение:
//  Макет, который был запрошен.
//
Функция ПолучитьМакетПоИмени(Имя, Расположение = Неопределено, Язык = Неопределено)
	
	КодЯзыка = ?(ПустаяСтрока(Язык), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(), Язык);
	ИмяМакета = Имя + "_" + КодЯзыка;
	Если Расположение = Неопределено Тогда
		Возврат ПолучитьОбщийМакет(ИмяМакета);
	Иначе
		Возврат Расположение.ПолучитьМакет(ИмяМакета);
	КонецЕсли;
	
КонецФункции

// Получить макет на указанном языке по имени и расположению.
//
// Если не удается получить макет для указанного языка или язык не указан,
// выполняется попытка получения макета для языка пользователя, если
// и эта попытка не завршается успешно, то возвращается макет на языке
// по умолчанию (русском).
//
// Параметры:
//  Имя - Строка, имя шаблона.
//  Расположение - Объект метаданных в котором расположен макет.
//  Язык - Строка, язык макета или Неопределено, если нужно использовать язык пользователя.
//
// Возвращаемое значение:
//  Макет, который был запрошен.
//
Функция ПолучитьЛокализованныйМакет(Имя, Расположение = Неопределено, Язык = Неопределено)
	
	Попытка
		Возврат ПолучитьМакетПоИмени(Имя, Расположение, Язык);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПолноеИмяМакета = Строка(Расположение);
		Если Не ПустаяСтрока(ПолноеИмяМакета) Тогда
			ПолноеИмяМакета = ПолноеИмяМакета + ".";
		КонецЕсли;
		ПолноеИмяМакета = ПолноеИмяМакета + Имя + "_" + Язык;
		ТекстОшибки = НСтр("ru = 'Не найден макет ""%1"".'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", ПолноеИмяМакета);
		ЦентрИдей.ЗаписатьОшибкуВЖурнал(НСтр("ru = 'Получение локализованного макета'"), ТекстОшибки, ИнформацияОбОшибке);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецФункции

// Получить макет шаблона или его параметров по имени.
//
// Если не удается получить макет для языка пользователя,
// То возвращается макет на языке по умолчанию (русском).
//
// Параметры:
//  Имя - Строка, наименование шаблона.
//  Расположение - Объект метаданных в котором расположен макет.
//  Язык - Строка, язык шаблона (по умолчанию русский).
//
// Возвращаемое значение:
//  Строка - содержимое шаблона.
//
Функция ПолучитьМакетШаблона(Имя, Расположение = Неопределено, Язык = Неопределено)
	
	РасположениеМакета = ?(Расположение = Неопределено, Справочники.ШаблоныТекстов, Расположение);
	Макет = ПолучитьЛокализованныйМакет(Имя, РасположениеМакета, Язык);
	Возврат Макет.ПолучитьТекст();
	
КонецФункции

// Получить имя макета шаблона базового типа по указанному типу.
//
// Параметры:
//  Тип - СправочникСсылка.ТипыШаблоновТекстов - тип, для которого ищется имя макета.
//
// Возвращаемое значение:
//  Строка - имя макета шаблона текста.
//
Функция ПолучитьИмяМакетаШаблона(Тип) Экспорт
	
	ПолноеИмяТипа = ПолучитьПолноеИмяПредопределенногоЗначения(БазовыйТип(Тип));
	ФрагментыИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяТипа, ".");
	Возврат ФрагментыИмени[ФрагментыИмени.Количество()-1];
	
КонецФункции

// Получить базовый тип для указанного дочернего типа.
// Базовым в данном случае является верхний элемент иерархии, не имеющий
// родительского типа.
//
// Параметры:
//  Тип - СправочникСсылка.ТипыШаблоновТекстов - тип, для которого ищется базовый.
//
// Возвращаемое значение:
//  СправочникСсылка.ТипыШаблоновТекстов - базовый тип, если таковой есть или
//                                         тотже самый, если такового нет.
//
Функция БазовыйТип(Тип) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТипыШаблоновТекстов.Ссылка КАК БазовыйТип
		|ИЗ
		|	Справочник.ТипыШаблоновТекстов КАК ТипыШаблоновТекстов
		|ГДЕ
		|	ТипыШаблоновТекстов.Ссылка = &ПроизводныйТип
		|ИТОГИ ПО
		|	БазовыйТип ИЕРАРХИЯ");
	Запрос.УстановитьПараметр("ПроизводныйТип", Тип);
	Выбока = Запрос.Выполнить().Выбрать();
	Если Выбока.Следующий() Тогда
		Возврат Выбока.БазовыйТип;
	Иначе
		Возврат Тип;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#КонецЕсли
