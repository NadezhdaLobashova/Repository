
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЧасовыеПояса = ОбщегоНазначенияУСП.ПолучитьЧасовыеПояса();
	Для каждого Строка Из ЧасовыеПояса Цикл
		Элементы.ЧасовойПояс.СписокВыбора.Добавить(Строка.Идентификатор, Строка.Идентификатор + " (" + Строка.Представление +")");
	КонецЦикла;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Отображение контактной информации
	Если Не (РольДоступна(Метаданные.Роли.ЧтениеИзменениеКонтактнойИнформации) Или Пользователи.ЭтоПолноправныйПользователь()) Тогда
		Элементы.ГруппаКонтактнаяИнформация.Видимость = Ложь;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Элементы.Наименование.ТолькоПросмотр = Ложь;
		Элементы.Владелец.ТолькоПросмотр = Ложь;
		Элементы.Код.ТолькоПросмотр = Ложь;
		Элементы.ЧасовойПояс.ТолькоПросмотр = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	//{rarus kruser 09082019 91127	
	ОбменСНСИ = Константы.ИспользоватьОбменДаннымиНСИ20.Получить();	
	Если Не ОбменСНСИ Тогда
	//}rarus kruser 09082019 91127
	//Лобашова 30.04.2019 85255 +
	//Эсли это копия информационной базы, то не выполняем обмен
	ПараметрыБлокировки=Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.получить().получить();
	Если НЕ(ПараметрыБлокировки.Свойство("РаботаСВнешнимиРесурсамиЗаблокирована")
		И ПараметрыБлокировки.Свойство("РазделениеВключено")
		И ПараметрыБлокировки.РаботаСВнешнимиРесурсамиЗаблокирована 
		И Не ПараметрыБлокировки.РазделениеВключено)  Тогда
	//Лобашова 30.04.2019 85255 -
			Попытка
				отправленоВОБД = ОтправитьДанныеВОБД();
			Исключение
				отправленоВОБД = Ложь;
			КонецПопытки;
			Если отправленоВОБД Тогда 
					
			Иначе
				Сообщить("Ошибка отправки данных в ОБД");
			КонецЕсли;
	//Лобашова 30.04.2019 85255 +
	КонецЕсли;
	//Лобашова 30.04.2019 85255 -
	//{rarus kruser 09082019 91127		
	КонецЕсли;
	//}rarus kruser 09082019 91127

КонецПроцедуры

#Область СтандартныеПодсистемы_КонтактнаяИнформация

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка(ЭтотОбъект, Элемент.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда(ЭтотОбъект, Команда.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуВводаАдреса(ЭтотОбъект, Результат);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьКонтактнуюИнформацию(Результат = Неопределено)
	
	Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ОтправитьДанныеВОБД()
	
	СтруктураЗапроса = Новый Структура(	"GUIDАбонент,GUIDПользователя,Представление," +
										"Фамилия, Имя, Отчество, ДатаРождения, Должность,"+
										"Телефон1,Телефон1КодСтраны,Телефон1КодГорода,Телефон1Номер,Телефон1Добавочный," +
										"Телефон2,Телефон2КодСтраны,Телефон2КодГорода,Телефон2Номер,Телефон2Добавочный," +
										"Почта1,Почта2");

	СтруктураЗапроса.GUIDАбонент = "";
	СтруктураЗапроса.GUIDПользователя = Строка(Объект.GUIDОБД);
	СтруктураЗапроса.Представление = Объект.Наименование;
	СтруктураЗапроса.Фамилия = "";
	СтруктураЗапроса.Имя = "";
	СтруктураЗапроса.Отчество = "";
	СтруктураЗапроса.ДатаРождения = "";
	СтруктураЗапроса.Должность = "";
	Телефон1Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонПользователяСервиса));
	Если Телефон1Строки.Количество() Тогда 
		ЗначенияПолей = Телефон1Строки[0].ЗначенияПолей;
		отказ = Истина;
		РезультатыЧтения = Новый Структура;
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Телефон, РезультатыЧтения);
		СтруктураЗапроса.Телефон1 = Телефон1Строки[0].Представление; 
		СтруктураЗапроса.Телефон1КодСтраны = XDTOКонтактная.Состав.КодСтраны;
		СтруктураЗапроса.Телефон1КодГорода = XDTOКонтактная.Состав.КодГорода;
		СтруктураЗапроса.Телефон1Номер = XDTOКонтактная.Состав.Номер;
		СтруктураЗапроса.Телефон1Добавочный = XDTOКонтактная.Состав.Добавочный;
	КонецЕсли;
	Телефон2Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ДополнительныйТелефонПользователяСервиса));
	Если Телефон2Строки.Количество() Тогда 
		ЗначенияПолей = Телефон2Строки[0].ЗначенияПолей;
		отказ = Истина;
		РезультатыЧтения = Новый Структура;
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Телефон, РезультатыЧтения);
		СтруктураЗапроса.Телефон2 = Телефон2Строки[0].Представление; 
		СтруктураЗапроса.Телефон2КодСтраны = XDTOКонтактная.Состав.КодСтраны;
		СтруктураЗапроса.Телефон2КодГорода = XDTOКонтактная.Состав.КодГорода;
		СтруктураЗапроса.Телефон2Номер = XDTOКонтактная.Состав.Номер;
		СтруктураЗапроса.Телефон2Добавочный = XDTOКонтактная.Состав.Добавочный;
	КонецЕсли;
	Почта1Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EmailПользователяСервиса));
	Если Почта1Строки.Количество() Тогда 
		СтруктураЗапроса.Почта1 = Почта1Строки[0].Представление; 
	КонецЕсли;
	Почта2Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.ДополнительныйEmailПользователяСервиса));
	Если Почта2Строки.Количество() Тогда 
		СтруктураЗапроса.Почта2 = Почта2Строки[0].Представление; 
	КонецЕсли;
	//СтруктураЗапроса.Телефон2 = 
	//СтруктураЗапроса.Телефон2КодСтраны = 
	//СтруктураЗапроса.Телефон2КодГорода = 
	//СтруктураЗапроса.Телефон2Номер = 
	//СтруктураЗапроса.Телефон2Добавочный = 
	//СтруктураЗапроса.Почта1 = 
	//СтруктураЗапроса.Почта2 = 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);
	ЗапросJSON = ЗаписьJSON.Закрыть();
	
	НастройкиИнтеграции = УРВСервер.ПолучитьНастройкиИнтеграции(Перечисления.Интеграции.СозданиеКонтактныхЛицВОБД);
	//ИмяПользователя 	= "Администратор"; 
	//Пароль 				= ""; 
	//АдресПодключения 	= "/hs/ExchangeOBD/setPartner/";
	//Порт                = "8080";
	//ИмяБазы             = "URV";
	//Сервер              = "localhost";
	ИмяПользователя 	= НастройкиИнтеграции.Пользователь; 
	Пароль 				= НастройкиИнтеграции.Пароль; 
	АдресПодключения 	= НастройкиИнтеграции.АдресПодключения;
	//Порт                = НастройкиИнтеграции.;
	ИмяБазы             = НастройкиИнтеграции.ИмяБазы;
	Сервер              = НастройкиИнтеграции.Сервер;
	
	тСоединение = Новый HTTPСоединение(Сервер,, ИмяПользователя, Пароль);
	тHTTPЗапрос	= Новый HTTPЗапрос;
	тHTTPЗапрос.АдресРесурса = ИмяБазы + АдресПодключения;
	Попытка
		Если ТипЗнч(ЗапросJSON) = Тип("ДвоичныеДанные") Тогда
			тHTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ЗапросJSON);
		Иначе
			тHTTPЗапрос.УстановитьТелоИзСтроки(ЗапросJSON);
		КонецЕсли;
		тHTTPОтвет = тСоединение.ОтправитьДляОбработки(тHTTPЗапрос);
		ЗапросJSON = тHTTPОтвет.ПолучитьТелоКакСтроку();
		Если тHTTPОтвет.КодСостояния = 200 Тогда 
			Объект.GUIDОБД = Новый УникальныйИдентификатор(ЗапросJSON);
			Возврат Истина;
		Иначе
			Сообщить("Ошибка отправки данных в ОБД" + Символы.ПС + ЗапросJSON);
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь; 
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
