#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает информацию о текущих сроках по обращению.
//
// Параметры:
//  Обращение - ДокументСсылка.Обращение - обращение, по которому нужно получить сроки.
// 
// Возвращаемое значение:
//  Структура - информация по срокам обращения:
//  * СрокРеакции - Дата - срок реакции 
//  * СрокОбработки - Дата - срок обработки
//  * СрокРеакцииСорван - Булево - признак срыва срока реакции.
//  * СрокОбработкиСорван - Булево - признак срыва срока обработки.
//
Функция ТекущиеСрокиОбращения(Обращение) Экспорт
    
    ТекущиеСрокиОбращения = Новый Структура("СрокРеакции, СрокОбработки, СрокРеакцииСорван, СрокОбработкиСорван",
        '00010101000000', '00010101000000', Ложь, Ложь);
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	Сроки.СрокРеакции,
        |	Сроки.СрокОбработки,
        |	Сроки.СрокРеакцииСорван,
        |	Сроки.СрокОбработкиСорван
        |ИЗ
        |	РегистрСведений.СрокиОбращенийПоСоглашениям.СрезПоследних КАК Сроки
        |ГДЕ
        |	Сроки.Обращение = &Обращение";
    
    Запрос.УстановитьПараметр("Обращение",Обращение);
    
    Выборка = Запрос.Выполнить().Выбрать();
    
    Если Выборка.Следующий() Тогда
        
        ЗаполнитьЗначенияСвойств(ТекущиеСрокиОбращения, Выборка);
        
    КонецЕсли; 
    
    Возврат ТекущиеСрокиОбращения;
    
КонецФункции

// Возвращает строку описания условий установки срока обработки обращения.
//
// Параметры:
//  Обращение				- ДокументСсылка.Обращение - ссылка на обращение.
//  СекундДоМестногоВремени	- Число - число секунд до местного времени.
// 
// Возвращаемое значение:
//   Строка - описание условий установки срока. 
//
Функция ОписаниеУсловийУстановкиСрока(Обращение, СекундДоМестногоВремени = 0) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ДОБАВИТЬКДАТЕ(Сроки.Период, СЕКУНДА, &СекундДоМестногоВремени) КАК Период,
        |   Сроки.Соглашение,
        |   ДОБАВИТЬКДАТЕ(Сроки.СрокОбработки, СЕКУНДА, &СекундДоМестногоВремени) КАК СтрокОбработки,
        |   ВЫБОР
        |       КОГДА ЕСТЬNULL(Сроки.СрокОбработки, &ПустаяДата) = &ПустаяДата
        |           ТОГДА 0
        |       ИНАЧЕ РАЗНОСТЬДАТ(&ТекущаяУниверсальнаяДата, Сроки.СрокОбработки, СЕКУНДА)
        |   КОНЕЦ КАК СрокВСекундах,
        |   Сроки.СрокОбработкиСорван,
        |   Параметры.Ссылка.ОбслуживающаяОрганизация,
        |   Параметры.Ссылка.ИспользоватьТипОбращения,
        |   Параметры.Ссылка.ИспользоватьКомпонентСервиса,
        |   Параметры.Ссылка.ИспользоватьЛиниюПоддержки,
        |   Параметры.Ссылка.ИспользоватьРаздел,
        |   Параметры.Ссылка.ИспользоватьВажность,
        |   Параметры.Ссылка.ИспользоватьСостояние,
		//+ Котова А.Ю. 06.11.2018 ТЗ№ 74355 {
		|   Параметры.Ссылка.ИспользоватьАбонент,
        |   Параметры.Ссылка.ИспользоватьПроект,
		|   Параметры.Абонент,
		|   Параметры.Проект,
		//- Котова А.Ю. 06.11.2018 ТЗ№ 74355 }
        |   Параметры.ТипОбращения,
        |   Параметры.ЛинияПоддержки,
        |   Параметры.Важность,
        |   Параметры.СостояниеОбращения,
        |   Параметры.КомпонентСервиса,
        |   Параметры.ВремяРеакции,
        |   Параметры.ВремяОбработки,
        |   Параметры.Раздел
        |ИЗ
        |   РегистрСведений.СрокиОбращенийПоСоглашениям.СрезПоследних(, Обращение = &Обращение) КАК Сроки
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Соглашения.ПараметрыСоглашения КАК Параметры
        |       ПО Сроки.Соглашение = Параметры.Ссылка
        |           И Сроки.КлючПараметров = Параметры.КлючПараметров";
	
	Запрос.УстановитьПараметр("Обращение", Обращение);
	Запрос.УстановитьПараметр("СекундДоМестногоВремени", СекундДоМестногоВремени);
	Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
	Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗапросПоДлительности = Новый Запрос;
		ЗапросПоДлительности.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(ВЫБОР
			|			КОГДА ДлительностьОбработкиОбращений.Состояние <> &СостояниеОжидание
			|				ТОГДА ДлительностьОбработкиОбращений.ДлительностьВРабочееВремя
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Длительность,
			|	СУММА(ВЫБОР
			|			КОГДА ДлительностьОбработкиОбращений.Состояние = &СостояниеОжидание
			|				ТОГДА ДлительностьОбработкиОбращений.Длительность
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ДлительностьОжидание
			|ИЗ
			|	РегистрСведений.ДлительностьОбработкиОбращений КАК ДлительностьОбработкиОбращений
			|ГДЕ
			|	(НЕ &ИспользоватьСостояниеОбращения
			|			ИЛИ ДлительностьОбработкиОбращений.Состояние = &СостояниеОбращения)
			|	И (НЕ &ИспользоватьЛиниюПоддержки
			|			ИЛИ ДлительностьОбработкиОбращений.ЛинияПоддержки = &ЛинияПоддержки)
    		|	И (НЕ &ИспользоватьОбслуживающуюОрганизацию
    		|			ИЛИ ДлительностьОбработкиОбращений.ОбслуживающаяОрганизация = &ОбслуживающаяОрганизация)
			|	И ДлительностьОбработкиОбращений.Период < &ДатаОтсчета
			|	И ДлительностьОбработкиОбращений.Период > &ПоследняяДатаЗакрытия
			|	И ДлительностьОбработкиОбращений.Обращение = &Обращение";
	
		ЗапросПоДлительности.УстановитьПараметр("ДатаОтсчета", ТекущаяДата());
		ЗапросПоДлительности.УстановитьПараметр("ПоследняяДатаЗакрытия", Документы.Обращение.ПоследняяДатаЗакрытия(Обращение));
		ЗапросПоДлительности.УстановитьПараметр("Обращение", Обращение);
		ЗапросПоДлительности.УстановитьПараметр("СостояниеОжидание", Перечисления.СостоянияОбращений.ОжиданиеИнициатора);
        
        ЗапросПоДлительности.УстановитьПараметр("ИспользоватьОбслуживающуюОрганизацию", ЗначениеЗаполнено(Выборка.ОбслуживающаяОрганизация));
		ЗапросПоДлительности.УстановитьПараметр("ОбслуживающаяОрганизация", Выборка.ОбслуживающаяОрганизация);
        
        ЗапросПоДлительности.УстановитьПараметр("ИспользоватьЛиниюПоддержки", Выборка.ИспользоватьЛиниюПоддержки);
		ЗапросПоДлительности.УстановитьПараметр("ЛинияПоддержки", Выборка.ЛинияПоддержки);
        
        ЗапросПоДлительности.УстановитьПараметр("ИспользоватьСостояниеОбращения", Выборка.ИспользоватьСостояние);
		ЗапросПоДлительности.УстановитьПараметр("СостояниеОбращения", Выборка.СостояниеОбращения);
		
		РезультатПоДлительности = ЗапросПоДлительности.Выполнить();
		Если РезультатПоДлительности.Пустой() Тогда
			Длительность = 0;
			ДлительностьОжидание = 0;
		Иначе
			Длительность = РезультатПоДлительности.Выгрузить()[0].Длительность;
			ДлительностьОжидание = РезультатПоДлительности.Выгрузить()[0].ДлительностьОжидание;
        КонецЕсли;
        
        Если Длительность = null Или Длительность = Неопределено Тогда
            Длительность = 0;
        КонецЕсли; 
		
		Описание = СтрШаблон(НСтр("ru='Установлено рабочих часов по соглашению: %1'"), ОбщегоНазначенияУСПКлиентСервер.ЧасыМинуты(Выборка.ВремяОбработки * 3600));
		Описание = Описание + Символы.ПС + СтрШаблон(НСтр("ru='Дата установки срока: %1'"), Формат(Выборка.Период,"ДФ='dd.MM.yyyy (HH:mm)'"));
        
        Если Длительность <> Неопределено И Длительность <> null И Длительность <> 0 Тогда
			Описание = Описание + Символы.ПС + СтрШаблон(НСтр("ru='Затрачено рабочих часов: %1'"), 
				ОбщегоНазначенияУСПКлиентСервер.ЧасыМинуты(Длительность));
		КонецЕсли; 
        
        Если ДлительностьОжидание <> Неопределено И ДлительностьОжидание <> null И ДлительностьОжидание <> 0 Тогда
			Описание = Описание + Символы.ПС + СтрШаблон(НСтр("ru='Ожидание инициатора: %1'"), 
				ОбщегоНазначенияУСПКлиентСервер.ЧасыМинуты(ДлительностьОжидание));
		КонецЕсли; 
		
        Если Выборка.СрокВСекундах >= 0 Тогда
			Описание = Описание + Символы.ПС + СтрШаблон(НСтр("ru='Осталось рабочих часов: %1'"), 
				ОбщегоНазначенияУСПКлиентСервер.ЧасыМинуты(Выборка.ВремяОбработки * 3600 - Длительность));
            
			Описание = Описание + Символы.ПС + СтрШаблон(НСтр("ru='Осталось в календарных днях: %1'"), 
				ОбщегоНазначенияУСПКлиентСервер.ДниЧасыМинуты(Выборка.СрокВСекундах));
		Иначе
			Описание = Описание + Символы.ПС + СтрШаблон(НСтр("ru='Срок сорван на: %1'"), 
				ОбщегоНазначенияУСПКлиентСервер.ЧасыМинуты(-Выборка.СрокВСекундах));
		КонецЕсли; 
			
		Описание = Описание + Символы.ПС + Символы.ПС + НСтр("ru='Ключевые свойства:'"); 
		Если Выборка.ИспользоватьТипОбращения Тогда
			Описание = Описание + Символы.ПС + СтрШаблон(НСтр("ru='Тип обращения: %1'"), Выборка.ТипОбращения);
		КонецЕсли;  
		Если Выборка.ИспользоватьВажность Тогда
			Описание = Описание + Символы.ПС + СтрШаблон(НСтр("ru='Важность: %1'"), Выборка.Важность);
		КонецЕсли;  
		Если Выборка.ИспользоватьСостояние Тогда
			Описание = Описание + Символы.ПС + СтрШаблон(НСтр("ru='Состояние обращения: %1'"), Выборка.СостояниеОбращения);
		КонецЕсли;  
		Если Выборка.ИспользоватьЛиниюПоддержки Тогда
			Описание = Описание + Символы.ПС + СтрШаблон(НСтр("ru='Линия поддержки: %1'"), Выборка.ЛинияПоддержки);
		КонецЕсли;  
		Если Выборка.ИспользоватьКомпонентСервиса Тогда
			Описание = Описание + Символы.ПС + СтрШаблон(НСтр("ru='Компонент сервиса: %1'"), Выборка.КомпонентСервиса);
		КонецЕсли;  
		Если Выборка.ИспользоватьРаздел Тогда
			Описание = Описание + Символы.ПС + СтрШаблон(НСтр("ru='Раздел: %1'"), Выборка.Раздел);
		КонецЕсли;  
		//+ Котова А.Ю. 06.11.2018 ТЗ№ 74355 {
		Если Выборка.ИспользоватьПроект Тогда
			Описание = Описание + Символы.ПС + СтрШаблон(НСтр("ru='Проект: %1'"), Выборка.Проект);
		КонецЕсли;  
		Если Выборка.ИспользоватьАбонент Тогда
			Описание = Описание + Символы.ПС + СтрШаблон(НСтр("ru='Абонент: %1'"), Выборка.Абонент);
		КонецЕсли;
		//- Котова А.Ю. 06.11.2018 ТЗ№ 74355 }
	Иначе
		Описание = "";
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#КонецЕсли

 