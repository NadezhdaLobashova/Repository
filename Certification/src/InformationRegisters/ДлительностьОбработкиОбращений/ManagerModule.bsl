#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет расчет длительности обработки обращения.
//
// Параметры:
//  ПериодРасчета - Дата - период расчета.
//  Обращение     - ДокументСсылка.Обращение  - документ для расчета длительности обработки.
//
Процедура ВыполнитьРасчет(ПериодРасчета, Обращение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДлительностьОбработки.Период КАК Период,
		|	ДлительностьОбработки.КоррекцияДоМестногоВремени,
		|	ДлительностьОбработки.ОбслуживающаяОрганизация,
		|	ДлительностьОбработки.ЛинияПоддержки,
		|	ДлительностьОбработки.Исполнитель,
		|	ДлительностьОбработки.Состояние,
		|	ДлительностьОбработки.Обращение,
		|	ВЫБОР
		|		КОГДА ДлительностьОбработки.Обращение.ЛинияПоддержки.ЧасовойПояс = """"
		|			ТОГДА ДлительностьОбработки.Обращение.ОбслуживающаяОрганизация.ЧасовойПояс
		|		ИНАЧЕ ДлительностьОбработки.Обращение.ЛинияПоддержки.ЧасовойПояс
		|	КОНЕЦ КАК ЧасовойПояс,
		|	ВЫБОР
		|		КОГДА ДлительностьОбработки.Обращение.ЛинияПоддержки.ГрафикРаботы = &ПустойГрафик
		|			ТОГДА ДлительностьОбработки.Обращение.ОбслуживающаяОрганизация.ГрафикРаботы
		|		ИНАЧЕ ДлительностьОбработки.Обращение.ЛинияПоддержки.ГрафикРаботы
		|	КОНЕЦ КАК ГрафикРаботы,
		|	РАЗНОСТЬДАТ(ДлительностьОбработки.Период, &ТекущаяУниверсальнаяДата, СЕКУНДА) КАК РасчетнаяДлительность,
		|	ЕСТЬNULL(СрокиОбращенийПоСоглашениямСрезПоследних.СрокОбработки, &ПустаяДата) КАК СрокОбработки
		|ИЗ
		|	РегистрСведений.ДлительностьОбработкиОбращений.СрезПоследних(&ПериодРасчета, Обращение = &Обращение) КАК ДлительностьОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиОбращенийПоСоглашениям.СрезПоследних КАК СрокиОбращенийПоСоглашениямСрезПоследних
		|		ПО ДлительностьОбработки.Обращение = СрокиОбращенийПоСоглашениямСрезПоследних.Обращение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	
	Запрос.УстановитьПараметр("Обращение", Обращение);
	Запрос.УстановитьПараметр("ПериодРасчета", Новый Граница(ПериодРасчета, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ПустойГрафик", Справочники.Календари.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Календари = Новый Массив;
	Календари.Добавить(Выборка.ГрафикРаботы);
	
	Если Не ЗначениеЗаполнено(Выборка.ЧасовойПояс) Тогда
		ПериодЗаписиОрганизации = МестноеВремя(Выборка.Период);
	Иначе
		ПериодЗаписиОрганизации = МестноеВремя(Выборка.Период, Выборка.ЧасовойПояс);
	КонецЕсли;
	
	СекундДоМестногоВремени = ПериодЗаписиОрганизации - Выборка.Период;
	
	РасписаниеПоДням = ГрафикиРаботы.РасписанияРаботыНаПериод(Календари, НачалоДня(ПериодЗаписиОрганизации), '39991231');
	
	ЗаписатьРасчетыПоОбращению(Выборка, РасписаниеПоДням)
	
КонецПроцедуры

// Добавляет точку отсчета длительности обращения.
//
// Параметры:
//  ПериодРасчета - Дата - период расчета.
//  Обращение     - ДокументСсылка.Обращение - документ для установки точки отсчета.
//
Процедура ДобавитьТочкуОтсчета(ПериодРасчета, Обращение) Экспорт
	
	Если ТипЗнч(Обращение) = Тип("ДокументОбъект.Обращение") Тогда
		СвойстваОбращения = Новый Структура("Ссылка, Состояние, ОбслуживающаяОрганизация, ЛинияПоддержки, Исполнитель");
		ЧасовойПоясЛинии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обращение.ЛинияПоддержки, "ЧасовойПояс");
		ЧасовойПоясОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обращение.ОбслуживающаяОрганизация, "ЧасовойПояс");
		ЧасовойПояс = ?(ЗначениеЗаполнено(ЧасовойПоясЛинии), ЧасовойПоясЛинии, ЧасовойПоясОрганизации);
		ЗаполнитьЗначенияСвойств(СвойстваОбращения, Обращение);
	Иначе
		СвойстваОбращения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Обращение, 
			Новый Структура("Ссылка, Состояние, ОбслуживающаяОрганизация, ЛинияПоддержки, Исполнитель, ЧасовойПоясОрганизации, ЧасовойПоясЛинии",
							"Ссылка","Состояние","ОбслуживающаяОрганизация", "ЛинияПоддержки", "Исполнитель", 
							"ОбслуживающаяОрганизация.ЧасовойПояс", "ЛинияПоддержки.ЧасовойПояс"));
		ЧасовойПояс = ?(ЗначениеЗаполнено(СвойстваОбращения.ЧасовойПоясЛинии), 
			СвойстваОбращения.ЧасовойПоясЛинии, СвойстваОбращения.ЧасовойПоясОрганизации);
	КонецЕсли;
    
    Если ЗначениеЗаполнено(ЧасовойПояс) Тогда
	    СекундДоМестногоВремени = МестноеВремя(ПериодРасчета, ЧасовойПояс) - ПериодРасчета;
    Иначе
	    СекундДоМестногоВремени = МестноеВремя(ПериодРасчета) - ПериодРасчета;
    КонецЕсли;
		
	Движение = РегистрыСведений.ДлительностьОбработкиОбращений.СоздатьМенеджерЗаписи();
	Движение.Период = ПериодРасчета;
	Движение.Обращение = СвойстваОбращения.Ссылка;
	Движение.КоррекцияДоМестногоВремени = СекундДоМестногоВремени;
	Движение.Длительность = 0;
	ЗаполнитьЗначенияСвойств(Движение, СвойстваОбращения); 
	Движение.Записать();
	
КонецПроцедуры

// Вычисляет и возвращает рабочее время по длительности.
//
// Параметры:
//  РасписаниеДня      - ТаблицаЗначений - содержит расписание по дням:
//  * ГрафикРаботы - СправочникСсылка.ГрафикиРаботы.
//  * ДатаГрафика - Дата - дата графика.
//  * ВремяНачала - Дата - время начала работы.
//  * ВремяОкончания - Дата - время окончания работы.
//  ДлительностьЗаписи - Число - длительность в секундах по календарным дням.
//  НеУчитываемоеВремя - Число - время в секундах, которое нужно пропустить при расчете.
// 
// Возвращаемое значение:
//  Число - рабочее время в секундах с учетом графика работы.
//
Функция РабочееВремяПоДлительности(РасписаниеДня, ДлительностьЗаписи, НеУчитываемоеВремя = 0) Экспорт
	
	РабочееВремя = 0;
	ОстатокДлительности = ДлительностьЗаписи;
	Время = '00010101' + НеУчитываемоеВремя;
	Если Время > '00010102' Тогда 
		Время = Время - 86400;
	КонецЕсли;
	
	Для Каждого СтрокаРасписания Из РасписаниеДня Цикл
		ВремяОкончания = СтрокаРасписания.ВремяОкончания + ?(СтрокаРасписания.ВремяОкончания = '00010101235959', 1, 0);
		Пока ОстатокДлительности > 0 И Время < ВремяОкончания Цикл
			ВремяДоНачалаРаботы = ?(Время < СтрокаРасписания.ВремяНачала,(СтрокаРасписания.ВремяНачала - Время), 0);
			ОстатокДлительности = ?(ОстатокДлительности > ВремяДоНачалаРаботы, ОстатокДлительности - ВремяДоНачалаРаботы, 0);
			Время = Время + ВремяДоНачалаРаботы;
			ВремяРаботы = ?(ВремяОкончания > Время, ВремяОкончания - ?(Время > СтрокаРасписания.ВремяНачала, Время, СтрокаРасписания.ВремяНачала), 0);
			РабочееВремя = РабочееВремя + ?(ОстатокДлительности >= ВремяРаботы, ВремяРаботы, ОстатокДлительности);
			Время = Время + ВремяРаботы;
			ОстатокДлительности = ОстатокДлительности - ?(ОстатокДлительности >= ВремяРаботы, ВремяРаботы, ОстатокДлительности);
			Если Время >= '00010102' Тогда 
				Время = Время - 86400;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат РабочееВремя;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура РассчитатьДлительностьОбработкиАктивныхОбращений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ОбращениеДокумент.ЛинияПоддержки.ЧасовойПояс = """"
		|			ТОГДА ОбращениеДокумент.ОбслуживающаяОрганизация.ЧасовойПояс
		|		ИНАЧЕ ОбращениеДокумент.ЛинияПоддержки.ЧасовойПояс
		|	КОНЕЦ КАК ЧасовойПояс,
		|	ВЫБОР
		|		КОГДА ОбращениеДокумент.ЛинияПоддержки.ГрафикРаботы = &ПустойГрафик
		|			ТОГДА ОбращениеДокумент.ОбслуживающаяОрганизация.ГрафикРаботы
		|		ИНАЧЕ ОбращениеДокумент.ЛинияПоддержки.ГрафикРаботы
		|	КОНЕЦ КАК ГрафикРаботы,
		|	МИНИМУМ(ДлительностьОбработки.Период) КАК Период
		|ИЗ
		|	Документ.Обращение КАК ОбращениеДокумент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДлительностьОбработкиОбращений.СрезПоследних(, ) КАК ДлительностьОбработки
		|		ПО ОбращениеДокумент.Ссылка = ДлительностьОбработки.Обращение
		|ГДЕ
		|	НЕ ОбращениеДокумент.ПометкаУдаления
		|	И ОбращениеДокумент.Состояние <> &СостояниеЗакрыто
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ОбращениеДокумент.ЛинияПоддержки.ЧасовойПояс = """"
		|			ТОГДА ОбращениеДокумент.ОбслуживающаяОрганизация.ЧасовойПояс
		|		ИНАЧЕ ОбращениеДокумент.ЛинияПоддержки.ЧасовойПояс
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОбращениеДокумент.ЛинияПоддержки.ГрафикРаботы = &ПустойГрафик
		|			ТОГДА ОбращениеДокумент.ОбслуживающаяОрганизация.ГрафикРаботы
		|		ИНАЧЕ ОбращениеДокумент.ЛинияПоддержки.ГрафикРаботы
		|	КОНЕЦ";
		
	Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
	Запрос.УстановитьПараметр("СостояниеЗакрыто", Перечисления.СостоянияОбращений.Закрыто);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ПустойГрафик", Справочники.Календари.ПустаяСсылка());
	
    Результат = Запрос.Выполнить();
    Если Результат.Пустой() Тогда
        Возврат;
    КонецЕсли; 
    
    МинимальныйПериод = Неопределено;
	ЧасовойПоясИБ = ПолучитьЧасовойПоясИнформационнойБазы();
	Календари = Новый Массив;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПериодУниверсальный = УниверсальноеВремя(Выборка.Период, ЧасовойПоясИБ);
		Если Не ЗначениеЗаполнено(Выборка.ЧасовойПояс) Тогда
			ПериодОрганизации = МестноеВремя(ПериодУниверсальный);
		Иначе
			ПериодОрганизации = МестноеВремя(ПериодУниверсальный, Выборка.ЧасовойПояс);
		КонецЕсли;
		Если МинимальныйПериод = Неопределено Или МинимальныйПериод > ПериодОрганизации Тогда
			МинимальныйПериод = Выборка.Период;
		КонецЕсли;
		Если Календари.Найти(Выборка.ГрафикРаботы) = Неопределено Тогда
			Календари.Добавить(Выборка.ГрафикРаботы);
		КонецЕсли;
	КонецЦикла;
	
	РасписаниеПоДням = ГрафикиРаботы.РасписанияРаботыНаПериод(Календари, НачалоДня(МинимальныйПериод), '39991231');
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Обращение.Ссылка
		|ПОМЕСТИТЬ ОбращенияДляОбработки
		|ИЗ
		|	Документ.Обращение КАК Обращение
		|ГДЕ
		|	НЕ Обращение.ПометкаУдаления
		|	И Обращение.Состояние <> &СостояниеЗакрыто
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДлительностьОбработки.Период КАК Период,
		|	ДлительностьОбработки.ОбслуживающаяОрганизация,
		|	ДлительностьОбработки.ЛинияПоддержки,
		|	ДлительностьОбработки.Исполнитель,
		|	ДлительностьОбработки.Состояние,
		|	ДлительностьОбработки.Обращение КАК Обращение,
		|	РАЗНОСТЬДАТ(ДлительностьОбработки.Период, &ТекущаяУниверсальнаяДата, СЕКУНДА) КАК РасчетнаяДлительность,
		|	ЕСТЬNULL(СрокиОбращенийПоСоглашениямСрезПоследних.СрокОбработки, &ПустаяДата) КАК СрокОбработки,
		|	ВЫБОР
		|		КОГДА ДлительностьОбработки.Обращение.ЛинияПоддержки.ЧасовойПояс = """"
		|			ТОГДА ДлительностьОбработки.Обращение.ОбслуживающаяОрганизация.ЧасовойПояс
		|		ИНАЧЕ ДлительностьОбработки.Обращение.ЛинияПоддержки.ЧасовойПояс
		|	КОНЕЦ КАК ЧасовойПояс,
		|	ВЫБОР
		|		КОГДА ДлительностьОбработки.Обращение.ЛинияПоддержки.ГрафикРаботы = &ПустойГрафик
		|			ТОГДА ДлительностьОбработки.Обращение.ОбслуживающаяОрганизация.ГрафикРаботы
		|		ИНАЧЕ ДлительностьОбработки.Обращение.ЛинияПоддержки.ГрафикРаботы
		|	КОНЕЦ КАК ГрафикРаботы
		|ИЗ
		|	РегистрСведений.ДлительностьОбработкиОбращений.СрезПоследних(
		|			&ТекущаяУниверсальнаяДата,
		|			Обращение В
		|				(ВЫБРАТЬ
		|					ОбращенияДляОбработки.Ссылка
		|				ИЗ
		|					ОбращенияДляОбработки КАК ОбращенияДляОбработки)) КАК ДлительностьОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиОбращенийПоСоглашениям.СрезПоследних КАК СрокиОбращенийПоСоглашениямСрезПоследних
		|		ПО ДлительностьОбработки.Обращение = СрокиОбращенийПоСоглашениямСрезПоследних.Обращение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Обращение,
		|	Период";
	
	Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
	Запрос.УстановитьПараметр("СостояниеЗакрыто", Перечисления.СостоянияОбращений.Закрыто);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ПустойГрафик", Справочники.Календари.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		                                                                       
		ЗаписатьРасчетыПоОбращению(Выборка, РасписаниеПоДням);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьРасчетыПоОбращению(Выборка, РасписаниеПоДням)
	
	ПериодЗаписи = Выборка.Период;
	РасчетнаяДлительность = Выборка.РасчетнаяДлительность;
	
	Если Не ЗначениеЗаполнено(Выборка.ЧасовойПояс) Тогда
		ПериодЗаписиОрганизации = МестноеВремя(ПериодЗаписи);
	Иначе
		ПериодЗаписиОрганизации = МестноеВремя(ПериодЗаписи, Выборка.ЧасовойПояс);
	КонецЕсли;
	
	СекундДоМестногоВремени = ПериодЗаписиОрганизации - ПериодЗаписи;
	
	Пока РасчетнаяДлительность > 0 Цикл
		РасчетныйПериод = ПериодЗаписи + РасчетнаяДлительность;
		Если НачалоДня(РасчетныйПериод) > НачалоДня(ПериодЗаписи) Тогда
			ДлительностьЗаписи = Час(КонецДня(ПериодЗаписи)) * 3600 + Минута(КонецДня(ПериодЗаписи)) * 60 + Секунда(КонецДня(ПериодЗаписи))
			- (Час(ПериодЗаписи) * 3600 + Минута(ПериодЗаписи) * 60 + Секунда(ПериодЗаписи)) + 1;
		Иначе
			ДлительностьЗаписи = РасчетнаяДлительность;
		КонецЕсли;
		
		Превышение = 0;
		Если ЗначениеЗаполнено(Выборка.СрокОбработки) Тогда
			Если Выборка.СрокОбработки <= ПериодЗаписи Тогда
				Превышение = ДлительностьЗаписи;
			ИначеЕсли Выборка.СрокОбработки > ПериодЗаписи И НачалоДня(Выборка.СрокОбработки) = НачалоДня(ПериодЗаписи) Тогда
				Превышение = Макс(ДлительностьЗаписи - (Час(Выборка.СрокОбработки) * 3600 + Минута(Выборка.СрокОбработки) * 60 + Секунда(Выборка.СрокОбработки)
				- (Час(ПериодЗаписи) * 3600 + Минута(ПериодЗаписи) * 60 + Секунда(ПериодЗаписи)) + 1), 0);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.ЧасовойПояс) Тогда
			ПериодЗаписиОрганизации = МестноеВремя(ПериодЗаписи);
			СрокОбработкиОрганизации = МестноеВремя(Выборка.СрокОбработки);
		Иначе
			ПериодЗаписиОрганизации = МестноеВремя(ПериодЗаписи, Выборка.ЧасовойПояс);
			СрокОбработкиОрганизации = МестноеВремя(Выборка.СрокОбработки, Выборка.ЧасовойПояс);
		КонецЕсли;
		
		НеУчитываемоеВремя = Час(ПериодЗаписиОрганизации) * 3600 + Минута(ПериодЗаписиОрганизации)*60 + Секунда(ПериодЗаписиОрганизации);
		
		Если НачалоДня(СрокОбработкиОрганизации) > НачалоДня(ПериодЗаписиОрганизации) Тогда
			НеУчитываемоеВремяПревышение = Час(СрокОбработкиОрганизации) * 3600 + Минута(СрокОбработкиОрганизации)*60 + Секунда(СрокОбработкиОрганизации);
		Иначе
			НеУчитываемоеВремяПревышение = Час(ПериодЗаписиОрганизации) * 3600 + Минута(ПериодЗаписиОрганизации)*60 + Секунда(ПериодЗаписиОрганизации);
		КонецЕсли;

		РасписаниеДня = РасписаниеПоДням.НайтиСтроки(Новый Структура("ГрафикРаботы, ДатаГрафика", Выборка.ГрафикРаботы, НачалоДня(ПериодЗаписиОрганизации)));
		
		Движение = РегистрыСведений.ДлительностьОбработкиОбращений.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		Движение.Период = ПериодЗаписи;
		Движение.КоррекцияДоМестногоВремени = СекундДоМестногоВремени;
		Движение.Длительность = ДлительностьЗаписи;
		Движение.Превышение = Превышение;
        Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашения") = Истина Тогда
            Движение.ДлительностьВРабочееВремя = РабочееВремяПоДлительности(РасписаниеДня, ДлительностьЗаписи, НеУчитываемоеВремя);
    		Движение.ПревышениеВРабочееВремя = РабочееВремяПоДлительности(РасписаниеДня, Превышение, НеУчитываемоеВремяПревышение);
        КонецЕсли;
        
        Движение.Записать();
		
		РасчетнаяДлительность = РасчетнаяДлительность - ДлительностьЗаписи;
		ПериодЗаписи = ПериодЗаписи + ДлительностьЗаписи;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
