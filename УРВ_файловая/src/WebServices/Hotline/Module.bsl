
Функция ReserveSlot(DateTime, Specialist, ClientINN, ContactPersonCode, QuestionType, QuestionTheme, Comment, LoginName, ContactPhone)
	
	#Область Обработка_входных_данных_и_вывод_диагностики
	ТекущаяДата			= ТекущаяДата();
	ПараметрыФункции = Новый Структура;
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "DateTime"				, DateTime			, '00010101');
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Specialist"			, Specialist		, );
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "ClientINN"			, ClientINN			, );
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "ContactPersonCode"	, ContactPersonCode	, );
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "QuestionType"			, QuestionType		, );
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "QuestionTheme"		, QuestionTheme		, );
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Comment"				, Comment			, );
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "LoginName"			, LoginName			, );
	ТекстПараметров = БоР_ОбщийМодуль.СформироватьСтрокуИзЗначений(ПараметрыФункции, Символы.ПС, Истина, Ложь, " = ");
	
	//Если Константы.ВестиЖурналDLOMonitor.Получить() Тогда
	//	МассивЗаписейЖурнала = Новый Массив;
	//Иначе
		МассивЗаписейЖурнала = Неопределено;
	//КонецЕсли;
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("НомерСообщения"	, 0);
	ПараметрыСообщения.Вставить("ВебСервис"			, ИмяСервиса());
	ПараметрыСообщения.Вставить("Операция"			, "ReserveSlot");
	ПараметрыСообщения.Вставить("ТекстПараметров"	, ТекстПараметров);
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыСообщения, ПараметрыФункции);
	
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", "Вызов с параметрами &ПС &ТекстПараметров", ПараметрыСообщения, МассивЗаписейЖурнала);
	//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
	#КонецОбласти
	
	#Область Инициализация_типов_XDTO_итд
	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("OperationResult");
	#КонецОбласти
	
	#Область Проверка_входных_параметров
	ПроверитьЗаполненностьЗначения(DateTime				, "Не указано время записи."				, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	ПроверитьЗаполненностьЗначения(Specialist			, "Не указан специалист."					, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	ПроверитьЗаполненностьЗначения(ClientINN			, "Не указан ИНН контрагента."				, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	ПроверитьЗаполненностьЗначения(ContactPersonCode	, "Не указано контактное лицо контрагента."	, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	//Лобашова 85256 16.05.2019 +
	ЗапросИзОбд = Ложь;
	Если QuestionType = "Запись из ОБД" Тогда
		ЗапросИзОбд  = Истина;
	КонецЕсли;
	//Лобашова 85256 16.05.2019 -
	ПроверитьЗаполненностьЗначения(QuestionType			, "Не указан вид услуги."					, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	ПроверитьЗаполненностьЗначения(QuestionTheme		, "Не указана тема консультации."			, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	ПроверитьЗаполненностьЗначения(LoginName			, "Не указан Логин."						, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	ПроверитьЗаполненностьЗначения(ContactPhone			, "Не указан контактный номер телефона."	, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	
	Если Не РезультатСервиса.Result Тогда
		//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
		ВозВрат РезультатСервиса;
	КонецЕсли;
	#КонецОбласти
	
	#Область Поиск_и_проверка_объектов_по_кодам_итд
	
	// При записи через мобильное приложение вместо ИНН передается идентификатор приложения и остальные данные нужно искать уже по нему.
	ПереданаСтруктураПараметров = СтрДлина(ClientINN) > 12; 
	
	Если ПереданаСтруктураПараметров Тогда
		Возврат Неопределено;
		//отключено!
		//СтруктураПараметров = ПолучитьСтруктуруИзСтрокиXML(ClientINN);
		//
		//ДанныеПриложения = Новый Структура("Контрагент, КонтактноеЛицо, КодПрофиляПользователя");
		//ДанныеПриложения = ПолучитьДанныеПриложенияПоИдентификатору(СтруктураПараметров.ИдентификаторПриложения, ДанныеПриложения, СтруктураПараметров.КодПрофиляПользователя);
		//
		//Контрагент 		= ДанныеПриложения.Контрагент; 
		//КонтактноеЛицо 	= ДанныеПриложения.КонтактноеЛицо;
		
	Иначе
		// в базе есть контрагенты с одинкавыми ИНН и поэтому пользователи могут записаться "не туда", поэтому решили в таких ситуация вообще выдавать ошибку и не записывать.
		//Контрагент	= НайтиКонтрагента(ClientINN);
		Контрагент = ПолучитьКонтрагентаПоИННиНаименованию(ClientINN);
		КонтактноеЛицо = Неопределено;
		
	КонецЕсли;
	
	ПроверитьЗаполненностьЗначения(Контрагент				, "Не найден контрагент по значению &ClientINN."	, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);

	Если Не РезультатСервиса.Result Тогда
		//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
		ВозВрат РезультатСервиса;
	КонецЕсли;

	//Лобашова 85256 16.05.2019 +
	//Если ЗапросИзОбд Тогда
	//	//Если КонтактноеЛицо = Справочники.ПользователиСервисов.ПустаяСсылка() Тогда
	//		КонтактноеЛицо = LoginName;
	//	//КонецЕсли;
	//Иначе
	//Лобашова 85256 16.05.2019 -
		КонтактноеЛицо		= ?(ЗначениеЗаполнено(КонтактноеЛицо), КонтактноеЛицо, НайтиКонтактноеЛицо(Контрагент, ContactPersonCode));
		ПроверитьЗаполненностьЗначения(КонтактноеЛицо			, "Не найдено контактное лицо контрагента."	, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	//Лобашова 85256 16.05.2019 +
	//КонецЕсли;
	//Лобашова 85256 16.05.2019 -
	
	//Лобашова 22.04.2019 81724 +
	//Сотрудник			= НайтиСотрудника(Specialist);
	Сотрудник			= НайтиСотрудникаПоИмени(Specialist);
	//Лобашова 22.04.2019 81724 -
	ПроверитьЗаполненностьЗначения(Сотрудник				, "Не найден специалист по значению &Specialist."							, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	
	ВидУслуги			= НайтиВидУслуги(QuestionType);
	ПроверитьЗаполненностьЗначения(ВидУслуги				, "Не найден вид услуги по значению &QuestionType."							, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	
	ДатаВремяНачала = DateTime;

	Если Не РезультатСервиса.Result Тогда
		//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
		ВозВрат РезультатСервиса;
	КонецЕсли;
	#КонецОбласти

	#Область Приведение_телефонов_к_стандартному_виду_и_проверка_отсутствующих_в_Контактной_Информации
	ТелефоныВФормате = БоР_ОбщийМодульКлиентСервер.ИзвлечьНомераИзСтроки(ContactPhone);
	
	СписокТелефонов = Новый ТаблицаЗначений;
	СписокТелефонов.Колонки.Добавить("НомерТелефона", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	Для каждого НомерТелефона Из ТелефоныВФормате Цикл
		СтрокаСписокТелефонов = СписокТелефонов.Добавить();
		СтрокаСписокТелефонов.НомерТелефона = НомерТелефона;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокТелефонов.НомерТелефона КАК НомерТелефона
	|ПОМЕСТИТЬ ВТТелефоны
	|ИЗ
	|	&СписокТелефонов КАК СписокТелефонов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТелефоны.НомерТелефона КАК НомерТелефона
	|ИЗ
	|	ВТТелефоны КАК ВТТелефоны
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПользователиСервисов.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Ссылка = &КонтактноеЛицо)
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПользователяСервиса)
	|				ИЛИ КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ДополнительныйТелефонПользователяСервиса))
	|			И (ВТТелефоны.НомерТелефона = (ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(100)))
	|				ИЛИ (ВТТелефоны.НомерТелефона = КонтактнаяИнформация.НомерТелефона
	|					ИЛИ ВТТелефоны.НомерТелефона = КонтактнаяИнформация.Представление))
	|ГДЕ
	|	КонтактнаяИнформация.НомерТелефона ЕСТЬ NULL";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	Запрос.УстановитьПараметр("СписокТелефонов", СписокТелефонов);
	
	РезультатЗапросаПоТелефонам = Запрос.Выполнить();
	ВыборкаПоТелефонам = РезультатЗапросаПоТелефонам.Выбрать();
	
	// обработка выборки позже - в транзакции
	
	#КонецОбласти

	НачатьТранзакцию();
	
	#Область Добавление_телефонов_в_контактное_лицо
	
	ДанныеИзменены = Ложь;
	Пока ВыборкаПоТелефонам.Следующий() Цикл 
		ДанныеИзменены = Истина;
		КонтактноеЛицоОбъект = КонтактноеЛицо.ПолучитьОбъект();
		СтрокиТелефон = КонтактноеЛицоОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип,Вид",Перечисления.ТипыКонтактнойИнформации.Телефон,Справочники.ВидыКонтактнойИнформации.ТелефонПользователяСервиса));
		Если СтрокиТелефон.Количество() Тогда 
			СтрокаТелефон = КонтактноеЛицоОбъект.КонтактнаяИнформация.Добавить();
			СтрокаТелефон.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтрокаТелефон.Вид = Справочники.ВидыКонтактнойИнформации.ДополнительныйТелефонПользователяСервиса;
		Иначе
			СтрокаТелефон = КонтактноеЛицоОбъект.КонтактнаяИнформация.Добавить();
			СтрокаТелефон.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтрокаТелефон.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователяСервиса;
		КонецЕсли;
		
		Инфо = КонтактнаяИнформацияПоЗначениюРеквизитов("",
							"",
							ВыборкаПоТелефонам.НомерТелефона,
							"");
		СтрокаТелефон.Представление = Инфо.Представление;
		СтрокаТелефон.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(Инфо);
		СтрокаТелефон.НомерТелефона = ВыборкаПоТелефонам.НомерТелефона;
	КонецЦикла;
	Если ДанныеИзменены Тогда 
		Попытка 
			КонтактноеЛицоОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	#КонецОбласти
	 
	#Область Создание_документа_ЗаписьНаЛК
	НовыйДокумент = Документы.ЗаписьНаЛК.СоздатьДокумент();
	НовыйДокумент.Дата						= ТекущаяДата;
	//Лобашова 89291 17.07.2019 +
	//НовыйДокумент.ИсточникСоздания			= "ВебСервис." + ИмяСервиса();
	НовыйДокумент.ИсточникСоздания			= "Самозапись";
	//Лобашова 89291 17.07.2019 -
	НовыйДокумент.ДатаВремяНачала			= ДатаВремяНачала;
	НовыйДокумент.Сотрудник					= Сотрудник;
	НовыйДокумент.Контрагент				= Контрагент;
	НовыйДокумент.КонтактноеЛицо			= КонтактноеЛицо;
	НовыйДокумент.ВидУслуги					= ВидУслуги;
	НовыйДокумент.ТемаВопроса				= QuestionTheme;
	НовыйДокумент.КомментарийЗаписи			= Comment;
	//Лобашова 85256 17.05.2019 +
	Если ЗапросИзОбд Тогда
		НовыйДокумент.ТипЗаписи					= Перечисления.ТипыЗаписейЛК.ЗаписьИзОБД;
	Иначе
	//Лобашова 85256 17.05.2019 -
		НовыйДокумент.ТипЗаписи					= Перечисления.ТипыЗаписейЛК.Самозапись;
	//Лобашова 85256 17.05.2019 +	
	КонецЕсли;
	//Лобашова 85256 17.05.2019 -
	НовыйДокумент.СрочнаяЗапись				= Ложь;
	НовыйДокумент.Логин						= LoginName;
	НовыйДокумент.КонтактныеТелефоны		= ContactPhone;
	НовыйДокумент.ДополнительныеСвойства.Вставить("СозданиеИзВебСервиса" + ИмяСервиса(), Истина);
	Попытка
		//РежимПроведения = ?(НачалоДня(ТекущаяДата()) = НачалоДня(НовыйДокумент.Дата), РежимПроведенияДокумента.Оперативный, РежимПроведенияДокумента.Неоперативный);
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведения);
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = "";
		СообщенияПользователю = ПолучитьСообщенияПользователю();
		Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
			ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + СообщениеПользователю.Текст;
		КонецЦикла;
		РезультатСервиса.Result = Ложь;
		ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала, "Ошибка при проведении записи на ЛК:" + Символы.ПС + ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
		ВозВрат РезультатСервиса;
	КонецПопытки;
	
	Если ПереданаСтруктураПараметров Тогда
		Возврат Неопределено;
		//отключено!
		//СтруктураПараметров = ПолучитьСтруктуруИзСтрокиXML(ClientINN);
		//
		//ДанныеПриложения = Новый Структура("Контрагент, КонтактноеЛицо, КодПрофиляПользователя");
		//ДанныеПриложения = ПолучитьДанныеПриложенияПоИдентификатору(СтруктураПараметров.ИдентификаторПриложения, ДанныеПриложения, СтруктураПараметров.КодПрофиляПользователя);
		//
		//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//ЗаписьРегистрPushУведомления = РегистрыСведений.PushУведомленияДляРассылкиПользователям.СоздатьМенеджерЗаписи();
		//
		//ЗаписьРегистрPushУведомления.ИдентификаторПриложения 	= СтруктураПараметров.ИдентификаторПриложения;
		//ЗаписьРегистрPushУведомления.КодПрофиляПользователя 	= СтруктураПараметров.КодПрофиляПользователя;
		//ЗаписьРегистрPushУведомления.Основание 					= НовыйДокумент.Ссылка;	
		//
		//ЗаписьРегистрPushУведомления.Прочитать();
		//
		//ЗаписьРегистрPushУведомления.ИдентификаторПриложения 	= СтруктураПараметров.ИдентификаторПриложения;
		//ЗаписьРегистрPushУведомления.КодПрофиляПользователя 	= СтруктураПараметров.КодПрофиляПользователя;
		//ЗаписьРегистрPushУведомления.Основание 					= НовыйДокумент.Ссылка;	
		//ЗаписьРегистрPushУведомления.ДатаОтправки  				= ДатаВремяНачала - 5 * 60;
		//ЗаписьРегистрPushУведомления.Отправлено                 = Ложь;
		//ЗаписьРегистрPushУведомления.ТекстСообщения             = "Вам назначена консультация 1С-Рарус через 5 минут.";
		//
		//ЗаписьРегистрPushУведомления.Записать();
		
	КонецЕсли;
	
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", "Cоздан документ ЗаписьНаЛК №" + НовыйДокумент.Номер + " от " + НовыйДокумент.Дата, ПараметрыСообщения, МассивЗаписейЖурнала);
	//ДокументыДляУдаления.Добавить(НовыйДокумент.Ссылка);
	#КонецОбласти
	
	ЗафиксироватьТранзакцию();
	
	Если Не РезультатСервиса.Result Тогда
		//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
		ВозВрат РезультатСервиса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатСервиса.Message) Тогда
		РезультатСервиса.Message		= РезультатСервиса.Message + Символы.ПС + "ОК"; // на всякий, если все же диагностика какая-то вывелась
	Иначе
		РезультатСервиса.Message		= "ОК";
	КонецЕсли;
	
	#Область Диагностика
	ШаблонСообщения = "Успешно обработано. Ответ сервиса:&ПС" + БоР_ОбщийМодуль.ПолучитьXDTOКакСтрокуXML(РезультатСервиса);
	Если ПараметрыСообщения.Свойство("ТекстПараметров") Тогда
		ШаблонСообщения = ШаблонСообщения + "&ПС Параметры:&ПС &ТекстПараметров";
	КонецЕсли;
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", ШаблонСообщения, ПараметрыСообщения, МассивЗаписейЖурнала);
	//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
	#КонецОбласти

	ВозВрат РезультатСервиса;
	
КонецФункции

Функция GetContactList(ClientINN)
	
	#Область Обработка_входных_данных_и_вывод_диагностики
	ТекущаяДата			= ТекущаяДата();
	ПараметрыФункции = Новый Структура;
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "ClientINN"		, ClientINN		, );
	ТекстПараметров = БоР_ОбщийМодуль.СформироватьСтрокуИзЗначений(ПараметрыФункции, Символы.ПС, Истина, Ложь, " = ");
	
	//Если Константы.ВестиЖурналDLOMonitor.Получить() Тогда
	//	МассивЗаписейЖурнала = Новый Массив;
	//Иначе
		МассивЗаписейЖурнала = Неопределено;
	//КонецЕсли;
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("НомерСообщения"	, 0);
	ПараметрыСообщения.Вставить("ВебСервис"			, ИмяСервиса());
	ПараметрыСообщения.Вставить("Операция"			, "GetContactList");
	ПараметрыСообщения.Вставить("ТекстПараметров"	, ТекстПараметров);
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыСообщения, ПараметрыФункции);
	
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", "Вызов с параметрами &ПС &ТекстПараметров", ПараметрыСообщения, МассивЗаписейЖурнала);
	//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
	#КонецОбласти
	
	#Область Инициализация_типов_XDTO_итд
	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("GetContactList_Result");
	
	ТипТаблица			= ФабрикаXDTO.Тип(ПространствоИмен, "ContactTable");
	ТипЭлемента			= ФабрикаXDTO.Тип(ПространствоИмен, "Contact");
	#КонецОбласти
	
	#Область Проверка_входных_параметров
	ПроверитьЗаполненностьЗначения(ClientINN			, "Не указан ИНН контрагента."				, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	
	Если Не РезультатСервиса.Result Тогда
		//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
		ВозВрат РезультатСервиса;
	КонецЕсли;
	#КонецОбласти
	
	#Область Поиск_и_проверка_объектов_по_кодам_итд
	
	// При записи через мобильное приложение вместо ИНН передается идентификатор приложения и остальные данные нужно искать уже по нему.
	ПереданаСтруктураПараметров = СтрДлина(ClientINN) > 12; 
	
	Если ПереданаСтруктураПараметров Тогда
		Возврат Неопределено;
		//отключено!

		//СтруктураПараметров = ПолучитьСтруктуруИзСтрокиXML(ClientINN);
		//
		//ДанныеПриложения = Новый Структура("Контрагент, КонтактноеЛицо, КодПрофиляПользователя");
		//ДанныеПриложения = ПолучитьДанныеПриложенияПоИдентификатору(СтруктураПараметров.ИдентификаторПриложения, ДанныеПриложения, СтруктураПараметров.КодПрофиляПользователя);
		//
		//Контрагент 		= ДанныеПриложения.Контрагент; 
		
	Иначе
		// в базе есть контрагенты с одинкавыми ИНН и поэтому пользователи могут записаться "не туда", поэтому решили в таких ситуация вообще выдавать ошибку и не записывать.
		//Контрагент	= НайтиКонтрагента(ClientINN);
		Контрагент = ПолучитьКонтрагентаПоИННиНаименованию(ClientINN);
		
	КонецЕсли;
	
	ПроверитьЗаполненностьЗначения(Контрагент				, "Не найден контрагент по значению &ClientINN."	, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	
	Если Не РезультатСервиса.Result Тогда
		//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
		ВозВрат РезультатСервиса;
	КонецЕсли;
	#КонецОбласти
	
	ТаблицаXDTO    = ФабрикаXDTO.Создать(ТипТаблица);
	
	#Область Выборка_контактных_лиц
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	#Область Запрос
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПользователиАбонентов.ПользовательСервиса.Наименование КАК Наименование,
			|	ПользователиАбонентов.ПользовательСервиса.Код КАК Код,
			|	ПользователиАбонентов.ПользовательСервиса.Ссылка КАК КонтактноеЛицо
			|ПОМЕСТИТЬ ВТКонтактныеЛица
			|ИЗ
			|	РегистрСведений.ПользователиАбонентов КАК ПользователиАбонентов
			|ГДЕ
			|	ПользователиАбонентов.Абонент = &Контрагент
			|	И НЕ ПользователиАбонентов.ПользовательСервиса.ПометкаУдаления
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	КонтактноеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТКонтактныеЛица.Наименование КАК Наименование,
			|	ВТКонтактныеЛица.Код КАК Код,
			|	ВТКонтактныеЛица.КонтактноеЛицо КАК КонтактноеЛицо,
			|	ЕСТЬNULL(ПользователиСервисовКонтактнаяИнформация.Представление, """""""") КАК Телефон
			|ИЗ
			|	ВТКонтактныеЛица КАК ВТКонтактныеЛица
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПользователиСервисов.КонтактнаяИнформация КАК ПользователиСервисовКонтактнаяИнформация
			|		ПО ВТКонтактныеЛица.КонтактноеЛицо = ПользователиСервисовКонтактнаяИнформация.Ссылка
			|			И (ПользователиСервисовКонтактнаяИнформация.Тип = &ТипКонтактнойИнформации)
			|ИТОГИ
			|	МАКСИМУМ(Наименование),
			|	МАКСИМУМ(Код)
			|ПО
			|	КонтактноеЛицо";
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Контрагент"				, Контрагент);
	Запрос.УстановитьПараметр("ТипКонтактнойИнформации"	, Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	ВыборкаКонтактныеЛица = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонтактныеЛица.Следующий() Цикл
		СтрокаТелефонов = "";
		ВыборкаДетальныеЗаписи = ВыборкаКонтактныеЛица.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Телефон) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТелефонов = СтрокаТелефонов + ?(ЗначениеЗаполнено(СтрокаТелефонов), ";", "") + ВыборкаДетальныеЗаписи.Телефон;
		КонецЦикла;
		
		ЭлементXDTO					= ФабрикаXDTO.Создать(ТипЭлемента);
		ЭлементXDTO.Code			= ВыборкаКонтактныеЛица.Код;
		ЭлементXDTO.Name			= ВыборкаКонтактныеЛица.Наименование;
		ЭлементXDTO.PhoneNumber		= СтрокаТелефонов;
		
		ТаблицаXDTO.Table.Добавить(ЭлементXDTO);
	КонецЦикла;
	#КонецОбласти
	
	РезультатСервиса.ContactTable	= ТаблицаXDTO;
	РезультатСервиса.Message		= РезультатСервиса.Message + Символы.ПС + "ОК"; // на всякий, если все же диагностика какая-то вывелась

	#Область Диагностика
	ШаблонСообщения = "Успешно обработано. Ответ сервиса:&ПС" + БоР_ОбщийМодуль.ПолучитьXDTOКакСтрокуXML(РезультатСервиса);
	Если ПараметрыСообщения.Свойство("ТекстПараметров") Тогда
		ШаблонСообщения = ШаблонСообщения + "&ПС Параметры:&ПС &ТекстПараметров";
	КонецЕсли;
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", ШаблонСообщения, ПараметрыСообщения, МассивЗаписейЖурнала);
	//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
	#КонецОбласти
	
	ВозВрат РезультатСервиса;
	
КонецФункции

Функция GetSlots(Date, QuestionType, ClientINN)
	
	#Область Обработка_входных_данных_и_вывод_диагностики
	ТекущаяДата			= ТекущаяДата();
	ПараметрыФункции = Новый Структура;
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Date"				, Date				, '00010101');
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "QuestionType"		, QuestionType		, );
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "ClientINN"		, ClientINN			, );
	ТекстПараметров = БоР_ОбщийМодуль.СформироватьСтрокуИзЗначений(ПараметрыФункции, Символы.ПС, Истина, Ложь, " = ");
	
	//Если Константы.ВестиЖурналDLOMonitor.Получить() Тогда
	//	МассивЗаписейЖурнала = Новый Массив;
	//Иначе
		МассивЗаписейЖурнала = Неопределено;
	//КонецЕсли;
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("НомерСообщения"	, 0);
	ПараметрыСообщения.Вставить("ВебСервис"			, ИмяСервиса());
	ПараметрыСообщения.Вставить("Операция"			, "GetSlots");
	ПараметрыСообщения.Вставить("ТекстПараметров"	, ТекстПараметров);
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыСообщения, ПараметрыФункции);
	
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", "Вызов с параметрами &ПС &ТекстПараметров", ПараметрыСообщения, МассивЗаписейЖурнала);
	//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
	#КонецОбласти
	
	#Область Инициализация_типов_XDTO_итд
	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("GetSlots_Result");
	
	ТипТаблица			= ФабрикаXDTO.Тип(ПространствоИмен, "SlotTable");
	ТипЭлемента			= ФабрикаXDTO.Тип(ПространствоИмен, "Slot");
	#КонецОбласти
	
	#Область Проверка_входных_параметров
	
	ПроверитьЗаполненностьЗначения(Date							, "Не указана дата."						, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	//Лобашова 85256 13.05.2019 +
	ЗапросИзОбд = Ложь;
	Если QuestionType = "Запись из ОБД" Тогда
		ЗапросИзОбд  = Истина;
	КонецЕсли;
	//Лобашова 85256 13.05.2019 -
	
	ПроверитьЗаполненностьЗначения(QuestionType					, "Не указан вид услуги."					, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	ПроверитьЗаполненностьЗначения(ClientINN					, "Не указан ИНН контрагента."				, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	
	Если Не РезультатСервиса.Result Тогда
		//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
		ВозВрат РезультатСервиса;
	КонецЕсли;
	#КонецОбласти

	#Область Поиск_и_проверка_объектов_по_кодам_итд
	
	// При записи через мобильное приложение вместо ИНН передается идентификатор приложения и остальные данные нужно искать уже по нему.
	ПереданаСтруктураПараметров = СтрДлина(ClientINN) > 12; 
	
	Если ПереданаСтруктураПараметров Тогда
		Возврат Неопределено;
		//отключено!
		
		//СтруктураПараметров = ПолучитьСтруктуруИзСтрокиXML(ClientINN);
		//
		//ДанныеПриложения = Новый Структура("Контрагент, КонтактноеЛицо, КодПрофиляПользователя");
		//ДанныеПриложения = ПолучитьДанныеПриложенияПоИдентификатору(СтруктураПараметров.ИдентификаторПриложения, ДанныеПриложения, СтруктураПараметров.КодПрофиляПользователя);
		//
		//Контрагент = ДанныеПриложения.Контрагент; 
		
	Иначе
		// в базе есть контрагенты с одинкавыми ИНН и поэтому пользователи могут записаться "не туда", поэтому решили в таких ситуация вообще выдавать ошибку и не записывать.
		//Контрагент	= НайтиКонтрагента(ClientINN);
		Контрагент = ПолучитьКонтрагентаПоИННиНаименованию(ClientINN);
	КонецЕсли;
	
	ПроверитьЗаполненностьЗначения(Контрагент				, "Не найден контрагент по значению &ClientINN."						, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	ВидУслуги	= НайтиВидУслуги(QuestionType);
	ПроверитьЗаполненностьЗначения(ВидУслуги				, "Не найден вид услуги по значению &QuestionType."						, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	ДатаРасписания		= Date;

	Если Не РезультатСервиса.Result Тогда
		//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
		ВозВрат РезультатСервиса;
	КонецЕсли;
	#КонецОбласти

	ТаблицаXDTO    = ФабрикаXDTO.Создать(ТипТаблица);
	
	#Область Анализ_данных_Расписания

	#Область Получение_ограничений_на_запись
	НачалоНедели				= ДатаРасписания;
	КонецНедели					= ДатаРасписания;
	НачалоАнализаОграничений	= ДатаРасписания;
	КонецАнализаОграничений		= ДатаРасписания;
	НачальнаяДатаИнтервала		= ДатаРасписания;
	КонечнаяДатаИнтервала		= ДатаРасписания;
	МаксимумКонсультацийВНеделю	= 0;
	МаксимумКонсультацийВДень	= 0;
	МинимальныйИнтервалВДнях	= 0;
	
	ПроверятьОграничения = Истина;
	
	Если ПроверятьОграничения Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		
		#Область Запрос
		"ВЫБРАТЬ
		|	ОграниченияЗаписиНаЛКСрезПоследних.МаксимумКонсультацийВНеделю,
		|	ОграниченияЗаписиНаЛКСрезПоследних.МаксимумКонсультацийВДень,
		|	ОграниченияЗаписиНаЛКСрезПоследних.МинимальныйИнтервалВДнях,
		|	ОграниченияЗаписиНаЛКСрезПоследних.КонсультацииНедоступны
		|ИЗ
		|	РегистрСведений.ОграниченияЗаписиНаЛК.СрезПоследних(
		|			,
		|			ВидУслуги = &ВидУслуги
		//Лобашова 27.02.2019 81724 +
		//|				И ТипКлиентаЛК = &ТипКлиентаЛК
		//Лобашова 27.02.2019 81724 -
		|				) КАК ОграниченияЗаписиНаЛКСрезПоследних
		|ГДЕ
		|	(ОграниченияЗаписиНаЛКСрезПоследних.МаксимумКонсультацийВНеделю <> 0
		|			ИЛИ ОграниченияЗаписиНаЛКСрезПоследних.МаксимумКонсультацийВДень <> 0
		|			ИЛИ ОграниченияЗаписиНаЛКСрезПоследних.МинимальныйИнтервалВДнях <> 0
		|			ИЛИ ОграниченияЗаписиНаЛКСрезПоследних.КонсультацииНедоступны)";
		#КонецОбласти
		
		Запрос.УстановитьПараметр("МоментВремени"				, ДатаРасписания);
		Запрос.УстановитьПараметр("ВидУслуги"					, ВидУслуги);
		//Лобашова 27.02.2019 81724 +
//		Запрос.УстановитьПараметр("ТипКлиентаЛК"				, Контрагент.ТипКлиентаЛК);
		//Лобашова 27.02.2019 81724 - 
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗаданыОграничения = Истина;
			Если ВыборкаДетальныеЗаписи.КонсультацииНедоступны Тогда
				РезультатСервиса.Result = Ложь;
				ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала, "Запись на консультации недоступна.");
				ВозВрат РезультатСервиса;
			КонецЕсли;
			МаксимумКонсультацийВНеделю		= ВыборкаДетальныеЗаписи.МаксимумКонсультацийВНеделю;
			МаксимумКонсультацийВДень		= ВыборкаДетальныеЗаписи.МаксимумКонсультацийВДень;
			МинимальныйИнтервалВДнях		= ВыборкаДетальныеЗаписи.МинимальныйИнтервалВДнях;
			//Если ВыборкаДетальныеЗаписи.МаксимумКонсультацийВНеделю > 0 Тогда
			//	НачалоАнализаОграничений	= ДатаВремяНачала;
			//	КонецАнализаОграничений		= ДатаВремяНачала;
			//КонецЕсли;
			НачалоНедели				= НачалоНедели(ДатаРасписания);
			КонецНедели					= КонецНедели(ДатаРасписания);
			НачалоАнализаОграничений	= НачалоДня(ДатаРасписания);
			КонецАнализаОграничений		= КонецДня(ДатаРасписания);
			Если ВыборкаДетальныеЗаписи.МаксимумКонсультацийВНеделю > 0 Тогда
				НачалоАнализаОграничений	= Мин(НачалоАнализаОграничений, НачалоНедели);
				КонецАнализаОграничений		= Макс(КонецАнализаОграничений, КонецНедели);
			КонецЕсли;
			Если ВыборкаДетальныеЗаписи.МинимальныйИнтервалВДнях > 0 Тогда
				НачальнаяДатаИнтервала = НачалоДня(ДатаРасписания) - (ВыборкаДетальныеЗаписи.МинимальныйИнтервалВДнях - 1) * 86400;
				КонечнаяДатаИнтервала = КонецДня(ДатаРасписания) + (ВыборкаДетальныеЗаписи.МинимальныйИнтервалВДнях - 1) * 86400;
				НачалоАнализаОграничений	= Мин(НачалоАнализаОграничений, НачальнаяДатаИнтервала);
				КонецАнализаОграничений		= Макс(КонецАнализаОграничений, КонечнаяДатаИнтервала);
			КонецЕсли;
		Иначе
			ЗаданыОграничения = Ложь;
		КонецЕсли;
	Иначе
		ЗаданыОграничения = Ложь;
	КонецЕсли;
	#КонецОбласти

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 

	#Область Запрос
	"ВЫБРАТЬ
	|	РасписаниеКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
	|	РасписаниеКонсультацийСрезПоследних.Контрагент,
	|	РасписаниеКонсультацийСрезПоследних.КонтактноеЛицо,
	|	РасписаниеКонсультацийСрезПоследних.НеДействует,
	|	РасписаниеКонсультацийСрезПоследних.Состояние,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РасписаниеКонсультацийСрезПоследних.Продолжительность,
	|	РасписаниеКонсультацийСрезПоследних.ВидУслуги,
	|	РасписаниеКонсультацийСрезПоследних.ТемаВопроса,
	|	РасписаниеКонсультацийСрезПоследних.КомментарийЗаписи
	//Лобашова 16.05.2019 85256 +
	|	,
	|	РасписаниеКонсультацийСрезПоследних.Работа.РаботаПоРасписанию КАК РаботаПоРасписанию
	//Лобашова 16.05.2019 85256 -
	|ПОМЕСТИТЬ ВТ_СвободныеЗаписи
	|ИЗ
	|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних(
	|			,
	|			ДатаВремяНачала >= &ДатаНачала
	|				И ДатаВремяНачала <= &ДатаОкончания) КАК РасписаниеКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
	|	И РасписаниеКонсультацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Запланировано)
	|	И РасписаниеКонсультацийСрезПоследних.Работа.РаботаПоРасписанию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВремяНачала,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОграниченияЗаписиНаЛК_ПоВидамУслугСрезПоследних.Сотрудник КАК Сотрудник,
	|	ОграниченияЗаписиНаЛК_ПоВидамУслугСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОграниченияЗаписиНаЛК_ПоВидамУслугСрезПоследних.ВидУслуги = &ВидУслуги
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ВидУслугиДоступен,
	|	МАКСИМУМ(ИСТИНА) КАК ЕстьОграничения
	|ПОМЕСТИТЬ ВТ_ОграниченияСлота
	|ИЗ
	|	РегистрСведений.ОграниченияЗаписиНаЛК_ПоВидамУслуг.СрезПоследних(
	|			,
	|			(Сотрудник, ДатаВремяНачала) В
	|				(ВЫБРАТЬ
	|					ВТ_СвободныеЗаписи.Сотрудник,
	|					ВТ_СвободныеЗаписи.ДатаВремяНачала
	|				ИЗ
	|					ВТ_СвободныеЗаписи КАК ВТ_СвободныеЗаписи)) КАК ОграниченияЗаписиНаЛК_ПоВидамУслугСрезПоследних
	|ГДЕ
	|	НЕ ОграниченияЗаписиНаЛК_ПоВидамУслугСрезПоследних.НеДействует
	|
	|СГРУППИРОВАТЬ ПО
	|	ОграниченияЗаписиНаЛК_ПоВидамУслугСрезПоследних.Сотрудник,
	|	ОграниченияЗаписиНаЛК_ПоВидамУслугСрезПоследних.ДатаВремяНачала
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВремяНачала,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОграниченияСотрудниковЛК_ПоВидамУслуг.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОграниченияСотрудниковЛК_ПоВидамУслуг.ВидУслуги = &ВидУслуги
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ВидУслугиДоступен,
	|	МАКСИМУМ(ИСТИНА) КАК ЕстьОграничения
	|ПОМЕСТИТЬ ВТ_ОграниченияСотрудника
	|ИЗ
	|	РегистрСведений.ОграниченияСотрудниковЛК_ПоВидамУслуг КАК ОграниченияСотрудниковЛК_ПоВидамУслуг
	|ГДЕ
	|	ОграниченияСотрудниковЛК_ПоВидамУслуг.Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТ_СвободныеЗаписи.Сотрудник
	|			ИЗ
	|				ВТ_СвободныеЗаписи КАК ВТ_СвободныеЗаписи)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОграниченияСотрудниковЛК_ПоВидамУслуг.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступностьВидовУслугКлиентамЛКСрезПоследних.Контрагент,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДоступностьВидовУслугКлиентамЛКСрезПоследних.ВидУслуги = &ВидУслуги
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ВидУслугиДоступен,
	|	МАКСИМУМ(ИСТИНА) КАК ЕстьОграничения
	|ПОМЕСТИТЬ ВТ_ОграниченияКонтрагента
	|ИЗ
	|	РегистрСведений.ДоступностьВидовУслугКлиентамЛК.СрезПоследних(&ДатаОкончания, Контрагент = &Контрагент) КАК ДоступностьВидовУслугКлиентамЛКСрезПоследних
	|ГДЕ
	|	НЕ ДоступностьВидовУслугКлиентамЛКСрезПоследних.НеДействует
	|	И ДоступностьВидовУслугКлиентамЛКСрезПоследних.ДатаНачала <= &ДатаНачала
	|	И (ДоступностьВидовУслугКлиентамЛКСрезПоследних.ДатаОкончания >= &ДатаНачала
	|			ИЛИ ДоступностьВидовУслугКлиентамЛКСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступностьВидовУслугКлиентамЛКСрезПоследних.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала >= &НачалоНедели
	|					И РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала <= &КонецНедели
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоЗаписейЗаНеделю,
	|	СУММА(ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаРасписания, ДЕНЬ)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоЗаписейЗаДень,
	|	СУММА(ВЫБОР
	|			КОГДА РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала >= &НачальнаяДатаИнтервала
	|					И РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала <= &КонечнаяДатаИнтервала
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоЗаписейВИнтервале
	|ИЗ
	|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних(
	|			,
	|			&ПроверятьОграничения
	|				И &ЗаданыОграничения
	|				И ДатаВремяНачала >= &НачалоАнализаОграничений
	|				И ДатаВремяНачала <= &КонецАнализаОграничений) КАК РасписаниеКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
	|	И &ПроверятьОграничения
	|	И &ЗаданыОграничения
	|	И РасписаниеКонсультацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.ЗаписанКлиент)
	|	И РасписаниеКонсультацийСрезПоследних.Контрагент = &Контрагент
	|	И РасписаниеКонсультацийСрезПоследних.ВидУслуги = &ВидУслуги
	|	И РасписаниеКонсультацийСрезПоследних.Работа.РаботаПоРасписанию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СвойстваЭлементовРасписанияЛК.ДоступноДляСамозаписи, ЛОЖЬ) КАК ДоступноДляСамозаписи,
	|	ВТ_СвободныеЗаписи.Сотрудник,
	//Лобашова 27.02.2019 81724 +
	//|	ВТ_СвободныеЗаписи.Сотрудник.GUIDОБД КАК КодСотрудника,
	|	ВТ_СвободныеЗаписи.Сотрудник.GUID_УРВ КАК КодСотрудника,
	//Лобашова 27.02.2019 81724 + 
	|	ВТ_СвободныеЗаписи.ДатаВремяНачала,
	|	ВТ_СвободныеЗаписи.ДатаВремяОкончания,
	|	ВТ_СвободныеЗаписи.Продолжительность
	|ИЗ
	|	ВТ_СвободныеЗаписи КАК ВТ_СвободныеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЭлементовРасписанияЛК КАК СвойстваЭлементовРасписанияЛК
	|		ПО ВТ_СвободныеЗаписи.ДатаВремяНачала = СвойстваЭлементовРасписанияЛК.ДатаВремяНачала
	|			И ВТ_СвободныеЗаписи.Сотрудник = СвойстваЭлементовРасписанияЛК.Сотрудник
	|			И (СвойстваЭлементовРасписанияЛК.ДоступноДляСамозаписи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОграниченияСлота КАК ВТ_ОграниченияСлота
	|		ПО ВТ_СвободныеЗаписи.ДатаВремяНачала = ВТ_ОграниченияСлота.ДатаВремяНачала
	|			И ВТ_СвободныеЗаписи.Сотрудник = ВТ_ОграниченияСлота.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОграниченияСотрудника КАК ВТ_ОграниченияСотрудника
	|		ПО ВТ_СвободныеЗаписи.Сотрудник = ВТ_ОграниченияСотрудника.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОграниченияКонтрагента КАК ВТ_ОграниченияКонтрагента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ_ОграниченияСлота.ЕстьОграничения, ЛОЖЬ)
	|					И НЕ ЕСТЬNULL(ВТ_ОграниченияСлота.ВидУслугиДоступен, ЛОЖЬ)
	|				ТОГДА ЛОЖЬ
	|			КОГДА ЕСТЬNULL(ВТ_ОграниченияСотрудника.ЕстьОграничения, ЛОЖЬ)
	|					И НЕ ЕСТЬNULL(ВТ_ОграниченияСотрудника.ВидУслугиДоступен, ЛОЖЬ)
	|				ТОГДА ЛОЖЬ
	|			КОГДА ЕСТЬNULL(ВТ_ОграниченияКонтрагента.ЕстьОграничения, ЛОЖЬ)
	|					И НЕ ЕСТЬNULL(ВТ_ОграниченияКонтрагента.ВидУслугиДоступен, ЛОЖЬ)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ДатаРасписания"				, ДатаРасписания);
	Запрос.УстановитьПараметр("ДатаНачала"					, НачалоДня(ДатаРасписания));
	Запрос.УстановитьПараметр("ДатаОкончания"				, КонецДня(ДатаРасписания));
	Запрос.УстановитьПараметр("ВидУслуги"					, ВидУслуги);
	Запрос.УстановитьПараметр("Контрагент"					, Контрагент);
	Запрос.УстановитьПараметр("ПроверятьОграничения"		, ПроверятьОграничения);
	Запрос.УстановитьПараметр("ЗаданыОграничения"			, ЗаданыОграничения);
	Запрос.УстановитьПараметр("НачалоНедели"				, НачалоНедели);
	Запрос.УстановитьПараметр("КонецНедели"					, КонецНедели);
	Запрос.УстановитьПараметр("НачалоАнализаОграничений"	, НачалоАнализаОграничений);
	Запрос.УстановитьПараметр("КонецАнализаОграничений"		, КонецАнализаОграничений);
	Запрос.УстановитьПараметр("НачальнаяДатаИнтервала"		, НачальнаяДатаИнтервала);
	Запрос.УстановитьПараметр("КонечнаяДатаИнтервала"		, КонечнаяДатаИнтервала);
	
	//Лобашова 16.05.2019 85256 +
	Если ЗапросИзОбд Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СвойстваЭлементовРасписанияЛК.ДоступноДляСамозаписи", "ВТ_СвободныеЗаписи.РаботаПоРасписанию");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЭлементовРасписанияЛК КАК СвойстваЭлементовРасписанияЛК
																		|		ПО ВТ_СвободныеЗаписи.ДатаВремяНачала = СвойстваЭлементовРасписанияЛК.ДатаВремяНачала
																		|			И ВТ_СвободныеЗаписи.Сотрудник = СвойстваЭлементовРасписанияЛК.Сотрудник
																		|			И (ВТ_СвободныеЗаписи.РаботаПоРасписанию)", "");
	КонецЕсли;	
	//Лобашова 16.05.2019 85256 -
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	#Область Проверка_ограничений
	Если ПроверятьОграничения И ЗаданыОграничения Тогда
		РезультатОграничения = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2];
		Выборка = РезультатОграничения.Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.КоличествоЗаписейЗаНеделю) И МаксимумКонсультацийВНеделю > 0 И Выборка.КоличествоЗаписейЗаНеделю >= МаксимумКонсультацийВНеделю Тогда
				РезультатСервиса.Result = Ложь;
				//ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала, "Запись на консультации недоступна.");
				ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала, "Превышен лимит доступных консультаций за неделю ("+Формат(НачалоНедели,"ДФ=dd.MM.yyyy") + "-" +Формат(КонецНедели,"ДФ=dd.MM.yyyy") +"). Количество записей по БГУ/ЗГУ - " + Выборка.КоличествоЗаписейЗаНеделю);
				// "Ограничение записи. Превышено допустимое количество консультаций в неделю.";
				ВозВрат РезультатСервиса;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.КоличествоЗаписейЗаДень) И МаксимумКонсультацийВДень > 0 И Выборка.КоличествоЗаписейЗаДень >= МаксимумКонсультацийВДень Тогда
				РезультатСервиса.Result = Ложь;
				//ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала, "Запись на консультации недоступна.");
				ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала, "Превышен лимит доступных консультаций за день. На "+Формат(ДатаРасписания,"ДФ=dd.MM.yyyy")+" есть запись на консультацию по БГУ/ЗГУ");
				// "Ограничение записи. Превышено допустимое количество консультаций в день.";
				ВозВрат РезультатСервиса;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.КоличествоЗаписейВИнтервале) И МинимальныйИнтервалВДнях > 0 И Выборка.КоличествоЗаписейВИнтервале > 0 Тогда
				РезультатСервиса.Result = Ложь;
				//ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала, "Запись на консультации недоступна.");
				ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала, "Превышен лимит доступных консультаций за период "+Формат(НачалоАнализаОграничений,"ДФ=dd.MM.yyyy") + "-" +Формат(КонецАнализаОграничений,"ДФ=dd.MM.yyyy") +". Количество записей по БГУ/ЗГУ - " + Выборка.КоличествоЗаписейВИнтервале);
				// "Ограничение записи. Нарушение минимального интервала консультаций.";
				ВозВрат РезультатСервиса;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЭлементXDTO					= ФабрикаXDTO.Создать(ТипЭлемента);
		ЭлементXDTO.DateTime		= ВыборкаДетальныеЗаписи.ДатаВремяНачала;
		//Лобашова 22.04.2019 81724 +
		//ЭлементXDTO.SpecialistCode	= ВыборкаДетальныеЗаписи.КодСотрудника;
		ЭлементXDTO.SpecialistCode	= Строка(ВыборкаДетальныеЗаписи.Сотрудник);
		//Лобашова 22.04.2019 81724 -
		ТаблицаXDTO.Table.Добавить(ЭлементXDTO);
	КонецЦикла;
	#КонецОбласти

	РезультатСервиса.SlotTable		= ТаблицаXDTO;
	Если ЗначениеЗаполнено(РезультатСервиса.Message) Тогда
		РезультатСервиса.Message		= РезультатСервиса.Message + Символы.ПС + "ОК"; // на всякий, если все же диагностика какая-то вывелась
	Иначе
		РезультатСервиса.Message		= "ОК";
	КонецЕсли;

	#Область Диагностика
	ШаблонСообщения = "Успешно обработано. Ответ сервиса:&ПС" + БоР_ОбщийМодуль.ПолучитьXDTOКакСтрокуXML(РезультатСервиса);
	Если ПараметрыСообщения.Свойство("ТекстПараметров") Тогда
		ШаблонСообщения = ШаблонСообщения + "&ПС Параметры:&ПС &ТекстПараметров";
	КонецЕсли;
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", ШаблонСообщения, ПараметрыСообщения, МассивЗаписейЖурнала);
	//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
	#КонецОбласти
	
	ВозВрат РезультатСервиса;
	
КонецФункции

Функция GetReservedSlots(BeginDateTime, EndDateTime, ClientINN, OnlyUnused)
	
	#Область Обработка_входных_данных_и_вывод_диагностики
	ТекущаяДата			= ТекущаяДата();
	ПараметрыФункции = Новый Структура;
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "BeginDateTime"	, BeginDateTime		, '00010101');
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "EndDateTime"		, EndDateTime		, '00010101');
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "ClientINN"		, ClientINN			, );
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "OnlyUnused"		, OnlyUnused		, Ложь);
	ТекстПараметров = БоР_ОбщийМодуль.СформироватьСтрокуИзЗначений(ПараметрыФункции, Символы.ПС, Истина, Ложь, " = ");
	
	//Если Константы.ВестиЖурналDLOMonitor.Получить() Тогда
	//	МассивЗаписейЖурнала = Новый Массив;
	//Иначе
		МассивЗаписейЖурнала = Неопределено;
	//КонецЕсли;
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("НомерСообщения"	, 0);
	ПараметрыСообщения.Вставить("ВебСервис"			, ИмяСервиса());
	ПараметрыСообщения.Вставить("Операция"			, "GetReservedSlots");
	ПараметрыСообщения.Вставить("ТекстПараметров"	, ТекстПараметров);
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыСообщения, ПараметрыФункции);
	
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", "Вызов с параметрами &ПС &ТекстПараметров", ПараметрыСообщения, МассивЗаписейЖурнала);
	//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
	#КонецОбласти
	
	#Область Инициализация_типов_XDTO_итд
	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("GetReservedSlots_Result");
	
	ТипТаблица			= ФабрикаXDTO.Тип(ПространствоИмен, "ReservedSlotTable");
	ТипЭлемента			= ФабрикаXDTO.Тип(ПространствоИмен, "ReservedSlot");
	#КонецОбласти
	
	#Область Проверка_входных_параметров
	ПроверитьЗаполненностьЗначения(BeginDateTime				, "Не указана дата начала периода."			, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	ПроверитьЗаполненностьЗначения(EndDateTime					, "Не указано дата окончания периода."		, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	ПроверитьЗаполненностьЗначения(ClientINN					, "Не указан ИНН контрагента."				, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	
	Если Не РезультатСервиса.Result Тогда
		//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
		ВозВрат РезультатСервиса;
	КонецЕсли;
	#КонецОбласти
	
	#Область Поиск_и_проверка_объектов_по_кодам_итд
	// При записи через мобильное приложение вместо ИНН передается идентификатор приложения и остальные данные нужно искать уже по нему.
	ПереданаСтруктураПараметров = СтрДлина(ClientINN) > 12; 
	
	Если ПереданаСтруктураПараметров Тогда
		Возврат Неопределено;
		//отключено!
		
		//СтруктураПараметров = ПолучитьСтруктуруИзСтрокиXML(ClientINN);
		//
		//ДанныеПриложения = Новый Структура("Контрагент, КонтактноеЛицо, КодПрофиляПользователя");
		//ДанныеПриложения = ПолучитьДанныеПриложенияПоИдентификатору(СтруктураПараметров.ИдентификаторПриложения, ДанныеПриложения, СтруктураПараметров.КодПрофиляПользователя);
		//
		//Контрагент 		= ДанныеПриложения.Контрагент; 
		
	Иначе
		// в базе есть контрагенты с одинкавыми ИНН и поэтому пользователи могут записаться "не туда", поэтому решили в таких ситуация вообще выдавать ошибку и не записывать.
		//Контрагент	= НайтиКонтрагента(ClientINN);
		Контрагент = ПолучитьКонтрагентаПоИННиНаименованию(ClientINN);
		
	КонецЕсли;
	
	ПроверитьЗаполненностьЗначения(Контрагент				, "Не найден контрагент по значению &ClientINN."						, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	
	ДатаНачала		= BeginDateTime;
	ДатаОкончания	= EndDateTime;
	
	Если Не РезультатСервиса.Result Тогда
		//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
		ВозВрат РезультатСервиса;
	КонецЕсли;
	#КонецОбласти

	ТаблицаXDTO    = ФабрикаXDTO.Создать(ТипТаблица);
	
	#Область Анализ_данных_Расписания
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ
	|	РасписаниеКонсультацийСрезПоследних.Регистратор КАК Регистратор,
	|	РасписаниеКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
	|	РасписаниеКонсультацийСрезПоследних.Контрагент,
	|	РасписаниеКонсультацийСрезПоследних.КонтактноеЛицо,
	|	РасписаниеКонсультацийСрезПоследних.НеДействует,
	|	РасписаниеКонсультацийСрезПоследних.Состояние,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РасписаниеКонсультацийСрезПоследних.Продолжительность,
	|	РасписаниеКонсультацийСрезПоследних.ВидУслуги,
	|	РасписаниеКонсультацийСрезПоследних.ТемаВопроса,
	|	РасписаниеКонсультацийСрезПоследних.КомментарийЗаписи
	|ПОМЕСТИТЬ ВТТекущееРасписание
	|ИЗ
	|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних(
	|			,
	|			ДатаВремяНачала >= &ДатаНачала
	|				И ДатаВремяНачала <= &ДатаОкончания) КАК РасписаниеКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
	|	И РасписаниеКонсультацийСрезПоследних.Контрагент = &Контрагент
	|	И РасписаниеКонсультацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.ЗаписанКлиент)
	|	И РасписаниеКонсультацийСрезПоследних.Работа.РаботаПоРасписанию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыКонсультацийСрезПоследних.Регистратор,
	|	РезультатыКонсультацийСрезПоследних.Сотрудник,
	|	РезультатыКонсультацийСрезПоследних.ДатаВремяНачала,
	|	РезультатыКонсультацийСрезПоследних.Контрагент,
	|	РезультатыКонсультацийСрезПоследних.КонтактноеЛицо,
	|	РезультатыКонсультацийСрезПоследних.Результат,
	|	РезультатыКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РезультатыКонсультацийСрезПоследних.Продолжительность,
	|	РезультатыКонсультацийСрезПоследних.ВидУслуги,
	|	РезультатыКонсультацийСрезПоследних.ТемаВопроса,
	|	РезультатыКонсультацийСрезПоследних.ВопросКлиента,
	|	РезультатыКонсультацийСрезПоследних.ОтветСотрудника
	|ПОМЕСТИТЬ ВТТекущиеРезультаты
	|ИЗ
	|	РегистрСведений.РезультатыКонсультаций.СрезПоследних(
	|			,
	|			ДатаВремяНачала >= &ДатаНачала
	|				И ДатаВремяНачала <= &ДатаОкончания) КАК РезультатыКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РезультатыКонсультацийСрезПоследних.НеДействует
	|	И РезультатыКонсультацийСрезПоследних.Контрагент = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТекущееРасписание.Регистратор КАК РегистраторЗаписи,
	|	ВТТекущиеРезультаты.Регистратор КАК РегистраторРезультата,
	|	ВТТекущееРасписание.Сотрудник КАК Сотрудник,
	//Лобашова 11.03.2019 81724 +
	//|	ВТТекущееРасписание.Сотрудник.GUIDОБД КАК СотрудникКод,
	|	ВТТекущееРасписание.Сотрудник.GUID_УРВ КАК СотрудникКод,
	//Лобашова 11.03.2019 81724 -
	|	ВТТекущееРасписание.ДатаВремяНачала КАК ДатаВремяНачала,
	|	ВТТекущееРасписание.Контрагент,
	|	ВТТекущееРасписание.КонтактноеЛицо,
	|	ВТТекущееРасписание.КонтактноеЛицо.Наименование КАК КонтактноеЛицоНаименование,
	|	ВТТекущееРасписание.НеДействует,
	|	ВТТекущееРасписание.Состояние,
	|	ВТТекущееРасписание.ДатаВремяОкончания,
	|	ВТТекущееРасписание.Продолжительность,
	|	ВТТекущееРасписание.ВидУслуги,
	|	ВТТекущееРасписание.ТемаВопроса,
	|	ВТТекущееРасписание.КомментарийЗаписи,
	|	ЕСТЬNULL(ВТТекущиеРезультаты.Результат, ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ПустаяСсылка)) КАК Результат,
	|	ВЫБОР
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ОказанаКонсультация)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация)
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.НеОказанаКонсультация)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Запланировано)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Запланировано)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.ЗаписанКлиент)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ЗаписанКлиент)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Блокировка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Блокировка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ПустаяСсылка)
	|	КОНЕЦ КАК ИтоговыйСтатус,
	|	ВЫБОР
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ОказанаКонсультация)
	|			ТОГДА ИСТИНА
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.НеОказанаКонсультация)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Использован,
	|	ВТТекущиеРезультаты.ВопросКлиента,
	|	ВТТекущиеРезультаты.ОтветСотрудника
	|ИЗ
	|	ВТТекущееРасписание КАК ВТТекущееРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеРезультаты КАК ВТТекущиеРезультаты
	|		ПО ВТТекущееРасписание.Сотрудник = ВТТекущиеРезультаты.Сотрудник
	|			И ВТТекущееРасписание.ДатаВремяНачала = ВТТекущиеРезультаты.ДатаВремяНачала
	|ГДЕ
	|	&УсловиеСостояния
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВремяНачала,
	|	Сотрудник";
	
	#КонецОбласти
	
	Если OnlyUnused Тогда
		УсловиеСостояния = 
		"ЕСТЬNULL(ВТТекущиеРезультаты.Результат, ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ОказанаКонсультация)
		|	И ЕСТЬNULL(ВТТекущиеРезультаты.Результат, ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.НеОказанаКонсультация)";
	Иначе
		УсловиеСостояния = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСостояния", УсловиеСостояния);
	
	Запрос.УстановитьПараметр("ДатаНачала"			, ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"		, ДатаОкончания);
	Запрос.УстановитьПараметр("Контрагент"			, Контрагент);
	Запрос.УстановитьПараметр("Момент"				, Неопределено);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	
	#Область Заполнение_результата
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЭлементXDTO						= ФабрикаXDTO.Создать(ТипЭлемента);
		ЭлементXDTO.DateTime			= ВыборкаДетальныеЗаписи.ДатаВремяНачала;
		//Лобашова 22.04.2019 81724 +
		//ЭлементXDTO.SpecialistCode		= ВыборкаДетальныеЗаписи.СотрудникКод;
		ЭлементXDTO.SpecialistCode		= Строка(ВыборкаДетальныеЗаписи.Сотрудник);
		//Лобашова 22.04.2019 81724 -
		ЭлементXDTO.Used				= ВыборкаДетальныеЗаписи.Использован;
		ЭлементXDTO.QuestionTheme		= ВыборкаДетальныеЗаписи.ТемаВопроса;
		ЭлементXDTO.ContactPersonName	= ВыборкаДетальныеЗаписи.КонтактноеЛицоНаименование;
		ЭлементXDTO.State				= Строка(ВыборкаДетальныеЗаписи.ИтоговыйСтатус);
		
		ТаблицаXDTO.Table.Добавить(ЭлементXDTO);
		
	КонецЦикла;
	#КонецОбласти
	
	#КонецОбласти
	
	РезультатСервиса.ReservedSlotTable		= ТаблицаXDTO;
	Если ЗначениеЗаполнено(РезультатСервиса.Message) Тогда
		РезультатСервиса.Message		= РезультатСервиса.Message + Символы.ПС + "ОК"; // на всякий, если все же диагностика какая-то вывелась
	Иначе
		РезультатСервиса.Message		= "ОК";
	КонецЕсли;

	#Область Диагностика
	ШаблонСообщения = "Успешно обработано. Ответ сервиса:&ПС" + БоР_ОбщийМодуль.ПолучитьXDTOКакСтрокуXML(РезультатСервиса);
	Если ПараметрыСообщения.Свойство("ТекстПараметров") Тогда
		ШаблонСообщения = ШаблонСообщения + "&ПС Параметры:&ПС &ТекстПараметров";
	КонецЕсли;
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", ШаблонСообщения, ПараметрыСообщения, МассивЗаписейЖурнала);
	//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
	#КонецОбласти
	
	ВозВрат РезультатСервиса;
	
КонецФункции

Функция UnreserveSlot(DateTime, Specialist, ClientINN)
	
	#Область Обработка_входных_данных_и_вывод_диагностики
	ТекущаяДата			= ТекущаяДата();
	ПараметрыФункции = Новый Структура;
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "DateTime"			, DateTime			, '00010101');
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Specialist"		, Specialist		, Ложь);
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "ClientINN"		, ClientINN			, );
	ТекстПараметров = БоР_ОбщийМодуль.СформироватьСтрокуИзЗначений(ПараметрыФункции, Символы.ПС, Истина, Ложь, " = ");
	
	//Если Константы.ВестиЖурналDLOMonitor.Получить() Тогда
	//	МассивЗаписейЖурнала = Новый Массив;
	//Иначе
		МассивЗаписейЖурнала = Неопределено;
	//КонецЕсли;
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("НомерСообщения"	, 0);
	ПараметрыСообщения.Вставить("ВебСервис"			, ИмяСервиса());
	ПараметрыСообщения.Вставить("Операция"			, "UnreserveSlot");
	ПараметрыСообщения.Вставить("ТекстПараметров"	, ТекстПараметров);
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыСообщения, ПараметрыФункции);
	
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", "Вызов с параметрами &ПС &ТекстПараметров", ПараметрыСообщения, МассивЗаписейЖурнала);
	//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
	#КонецОбласти
	
	#Область Инициализация_типов_XDTO_итд
	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("OperationResult");
	#КонецОбласти
	
	#Область Проверка_входных_параметров
	ПроверитьЗаполненностьЗначения(DateTime				, "Не указано время записи."				, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	ПроверитьЗаполненностьЗначения(Specialist			, "Не указан специалист."					, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	ПроверитьЗаполненностьЗначения(ClientINN			, "Не указан ИНН контрагента."				, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	
	Если Не РезультатСервиса.Result Тогда
		//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
		ВозВрат РезультатСервиса;
	КонецЕсли;
	#КонецОбласти
	
	
	#Область Поиск_и_проверка_объектов_по_кодам_итд
	// При записи через мобильное приложение вместо ИНН передается идентификатор приложения и остальные данные нужно искать уже по нему.
	
	ПереданаСтруктураПараметров = СтрДлина(ClientINN) > 12; 
	
	Если ПереданаСтруктураПараметров Тогда
		Возврат Неопределено;
		//отключено!
		
		//СтруктураПараметров = ПолучитьСтруктуруИзСтрокиXML(ClientINN);
		//
		//ДанныеПриложения = Новый Структура("Контрагент, КонтактноеЛицо, КодПрофиляПользователя");
		//ДанныеПриложения = ПолучитьДанныеПриложенияПоИдентификатору(СтруктураПараметров.ИдентификаторПриложения, ДанныеПриложения, СтруктураПараметров.КодПрофиляПользователя);
		//
		//Контрагент 		= ДанныеПриложения.Контрагент; 
		
	Иначе
		// в базе есть контрагенты с одинкавыми ИНН и поэтому пользователи могут записаться "не туда", поэтому решили в таких ситуация вообще выдавать ошибку и не записывать.
		//Контрагент	= НайтиКонтрагента(ClientINN);
		Контрагент = ПолучитьКонтрагентаПоИННиНаименованию(ClientINN);
		
	КонецЕсли;
	
	ПроверитьЗаполненностьЗначения(Контрагент				, "Не найден контрагент по значению &ClientINN."						, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	//Лобашова 22.04.2019 81724 +
	//Сотрудник		= НайтиСотрудника(Specialist);
	Сотрудник		= НайтиСотрудникаПоИмени(Specialist);
	//Лобашова 22.04.2019 81724 -
	ПроверитьЗаполненностьЗначения(Сотрудник				, "Не найден специалист по значению &Specialist."						, РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала);
	
	ДатаВремяНачала		= DateTime;
	
	Если Не РезультатСервиса.Result Тогда
		//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
		ВозВрат РезультатСервиса;
	КонецЕсли;
	#КонецОбласти

	#Область Анализ_данных_Расписания
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ
	|	РасписаниеКонсультацийСрезПоследних.Регистратор КАК Регистратор,
	|	РасписаниеКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
	|	РасписаниеКонсультацийСрезПоследних.Контрагент,
	|	РасписаниеКонсультацийСрезПоследних.КонтактноеЛицо,
	|	РасписаниеКонсультацийСрезПоследних.НеДействует,
	|	РасписаниеКонсультацийСрезПоследних.Состояние,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РасписаниеКонсультацийСрезПоследних.Продолжительность,
	|	РасписаниеКонсультацийСрезПоследних.ВидУслуги,
	|	РасписаниеКонсультацийСрезПоследних.ТемаВопроса,
	|	РасписаниеКонсультацийСрезПоследних.КомментарийЗаписи
	|ПОМЕСТИТЬ ВТТекущееРасписание
	|ИЗ
	|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних(
	|			,
	|			ДатаВремяНачала = &ДатаВремяНачала И Сотрудник = &Сотрудник) КАК РасписаниеКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
	|	И РасписаниеКонсультацийСрезПоследних.Контрагент = &Контрагент
	|	И РасписаниеКонсультацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.ЗаписанКлиент)
	|	И РасписаниеКонсультацийСрезПоследних.Работа.РаботаПоРасписанию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыКонсультацийСрезПоследних.Регистратор,
	|	РезультатыКонсультацийСрезПоследних.Сотрудник,
	|	РезультатыКонсультацийСрезПоследних.ДатаВремяНачала,
	|	РезультатыКонсультацийСрезПоследних.Контрагент,
	|	РезультатыКонсультацийСрезПоследних.КонтактноеЛицо,
	|	РезультатыКонсультацийСрезПоследних.Результат,
	|	РезультатыКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РезультатыКонсультацийСрезПоследних.Продолжительность,
	|	РезультатыКонсультацийСрезПоследних.ВидУслуги,
	|	РезультатыКонсультацийСрезПоследних.ТемаВопроса,
	|	РезультатыКонсультацийСрезПоследних.ВопросКлиента,
	|	РезультатыКонсультацийСрезПоследних.ОтветСотрудника
	|ПОМЕСТИТЬ ВТТекущиеРезультаты
	|ИЗ
	|	РегистрСведений.РезультатыКонсультаций.СрезПоследних(
	|			,
	|			ДатаВремяНачала = &ДатаВремяНачала И Сотрудник = &Сотрудник) КАК РезультатыКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РезультатыКонсультацийСрезПоследних.НеДействует
	|	И РезультатыКонсультацийСрезПоследних.Контрагент = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТекущееРасписание.Регистратор КАК РегистраторЗаписи,
	|	ВТТекущиеРезультаты.Регистратор КАК РегистраторРезультата,
	|	ВТТекущееРасписание.Сотрудник КАК Сотрудник,
	|	ВТТекущееРасписание.Сотрудник.GUIDОБД КАК СотрудникКод,
	|	ВТТекущееРасписание.ДатаВремяНачала КАК ДатаВремяНачала,
	|	ВТТекущееРасписание.Контрагент,
	|	ВТТекущееРасписание.КонтактноеЛицо,
	|	ВТТекущееРасписание.КонтактноеЛицо.Наименование КАК КонтактноеЛицоНаименование,
	|	ВТТекущееРасписание.НеДействует,
	|	ВТТекущееРасписание.Состояние,
	|	ВТТекущееРасписание.ДатаВремяОкончания,
	|	ВТТекущееРасписание.Продолжительность,
	|	ВТТекущееРасписание.ВидУслуги,
	|	ВТТекущееРасписание.ТемаВопроса,
	|	ВТТекущееРасписание.КомментарийЗаписи,
	|	ЕСТЬNULL(ВТТекущиеРезультаты.Результат, ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ПустаяСсылка)) КАК Результат,
	|	ВЫБОР
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ОказанаКонсультация)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация)
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.НеОказанаКонсультация)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Запланировано)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Запланировано)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.ЗаписанКлиент)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ЗаписанКлиент)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Блокировка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Блокировка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ПустаяСсылка)
	|	КОНЕЦ КАК ИтоговыйСтатус,
	|	ВЫБОР
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ОказанаКонсультация)
	|			ТОГДА ИСТИНА
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.НеОказанаКонсультация)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Использован,
	|	ВТТекущиеРезультаты.ВопросКлиента,
	|	ВТТекущиеРезультаты.ОтветСотрудника
	|ИЗ
	|	ВТТекущееРасписание КАК ВТТекущееРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеРезультаты КАК ВТТекущиеРезультаты
	|		ПО ВТТекущееРасписание.Сотрудник = ВТТекущиеРезультаты.Сотрудник
	|			И ВТТекущееРасписание.ДатаВремяНачала = ВТТекущиеРезультаты.ДатаВремяНачала
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВремяНачала,
	|	Сотрудник";
	
	#КонецОбласти

	Запрос.УстановитьПараметр("ДатаВремяНачала"		, ДатаВремяНачала);
	Запрос.УстановитьПараметр("Контрагент"			, Контрагент);
	Запрос.УстановитьПараметр("Сотрудник"			, Сотрудник);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	
	#Область Проверка_условий
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если Не ВыборкаДетальныеЗаписи.Следующий() Тогда
		РезультатСервиса.Result = Ложь;
		ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала, "Отсутствует запись. &ПСДата/время = &DateTime &ПССотрудник = &Specialist &ПСИНН клиента = &ClientINN.");
		ВозВрат РезультатСервиса;
	КонецЕсли;
	Если ВыборкаДетальныеЗаписи.Результат <> Перечисления.РезультатыКонсультации.ПустаяСсылка() Тогда
		РезультатСервиса.Result = Ложь;
		ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала, "Консультация уже выполнена. &ПСДата/время = &DateTime &ПССотрудник = &Specialist &ПСИНН клиента = &ClientINN.");
		ВозВрат РезультатСервиса;
	КонецЕсли;
	#КонецОбласти
	
	#КонецОбласти
	
	
	НачатьТранзакцию();
	
	#Область Создание_документа_ОтменаЗаписиНаЛК
	НовыйДокумент = Документы.ОтменаЗаписиНаЛК.СоздатьДокумент();
	НовыйДокумент.Дата						= ТекущаяДата;
	//Лобашова 89291 17.07.2019 +
	//НовыйДокумент.ИсточникСоздания			= "ВебСервис." + ИмяСервиса();
	НовыйДокумент.ИсточникСоздания			= "Самозапись";
	//Лобашова 89291 17.07.2019 -
	НовыйДокумент.ДатаВремяНачала			= ДатаВремяНачала;
	НовыйДокумент.Сотрудник					= Сотрудник;
	НовыйДокумент.ПричинаОтмены				= Справочники.ПричиныОтменыЗаписиНаЛК.ОтменаЧерезСервис;
	
	НовыйДокумент.ДополнительныеСвойства.Вставить("СозданиеИзВебСервиса" + ИмяСервиса(), Истина);
	Попытка
		//РежимПроведения = ?(НачалоДня(ТекущаяДата()) = НачалоДня(НовыйДокумент.Дата), РежимПроведенияДокумента.Оперативный, РежимПроведенияДокумента.Неоперативный);
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведения);
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = "";
		СообщенияПользователю = ПолучитьСообщенияПользователю();
		Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
			ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + СообщениеПользователю.Текст;
		КонецЦикла;
		РезультатСервиса.Result = Ложь;
		ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала, "Ошибка при проведении отмены записи на ЛК:" + Символы.ПС + ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
		ВозВрат РезультатСервиса;
	КонецПопытки;
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", "Cоздан документ ОтменаЗаписиНаЛК №" + НовыйДокумент.Номер + " от " + НовыйДокумент.Дата, ПараметрыСообщения, МассивЗаписейЖурнала);
	//ДокументыДляУдаления.Добавить(НовыйДокумент.Ссылка);
	#КонецОбласти
	
	Если ПереданаСтруктураПараметров Тогда
		Возврат Неопределено;
		//отключено!
		
		//СтруктураПараметров = ПолучитьСтруктуруИзСтрокиXML(ClientINN);
		//
		//ДанныеПриложения = ПолучитьДанныеПриложенияПоИдентификатору(СтруктураПараметров.ИдентификаторПриложения, ДанныеПриложения, СтруктураПараметров.КодПрофиляПользователя);
		
		//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11
		//НаборЗаписейРегистрPushУведомления = РегистрыСведений.PushУведомленияДляРассылкиПользователям.СоздатьНаборЗаписей();
		//
		//НаборЗаписейРегистрPushУведомления.Отбор.ИдентификаторПриложения.Установить(СтруктураПараметров.ИдентификаторПриложения);
		//НаборЗаписейРегистрPushУведомления.Отбор.КодПрофиляПользователя.Установить(СтруктураПараметров.КодПрофиляПользователя);
		//НаборЗаписейРегистрPushУведомления.Отбор.ДатаОтправки.Установить(ДатаВремяНачала - 5 * 60);	
		//НаборЗаписейРегистрPushУведомления.Прочитать();
		//НаборЗаписейРегистрPushУведомления.Очистить();
		//НаборЗаписейРегистрPushУведомления.Записать();
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Если Не РезультатСервиса.Result Тогда
		//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
		ВозВрат РезультатСервиса;
	КонецЕсли;

	Если ЗначениеЗаполнено(РезультатСервиса.Message) Тогда
		РезультатСервиса.Message		= РезультатСервиса.Message + Символы.ПС + "ОК"; // на всякий, если все же диагностика какая-то вывелась
	Иначе
		РезультатСервиса.Message		= "ОК";
	КонецЕсли;

	#Область Диагностика
	ШаблонСообщения = "Успешно обработано. Ответ сервиса:&ПС" + БоР_ОбщийМодуль.ПолучитьXDTOКакСтрокуXML(РезультатСервиса);
	Если ПараметрыСообщения.Свойство("ТекстПараметров") Тогда
		ШаблонСообщения = ШаблонСообщения + "&ПС Параметры:&ПС &ТекстПараметров";
	КонецЕсли;
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", ШаблонСообщения, ПараметрыСообщения, МассивЗаписейЖурнала);
	//ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала);
	#КонецОбласти
	
	ВозВрат РезультатСервиса;
	
КонецФункции

#Область Поиск_и_сопоставление_объектов

Функция НайтиКонтрагента(ИНН) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Абоненты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И НЕ Контрагенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИНН"	, ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ВозВрат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	ВозВрат Справочники.Абоненты.ПустаяСсылка();
	
КонецФункции

Функция НайтиКонтактноеЛицо(Владелец, Код) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПользователиАбонентов.ПользовательСервиса КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПользователиАбонентов КАК ПользователиАбонентов
	|ГДЕ
	|	НЕ ПользователиАбонентов.ПользовательСервиса.ПометкаУдаления
	|	И ПользователиАбонентов.Абонент = &Владелец
	//Лобашова 11.03.2019 81724
	//|	И ПользователиАбонентов.ПользовательСервиса.Код = &Код
	|";
	
	Запрос.УстановитьПараметр("Владелец"		, Владелец);
	//Лобашова 11.03.2019 81724
	//Запрос.УстановитьПараметр("Код"	, Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ВозВрат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	ВозВрат Справочники.ПользователиСервисов.ПустаяСсылка();
	
КонецФункции

Функция НайтиСотрудника(Код) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	//Лобашова 27.02.2019 81724 
	//|	И Пользователи.GUIDОБД = &Код";
	|	И Пользователи.GUID_УРВ = &Код";
	//Лобашова 27.02.2019 81724 
	Запрос.УстановитьПараметр("Код"	, Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ВозВрат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	ВозВрат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции
//Лобашова 22.04.2019 81724 +
Функция НайтиСотрудникаПоИмени(Сотрудник) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|	И Пользователи.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование"	, Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ВозВрат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	ВозВрат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции
//Лобашова 22.04.2019 81724 -

Функция НайтиВидУслуги(Наименование) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыУслуг.Ссылка
	|ИЗ
	|	Справочник.ВидыУслуг КАК ВидыУслуг
	|ГДЕ
	|	НЕ ВидыУслуг.ПометкаУдаления
	|	И ВидыУслуг.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование"	, Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ВозВрат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	ВозВрат Справочники.ВидыУслуг.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьКонтрагентаПоИННиНаименованию(ИНН, Наименование = Неопределено)
	
	ИскатьПоНаименованию = ЗначениеЗаполнено(Наименование);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Абоненты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Абоненты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И Контрагенты.Наименование = &Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Абоненты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И Контрагенты.Наименование = &Наименование
	|	И Контрагенты.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН"			, ИНН);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапрос = Запрос.ВыполнитьПакет();
	
	Если ИскатьПоНаименованию И НЕ РезультатЗапрос[2].Пустой() Тогда
	
		Выборка = РезультатЗапрос[2].Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Возврат Выборка.Контрагент;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ РезультатЗапрос[0].Пустой() Тогда
	
		Выборка = РезультатЗапрос[0].Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Возврат Выборка.Контрагент;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ИскатьПоНаименованию И НЕ РезультатЗапрос[1].Пустой() Тогда
	
		Выборка = РезультатЗапрос[1].Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Возврат Выборка.Контрагент;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Справочники.Абоненты.ПустаяСсылка();

КонецФункции // ПолучитьКонтрагентаПоИННиНаименованию()

#КонецОбласти

#Область Вспомогательные

Процедура ЗаписатьСведенияОВызовеВебСервиса(ИмяФункции, ТекущаяДата) Экспорт
	
	//Пользователь = Пользователи.ТекущийПользователь();
	//
	//Набор = РегистрыСведений.СведенияОВызовеВебСервисов.СоздатьНаборЗаписей();
	//Набор.Отбор.Пользователь		.Установить(Пользователь);
	//Набор.Отбор.ИмяФункции			.Установить(ИмяФункции);
	//
	//Запись = Набор.Добавить();
	//Запись.Пользователь			= Пользователь;
	//Запись.ИмяФункции			= ИмяФункции;
	//Запись.ДатаПоследнегоВызова	= ТекущаяДата;
	//
	//Набор.Записать();
	
КонецПроцедуры

Функция ПроверитьЗаполненностьЗначения(ВходноеЗначение, ТекстОшибки, РезультатСервиса = Неопределено, ПараметрыСообщения, МассивЗаписейЖурнала) Экспорт
	//ВходноеЗначениеНеЗаполнено = Истина;
	//Если ТипЗнч(ВходноеЗначение) <> Тип("Массив") Тогда // если массив, соединяем по И
	//	Для каждого ЗначениеПроверки Из ВходноеЗначение Цикл
	//		ВходноеЗначениеНеЗаполнено = ВходноеЗначениеНеЗаполнено И Не ЗначениеЗаполнено(ЗначениеПроверки);
	//	КонецЦикла;
	//Иначе
	//	ВходноеЗначениеНеЗаполнено = ЗначениеЗаполнено(ВходноеЗначение);
	//КонецЕсли;
	//Если ВходноеЗначениеНеЗаполнено Тогда
	//	ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала, ТекстОшибки);
	//	ВозВрат Ложь;
	//КонецЕсли;
	Если Не ЗначениеЗаполнено(ВходноеЗначение) Тогда
		ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала, ТекстОшибки);
		ВозВрат Ложь;
	КонецЕсли;
	ВозВрат Истина;
КонецФункции

Процедура Сообщить__Ж_ВС(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения = Неопределено, МассивЗаписейЖурнала, Знач УровеньЖурнала = Неопределено) Экспорт
	//Если МассивЗаписейЖурнала = Неопределено Тогда
	//	ВозВрат;
	//КонецЕсли;
	Сообщить__Ж(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения, УровеньЖурнала);
	//ПараметрыСообщения.НомерСообщения = ПараметрыСообщения.НомерСообщения + 1;
	//
	//ТекстСообщения	= Бор_ОбщийМодуль.СформироватьТекстСообщения(ШаблонСообщения, ПараметрыСообщения);
	//Категория = ?(УровеньЖурнала = Неопределено, УровеньЖурналаРегистрации.Информация, УровеньЖурнала);
	//
	//ПараметрыЗаписиЖурнала = Новый Структура;
	//ПараметрыЗаписиЖурнала.Вставить("ДатаВремя"				, ТекущаяДата());
	//ПараметрыЗаписиЖурнала.Вставить("ВебСервис"				, ПараметрыСообщения.ВебСервис);
	//ПараметрыЗаписиЖурнала.Вставить("Операция"				, ПараметрыСообщения.Операция);
	//ПараметрыЗаписиЖурнала.Вставить("Категория"				, Категория);
	//ПараметрыЗаписиЖурнала.Вставить("Миллисекунд"			, ТекущаяУниверсальнаяДатаВМиллисекундах());
	//ПараметрыЗаписиЖурнала.Вставить("НомерСообщения"		, ПараметрыСообщения.НомерСообщения);
	//ПараметрыЗаписиЖурнала.Вставить("НомерСоединения"		, НомерСоединенияИнформационнойБазы());
	//ПараметрыЗаписиЖурнала.Вставить("НомерСеанса"			, НомерСеансаИнформационнойБазы());
	//ПараметрыЗаписиЖурнала.Вставить("Сообщение"				, ТекстСообщения);
	//ПараметрыЗаписиЖурнала.Вставить("СообщениеСокр"			, ТекстСообщения);
	//
	//МассивЗаписейЖурнала.Добавить(ПараметрыЗаписиЖурнала);

	//МенеджерЗаписи = РегистрыСведений.ЖурналРаботыВебСервиса.СоздатьМенеджерЗаписи();
	//ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыЗаписиЖурнала);
	//МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ВыводОшибки(РезультатСервиса = Неопределено, ПараметрыСообщения, МассивЗаписейЖурнала, ТекстОшибки, ТехническаяИнформация = "") Экспорт
	ТекстСообщения	= Бор_ОбщийМодуль.СформироватьТекстСообщения(ТекстОшибки, ПараметрыСообщения);
	Если РезультатСервиса <> Неопределено Тогда
		РезультатСервиса.Result		= Ложь;
		РезультатСервиса.Message	= РезультатСервиса.Message + ?(ЗначениеЗаполнено(РезультатСервиса.Message), Символы.ПС, "") + ТекстСообщения;
	КонецЕсли;
	ПараметрыСообщения.Вставить("Ошибка"				, ТекстСообщения);
	ПараметрыСообщения.Вставить("ТехническаяИнформация"	, ТехническаяИнформация);
	ШаблонСообщения = "Ошибка: &Ошибка &ПС &ТехническаяИнформация";
	Если ПараметрыСообщения.Свойство("ТекстПараметров") Тогда
		 ШаблонСообщения = ШаблонСообщения + " &ПС Параметры: &ПС  &ТекстПараметров";
	КонецЕсли;
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", ШаблонСообщения, ПараметрыСообщения, МассивЗаписейЖурнала, УровеньЖурналаРегистрации.Предупреждение);
КонецПроцедуры

// БоР : Проверяет на неопределенное значение и заполняет пустым, но типизированным 04.05.2016 0:07:09
Процедура ЗаполнитьНеопределенное(Значение, ЧемЗаполнить = "") Экспорт
	Если Значение = Неопределено Тогда
		Значение = ЧемЗаполнить;
	КонецЕсли;
КонецПроцедуры

// БоР : Вызывает ЗаполнитьНеопределенное и потом добавляет в структуру 04.05.2016 0:07:09
Процедура ЗаполнитьИДобавитьПараметр(ПараметрыФункции, Имя, Значение, ЧемЗаполнить = "") Экспорт
	ЗаполнитьНеопределенное(Значение, ЧемЗаполнить);
	ПараметрыФункции.Вставить(Имя, Значение);
КонецПроцедуры

// БоР : Заносит все накопленные записи в регистр 24.05.2016 21:54:45
Функция ЗаписатьСообщенияВЖурнал(МассивЗаписейЖурнала, ОтменитьТранзакциюПриНаличии = Истина) Экспорт
	
	Если ОтменитьТранзакциюПриНаличии И ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	Если МассивЗаписейЖурнала <> Неопределено Тогда
		Для каждого ПараметрыЗаписиЖурнала Из МассивЗаписейЖурнала Цикл
			МенеджерЗаписи = РегистрыСведений.ЖурналРаботыВебСервиса.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыЗаписиЖурнала);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		МассивЗаписейЖурнала.Очистить();
	КонецЕсли;
КонецФункции

Функция СоздатьРезультатСервиса(Тип = "OperationResult") Экспорт
	ПространствоИмен	= ПространствоИменСервиса();
	ТипРезультат		= ФабрикаXDTO.Тип(ПространствоИмен, Тип);
 	РезультатСервиса	= ФабрикаXDTO.Создать(ТипРезультат);
	РезультатСервиса.Message					= "";
	РезультатСервиса.Result						= Истина;
	ВозВрат РезультатСервиса;
КонецФункции

// БоР :  07.07.2016 18:42:16
Функция ПространствоИменСервиса() Экспорт
	ВозВрат Бор_ПовторноеИспользованиеКлиентСервер.ВычислитьВыражение("Метаданные.WebСервисы.Hotline.ПространствоИмен");
КонецФункции

// БоР :  07.07.2016 18:42:16
Функция ИмяСервиса() Экспорт
	ВозВрат "Hotline";
КонецФункции

#Область Короткие_вызовы_процедур_сообщения

Процедура Сообщить__С(ШаблонСообщения, ПараметрыСообщения = Неопределено) Экспорт
	Бор_ОбщийМодуль.Сообщить_С(ШаблонСообщения, ПараметрыСообщения, Неопределено);
КонецПроцедуры

Процедура Сообщить__Ж(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения = Неопределено, Знач УровеньЖурнала = Неопределено) Экспорт
	Бор_ОбщийМодуль.Сообщить_Ж(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения, УровеньЖурнала);
КонецПроцедуры

Процедура Сообщить__СЖ(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения = Неопределено, Знач УровеньЖурнала = Неопределено) Экспорт
	Бор_ОбщийМодуль.Сообщить_СЖ(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения, УровеньЖурнала);
КонецПроцедуры

Процедура Сообщить__ЖО(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения = Неопределено) Экспорт
	Бор_ОбщийМодуль.Сообщить_ЖО(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения);
КонецПроцедуры

Процедура Сообщить__СЖО(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения = Неопределено) Экспорт
	Бор_ОбщийМодуль.Сообщить_СЖО(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения);
КонецПроцедуры

Процедура Сообщить__ЖП(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения = Неопределено) Экспорт
	Бор_ОбщийМодуль.Сообщить_ЖП(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения);
КонецПроцедуры

Процедура Сообщить__СЖП(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения = Неопределено) Экспорт
	Бор_ОбщийМодуль.Сообщить_СЖП(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения);
КонецПроцедуры
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтруктуруИзСтрокиXML(СтрокаXML) Экспорт
	
    ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	НоваяСтруктураИзXML = Новый Структура(); 
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
			НоваяСтруктураИзXML.Вставить(ЧтениеXML.Имя, ЧтениеXML.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НоваяСтруктураИзXML; 
	
КонецФункции	

Функция СтруктуруВСтрокуВXML(Структура) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДанныеТекущегоПользователя");
	Для каждого КлючИЗначение Из Структура Цикл
		ЗаписьXML.ЗаписатьАтрибут(КлючИЗначение.Ключ, Строка(КлючИЗначение.Значение));
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции 

Функция ПреобразоватьСтрокуXMLВТаблицуЗначений(СтрокаXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ТаблицаЗначений = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ТаблицаЗначений;
	
КонецФункции 

Функция КонтактнаяИнформацияПоЗначениюРеквизитов(КодСтраны="",КодГорода="",НомерТелефона="",Добавочный="")
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация") );
	
	Данные = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") );
	Данные.КодСтраны  = КодСтраны;
	Данные.КодГорода  = КодГорода;
	Данные.Номер      = НомерТелефона;
	Данные.Добавочный = Добавочный;
	Результат.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеТелефона(Данные);
		
	Результат.Состав      = Данные;
	Результат.Комментарий = "";
	
	Возврат Результат;
КонецФункции


#КонецОбласти


#КонецОбласти


#Область НеиспользуемыеПроцедурыИФункции

#Область РаботаСМобильнымПриложением

#Область РегистрацияИСинхронизацияДанныхПользователя

// Предназначена для проверки регистрации приложения в базе и подтверждения номера телефона через одноразовый пароль.
//
// Параметры:
//  PhoneNumber  - Строка - Номер телефона, к которому будет привязано приложение
//
// Возвращаемое значение:
//   РезультатСервиса  - СheckАpp_Result - результат пройденной проверки:
//					Result	- булево - признак статуса проверки (Истина - проверка пройдена)	
//                  Message - Строка - сообщение пользователю 
//                  Code    - Число (4,0) - сгенерированый код
Функция СheckАpp(PhoneNumber, ApplicationID, email)

	РезультатСервиса	= СоздатьРезультатСервиса("СheckАpp_Result");
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел(); 		
	ОдноразовыйПароль = ГенераторСлучайныхЧисел.СлучайноеЧисло(1000, 9999);
	
	РезультатСервиса.Code 	= ОдноразовыйПароль;
	РезультатСервиса.Result = ЗначениеЗаполнено(PhoneNumber);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Не заполнены входные параметры.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	ПодтверждатьПользователяПриложенияПоEmail = БоР_ОбщийМодуль.ПолучитьНастройку("ПодтверждатьПользователяПриложенияПоEmail"); // тип ШаблоныСообщений
	//ПодтверждатьПользователяПриложенияПоEmail = Истина;	
	
	ПодтверждатьПользователяПриложенияПоEmail = ?(ПодтверждатьПользователяПриложенияПоEmail <> Истина, Ложь, Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыМобильныхПриложенийСрезПоследних.Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыМобильныхПриложений.СрезПоследних(
	|			,
	|			Идентификатор <> &Идентификатор
	|				И (Телефон = &Телефон
	|					ИЛИ &ПодтверждатьПользователяПриложенияПоEmail = ИСТИНА
	|						И email = &Почта)) КАК ИдентификаторыМобильныхПриложенийСрезПоследних
	|ГДЕ
	|	ИдентификаторыМобильныхПриложенийСрезПоследних.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияПользователяМобильногоПриложения.РегистрацияНовогоПрофиля)";
	
	Запрос.УстановитьПараметр("Телефон"										, PhoneNumber);
	Запрос.УстановитьПараметр("Идентификатор"								, ApplicationID);
	Запрос.УстановитьПараметр("ПодтверждатьПользователяПриложенияПоEmail"	, ПодтверждатьПользователяПриложенияПоEmail);
	Запрос.УстановитьПараметр("Почта"										, email);
	
	НачатьТранзакцию();
	
	Попытка
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			РезультатСервиса.Message = "Указанный " + ?(ПодтверждатьПользователяПриложенияПоEmail, "email", "номер телефона") + " уже зарегестирован в системе." + ApplicationID + "" + PhoneNumber + "" + email;
			РезультатСервиса.Result = Ложь;
			
			Возврат РезультатСервиса;
			
		КонецЕсли;
		
		ШаблонSMSОдноразовогоПароля = БоР_ОбщийМодуль.ПолучитьНастройку("ШаблонSMSОдноразоваогоПароля"); // тип CRM_Шаблоны
		СодержаниеШаблона = Общегоназначения.ЗначениеРеквизитаОбъекта(ШаблонSMSОдноразовогоПароля, "Содержание");
		
		ПользовательМобильногоПриложения = БоР_ОбщийМодуль.ПолучитьНастройку("ПользовательМобильногоПриложения"); 
		
		Если ПодтверждатьПользователяПриложенияПоEmail Тогда
			
			ПараметрыПисьма = Новый Структура;
			
			МассивСтруктурПолучателей = Новый Массив;
			
			ДанныеПолучателя = Новый Структура("Адрес, Представление", Email, Email);
			МассивСтруктурПолучателей.Добавить(ДанныеПолучателя);
			
			ПараметрыПисьма.Вставить("Кому", МассивСтруктурПолучателей);
			ПараметрыПисьма.Вставить("Тема", "Доступ к мобильному приложению");
			ПараметрыПисьма.Вставить("Тело", "" + Формат(ОдноразовыйПароль, "ЧЦ=4; ЧДЦ=; ЧГ=") + ". " + СодержаниеШаблона);
			
			УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
			
			РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
			
		Иначе	
			
			//Документ_смсСообщение = Документы.смсСообщение.СоздатьДокумент();
			//
			//Документ_смсСообщение.Дата 					= ТекущаяДата();
			//Документ_смсСообщение.Актуальность			= Документ_смсСообщение.Дата + 60*20;    
			//Документ_смсСообщение.ФлагАктуальность		= Истина;
			//Документ_смсСообщение.НачалоОтправки		= Документ_смсСообщение.Дата;
			//Документ_смсСообщение.Автор 				= ПользовательМобильногоПриложения;
			//Документ_смсСообщение.ТекстСообщения 		= "" + Формат(ОдноразовыйПароль, "ЧЦ=4; ЧДЦ=; ЧГ=") + ". " + СодержаниеШаблона;
			//Документ_смсСообщение.ТипСообщения 			= Перечисления.ВходящееИсходящееСобытие.Исходящее;
			//Документ_смсСообщение.Ответственный			= ПользовательМобильногоПриложения;
			//Документ_смсСообщение.Комментарий			= "Отправка одноразового пароля новому пользователю мобильного приложения.";
			//Документ_смсСообщение.НомерОтправителя		= Константы.смсИмяПользователяПоУмолчанию.Получить();
			//Документ_смсСообщение.НеОтправлятьSMS		= Константы.смсНеОтправлятьSMS.Получить();	
			//Документ_смсСообщение.НачалоПериодаЗапрета	= Константы.смсНачалоПериодаЗапрета.Получить();
			//Документ_смсСообщение.КонецПериодаЗапрета	= Константы.смсКонецПериодаЗапрета.Получить();
			//Документ_смсСообщение.ОтчетОДоставке		= Истина;
			//
			//СтрокаПолучателя = Документ_смсСообщение.Получатели.Добавить();
			//
			//СтрокаПолучателя.Телефон 		= PhoneNumber;
			//СтрокаПолучателя.НомерТелефона 	= PhoneNumber;
			//СтрокаПолучателя.Статус			= Перечисления.смсСостоянияСообщений.НеОтправлено;
			//СтрокаПолучателя.ТекстСообщения = Документ_смсСообщение.ТекстСообщения;
			//
			//Документ_смсСообщение.Записать(РежимЗаписиДокумента.Запись);
			//
			//Документ_смсСообщение.ОтправитьSMS(Ложь);
			
		КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();
		РезультатСервиса.Result = Ложь;
		РезультатСервиса.Message = РезультатСервиса.Message + "Данные не прошли проверку: " + ОписаниеОшибки();
		Возврат РезультатСервиса;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

	Возврат РезультатСервиса;

КонецФункции // }Рарус lyumor Мобильное приложение  2017.10.18

// Выполняет регистрацию мобильного приложения в базе
// Параметры:
//		- Username 					- строка - ФИО контактного лица, 
//		- email 					- строка - e-mail контактного лица, 
//		- PhoneNumber 				- строка - номер телефона контактного лица, 
//		- ProcessingOfPersonalData 	- булево - согласие на обработку персональных данных, 
//		- GettingMailing 			- булево - согласие на получение рассылки по email, 
//		- INN 						- строка - ИНН контрагента, 
//		- LegalEntity 				- строка - наименование юридического лица, 
//		- ApplicationID 			- строка - идентификатор приложения 
Функция UserRegistration(CurrentUserData)
	
	ДанныеТекущегоПользователяПриложения = ПолучитьСтруктуруИзСтрокиXML(CurrentUserData);
	
	SecondName					= ?(ДанныеТекущегоПользователяПриложения.Свойство("Фамилия")											, ДанныеТекущегоПользователяПриложения.Фамилия, "");
	FirstName 					= ?(ДанныеТекущегоПользователяПриложения.Свойство("Имя")												, ДанныеТекущегоПользователяПриложения.Имя, "");
	Patronymic 					= ?(ДанныеТекущегоПользователяПриложения.Свойство("Отчество")											, ДанныеТекущегоПользователяПриложения.Отчество, "");
	email 						= ?(ДанныеТекущегоПользователяПриложения.Свойство("emailПользователя")									, ДанныеТекущегоПользователяПриложения.emailПользователя, "");
	PhoneNumber 				= ?(ДанныеТекущегоПользователяПриложения.Свойство("ТелефонПользователя")								, ДанныеТекущегоПользователяПриложения.ТелефонПользователя, "");
	ProcessingOfPersonalData 	= ?(ДанныеТекущегоПользователяПриложения.Свойство("СогласиеНаОбработкуПерсональныхДанныхПользователя")	, ДанныеТекущегоПользователяПриложения.СогласиеНаОбработкуПерсональныхДанныхПользователя = "Да", Ложь);
	GettingMailing 				= ?(ДанныеТекущегоПользователяПриложения.Свойство("СогласиеНаПолучениеРассылкиПоEmailПользователя")		, ДанныеТекущегоПользователяПриложения.СогласиеНаПолучениеРассылкиПоEmailПользователя = "Да", Ложь);
	INN 						= ?(ДанныеТекущегоПользователяПриложения.Свойство("ИНН")												, ДанныеТекущегоПользователяПриложения.ИНН, "");
	LegalEntity 				= ?(ДанныеТекущегоПользователяПриложения.Свойство("ЮридическоеЛицо")									, ДанныеТекущегоПользователяПриложения.ЮридическоеЛицо, "");
	ApplicationID 				= ?(ДанныеТекущегоПользователяПриложения.Свойство("ИдентификаторПриложения")							, ДанныеТекущегоПользователяПриложения.ИдентификаторПриложения, "");
	CodeOfContact 				= ?(ДанныеТекущегоПользователяПриложения.Свойство("КодКонтактногоЛица")									, ДанныеТекущегоПользователяПриложения.КодКонтактногоЛица, "");
	ProfileCode 				= ?(ДанныеТекущегоПользователяПриложения.Свойство("Код")												, ДанныеТекущегоПользователяПриложения.Код, "");

	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("UserRegistration_Result");
	
	ТипТаблица			= ФабрикаXDTO.Тип(ПространствоИмен, "TableOfAvailableFunctions");
	ТипЭлемента			= ФабрикаXDTO.Тип(ПространствоИмен, "AvailableFunctions");
	
	РезультатСервиса.Result = Истина;
	РезультатСервиса.RegistrationCode = "001"; // Приложение не зарегистрировано
	РезультатСервиса.CodeOfContact = CodeOfContact; // Приложение не зарегистрировано
	
	ЭтоОбновлениеРегистрационныхДанных = ЗначениеЗаполнено(ApplicationID);
	Идентификатор = ?(ЭтоОбновлениеРегистрационныхДанных, ApplicationID, Строка(Новый УникальныйИдентификатор));
	
	РезультатСервиса.ApplicationID = Идентификатор;
	
	РезультатСервиса.Result = ЗначениеЗаполнено(PhoneNumber) И ЗначениеЗаполнено(FirstName);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Не заполнены входные параметры." + FirstName + ""  + PhoneNumber;
		Возврат РезультатСервиса;
	КонецЕсли;
	
	Контрагент 								= Справочники.Абоненты.ПустаяСсылка();
	КонтактноеЛицо							= Неопределено;
	СсылкаНаДокументРегистрацииПриложения 	= Неопределено;

	НачатьТранзакцию();

	Если ЭтоОбновлениеРегистрационныхДанных Тогда
	
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыМобильныхПриложений.Регистратор КАК ДокументРегистрацииПриложения,
		|	ИдентификаторыМобильныхПриложений.Контрагент,
		|	ИдентификаторыМобильныхПриложений.КонтактноеЛицо
		|ИЗ
		|	РегистрСведений.ИдентификаторыМобильныхПриложений КАК ИдентификаторыМобильныхПриложений
		|ГДЕ
		|	ИдентификаторыМобильныхПриложений.Идентификатор = &Идентификатор
		|	И ИдентификаторыМобильныхПриложений.КодПрофиляПользователя = &КодПрофиляПользователя";
		
		Запрос.УстановитьПараметр("КодПрофиляПользователя"	, ProfileCode);
		Запрос.УстановитьПараметр("Идентификатор"			, Идентификатор);
		
		РезультатЗапроса = Запрос.Выполнить();

		Если РезультатЗапроса.Пустой() Тогда
			ЭтоОбновлениеРегистрационныхДанных = Ложь;
		Иначе
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ДокументРегистрацииПриложения = Выборка.ДокументРегистрацииПриложения.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда
				Контрагент = Выборка.Контрагент;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.КонтактноеЛицо) Тогда
				КонтактноеЛицо = Выборка.КонтактноеЛицо;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ ЭтоОбновлениеРегистрационныхДанных Тогда
		ДокументРегистрацииПриложения = Документы.РегистрацияПользователяМобильногоПриложения.СоздатьДокумент();
	КонецЕсли;

	// Если заполен ИНН, то проверяем есть ли этот контрагент в базе и сразу даем доступ к функциям мобильного приложения для клиентов
	// иначе это новый клиент, необходимо его зарегистрировать, но открыть только публичные функции 
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = ПолучитьКонтрагентаПоИННиНаименованию(INN, LegalEntity);
	КонецЕсли;	

	ЭтоПодтвержденныйПользователь = ЗначениеЗаполнено(Контрагент);
	
	Комментарий = "";

	Если ЭтоПодтвержденныйПользователь Тогда
				
		СтруктураДанныхКонтактногоЛица = ПолучитьКонтактноеЛицо(CodeOfContact, Контрагент, КонтактноеЛицо, SecondName, FirstName, Patronymic, PhoneNumber, email);
		
		РезультатСервиса.CodeOfContact = СтруктураДанныхКонтактногоЛица.CodeOfContact;
		
		ДокументРегистрацииПриложения.КонтактноеЛицо = СтруктураДанныхКонтактногоЛица.КонтактноеЛицо;

		Если Контрагент.ИНН <> INN И НЕ ДокументРегистрацииПриложения.Проведен Тогда
		
			ЭтоПодтвержденныйПользователь = Ложь;
			Комментарий = "Указанный ИНН не соответствует выбранному контрагенту. Необходима проверка введенных данных.";

		КонецЕсли;
		
	КонецЕсли;

	ДокументРегистрацииПриложения.КодПрофиляПользователя							= ProfileCode;
	ДокументРегистрацииПриложения.Идентификатор										= Идентификатор;
	ДокументРегистрацииПриложения.Дата 												= ТекущаяДата();
	ДокументРегистрацииПриложения.Контрагент 										= Контрагент;
	ДокументРегистрацииПриложения.Телефон 											= PhoneNumber;
	ДокументРегистрацииПриложения.email 											= email;
	ДокументРегистрацииПриложения.СогласиеНаПолучениеРассылкиПоEmailПользователя 	= GettingMailing;
	ДокументРегистрацииПриложения.СогласиеНаОбработкуПерсональныхДанныхПользователя = ProcessingOfPersonalData;
	ДокументРегистрацииПриложения.ИНН 												= INN;
	ДокументРегистрацииПриложения.ЮридическоеЛицо 									= LegalEntity;
	ДокументРегистрацииПриложения.ДатаВремяРегистрации 								= ТекущаяДата();
	ДокументРегистрацииПриложения.Фамилия											= SecondName;
	ДокументРегистрацииПриложения.Имя												= FirstName;
	ДокументРегистрацииПриложения.Отчетство											= Patronymic;
	ДокументРегистрацииПриложения.УведомлениеОПодтвержденииРегистрацииОтправлено	= ЭтоПодтвержденныйПользователь;
	ДокументРегистрацииПриложения.Комментарий										= Комментарий;
	ДокументРегистрацииПриложения.ВидОперации										= Перечисления.ВидыОперацийРегистрацияПользователяМобильногоПриложения.РегистрацияНовогоПрофиля;

	Попытка

		ДокументРегистрацииПриложения.Записать(РежимЗаписиДокумента.Проведение);
		РезультатСервиса.Message = РезультатСервиса.Message + ?(ЭтоПодтвержденныйПользователь, "Приложение зарегистрировано и подтверждено.", "Приложение зарегистрировано, но ожидается подтверждение регистрисрации.");
		
	Исключение
		
		ОтменитьТранзакцию();
		
		РезультатСервиса.Result		= Ложь;
		РезультатСервиса.Message 	= РезультатСервиса.Message + "Не удалось зарегистрировать приложение."  + ОписаниеОшибки();
		
		Возврат РезультатСервиса;

	КонецПопытки;

	РезультатСервиса.RegistrationCode = ?(ЭтоПодтвержденныйПользователь, "003", "002");	
	
	ПользовательОтветственныйЗаПодтверждениеРегистрации = БоР_ОбщийМодуль.ПолучитьНастройку("ПользовательОтветственныйЗаПодтверждениеРегистрации"); 
	
	Если НЕ ЭтоПодтвержденныйПользователь И ЗначениеЗаполнено(ПользовательОтветственныйЗаПодтверждениеРегистрации) Тогда
		
		//МенеджерЗаписиНапоминаний = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		//
		//МенеджерЗаписиНапоминаний.ДатаОповещения 			= ТекущаяДата();
		//МенеджерЗаписиНапоминаний.Пользователь				= ПользовательОтветственныйЗаПодтверждениеРегистрации;
		//МенеджерЗаписиНапоминаний.Объект                    = ДокументРегистрацииПриложения.Ссылка;
		//МенеджерЗаписиНапоминаний.ТипПериода                = "013660";
		//МенеджерЗаписиНапоминаний.ДатаНачала                = ТекущаяДата();
		//МенеджерЗаписиНапоминаний.Описание                  = "В системе зарегистрирован новый пользователь мобильного прилождения. Необходимо подтверждение регистрации";
		//МенеджерЗаписиНапоминаний.УдалитьПоИстеченииСрока   = Ложь;
		//МенеджерЗаписиНапоминаний.РеальнаяДатаОповещения	= ТекущаяДата();
		//МенеджерЗаписиНапоминаний.Автор						= ПользовательОтветственныйЗаПодтверждениеРегистрации;
		//МенеджерЗаписиНапоминаний.Тема                      = "Подтверждение регистрации пользователя";
		//МенеджерЗаписиНапоминаний.Важность                 	= Перечисления.Важность.Средняя;
		//МенеджерЗаписиНапоминаний.СрокДоНачала              = 60;

		ТекДата = ТекущаяДата();
		МенеджерЗаписиНапоминаний = РегистрыСведений.НапоминанияПользователя.СоздатьМенеджерЗаписи();
		МенеджерЗаписиНапоминаний.Пользователь				= ПользовательОтветственныйЗаПодтверждениеРегистрации;
		МенеджерЗаписиНапоминаний.ВремяСобытия				= ТекДата;
		МенеджерЗаписиНапоминаний.Источник					= ДокументРегистрацииПриложения.Ссылка;
		МенеджерЗаписиНапоминаний.СрокНапоминания			= ТекДата - 60;
		МенеджерЗаписиНапоминаний.Описание					= "В системе зарегистрирован новый пользователь мобильного прилождения. Необходимо подтверждение регистрации";
		МенеджерЗаписиНапоминаний.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета;
		МенеджерЗаписиНапоминаний.ИнтервалВремениНапоминания		= 60;
		МенеджерЗаписиНапоминаний.ИмяРеквизитаИсточника				= "";
		МенеджерЗаписиНапоминаний.ПредставлениеИсточника			= "Подтверждение регистрации пользователя";
		МенеджерЗаписиНапоминаний.Прочитать();
		
		Если Не ЗначениеЗаполнено(МенеджерЗаписиНапоминаний.Идентификатор) Тогда
			МенеджерЗаписиНапоминаний.Идентификатор = Строка(ДокументРегистрацииПриложения.УникальныйИдентификатор()); // Пока используем ссылку на документ как идентификатор
		КонецЕсли;
	
		Попытка
			МенеджерЗаписиНапоминаний.Записать();
		Исключение

			ОтменитьТранзакцию();
			
			РезультатСервиса.Result	= Ложь;
			РезультатСервиса.Message= "Не удалось зарегистрировать приложение." + ОписаниеОшибки();
			
			Возврат РезультатСервиса;
			
		КонецПопытки; 
		
	КонецЕсли;
	
	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	//ТаблицаДоступныхФункцийПользователя = ПолучитьТаблицуДоступныхФункций(Идентификатор);
	//
	//НаборЗаписейДоступностьФункцийМобильногоПриложения = РегистрыСведений.ДоступностьФункцийМобильногоПриложения.СоздатьНаборЗаписей();
	//НаборЗаписейДоступностьФункцийМобильногоПриложения.Отбор.ИдентификаторПриложения.Установить(Идентификатор);
	//
	//НаборЗаписейДоступностьФункцийМобильногоПриложения.Прочитать();
	//НаборЗаписейДоступностьФункцийМобильногоПриложения.Очистить();
	//НаборЗаписейДоступностьФункцийМобильногоПриложения.Загрузить(ТаблицаДоступныхФункцийПользователя);
	//
	//Попытка
	//	НаборЗаписейДоступностьФункцийМобильногоПриложения.Записать();
	//Исключение
	//	
	//	ОтменитьТранзакцию();
	//	
	//	РезультатСервиса.Result	 = Ложь;
	//	РезультатСервиса.Message = "Не удалось зарегистрировать приложение." + ОписаниеОшибки();
	//	
	//	Возврат РезультатСервиса;
	//	
	//КонецПопытки; 
	//
	//ТаблицаДоступныхФункция_XDTO = ФабрикаXDTO.Создать(ТипТаблица);
	//
	//Для каждого СтрокаТаблицыДоступныхФункций Из ТаблицаДоступныхФункцийПользователя Цикл
	//	
	//	СтрокаТаблицыДоступныхФункций_XDTO			= ФабрикаXDTO.Создать(ТипЭлемента);
	//	СтрокаТаблицыДоступныхФункций_XDTO.ProfileCode	= СтрокаТаблицыДоступныхФункций.КодПрофиляПользователя;
	//	СтрокаТаблицыДоступныхФункций_XDTO.Function	= Справочники.ФункцииМобильногоПриложения.ПолучитьИмяПредопределенного(СтрокаТаблицыДоступныхФункций.Функция);
	//	СтрокаТаблицыДоступныхФункций_XDTO.available= СтрокаТаблицыДоступныхФункций.Доступна;
	//	
	//	ТаблицаДоступныхФункция_XDTO.Table.Добавить(СтрокаТаблицыДоступныхФункций_XDTO);
	//	
	//КонецЦикла; 
	//
	//РезультатСервиса.TableOfAvailableFunctions = ТаблицаДоступныхФункция_XDTO;
	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	
	ЗафиксироватьТранзакцию();
	
	Возврат РезультатСервиса;
	
КонецФункции // }Рарус lyumor Мобильное приложение  2017.10.18 

// Предназначена для получения всех доступных функций текущего пользователя
Функция GetAllFuction(ApplicationID, ProfileCode)

	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("UserRegistration_Result");
	
	ТипТаблица			= ФабрикаXDTO.Тип(ПространствоИмен, "TableOfAvailableFunctions");
	ТипЭлемента			= ФабрикаXDTO.Тип(ПространствоИмен, "AvailableFunctions");
	
	РезультатСервиса.Result = Истина;
	РезультатСервиса.Message = "";
	РезультатСервиса.ApplicationID = ApplicationID;
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Не заполнены входные параметры.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	НачатьТранзакцию();

	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	//ТаблицаДоступныхФункцийПользователя = ПолучитьТаблицуДоступныхФункций(ApplicationID);
	//
	//НаборЗаписейДоступностьФункцийМобильногоПриложения = РегистрыСведений.ДоступностьФункцийМобильногоПриложения.СоздатьНаборЗаписей();
	//НаборЗаписейДоступностьФункцийМобильногоПриложения.Отбор.ИдентификаторПриложения.Установить(ApplicationID);
	//
	//НаборЗаписейДоступностьФункцийМобильногоПриложения.Прочитать();
	//НаборЗаписейДоступностьФункцийМобильногоПриложения.Очистить();
	//НаборЗаписейДоступностьФункцийМобильногоПриложения.Загрузить(ТаблицаДоступныхФункцийПользователя);
	//
	//Попытка
	//	НаборЗаписейДоступностьФункцийМобильногоПриложения.Записать();
	//Исключение
	//	
	//	ОтменитьТранзакцию();
	//	
	//	РезультатСервиса.Result		= Ложь;
	//	РезультатСервиса.Message 	= "Не удалось зарегистрировать приложение." + ОписаниеОшибки();
	//	
	//	Возврат РезультатСервиса;
	//	
	//КонецПопытки; 
	//
	//ТаблицаДоступныхФункция_XDTO = ФабрикаXDTO.Создать(ТипТаблица);
	//
	//Для каждого СтрокаТаблицыДоступныхФункций Из ТаблицаДоступныхФункцийПользователя Цикл
	//	
	//	СтрокаТаблицыДоступныхФункций_XDTO				= ФабрикаXDTO.Создать(ТипЭлемента);
	//	СтрокаТаблицыДоступныхФункций_XDTO.ProfileCode	= СтрокаТаблицыДоступныхФункций.КодПрофиляПользователя;
	//	СтрокаТаблицыДоступныхФункций_XDTO.Function		= Справочники.ФункцииМобильногоПриложения.ПолучитьИмяПредопределенного(СтрокаТаблицыДоступныхФункций.Функция);
	//	СтрокаТаблицыДоступныхФункций_XDTO.available	= СтрокаТаблицыДоступныхФункций.Доступна;
	//	
	//	ТаблицаДоступныхФункция_XDTO.Table.Добавить(СтрокаТаблицыДоступныхФункций_XDTO);
	//	
	//КонецЦикла; 
	//
	//РезультатСервиса.TableOfAvailableFunctions = ТаблицаДоступныхФункция_XDTO;
	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	
	ЗафиксироватьТранзакцию();
	
	Возврат РезультатСервиса;
	
КонецФункции // }Рарус lyumor Мобильное приложение  2017.10.18 

// Выполняет удаление профиля мобильного приложения в базе
// Параметры:
//		- ApplicationID: идентификатор приложения (строка) 
Функция DeleteUser(ApplicationID, ProfileCode)

	РезультатСервиса = СоздатьРезультатСервиса("OperationResult");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Не заполнены входные параметры.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыМобильныхПриложений.Регистратор КАК ДокументРегистрацииПриложения
	|ИЗ
	|	РегистрСведений.ИдентификаторыМобильныхПриложений КАК ИдентификаторыМобильныхПриложений
	|ГДЕ
	|	ИдентификаторыМобильныхПриложений.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", ApplicationID);
	
	Если ЗначениеЗаполнено(ProfileCode) Тогда
		Запрос.УстановитьПараметр("КодПрофиляПользователя", ProfileCode);
		Запрос.Текст = Запрос.Текст + "  И ИдентификаторыМобильныхПриложений.КодПрофиляПользователя = &КодПрофиляПользователя"
	КонецЕсли; 
	
	НачатьТранзакцию();
	
	Попытка      		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ДокументРегистрацииПриложения = Выборка.ДокументРегистрацииПриложения.ПолучитьОбъект();
				ДокументРегистрацииПриложения.Комментарий = "Профиль удален пользователем.";
				ДокументРегистрацииПриложения.ВидОперации = Перечисления.ВидыОперацийРегистрацияПользователяМобильногоПриложения.УдалениеПофиля;
				ДокументРегистрацииПриложения.Записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла; 
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ProfileCode) Тогда
			НаборЗаписейСоответствиеПолучателейУведомленийМобильнымПриложениям = РегистрыСведений.СоответствиеПолучателейУведомленийМобильнымПриложениям.СоздатьНаборЗаписей();
			НаборЗаписейСоответствиеПолучателейУведомленийМобильнымПриложениям.Отбор.Идентификатор.Установить(ApplicationID);
			НаборЗаписейСоответствиеПолучателейУведомленийМобильнымПриложениям.Прочитать();
			НаборЗаписейСоответствиеПолучателейУведомленийМобильнымПриложениям.Очистить();
			НаборЗаписейСоответствиеПолучателейУведомленийМобильнымПриложениям.Записать();
		КонецЕсли;
		
		НаборЗаписейДоступностьФункцийМобильногоПриложения = РегистрыСведений.ДоступностьФункцийМобильногоПриложения.СоздатьНаборЗаписей();
		НаборЗаписейДоступностьФункцийМобильногоПриложения.Отбор.ИдентификаторПриложения.Установить(ApplicationID);
		Если ЗначениеЗаполнено(ProfileCode) Тогда
			НаборЗаписейДоступностьФункцийМобильногоПриложения.Отбор.КодПрофиляПользователя.Установить(ProfileCode);
		КонецЕсли; 
		НаборЗаписейДоступностьФункцийМобильногоПриложения.Прочитать();
		НаборЗаписейДоступностьФункцийМобильногоПриложения.Очистить();
		НаборЗаписейДоступностьФункцийМобильногоПриложения.Записать();
		
		РезультатСервиса.Message = "Профиль успешно удален."
		
	Исключение
		
		ОтменитьТранзакцию();
		
		РезультатСервиса.Result	= Ложь;
		РезультатСервиса.Message= "Не удалось удалить профиль." + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат РезультатСервиса;

КонецФункции // }Рарус lyumor Мобильное приложение  2017.10.18

// Обновление идентификатора подписчика push-уведомлений в базе
// Параметры:
//		- ApplicationID: идентификатор приложения (строка) 
//		- NotificationID: идентификатора подписчика 
Функция NewNotificationID(ApplicationID, NotificationID)
	
	РезультатСервиса	= СоздатьРезультатСервиса("OperationResult");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Не заполнены входные параметры.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ИдентификаторПодписчика = СериализаторXDTO.ПрочитатьXDTO(NotificationID);
		
		МенеджерЗаписи = РегистрыСведений.СоответствиеПолучателейУведомленийМобильнымПриложениям.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Идентификатор = ApplicationID;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ИдентификаторПолучателяУведомлений = Новый ХранилищеЗначения(ИдентификаторПодписчика);
		Иначе
			МенеджерЗаписи.Идентификатор = ApplicationID;
			МенеджерЗаписи.ИдентификаторПолучателяУведомлений = Новый ХранилищеЗначения(ИдентификаторПодписчика)
		КонецЕсли; 
		
		МенеджерЗаписи.Записать();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		РезультатСервиса.Result = Ложь;
		РезультатСервиса.Message  = "Не зарегистрировать идентификатор подписчика." +ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	РезультатСервиса.Message = РезультатСервиса.Message + Символы.ПС + "ОК"; // на всякий, если все же диагностика какая-то вывелась
	
	Возврат РезультатСервиса;
	
КонецФункции // }Рарус lyumor Мобильное приложение  2017.10.20

// Предназначена для получения всех доступных видов услуг при записи на консультацию
Функция GetServices(ApplicationID, ProfileCode)

	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("GetServices_Result");
	
	ТипТаблицы			= ФабрикаXDTO.Тип(ПространствоИмен, "ServicesTable");
	ТипЭлемента			= ФабрикаXDTO.Тип(ПространствоИмен, "Service");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Не заполнены входные параметры.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыМобильныхПриложенийСрезПоследних.Контрагент
	|ПОМЕСТИТЬ втКонтрагент
	|ИЗ
	|	РегистрСведений.ИдентификаторыМобильныхПриложений.СрезПоследних(
	|			,
	|			Идентификатор = &Идентификатор
	|				И Контрагент <> ЗНАЧЕНИЕ(Справочник.Абоненты.ПустаяСсылка)
	|				И КодПрофиляПользователя = &КодПрофиляПользователя) КАК ИдентификаторыМобильныхПриложенийСрезПоследних
	|ГДЕ
	|	ИдентификаторыМобильныхПриложенийСрезПоследних.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияПользователяМобильногоПриложения.РегистрацияНовогоПрофиля)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступностьВидовУслугКлиентамЛКСрезПоследних.ВидУслуги.Наименование КАК ВидУслуги
	|ИЗ
	|	РегистрСведений.ДоступностьВидовУслугКлиентамЛК.СрезПоследних(
	|			&ТекущаяДата,
	|			Контрагент В
	|				(ВЫБРАТЬ
	|					втКонтрагент.Контрагент
	|				ИЗ
	|					втКонтрагент КАК втКонтрагент)) КАК ДоступностьВидовУслугКлиентамЛКСрезПоследних
	|ГДЕ
	|	НЕ ДоступностьВидовУслугКлиентамЛКСрезПоследних.НеДействует
	|	И ДоступностьВидовУслугКлиентамЛКСрезПоследних.ДатаНачала <= &ТекущаяДата
	|	И (ДоступностьВидовУслугКлиентамЛКСрезПоследних.ДатаОкончания >= &ТекущаяДата
	|			ИЛИ ДоступностьВидовУслугКлиентамЛКСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыУслуг.Наименование КАК ВидУслуги
	|ИЗ
	|	Справочник.ВидыУслуг КАК ВидыУслуг";
	
	Запрос.УстановитьПараметр("Идентификатор"			, ApplicationID);
	Запрос.УстановитьПараметр("ТекущаяДата"				, ТекущаяДата());
	Запрос.УстановитьПараметр("КодПрофиляПользователя"	, ProfileCode);
	
	НачатьТранзакцию();
	
	Попытка
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаВидовУслуг_XDTO = ФабрикаXDTO.Создать(ТипТаблицы);
		
		ВыбокаВидовУслуг = ?(РезультатЗапроса[1].Пустой(), РезультатЗапроса[2].Выбрать(), РезультатЗапроса[1].Выбрать());
		
		Пока ВыбокаВидовУслуг.Следующий() Цикл
			
			СтрокаТаблицыВидовУслуг_XDTO = ФабрикаXDTO.Создать(ТипЭлемента);
			СтрокаТаблицыВидовУслуг_XDTO.Name= ВыбокаВидовУслуг.ВидУслуги;
			
			ТаблицаВидовУслуг_XDTO.Table.Добавить(СтрокаТаблицыВидовУслуг_XDTO);
			
		КонецЦикла; 
		
		РезультатСервиса.ServicesTable = ТаблицаВидовУслуг_XDTO;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		РезультатСервиса.Result		= Ложь;
		РезультатСервиса.Message 	= РезультатСервиса.Message + "Не обновить виды доступных услуг" + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

	Возврат РезультатСервиса;

КонецФункции

#КонецОбласти 

#Область УправлениеДоступомПодчиненныхСотрудников

// Предназначена для получения списка "подчиненных", зарегестрированных в приложении и списка доступных им функций
Функция GetInformationAboutAvailableUsers(ApplicationID, ProfileCode)

	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("GetInformationAboutAvailableUsers_Result");
	
	ТипТаблица_ИнформацияОПользователях 		= ФабрикаXDTO.Тип(ПространствоИмен, "TableOfInformationAboutAvailableUsers");
	ТипЭлемента_ТаблицаИнформацияОПользователях	= ФабрикаXDTO.Тип(ПространствоИмен, "InformationAboutAvailableUsers");
	ТипТаблица_ДоступныхФункция 				= ФабрикаXDTO.Тип(ПространствоИмен, "TableOfAvailableFunctions");
	ТипЭлемента_ТаблицаДоступныхФункция			= ФабрикаXDTO.Тип(ПространствоИмен, "AvailableFunctions");
	              
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID) И ЗначениеЗаполнено(ProfileCode);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Не заполнены входные параметры.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоступностьФункцийМобильногоПриложения.ИдентификаторПриложения
	|ПОМЕСТИТЬ втДоступнаФункцияУправленияДоступом
	|ИЗ
	|	РегистрСведений.ДоступностьФункцийМобильногоПриложения КАК ДоступностьФункцийМобильногоПриложения
	|ГДЕ
	|	ДоступностьФункцийМобильногоПриложения.ИдентификаторПриложения = &ИдентификаторПриложения
	|	И ДоступностьФункцийМобильногоПриложения.Функция = ЗНАЧЕНИЕ(Справочник.ФункцииМобильногоПриложения.УправлениеДоступом)
	|	И ДоступностьФункцийМобильногоПриложения.Доступна = ИСТИНА
	|	И ДоступностьФункцийМобильногоПриложения.КодПрофиляПользователя = &КодПрофиляПользователя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыМобильныхПриложений.Контрагент
	|ПОМЕСТИТЬ втКонтрагент
	|ИЗ
	|	РегистрСведений.ИдентификаторыМобильныхПриложений.СрезПоследних(, ) КАК ИдентификаторыМобильныхПриложений
	|ГДЕ
	|	ИдентификаторыМобильныхПриложений.Идентификатор = &ИдентификаторПриложения
	|	И ИдентификаторыМобильныхПриложений.Контрагент <> ЗНАЧЕНИЕ(Справочник.Абоненты.ПустаяСсылка)
	|	И ИдентификаторыМобильныхПриложений.Идентификатор В
	|			(ВЫБРАТЬ
	|				втДоступнаФункцияУправленияДоступом.ИдентификаторПриложения
	|			ИЗ
	|				втДоступнаФункцияУправленияДоступом КАК втДоступнаФункцияУправленияДоступом)
	|	И ИдентификаторыМобильныхПриложений.КодПрофиляПользователя = &КодПрофиляПользователя
	|	И ИдентификаторыМобильныхПриложений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияПользователяМобильногоПриложения.РегистрацияНовогоПрофиля)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыМобильныхПриложений.Идентификатор,
	|	ИдентификаторыМобильныхПриложений.Телефон,
	|	ИдентификаторыМобильныхПриложений.email,
	|	ИдентификаторыМобильныхПриложений.Фамилия,
	|	ИдентификаторыМобильныхПриложений.Имя,
	|	ИдентификаторыМобильныхПриложений.Отчетство,
	|	ИСТИНА КАК ЭтоЗарегистрированныйПользователь,
	|	ИдентификаторыМобильныхПриложений.ДатаВремяРегистрации,
	|	ИдентификаторыМобильныхПриложений.КодПрофиляПользователя
	|ПОМЕСТИТЬ втИнформацияОДоступныхПользователях
	|ИЗ
	|	РегистрСведений.ИдентификаторыМобильныхПриложений.СрезПоследних(, ) КАК ИдентификаторыМобильныхПриложений
	|ГДЕ
	|	ИдентификаторыМобильныхПриложений.Контрагент В
	|			(ВЫБРАТЬ
	|				втКонтрагент.Контрагент
	|			ИЗ
	|				втКонтрагент КАК втКонтрагент)
	|	И ИдентификаторыМобильныхПриложений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияПользователяМобильногоПриложения.РегистрацияНовогоПрофиля)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИдентификаторыМобильныхПриложений.Идентификатор,
	|	ИдентификаторыМобильныхПриложений.Телефон,
	|	ИдентификаторыМобильныхПриложений.email,
	|	ИдентификаторыМобильныхПриложений.Фамилия,
	|	ИдентификаторыМобильныхПриложений.Имя,
	|	ИдентификаторыМобильныхПриложений.Отчетство,
	|	ЛОЖЬ,
	|	ИдентификаторыМобильныхПриложений.ДатаВремяРегистрации,
	|	ИдентификаторыМобильныхПриложений.КодПрофиляПользователя
	|ИЗ
	|	РегистрСведений.ИдентификаторыМобильныхПриложений.СрезПоследних(, ) КАК ИдентификаторыМобильныхПриложений
	|ГДЕ
	|	ИдентификаторыМобильныхПриложений.Контрагент = ЗНАЧЕНИЕ(Справочник.Абоненты.ПустаяСсылка)
	|	И ИдентификаторыМобильныхПриложений.Идентификатор <> &ИдентификаторПриложения
	|	И ИдентификаторыМобильныхПриложений.ИНН В
	|			(ВЫБРАТЬ
	|				втКонтрагент.Контрагент.ИНН
	|			ИЗ
	|				втКонтрагент КАК втКонтрагент)
	|	И ИдентификаторыМобильныхПриложений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияПользователяМобильногоПриложения.РегистрацияНовогоПрофиля)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДоступнаФункцияУправленияДоступом.ИдентификаторПриложения
	|ИЗ
	|	втДоступнаФункцияУправленияДоступом КАК втДоступнаФункцияУправленияДоступом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИнформацияОДоступныхПользователях.Идентификатор КАК ИдентификаторПриложения,
	|	втИнформацияОДоступныхПользователях.Телефон,
	|	втИнформацияОДоступныхПользователях.email,
	|	втИнформацияОДоступныхПользователях.Фамилия,
	|	втИнформацияОДоступныхПользователях.Имя,
	|	втИнформацияОДоступныхПользователях.Отчетство,
	|	втИнформацияОДоступныхПользователях.ЭтоЗарегистрированныйПользователь,
	|	втИнформацияОДоступныхПользователях.ДатаВремяРегистрации,
	|	втИнформацияОДоступныхПользователях.КодПрофиляПользователя
	|ИЗ
	|	втИнформацияОДоступныхПользователях КАК втИнформацияОДоступныхПользователях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоступностьФункцийМобильногоПриложения.Функция,
	|	ДоступностьФункцийМобильногоПриложения.Доступна,
	|	ДоступностьФункцийМобильногоПриложения.ИдентификаторПриложения,
	|	ДоступностьФункцийМобильногоПриложения.КодПрофиляПользователя
	|ИЗ
	|	РегистрСведений.ДоступностьФункцийМобильногоПриложения КАК ДоступностьФункцийМобильногоПриложения
	|ГДЕ
	|	ДоступностьФункцийМобильногоПриложения.ИдентификаторПриложения В
	|			(ВЫБРАТЬ
	|				втИнформацияОДоступныхПользователях.Идентификатор
	|			ИЗ
	|				втИнформацияОДоступныхПользователях КАК втИнформацияОДоступныхПользователях)";
	
	Запрос.УстановитьПараметр("ИдентификаторПриложения"	, ApplicationID);
	Запрос.УстановитьПараметр("КодПрофиляПользователя"	, ProfileCode);
	
	НачатьТранзакцию();
	
	Попытка
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Если РезультатЗапроса[3].Пустой() Тогда
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			РезультатСервиса.Result		= Ложь;
			РезультатСервиса.Message 	= РезультатСервиса.Message + " Нет прав на управление доступом.";
			
			Возврат РезультатСервиса;
			
		КонецЕсли;
		
		Если РезультатЗапроса[4].Пустой() Тогда
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			РезультатСервиса.Result		= Ложь;
			РезультатСервиса.Message 	= РезультатСервиса.Message + " Зарегестрированные пользователи и заявки на регистрацию отсутствуют.";
			
			Возврат РезультатСервиса;
			
		КонецЕсли;
		
		ВыборкаИнформацияОДоступныхПользователях 	= РезультатЗапроса[4].Выбрать();
		ВыборкаДоступныеФункцииПользователей		= РезультатЗапроса[5].Выбрать();
		
		Отбор = Новый Структура("ИдентификаторПриложения");
		
		Таблица_ИнформацияОПользователяхXDTO = ФабрикаXDTO.Создать(ТипТаблица_ИнформацияОПользователях);
		
		Пока ВыборкаИнформацияОДоступныхПользователях.Следующий() Цикл
			
			СтрокаТаблицы_ИнформацияОПользователяхXDTO							= ФабрикаXDTO.Создать(ТипЭлемента_ТаблицаИнформацияОПользователях);
			СтрокаТаблицы_ИнформацияОПользователяхXDTO.ApplicationID			= ВыборкаИнформацияОДоступныхПользователях.ИдентификаторПриложения;
			СтрокаТаблицы_ИнформацияОПользователяхXDTO.PhoneNumber				= ВыборкаИнформацияОДоступныхПользователях.Телефон;
			СтрокаТаблицы_ИнформацияОПользователяхXDTO.Email 					= ВыборкаИнформацияОДоступныхПользователях.email;
			СтрокаТаблицы_ИнформацияОПользователяхXDTO.FullName     			= ВыборкаИнформацияОДоступныхПользователях.Фамилия + " " + ВыборкаИнформацияОДоступныхПользователях.Имя + " " + ВыборкаИнформацияОДоступныхПользователях.Отчетство;
			СтрокаТаблицы_ИнформацияОПользователяхXDTO.ThisIsARegisteredUser 	= ВыборкаИнформацияОДоступныхПользователях.ЭтоЗарегистрированныйПользователь;
			СтрокаТаблицы_ИнформацияОПользователяхXDTO.DateOfRegistration		= ВыборкаИнформацияОДоступныхПользователях.ДатаВремяРегистрации;
			СтрокаТаблицы_ИнформацияОПользователяхXDTO.ProfileCode				= ВыборкаИнформацияОДоступныхПользователях.КодПрофиляПользователя;
			
			ВыборкаДоступныеФункцииПользователей.Сбросить();
			
			Отбор.ИдентификаторПриложения = ВыборкаИнформацияОДоступныхПользователях.ИдентификаторПриложения;
			
			Таблица_ДоступныхФункцияXDTO = ФабрикаXDTO.Создать(ТипТаблица_ДоступныхФункция);
			
			Пока ВыборкаДоступныеФункцииПользователей.НайтиСледующий(Отбор) Цикл
				
				СтрокаТаблицыДоступныхФункций_XDTO				= ФабрикаXDTO.Создать(ТипЭлемента_ТаблицаДоступныхФункция);
				СтрокаТаблицыДоступныхФункций_XDTO.ProfileCode	= ВыборкаДоступныеФункцииПользователей.КодПрофиляПользователя;
				СтрокаТаблицыДоступныхФункций_XDTO.Function		= Справочники.ФункцииМобильногоПриложения.ПолучитьИмяПредопределенного(ВыборкаДоступныеФункцииПользователей.Функция);
				СтрокаТаблицыДоступныхФункций_XDTO.available	= ВыборкаДоступныеФункцииПользователей.Доступна;
				
				Таблица_ДоступныхФункцияXDTO.Table.Добавить(СтрокаТаблицыДоступныхФункций_XDTO);
				
			КонецЦикла;
			
			СтрокаТаблицы_ИнформацияОПользователяхXDTO.TableOfAvailableFunctions = Таблица_ДоступныхФункцияXDTO;
			
			Таблица_ИнформацияОПользователяхXDTO.Table.Добавить(СтрокаТаблицы_ИнформацияОПользователяхXDTO);
			
		КонецЦикла;
		
		РезультатСервиса.TableOfInformationAboutAvailableUsers = Таблица_ИнформацияОПользователяхXDTO;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РезультатСервиса.Result		= Ложь;
		РезультатСервиса.Message 	= РезультатСервиса.Message + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

	Возврат РезультатСервиса;
	
КонецФункции

// Устанавливает значение функции мобильного приложения для пользователя
Функция SetUserFunction(ApplicationID, FunctionName, FunctionValue, ProfileCode)

	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("OperationResult");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID) И ЗначениеЗаполнено(FunctionName) И ЗначениеЗаполнено(ProfileCode);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Не заполнены входные параметры.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
	
		СсылкаНаФункцию = Справочники.ФункцииМобильногоПриложения[FunctionName];
		
		Если FunctionValue = Ложь И СсылкаНаФункцию.Публичная Тогда
			
			РезультатСервиса.Result		= Ложь;
			РезультатСервиса.Message 	= "Функция доступна всем пользователям приложения, изменить доступность не возможно.";
			Возврат РезультатСервиса;
			
		КонецЕсли;
		
		Если СсылкаНаФункцию = Справочники.ФункцииМобильногоПриложения.УправлениеДоступом Тогда
			
			РезультатСервиса.Result		= Ложь;
			РезультатСервиса.Message 	= "Установить доступ к функции может только менеджер.";
			Возврат РезультатСервиса;
			
		КонецЕсли;
		
		ЗаписьДоступностьФункции = РегистрыСведений.ДоступностьФункцийМобильногоПриложения.СоздатьМенеджерЗаписи();
		
		ЗаписьДоступностьФункции.ИдентификаторПриложения 	= ApplicationID;
		ЗаписьДоступностьФункции.Функция 					= СсылкаНаФункцию;
		ЗаписьДоступностьФункции.КодПрофиляПользователя 	= ProfileCode;
		
		ЗаписьДоступностьФункции.Прочитать();
		
		ЗаписьДоступностьФункции.Доступна = FunctionValue;
		
		ЗаписьДоступностьФункции.Записать();
	
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РезультатСервиса.Result		= Ложь;
		РезультатСервиса.Message 	= РезультатСервиса.Message + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

	Возврат РезультатСервиса;
	
КонецФункции

// Подтвердить или отклонить заявку пользователя (или удалить текущего подтвержденного)
// ApplicationID - ИД текущего пользователя (который инициировал операцию)
// UserApplicationID - ИД пользователя, с чьей заявкой происходит операция
Функция AcceptOrDeclineAUserRequest(ApplicationID, UserApplicationID, AcceptThisRequest, ProfileCode, UserProfileCode)

	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("OperationResult");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID) И ЗначениеЗаполнено(UserApplicationID);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Не заполнены входные параметры.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	РезультатСервиса.Result = ApplicationID <> UserApplicationID И ЗначениеЗаполнено(ApplicationID) И ЗначениеЗаполнено(ProfileCode);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Действие не возможно.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоступностьФункцийМобильногоПриложения.ИдентификаторПриложения
		|ИЗ
		|	РегистрСведений.ДоступностьФункцийМобильногоПриложения КАК ДоступностьФункцийМобильногоПриложения
		|ГДЕ
		|	ДоступностьФункцийМобильногоПриложения.ИдентификаторПриложения = &ИдентификаторПриложения
		|	И ДоступностьФункцийМобильногоПриложения.Функция = ЗНАЧЕНИЕ(Справочник.ФункцииМобильногоПриложения.УправлениеДоступом)
		|	И ДоступностьФункцийМобильногоПриложения.Доступна = ИСТИНА
		|	И ДоступностьФункцийМобильногоПриложения.КодПрофиляПользователя = &ИдентификаторПрофиля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИдентификаторыМобильныхПриложений.Контрагент,
		|	ИдентификаторыМобильныхПриложений.КонтактноеЛицо
		|ИЗ
		|	РегистрСведений.ИдентификаторыМобильныхПриложений.СрезПоследних(, ) КАК ИдентификаторыМобильныхПриложений
		|ГДЕ
		|	ИдентификаторыМобильныхПриложений.Идентификатор = &ИдентификаторПриложения
		|	И ИдентификаторыМобильныхПриложений.Контрагент <> ЗНАЧЕНИЕ(Справочник.Абоненты.ПустаяСсылка)
		|	И ИдентификаторыМобильныхПриложений.КодПрофиляПользователя = &ИдентификаторПрофиля
		|	И ИдентификаторыМобильныхПриложений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияПользователяМобильногоПриложения.РегистрацияНовогоПрофиля)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИдентификаторыМобильныхПриложений.Регистратор КАК ДокументРегистрации,
		|	ИдентификаторыМобильныхПриложений.Контрагент
		|ИЗ
		|	РегистрСведений.ИдентификаторыМобильныхПриложений.СрезПоследних(, ) КАК ИдентификаторыМобильныхПриложений
		|ГДЕ
		|	ИдентификаторыМобильныхПриложений.Идентификатор = &ИдентификаторПользователя
		|	И ИдентификаторыМобильныхПриложений.КодПрофиляПользователя = &ИдентификаторПрофиляПользователя
		|	И ИдентификаторыМобильныхПриложений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияПользователяМобильногоПриложения.РегистрацияНовогоПрофиля)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступностьФункцийМобильногоПриложения.Функция,
		|	ДоступностьФункцийМобильногоПриложения.ИдентификаторПриложения,
		|	ВЫБОР
		|		КОГДА НЕ ДоступностьФункцийМобильногоПриложения.Функция.Публичная
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ДоступностьФункцийМобильногоПриложения.Доступна
		|	КОНЕЦ КАК Доступна,
		|	ДоступностьФункцийМобильногоПриложения.КодПрофиляПользователя
		|ИЗ
		|	РегистрСведений.ДоступностьФункцийМобильногоПриложения КАК ДоступностьФункцийМобильногоПриложения
		|ГДЕ
		|	ДоступностьФункцийМобильногоПриложения.ИдентификаторПриложения = &ИдентификаторПользователя
		|	И ДоступностьФункцийМобильногоПриложения.КодПрофиляПользователя = &ИдентификаторПрофиляПользователя";
		
		Запрос.УстановитьПараметр("ИдентификаторПриложения"				, ApplicationID);
		Запрос.УстановитьПараметр("ИдентификаторПользователя"			, UserApplicationID);
		Запрос.УстановитьПараметр("ИдентификаторПрофиля"				, ProfileCode);
		Запрос.УстановитьПараметр("ИдентификаторПрофиляПользователя" 	, UserProfileCode);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Если РезультатЗапроса[0].Пустой() Тогда
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			РезультатСервиса.Result		= Ложь;
			РезультатСервиса.Message 	= РезультатСервиса.Message + "Вам не доступна функция управления доступом.";
			
			Возврат РезультатСервиса;
			
		КонецЕсли;
		
		Если РезультатЗапроса[1].Пустой() Тогда
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			РезультатСервиса.Result		= Ложь;
			РезультатСервиса.Message 	= РезультатСервиса.Message + "Ваш профиль не подтвержден.";
			
			Возврат РезультатСервиса;
			
		КонецЕсли;
		
		Если РезультатЗапроса[2].Пустой() Тогда
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			РезультатСервиса.Result		= Ложь;
			РезультатСервиса.Message 	= РезультатСервиса.Message + "Заявка отсутствует.";
			
			Возврат РезультатСервиса;
			
		КонецЕсли;
		
		ВыборкаКонтрагент 			= РезультатЗапроса[1].Выбрать();
		ВыборкаДокументаРегистрации = РезультатЗапроса[2].Выбрать();
		
		ВыборкаКонтрагент.Следующий();
		ВыборкаДокументаРегистрации.Следующий();
		
		ДокументРегистрации = ВыборкаДокументаРегистрации.ДокументРегистрации.ПолучитьОбъект();
		
		ДокументРегистрации.Контрагент 		= ?(AcceptThisRequest = Истина, ВыборкаКонтрагент.Контрагент, Справочники.Абоненты.ПустаяСсылка());
		ДокументРегистрации.КонтактноеЛицо 	= ?(AcceptThisRequest = Истина, ВыборкаКонтрагент.КонтактноеЛицо, Справочники.ПользователиСервисов.ПустаяСсылка());
		
		Если ЗначениеЗаполнено(ВыборкаДокументаРегистрации.Контрагент) ИЛИ ЗначениеЗаполнено(ДокументРегистрации.Контрагент) Тогда
			ДокументРегистрации.Записать(РежимЗаписиДокумента.Проведение);
		Иначе	
			ДокументРегистрации.Комментарий = ДокументРегистрации.Комментарий + "Заявка отклонена из МП";
			ДокументРегистрации.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//ТаблицаДоступныхФункцийПользователя = ?(AcceptThisRequest, ПолучитьТаблицуДоступныхФункций(UserApplicationID, UserProfileCode), РезультатЗапроса[3].Выгрузить());		
		//
		//НаборЗаписейДоступностьФункцийМобильногоПриложения = РегистрыСведений.ДоступностьФункцийМобильногоПриложения.СоздатьНаборЗаписей();
		//НаборЗаписейДоступностьФункцийМобильногоПриложения.Отбор.ИдентификаторПриложения.Установить(UserApplicationID);
		//НаборЗаписейДоступностьФункцийМобильногоПриложения.Отбор.КодПрофиляПользователя.Установить(UserProfileCode);
		//
		//НаборЗаписейДоступностьФункцийМобильногоПриложения.Прочитать();
		//НаборЗаписейДоступностьФункцийМобильногоПриложения.Загрузить(ТаблицаДоступныхФункцийПользователя);
		//НаборЗаписейДоступностьФункцийМобильногоПриложения.Записать();
	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РезультатСервиса.Result		= Ложь;
		РезультатСервиса.Message 	= РезультатСервиса.Message + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

	Возврат РезультатСервиса;
	
КонецФункции

#КонецОбласти 

#Область РаботаСУведомлениямиИНапоминаниямиЦентральнойБазы

// Проверяет уведомления для пользователя в базе (вызывается при каждом входе в приложение) по параметру, например параметр "оценка качества консультации "
Функция CheckNotifications(ApplicationID, Parameter)
	
	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("CheckNotifications_Result");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Не заполнены входные параметры.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗначенияПараметровОказанныхУслуг.Параметр.Наименование КАК Параметр,
	|	ЗначенияПараметровОказанныхУслуг.ИдентификаторУведомления,
	|	ЗначенияПараметровОказанныхУслуг.Описание,
	|	ЗначенияПараметровОказанныхУслуг.ДатаАктульности,
	|	ЗначенияПараметровОказанныхУслуг.ЗначениеПараметра,
	|	ВЫБОР
	|		КОГДА ЗначенияПараметровОказанныхУслуг.Основание ССЫЛКА Документ.ВыполнениеКонсультацииЛК
	|			ТОГДА ВЫРАЗИТЬ(ЗначенияПараметровОказанныхУслуг.Основание КАК Документ.ВыполнениеКонсультацииЛК).Номер
	|		КОГДА ЗначенияПараметровОказанныхУслуг.Основание ССЫЛКА Документ.РегистрацияНаМероприятие
	|			ТОГДА ВЫРАЗИТЬ(ЗначенияПараметровОказанныхУслуг.Основание КАК Документ.РегистрацияНаМероприятие).Номер
	|		КОГДА ЗначенияПараметровОказанныхУслуг.Основание ССЫЛКА Справочник.ВыступленияНаМероприятиях
	|			ТОГДА ВЫРАЗИТЬ(ЗначенияПараметровОказанныхУслуг.Основание КАК Справочник.ВыступленияНаМероприятиях).Код
	|	КОНЕЦ КАК НомерОснования,
	|	ЗначенияПараметровОказанныхУслуг.Период,
	|	ЗначенияПараметровОказанныхУслуг.Параметр КАК ПараметрСсылка,
	|	ЗначенияПараметровОказанныхУслуг.Основание КАК ОснованиеСсылка,
	|	ЗначенияПараметровОказанныхУслуг.КодПрофиляПользователя,
	|	ЗначенияПараметровОказанныхУслуг.ДополнительныеПараметры
	|ИЗ
	|	РегистрСведений.ЗначенияПараметровОказанныхУслуг КАК ЗначенияПараметровОказанныхУслуг
	|ГДЕ
	|	ЗначенияПараметровОказанныхУслуг.Идентификатор = &Идентификатор
	|	И ЗначенияПараметровОказанныхУслуг.УведомитьКлиента = ИСТИНА
	|	И ЗначенияПараметровОказанныхУслуг.ДатаАктульности >= &ТекущаяДата
	|	И ЗначенияПараметровОказанныхУслуг.Период <= &ТекущаяДата
	|	И (&ОтборПоПараметру = ЛОЖЬ
	|			ИЛИ &ОтборПоПараметру = ИСТИНА
	|				И ЗначенияПараметровОказанныхУслуг.Параметр.Наименование = &Параметр)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначенияПараметровОказанныхУслуг.ДатаАктульности";
	
	Запрос.УстановитьПараметр("Идентификатор"	, ApplicationID);
	Запрос.УстановитьПараметр("ТекущаяДата"		, ТекущаяДата());
	Запрос.УстановитьПараметр("Параметр" 		, СокрЛП(Parameter));
	Запрос.УстановитьПараметр("ОтборПоПараметру", ЗначениеЗаполнено(Parameter));
	
	НачатьТранзакцию();
	
	Попытка
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			РезультатСервиса.Message= "Уведомлений не найдено.";
			РезультатСервиса.Result	= Ложь;
			Возврат РезультатСервиса;
		КонецЕсли;
		
		ВыбокаПараметров = РезультатЗапроса.Выбрать();
		
		ВыбокаПараметров.Следующий();
		
		Если ЗначениеЗаполнено(ВыбокаПараметров.ЗначениеПараметра) Тогда
			РезультатСервиса.Message= "Уведомлений не найдено.";
			РезультатСервиса.Result	= Ложь;
			Возврат РезультатСервиса;
		КонецЕсли;
		
		РезультатСервиса.IdNotification = ВыбокаПараметров.ИдентификаторУведомления;
		РезультатСервиса.Parameter		= ВыбокаПараметров.Параметр;
		РезультатСервиса.Specification	= ВыбокаПараметров.Описание;
		РезультатСервиса.Date			= ВыбокаПараметров.ДатаАктульности;
		РезультатСервиса.BaseNumber		= ВыбокаПараметров.НомерОснования;
		РезультатСервиса.ExtraParameters= ВыбокаПараметров.ДополнительныеПараметры;
		
		Если ВыбокаПараметров.ПараметрСсылка <> Справочники.ПараметрыОказанныхУслуг.ОценкаОказаннойУслуги
			И ВыбокаПараметров.ПараметрСсылка <> Справочники.ПараметрыОказанныхУслуг.ЗаполнениеАнкеты Тогда
			
			ЗаписьУведомления = РегистрыСведений.ЗначенияПараметровОказанныхУслуг.СоздатьМенеджерЗаписи();
			
			ЗаписьУведомления.Период					= ВыбокаПараметров.Период;
			ЗаписьУведомления.Параметр                  = ВыбокаПараметров.ПараметрСсылка;
			ЗаписьУведомления.Основание                 = ВыбокаПараметров.ОснованиеСсылка;
			ЗаписьУведомления.ИдентификаторУведомления  = ВыбокаПараметров.ИдентификаторУведомления;
			ЗаписьУведомления.КодПрофиляПользователя    = ВыбокаПараметров.КодПрофиляПользователя;
			ЗаписьУведомления.Идентификатор             = ApplicationID;
			ЗаписьУведомления.ЗначениеПараметра         = ВыбокаПараметров.ЗначениеПараметра;
			ЗаписьУведомления.ДатаАктульности           = ВыбокаПараметров.ДатаАктульности;
			ЗаписьУведомления.Описание                  = ВыбокаПараметров.Описание;
			
			ЗаписьУведомления.Прочитать();
			
			ЗаписьУведомления.УведомитьКлиента = Ложь;
			
			ЗаписьУведомления.Записать();
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		РезультатСервиса.Result		= Ложь;
		РезультатСервиса.Message 	= РезультатСервиса.Message + "Не удалось обновить уведомления" + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

	Возврат РезультатСервиса;
	
КонецФункции

// Обновляет значение параметра (например значение оценки консультации) 
Функция UpdateTheValueOfTheNotification(IdNotification, Value)
	
	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("OperationResult");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(IdNotification);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Не заполнены входные параметры.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		НаборЗаписей = РегистрыСведений.ЗначенияПараметровОказанныхУслуг.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторУведомления.Установить(IdNotification);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() Тогда
			НаборЗаписей[0].ЗначениеПараметра = Value;
			НаборЗаписей[0].УведомитьКлиента = Ложь;
			НаборЗаписей.Записать();
		КонецЕсли; 
		
	Исключение
		
		ОтменитьТранзакцию();
		
		РезультатСервиса.Result		= Ложь;
		РезультатСервиса.Message 	= РезультатСервиса.Message + "Не удалось обновить уведомления" + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

	Возврат РезультатСервиса;
	
КонецФункции

#КонецОбласти 

#Область РаботаСМероприятиями

// Возврашает список всех мероприятий или детальную информацию по одному, указанному мероприятию 
Функция GetDetailsOfAllEvents(ApplicationID, EventNumber, CompositionCode)
	
	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("GetDetailsOfAllEvents_Result");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Действие не возможно.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	НачатьТранзакцию();

	Попытка
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриглашенияНаМероприятия.СоставМероприятия.ДатаНачала КАК ДатаМероприятия,
		|	ПриглашенияНаМероприятия.Регистратор.Номер КАК КодМероприятия,
		|	ПриглашенияНаМероприятия.Мероприятие.Наименование КАК МероприятиеНаименование,
		|	ПриглашенияНаМероприятия.Регистратор.ТелефонОрганизатора КАК ТелефонОрганизатора,
		|	ПриглашенияНаМероприятия.Мероприятие,
		|	ПриглашенияНаМероприятия.СоставМероприятия,
		|	ВЫБОР
		|		КОГДА ПриглашенияНаМероприятия.Адрес ССЫЛКА Справочник.МестаПроведенияМероприятий
		|			ТОГДА ВЫРАЗИТЬ(ПриглашенияНаМероприятия.Адрес КАК Справочник.МестаПроведенияМероприятий).Код
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Код,
		|	ВЫБОР
		|		КОГДА ПриглашенияНаМероприятия.Адрес ССЫЛКА Справочник.МестаПроведенияМероприятий
		|			ТОГДА ВЫРАЗИТЬ(ПриглашенияНаМероприятия.Адрес КАК Справочник.МестаПроведенияМероприятий).Наименование
		|		ИНАЧЕ ПриглашенияНаМероприятия.Адрес
		|	КОНЕЦ КАК Наименование,
		|	ВЫБОР
		|		КОГДА ПриглашенияНаМероприятия.Адрес ССЫЛКА Справочник.МестаПроведенияМероприятий
		|			ТОГДА ВЫРАЗИТЬ(ПриглашенияНаМероприятия.Адрес КАК Справочник.МестаПроведенияМероприятий).ШиротаВерхЛево
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ШиротаВерхЛево,
		|	ВЫБОР
		|		КОГДА ПриглашенияНаМероприятия.Адрес ССЫЛКА Справочник.МестаПроведенияМероприятий
		|			ТОГДА ВЫРАЗИТЬ(ПриглашенияНаМероприятия.Адрес КАК Справочник.МестаПроведенияМероприятий).ДолготаВерхЛево
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДолготаВерхЛево,
		|	ВЫБОР
		|		КОГДА ПриглашенияНаМероприятия.Адрес ССЫЛКА Справочник.МестаПроведенияМероприятий
		|			ТОГДА ВЫРАЗИТЬ(ПриглашенияНаМероприятия.Адрес КАК Справочник.МестаПроведенияМероприятий).ШиротаВерхПраво
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ШиротаВерхПраво,
		|	ВЫБОР
		|		КОГДА ПриглашенияНаМероприятия.Адрес ССЫЛКА Справочник.МестаПроведенияМероприятий
		|			ТОГДА ВЫРАЗИТЬ(ПриглашенияНаМероприятия.Адрес КАК Справочник.МестаПроведенияМероприятий).ДолготаВерхПраво
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДолготаВерхПраво,
		|	ВЫБОР
		|		КОГДА ПриглашенияНаМероприятия.Адрес ССЫЛКА Справочник.МестаПроведенияМероприятий
		|			ТОГДА ВЫРАЗИТЬ(ПриглашенияНаМероприятия.Адрес КАК Справочник.МестаПроведенияМероприятий).ШиротаНизЛево
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ШиротаНизЛево,
		|	ВЫБОР
		|		КОГДА ПриглашенияНаМероприятия.Адрес ССЫЛКА Справочник.МестаПроведенияМероприятий
		|			ТОГДА ВЫРАЗИТЬ(ПриглашенияНаМероприятия.Адрес КАК Справочник.МестаПроведенияМероприятий).ДолготаНизЛево
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДолготаНизЛево,
		|	ВЫБОР
		|		КОГДА ПриглашенияНаМероприятия.Адрес ССЫЛКА Справочник.МестаПроведенияМероприятий
		|			ТОГДА ВЫРАЗИТЬ(ПриглашенияНаМероприятия.Адрес КАК Справочник.МестаПроведенияМероприятий).ШиротаНизПраво
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ШиротаНизПраво,
		|	ВЫБОР
		|		КОГДА ПриглашенияНаМероприятия.Адрес ССЫЛКА Справочник.МестаПроведенияМероприятий
		|			ТОГДА ВЫРАЗИТЬ(ПриглашенияНаМероприятия.Адрес КАК Справочник.МестаПроведенияМероприятий).ДолготаНизПраво
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДолготаНизПраво,
		|	ВЫБОР
		|		КОГДА ПриглашенияНаМероприятия.Идентификатор = """"
		|			ТОГДА """"
		|		ИНАЧЕ ПриглашенияНаМероприятия.КодПрофиляПользователя
		|	КОНЕЦ КАК КодПрофиляПользователя
		|ПОМЕСТИТЬ вДанныеМероприятия
		|ИЗ
		|	РегистрСведений.ПриглашенияНаМероприятия КАК ПриглашенияНаМероприятия
		|ГДЕ
		|	(ПриглашенияНаМероприятия.Идентификатор = &ИдентификаторПользователяМП
		|			ИЛИ ПриглашенияНаМероприятия.Идентификатор = """")
		|	И (ПриглашенияНаМероприятия.Регистратор.Номер = &НомерМероприятия
		|				И ПриглашенияНаМероприятия.СоставМероприятия.Код = &КодСоставаМероприятия
		|				И &ОтборПоМероприятию = ИСТИНА
		|			ИЛИ ПриглашенияНаМероприятия.СоставМероприятия.ДатаНачала >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				И &ОтборПоМероприятию = ЛОЖЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	вДанныеМероприятия.ДатаМероприятия,
		|	вДанныеМероприятия.КодМероприятия,
		|	вДанныеМероприятия.МероприятиеНаименование,
		|	вДанныеМероприятия.ТелефонОрганизатора,
		|	вДанныеМероприятия.Мероприятие,
		|	вДанныеМероприятия.Код,
		|	вДанныеМероприятия.Наименование,
		|	вДанныеМероприятия.ШиротаВерхЛево,
		|	вДанныеМероприятия.ДолготаВерхЛево,
		|	вДанныеМероприятия.ШиротаВерхПраво,
		|	вДанныеМероприятия.ДолготаВерхПраво,
		|	вДанныеМероприятия.ШиротаНизЛево,
		|	вДанныеМероприятия.ДолготаНизЛево,
		|	вДанныеМероприятия.ШиротаНизПраво,
		|	вДанныеМероприятия.ДолготаНизПраво,
		|	вДанныеМероприятия.СоставМероприятия,
		|	вДанныеМероприятия.СоставМероприятия.Код,
		|	вДанныеМероприятия.СоставМероприятия.Наименование
		|ИЗ
		|	вДанныеМероприятия КАК вДанныеМероприятия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрограммаМероприятий.ВремяНачало,
		|	ЕСТЬNULL(ПрограммаМероприятий.Выступление.Наименование, """") КАК Тема,
		|	ЕСТЬNULL(ПрограммаМероприятий.Выступление.Докладчик.Наименование, """") КАК Докладчик,
		|	ЕСТЬNULL(ПрограммаМероприятий.Выступление.Продолжительность, """") КАК Продолжительность,
		|	ЕСТЬNULL(ПрограммаМероприятий.СоставМероприятия.Код, """") КАК СоставМероприятияКод,
		|	ЕСТЬNULL(ПрограммаМероприятий.СоставМероприятия.Наименование, """") КАК СоставМероприятияНаименование,
		|	ПрограммаМероприятий.Мероприятие,
		|	ПрограммаМероприятий.Выступление.Код,
		|	ПрограммаМероприятий.Выступление КАК Выступление,
		|	ПрограммаМероприятий.СоставМероприятия
		|ИЗ
		|	РегистрСведений.ПрограммаМероприятий КАК ПрограммаМероприятий
		|ГДЕ
		|	&ОтборПоМероприятию = ИСТИНА
		|	И (ПрограммаМероприятий.Мероприятие, ПрограммаМероприятий.СоставМероприятия) В
		|			(ВЫБРАТЬ
		|				вДанныеМероприятия.Мероприятие,
		|				вДанныеМероприятия.СоставМероприятия
		|			ИЗ
		|				вДанныеМероприятия КАК вДанныеМероприятия)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыступленияНаМероприятияхПараметрыОценкиВыступления.ПараметрОценки,
		|	ВыступленияНаМероприятияхПараметрыОценкиВыступления.Ссылка.Код КАК Код,
		|	ВыступленияНаМероприятияхПараметрыОценкиВыступления.Ссылка КАК Выступление
		|ИЗ
		|	Справочник.ВыступленияНаМероприятиях.ПараметрыОценкиВыступления КАК ВыступленияНаМероприятияхПараметрыОценкиВыступления
		|ГДЕ
		|	&ОтборПоМероприятию = ИСТИНА
		|	И ВыступленияНаМероприятияхПараметрыОценкиВыступления.Ссылка.Владелец В
		|			(ВЫБРАТЬ
		|				вДанныеМероприятия.СоставМероприятия
		|			ИЗ
		|				вДанныеМероприятия КАК вДанныеМероприятия)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрацияНаМероприятия.УчастникМероприятия,
		|	РегистрацияНаМероприятия.СоставМероприятия,
		|	РегистрацияНаМероприятия.Дата,
		|	РегистрацияНаМероприятия.Анкета,
		|	РегистрацияНаМероприятия.Пользователь,
		|	РегистрацияНаМероприятия.ИмяКомпьютера
		|ИЗ
		|	РегистрСведений.РегистрацияНаМероприятия КАК РегистрацияНаМероприятия
		|ГДЕ
		|	РегистрацияНаМероприятия.УчастникМероприятия.ИдентификаторПользователяМобильногоПриложения = &ИдентификаторПользователяМП
		|	И (РегистрацияНаМероприятия.СоставМероприятия.Владелец, РегистрацияНаМероприятия.СоставМероприятия) В
		|			(ВЫБРАТЬ
		|				вДанныеМероприятия.Мероприятие,
		|				вДанныеМероприятия.СоставМероприятия
		|			ИЗ
		|				вДанныеМероприятия КАК вДанныеМероприятия)
		|	И &ОтборПоМероприятию = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вДанныеМероприятия.КодПрофиляПользователя,
		|	вДанныеМероприятия.Мероприятие,
		|	вДанныеМероприятия.СоставМероприятия
		|ИЗ
		|	вДанныеМероприятия КАК вДанныеМероприятия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СоставМероприятияУслугиДоступныеДляЗаказаПослеМероприятия.ВидУслуги.Наименование, """") КАК НаименованиеУслуги,
		|	СоставМероприятияУслугиДоступныеДляЗаказаПослеМероприятия.Ссылка КАК СоставМероприятия,
		|	СоставМероприятияУслугиДоступныеДляЗаказаПослеМероприятия.Ссылка.Владелец КАК Мероприятие,
		|	ЕСТЬNULL(СоставМероприятияУслугиДоступныеДляЗаказаПослеМероприятия.ВидУслуги.Код, """") КАК КодУслуги
		|ИЗ
		|	Справочник.СоставМероприятия.УслугиДоступныеДляЗаказаПослеМероприятия КАК СоставМероприятияУслугиДоступныеДляЗаказаПослеМероприятия
		|ГДЕ
		|	&ОтборПоМероприятию = ИСТИНА
		|	И СоставМероприятияУслугиДоступныеДляЗаказаПослеМероприятия.ВидУслуги <> ЗНАЧЕНИЕ(Справочник.ВидыУслуг.ПустаяСсылка)
		|	И (СоставМероприятияУслугиДоступныеДляЗаказаПослеМероприятия.Ссылка, СоставМероприятияУслугиДоступныеДляЗаказаПослеМероприятия.Ссылка.Владелец) В
		|			(ВЫБРАТЬ
		|				вДанныеМероприятия.СоставМероприятия,
		|				вДанныеМероприятия.Мероприятие
		|			ИЗ
		|				вДанныеМероприятия КАК вДанныеМероприятия)";
		
		Запрос.УстановитьПараметр("ИдентификаторПользователяМП"	, ApplicationID);
		Запрос.УстановитьПараметр("НомерМероприятия"			, EventNumber);
		Запрос.УстановитьПараметр("ТекущаяДата"					, ТекущаяДата());
		Запрос.УстановитьПараметр("ОтборПоМероприятию"			, ЗначениеЗаполнено(EventNumber) И ЗначениеЗаполнено(CompositionCode));
		Запрос.УстановитьПараметр("КодСоставаМероприятия"		, CompositionCode);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Если РезультатЗапроса[1].Пустой() Тогда
			
			РезультатСервиса.Result		= Истина;
			РезультатСервиса.Message 	= "Мероприятий не найдено." + EventNumber ;
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
				Возврат РезультатСервиса;
			КонецЕсли;
			                 
		КонецЕсли;
		
		Если НЕ РезультатЗапроса[4].Пустой() Тогда
			РезультатСервиса.UserAlreadyRegistered = Истина;
		Иначе
			РезультатСервиса.UserAlreadyRegistered = Ложь;
		КонецЕсли;
		
		ТипТаблицаМероприятий							= ФабрикаXDTO.Тип(ПространствоИмен, "TableOflEvents");
		ТипЭлементаТаблицаМероприятий					= ФабрикаXDTO.Тип(ПространствоИмен, "Event");
		ТипАдрес										= ФабрикаXDTO.Тип(ПространствоИмен, "Address");
		ТипТаблицаПрограммаМероприятия					= ФабрикаXDTO.Тип(ПространствоИмен, "ProgramTableOfTheEvent");
		ТипЭлементаТаблицаПрограммаМероприятия			= ФабрикаXDTO.Тип(ПространствоИмен, "ProgramElement");
		ТипТаблицаУслугДляЗаказа						= ФабрикаXDTO.Тип(ПространствоИмен, "ServicesTable");
		ТипЭлементаТаблицаУслугДляЗаказа				= ФабрикаXDTO.Тип(ПространствоИмен, "Service");	
		
		ТаблицаМероприятий_XDTO = ФабрикаXDTO.Создать(ТипТаблицаМероприятий);
		
		ВыборкаМероприятий 					= РезультатЗапроса[1].Выбрать();
		ВыборкаПрограммыМероприятий 		= РезультатЗапроса[2].Выбрать();
		ВыборкаПараметровОценкиВыступления 	= РезультатЗапроса[3].Выбрать();
		ВыборкаКодовПрофилейПользователя 	= РезультатЗапроса[5].Выбрать();
		ВыборкаУслугКЗаказуПослеМероприятия	= РезультатЗапроса[6].Выбрать();

		Пока ВыборкаМероприятий.Следующий() Цикл
			
			Адрес_XDTO = ФабрикаXDTO.Создать(ТипАдрес);                               
			
			Адрес_XDTO.Code					= ВыборкаМероприятий.Код;
			Адрес_XDTO.Description			= ВыборкаМероприятий.Наименование;
			Адрес_XDTO.latitudeTopLeft		= ВыборкаМероприятий.ШиротаВерхЛево;
			Адрес_XDTO.longitudeTopLeft		= ВыборкаМероприятий.ДолготаВерхЛево;
			Адрес_XDTO.latitudeTopRight		= ВыборкаМероприятий.ШиротаВерхПраво;
			Адрес_XDTO.longitudeTopRight	= ВыборкаМероприятий.ДолготаВерхПраво;
			Адрес_XDTO.latitudeBottomLeft	= ВыборкаМероприятий.ШиротаНизЛево;
			Адрес_XDTO.longitudeBottomLeft	= ВыборкаМероприятий.ДолготаНизЛево;
			Адрес_XDTO.latitudeBottomRight	= ВыборкаМероприятий.ШиротаНизПраво;
			Адрес_XDTO.longitudeBottomRight	= ВыборкаМероприятий.ДолготаНизПраво;
			
			СтрокаТаблицыМероприятий_XDTO = ФабрикаXDTO.Создать(ТипЭлементаТаблицаМероприятий);
			
			СтрокаТаблицыМероприятий_XDTO.Date 				= ВыборкаМероприятий.ДатаМероприятия;
			СтрокаТаблицыМероприятий_XDTO.Code				= ВыборкаМероприятий.КодМероприятия;
			СтрокаТаблицыМероприятий_XDTO.PhoneNumber		= ВыборкаМероприятий.ТелефонОрганизатора;
			СтрокаТаблицыМероприятий_XDTO.Address			= Адрес_XDTO;
			СтрокаТаблицыМероприятий_XDTO.Description   	= ВыборкаМероприятий.МероприятиеНаименование + ", " + ВыборкаМероприятий.СоставМероприятияНаименование;
			СтрокаТаблицыМероприятий_XDTO.CompositionCode   = ВыборкаМероприятий.СоставМероприятияКод;
			СтрокаТаблицыМероприятий_XDTO.CompositionName   = ВыборкаМероприятий.СоставМероприятияНаименование;

			ТаблицаПрограммаМероприятия_XDTO = ФабрикаXDTO.Создать(ТипТаблицаПрограммаМероприятия);
			
			ПоискПрограммыМероприятия = Новый Структура("Мероприятие, СоставМероприятия", ВыборкаМероприятий.Мероприятие, ВыборкаМероприятий.СоставМероприятия);
			
			ВыборкаПрограммыМероприятий.Сбросить();
			
			Пока ВыборкаПрограммыМероприятий.НайтиСледующий(ПоискПрограммыМероприятия) Цикл
				
				СтрокаТаблицыПрограммыМероприятий_XDTO = ФабрикаXDTO.Создать(ТипЭлементаТаблицаПрограммаМероприятия);
				
				СтрокаТаблицыПрограммыМероприятий_XDTO.Time				= ВыборкаПрограммыМероприятий.ВремяНачало;
				СтрокаТаблицыПрограммыМероприятий_XDTO.Duration         = ВыборкаПрограммыМероприятий.Продолжительность;
				СтрокаТаблицыПрограммыМероприятий_XDTO.Speaker          = ВыборкаПрограммыМероприятий.Докладчик;
				СтрокаТаблицыПрограммыМероприятий_XDTO.Topic            = ВыборкаПрограммыМероприятий.Тема;
				СтрокаТаблицыПрограммыМероприятий_XDTO.ReportCode   	= ВыборкаПрограммыМероприятий.ВыступлениеКод;
				
				ТаблицаПрограммаМероприятия_XDTO.Table.Добавить(СтрокаТаблицыПрограммыМероприятий_XDTO);
				
			КонецЦикла;
			
			СтрокаТаблицыМероприятий_XDTO.ProgramTableOfTheEvent = ТаблицаПрограммаМероприятия_XDTO;
			
			ВыборкаКодовПрофилейПользователя.Сбросить();
			
			СтрокаТаблицыМероприятий_XDTO.ProfileCode = "";
			
			Пока ВыборкаКодовПрофилейПользователя.НайтиСледующий(ПоискПрограммыМероприятия) Цикл
				СтрокаТаблицыМероприятий_XDTO.ProfileCode = СтрокаТаблицыМероприятий_XDTO.ProfileCode + ?(ЗначениеЗаполнено(ВыборкаКодовПрофилейПользователя.КодПрофиляПользователя), ", " + ВыборкаКодовПрофилейПользователя.КодПрофиляПользователя, "");
			КонецЦикла;
			
			ТаблицаУслугДляЗаказа_XDTO = ФабрикаXDTO.Создать(ТипТаблицаУслугДляЗаказа);
			
			ВыборкаУслугКЗаказуПослеМероприятия.Сбросить();
			
			Пока ВыборкаУслугКЗаказуПослеМероприятия.НайтиСледующий(ПоискПрограммыМероприятия) Цикл
				
				СтрокаТаблицыСтрокаТаблицыУслугДляЗаказа_XDTO = ФабрикаXDTO.Создать(ТипЭлементаТаблицаУслугДляЗаказа);
				
				СтрокаТаблицыСтрокаТаблицыУслугДляЗаказа_XDTO.Name = ВыборкаУслугКЗаказуПослеМероприятия.НаименованиеУслуги;
				СтрокаТаблицыСтрокаТаблицыУслугДляЗаказа_XDTO.Code = ВыборкаУслугКЗаказуПослеМероприятия.КодУслуги;
				
				ТаблицаУслугДляЗаказа_XDTO.Table.Добавить(СтрокаТаблицыСтрокаТаблицыУслугДляЗаказа_XDTO);
				
			КонецЦикла;
			
			СтрокаТаблицыМероприятий_XDTO.ServicesTable = ТаблицаУслугДляЗаказа_XDTO;
			
			ТаблицаМероприятий_XDTO.Table.Добавить(СтрокаТаблицыМероприятий_XDTO);
			
		КонецЦикла;
		
		РезультатСервиса.TableOflEvents = ТаблицаМероприятий_XDTO;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РезультатСервиса.Result = Ложь;
		РезультатСервиса.Message= РезультатСервиса.Message + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат РезультатСервиса;
	
КонецФункции

// Подать заявку на участие в мероприятие на мероприятие из МП (тветить на приглашение)
Функция ToRespondToTheInvitation(ApplicationID, RegistrationPhase, EventNumber, CompositionCode, RejectionReason, ProfileCode)

	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("ToRespondToTheInvitation_Result");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID) И ЗначениеЗаполнено(EventNumber) И ЗначениеЗаполнено(CompositionCode);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Действие не возможно.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	НачатьТранзакцию();

	Попытка
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументРегистрацияНаМероприятие.Ссылка КАК Основание
		|ПОМЕСТИТЬ втДокументОснование
		|ИЗ
		|	Документ.РегистрацияНаМероприятие КАК ДокументРегистрацияНаМероприятие
		|ГДЕ
		|	ДокументРегистрацияНаМероприятие.Номер = &НомерОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчастникиМероприятий.Ссылка КАК УчастникМероприятия,
		|	УчастникиМероприятий.КодПрофиляПользователя
		|ИЗ
		|	Справочник.УчастникиМероприятий КАК УчастникиМероприятий
		|ГДЕ
		|	УчастникиМероприятий.ИдентификаторПользователяМобильногоПриложения = &ИдентификаторПользователяМобильногоПриложения
		|	И УчастникиМероприятий.ПометкаУдаления = ЛОЖЬ
		|	И УчастникиМероприятий.Владелец В
		|			(ВЫБРАТЬ
		|				втДокументОснование.Основание.Мероприятие
		|			ИЗ
		|				втДокументОснование КАК втДокументОснование)
		|	И УчастникиМероприятий.КодПрофиляПользователя = &КодПрофиляПользователя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриглашенияНаМероприятия.Мероприятие КАК Мероприятие,
		|	ПриглашенияНаМероприятия.Регистратор КАК Основание,
		|	ПриглашенияНаМероприятия.Идентификатор,
		|	ДОБАВИТЬКДАТЕ(ПриглашенияНаМероприятия.СоставМероприятия.ДатаНачала, ДЕНЬ, -2) КАК Период,
		|	ПриглашенияНаМероприятия.СоставМероприятия.ДатаНачала КАК ДатаНачала,
		|	ПриглашенияНаМероприятия.СоставМероприятия,
		|	ПриглашенияНаМероприятия.КодПрофиляПользователя,
		|	ПриглашенияНаМероприятия.Мероприятие.Наименование
		|ИЗ
		|	РегистрСведений.ПриглашенияНаМероприятия КАК ПриглашенияНаМероприятия
		|ГДЕ
		|	(ПриглашенияНаМероприятия.Идентификатор = &ИдентификаторПользователяМобильногоПриложения
		|				И ПриглашенияНаМероприятия.КодПрофиляПользователя = &КодПрофиляПользователя
		|			ИЛИ ПриглашенияНаМероприятия.Идентификатор = """")
		|	И ПриглашенияНаМероприятия.Регистратор В
		|			(ВЫБРАТЬ
		|				втДокументОснование.Основание
		|			ИЗ
		|				втДокументОснование КАК втДокументОснование)
		|	И ПриглашенияНаМероприятия.СоставМероприятия.Код = &КодСоставаМероприятия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИдентификаторыМобильныхПриложений.email,
		|	ИдентификаторыМобильныхПриложений.Телефон,
		|	ИдентификаторыМобильныхПриложений.Фамилия,
		|	ИдентификаторыМобильныхПриложений.Имя,
		|	ИдентификаторыМобильныхПриложений.Отчетство,
		|	ИдентификаторыМобильныхПриложений.КодПрофиляПользователя,
		|	ИдентификаторыМобильныхПриложений.КонтактноеЛицо,
		|	ИдентификаторыМобильныхПриложений.ИНН,
		|	ИдентификаторыМобильныхПриложений.Контрагент.Наименование
		|ИЗ
		|	РегистрСведений.ИдентификаторыМобильныхПриложений КАК ИдентификаторыМобильныхПриложений
		|ГДЕ
		|	ИдентификаторыМобильныхПриложений.Идентификатор = &ИдентификаторПользователяМобильногоПриложения
		|	И ИдентификаторыМобильныхПриложений.КодПрофиляПользователя = &КодПрофиляПользователя";
		
		Запрос.УстановитьПараметр("ИдентификаторПользователяМобильногоПриложения"	, ApplicationID);
		Запрос.УстановитьПараметр("НомерОснования"									, EventNumber);
		Запрос.УстановитьПараметр("КодСоставаМероприятия"							, CompositionCode);
		Запрос.УстановитьПараметр("КодПрофиляПользователя"							, ProfileCode);
	
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаПриглашенийНаМероприятияе = РезультатЗапроса[2].Выбрать();
		ВыборкаПриглашенийНаМероприятияе.Следующий();
		
		НаборЗаписейЗначенияПараметровОказанныхУслуг = РегистрыСведений.ЗначенияПараметровОказанныхУслуг.СоздатьНаборЗаписей();
		
		НаборЗаписейЗначенияПараметровОказанныхУслуг.Отбор.Параметр.Установить(Справочники.ПараметрыОказанныхУслуг.РегистрацияНаМероприятие);
		НаборЗаписейЗначенияПараметровОказанныхУслуг.Отбор.Основание.Установить(ВыборкаПриглашенийНаМероприятияе.Основание);
		НаборЗаписейЗначенияПараметровОказанныхУслуг.Отбор.Идентификатор.Установить(ApplicationID);
		
		НаборЗаписейЗначенияПараметровОказанныхУслуг.Прочитать();
		
		Если НаборЗаписейЗначенияПараметровОказанныхУслуг.Количество() Тогда
			
			Для каждого ЗаписьНаборЗаписейЗначенияПараметровОказанныхУслуг Из НаборЗаписейЗначенияПараметровОказанныхУслуг Цикл
				ЗаписьНаборЗаписейЗначенияПараметровОказанныхУслуг.ЗначениеПараметра = RegistrationPhase;
				ЗаписьНаборЗаписейЗначенияПараметровОказанныхУслуг.Описание			 = RejectionReason;
			КонецЦикла; 
			
		Иначе
			
			ЗаписьНаборЗаписейЗначенияПараметровОказанныхУслуг = НаборЗаписейЗначенияПараметровОказанныхУслуг.Добавить();
			
			ЗаписьНаборЗаписейЗначенияПараметровОказанныхУслуг.Параметр					= Справочники.ПараметрыОказанныхУслуг.РегистрацияНаМероприятие;
			ЗаписьНаборЗаписейЗначенияПараметровОказанныхУслуг.Основание				= ВыборкаПриглашенийНаМероприятияе.Основание;
			ЗаписьНаборЗаписейЗначенияПараметровОказанныхУслуг.ИдентификаторУведомления	= Строка(Новый УникальныйИдентификатор());
			ЗаписьНаборЗаписейЗначенияПараметровОказанныхУслуг.КодПрофиляПользователя	= ProfileCode;
			ЗаписьНаборЗаписейЗначенияПараметровОказанныхУслуг.Идентификатор			= ApplicationID;
			ЗаписьНаборЗаписейЗначенияПараметровОказанныхУслуг.ЗначениеПараметра		= RegistrationPhase;
			ЗаписьНаборЗаписейЗначенияПараметровОказанныхУслуг.ДатаАктульности			= ТекущаяДата();
			ЗаписьНаборЗаписейЗначенияПараметровОказанныхУслуг.Описание      			= RejectionReason;
			ЗаписьНаборЗаписейЗначенияПараметровОказанныхУслуг.УведомитьКлиента			= Ложь;
			ЗаписьНаборЗаписейЗначенияПараметровОказанныхУслуг.Период					= ТекущаяДата();
			
		КонецЕсли;
		
		НаборЗаписейЗначенияПараметровОказанныхУслуг.Записать();
		
		Если RegistrationPhase = "ПриглашениеОтклонено" Тогда
			
			Если ТранзакцияАктивна() Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
			Возврат РезультатСервиса;
			
		КонецЕсли;
		
		//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11
		//ЗаписьPushДляОповещенияОПодтвержденияЗаявки = РегистрыСведений.PushУведомленияДляРассылкиПользователям.СоздатьМенеджерЗаписи();
		//
		//ЗаписьPushДляОповещенияОПодтвержденияЗаявки.Основание				= ВыборкаПриглашенийНаМероприятияе.Основание;
		//ЗаписьPushДляОповещенияОПодтвержденияЗаявки.ИдентификаторПриложения	= ApplicationID;
		//ЗаписьPushДляОповещенияОПодтвержденияЗаявки.КодПрофиляПользователя	= ProfileCode;
		//
		//ЗаписьPushДляОповещенияОПодтвержденияЗаявки.Прочитать();
		//
		//ЗаписьPushДляОповещенияОПодтвержденияЗаявки.ИдентификаторПриложения	= ApplicationID;
		//ЗаписьPushДляОповещенияОПодтвержденияЗаявки.ДатаОтправки            = ВыборкаПриглашенийНаМероприятияе.Период;
		//ЗаписьPushДляОповещенияОПодтвержденияЗаявки.Основание               = ВыборкаПриглашенийНаМероприятияе.Основание;
		//ЗаписьPushДляОповещенияОПодтвержденияЗаявки.КодПрофиляПользователя  = ProfileCode;
		//ЗаписьPushДляОповещенияОПодтвержденияЗаявки.Отправлено              = Ложь;
		//ЗаписьPushДляОповещенияОПодтвержденияЗаявки.ТекстСообщения          = "Пожалуйста, подтвердите Ваше присутствие на " + ВыборкаПриглашенийНаМероприятияе.МероприятиеНаименование;
		//
		//ЗаписьPushДляОповещенияОПодтвержденияЗаявки.Записать();
		
		ВыборкаДанныеПрофиляПользователямиПриложения = РезультатЗапроса[3].Выбрать();
		ВыборкаДанныеПрофиляПользователямиПриложения.Следующий();
		
		Если РезультатЗапроса[1].Пустой() Тогда
		
			УчастникМероприятияОбъект = Справочники.УчастникиМероприятий.СоздатьЭлемент();
			
			УчастникМероприятияОбъект.Наименование 									= "" + ВыборкаДанныеПрофиляПользователямиПриложения.Фамилия + " " + ВыборкаДанныеПрофиляПользователямиПриложения.Имя + " " + ВыборкаДанныеПрофиляПользователямиПриложения.Отчетство +"(из МП)";
			УчастникМероприятияОбъект.ИдентификаторПользователяМобильногоПриложения = ApplicationID;
			УчастникМероприятияОбъект.Телефон                                       = ВыборкаДанныеПрофиляПользователямиПриложения.Телефон;
			УчастникМероприятияОбъект.ЭлектроннаяПочта                              = ВыборкаДанныеПрофиляПользователямиПриложения.email;
			УчастникМероприятияОбъект.Владелец										= ВыборкаПриглашенийНаМероприятияе.Мероприятие;
			УчастникМероприятияОбъект.КодПрофиляПользователя						= ProfileCode;
			УчастникМероприятияОбъект.КонтактноеЛицоКонтрагента                     = ВыборкаДанныеПрофиляПользователямиПриложения.КонтактноеЛицо;
			УчастникМероприятияОбъект.НаименованиеКонтрагента                       = ВыборкаДанныеПрофиляПользователямиПриложения.КонтрагентНаименование;
			УчастникМероприятияОбъект.ИНН                                           = ВыборкаДанныеПрофиляПользователямиПриложения.ИНН;
			
			УчастникМероприятияОбъект.Записать();
			
			УчастникМероприятия = УчастникМероприятияОбъект.Ссылка;
			
		Иначе
			
			ВыборкаУчастникМероприятия = РезультатЗапроса[1].Выбрать();
			ВыборкаУчастникМероприятия.Следующий();
			
			УчастникМероприятия = ВыборкаУчастникМероприятия.УчастникМероприятия;
			
		КонецЕсли;  
		
		ЗаписьЗаявкиНаУчастиеВМероприятии = РегистрыСведений.ЗаявкиНаУчастиеВМероприятии.СоздатьМенеджерЗаписи();
		
		ЗаписьЗаявкиНаУчастиеВМероприятии.УчастникМероприятия 	= УчастникМероприятия;
		ЗаписьЗаявкиНаУчастиеВМероприятии.СоставМероприятия 	= ВыборкаПриглашенийНаМероприятияе.СоставМероприятия;
		ЗаписьЗаявкиНаУчастиеВМероприятии.Мероприятие 			= ВыборкаПриглашенийНаМероприятияе.Мероприятие;
		
		ЗаписьЗаявкиНаУчастиеВМероприятии.Прочитать();
		
		ЗаполнитьЗначенияСвойств(ЗаписьЗаявкиНаУчастиеВМероприятии, ВыборкаПриглашенийНаМероприятияе);
		
		ЗаписьЗаявкиНаУчастиеВМероприятии.УчастникМероприятия 	= УчастникМероприятия;
		ЗаписьЗаявкиНаУчастиеВМероприятии.ДатаЗаявки			= ТекущаяДата();
		
		ЗаписьЗаявкиНаУчастиеВМероприятии.Записать();
		
		// поставим в очередь отправки если для секции ведется электронная регистрация
		ЗаписьОчередьОтправкиПриглашений = РегистрыСведений.ОчередьОтправкиПриглашений.СоздатьМенеджерЗаписи();
		
		ЗаписьОчередьОтправкиПриглашений.Период 				= ТекущаяДата();
		ЗаписьОчередьОтправкиПриглашений.УчастникМероприятия 	= УчастникМероприятия;
		ЗаписьОчередьОтправкиПриглашений.СоставМероприятия 		= ВыборкаПриглашенийНаМероприятияе.СоставМероприятия;
		ЗаписьОчередьОтправкиПриглашений.Штрихкод 				= СформироватьШтрихкодПриглашения(УчастникМероприятия, ВыборкаПриглашенийНаМероприятияе.СоставМероприятия);
		
		ЗаписьОчередьОтправкиПриглашений.Записать();
		
		РезультатСервиса.Barcode = ЗаписьОчередьОтправкиПриглашений.Штрихкод;
		
		ВнешняяКомпонента = РаботаСоШтрихкодами.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
		
		КартинкаШтрихкода = РаботаСоШтрихкодами.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, РезультатСервиса.Barcode, 1, 150, 250);
		
		РезультатСервиса.BarcodePicture = КартинкаШтрихкода.ПолучитьДвоичныеДанные();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РезультатСервиса.Result		= Ложь;
		РезультатСервиса.Message 	= РезультатСервиса.Message + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

	Возврат РезультатСервиса;
	
КонецФункции

Функция СформироватьШтрихкодПриглашения(УчастникМероприятия, СоставМероприятия) Экспорт
	
	Штрихкод = "01";
	Штрихкод = Штрихкод + Формат(СоставМероприятия.ДатаНачала, "ДФ=гг; ДП=50");
	Штрихкод = Штрихкод + "07";
	Штрихкод = Штрихкод + Формат(СоставМероприятия.КодШК, "ЧЦ=2; ЧН=; ЧВН=");
	Штрихкод = Штрихкод + Формат(УчастникМероприятия.Код, "ЧЦ=4; ЧН=; ЧВН=; ЧГ=");
	Штрихкод = Штрихкод + РаботаСоШтрихкодами.КонтрольноеЧислоШК(Штрихкод);
	 
	Возврат Штрихкод;
	
КонецФункции

// Подтвердить заявку на участие в мероприятие
Функция ConfirmTheOrder(ApplicationID, EventNumber, CompositionCode, ProfileCode)

	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("OperationResult");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID) И ЗначениеЗаполнено(EventNumber) И ЗначениеЗаполнено(CompositionCode);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Действие не возможно.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ProfileCode) Тогда
	    ProfileCode = "";
	КонецЕсли;
	
	НачатьТранзакцию();

	Попытка
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриглашенияНаМероприятия.Мероприятие
		|ПОМЕСТИТЬ втМероприятие
		|ИЗ
		|	РегистрСведений.ПриглашенияНаМероприятия КАК ПриглашенияНаМероприятия
		|ГДЕ
		|	ПриглашенияНаМероприятия.Регистратор.Номер = &Номер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаявкиНаУчастиеВМероприятии.УчастникМероприятия,
		|	ЗаявкиНаУчастиеВМероприятии.СоставМероприятия,
		|	ЗаявкиНаУчастиеВМероприятии.Мероприятие
		|ИЗ
		|	РегистрСведений.ЗаявкиНаУчастиеВМероприятии КАК ЗаявкиНаУчастиеВМероприятии
		|ГДЕ
		|	ЗаявкиНаУчастиеВМероприятии.УчастникМероприятия.ИдентификаторПользователяМобильногоПриложения = &ИдентификаторПользователя
		|	И ЗаявкиНаУчастиеВМероприятии.Мероприятие В
		|			(ВЫБРАТЬ
		|				втМероприятие.Мероприятие
		|			ИЗ
		|				втМероприятие КАК втМероприятие)
		|	И ЗаявкиНаУчастиеВМероприятии.УчастникМероприятия.КодПрофиляПользователя = &КодПрофиляПользователя
		|	И ЗаявкиНаУчастиеВМероприятии.СоставМероприятия.Код = &КодСоставаМероприятия";
		
		Запрос.УстановитьПараметр("ИдентификаторПользователя"	, ApplicationID);
		Запрос.УстановитьПараметр("Номер"						, EventNumber);
		Запрос.УстановитьПараметр("КодПрофиляПользователя"		, ProfileCode);
		Запрос.УстановитьПараметр("КодСоставаМероприятия"		, CompositionCode);

		ВыборкаЗаявокНаУчастие = Запрос.Выполнить().Выбрать();
		
		ДатаПодтвержденияУчастия = ТекущаяДата();
		
		Пока ВыборкаЗаявокНаУчастие.Следующий() Цикл
			
			НаборЗаписейЗаявкиНаУчастиеВМероприятии = РегистрыСведений.ЗаявкиНаУчастиеВМероприятии.СоздатьНаборЗаписей();
			
			НаборЗаписейЗаявкиНаУчастиеВМероприятии.Отбор.УчастникМероприятия.Установить(ВыборкаЗаявокНаУчастие.УчастникМероприятия);
			НаборЗаписейЗаявкиНаУчастиеВМероприятии.Отбор.СоставМероприятия.Установить(ВыборкаЗаявокНаУчастие.СоставМероприятия);
			НаборЗаписейЗаявкиНаУчастиеВМероприятии.Отбор.Мероприятие.Установить(ВыборкаЗаявокНаУчастие.Мероприятие);
			
			НаборЗаписейЗаявкиНаУчастиеВМероприятии.Прочитать();   
			
			Для каждого ЗаписьНаборЗаписейЗаявкиНаУчастиеВМероприятии Из НаборЗаписейЗаявкиНаУчастиеВМероприятии Цикл
				ЗаписьНаборЗаписейЗаявкиНаУчастиеВМероприятии.ДатаПодтвержденияУчастия = ДатаПодтвержденияУчастия;
			КонецЦикла;
			
			НаборЗаписейЗаявкиНаУчастиеВМероприятии.Записать();
			
		КонецЦикла;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РезультатСервиса.Result		= Ложь;
		РезультатСервиса.Message 	= РезультатСервиса.Message + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

	Возврат РезультатСервиса;
	
КонецФункции

// Зарегистрироваться на самом мероприятии 
Функция RegisterForTheEvent(ApplicationID, EventNumber, CompositionCode, ProfileCode)

	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("OperationResult");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID) И ЗначениеЗаполнено(EventNumber) И ЗначениеЗаполнено(CompositionCode);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Действие не возможно.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ProfileCode) Тогда
		ProfileCode = "";
	КонецЕсли;
	
	НачатьТранзакцию();

	Попытка
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриглашенияНаМероприятия.Мероприятие,
		|	ПриглашенияНаМероприятия.СоставМероприятия.Анкета КАК Анкета,
		|	ПриглашенияНаМероприятия.Регистратор КАК ДокументМероприятие,
		|	ПриглашенияНаМероприятия.СоставМероприятия
		|ПОМЕСТИТЬ втМероприятие
		|ИЗ
		|	РегистрСведений.ПриглашенияНаМероприятия КАК ПриглашенияНаМероприятия
		|ГДЕ
		|	ПриглашенияНаМероприятия.Регистратор.Номер = &Номер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаявкиНаУчастиеВМероприятии.УчастникМероприятия,
		|	ЗаявкиНаУчастиеВМероприятии.СоставМероприятия,
		|	ЗаявкиНаУчастиеВМероприятии.СоставМероприятия.Код
		|ИЗ
		|	РегистрСведений.ЗаявкиНаУчастиеВМероприятии КАК ЗаявкиНаУчастиеВМероприятии
		|ГДЕ
		|	ЗаявкиНаУчастиеВМероприятии.УчастникМероприятия.ИдентификаторПользователяМобильногоПриложения = &ИдентификаторПользователя
		|	И ЗаявкиНаУчастиеВМероприятии.Мероприятие В
		|			(ВЫБРАТЬ
		|				втМероприятие.Мероприятие
		|			ИЗ
		|				втМероприятие КАК втМероприятие)
		|	И ЗаявкиНаУчастиеВМероприятии.УчастникМероприятия.КодПрофиляПользователя = &КодПрофиляПользователя
		|	И ЗаявкиНаУчастиеВМероприятии.СоставМероприятия.Код = &КодСоставаМероприятия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	втМероприятие.Мероприятие.ДатаОкончания КАК ДатаОкончания,
		|	втМероприятие.Анкета
		|ИЗ
		|	втМероприятие КАК втМероприятие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МероприятиеПрограммаМероприятия.Выступление КАК Выступление,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(МероприятиеПрограммаМероприятия.Выступление.Владелец.ДатаНачала, ДЕНЬ), ЧАС, ЧАС(МероприятиеПрограммаМероприятия.ВремяНачало)), МИНУТА, МИНУТА(МероприятиеПрограммаМероприятия.ВремяНачало)) КАК ВремяНачало
		|ПОМЕСТИТЬ втДанныеДляОтправкиPushПоПрограмме
		|ИЗ
		|	Документ.РегистрацияНаМероприятие.ПрограммаМероприятия КАК МероприятиеПрограммаМероприятия
		|ГДЕ
		|	(МероприятиеПрограммаМероприятия.Ссылка, МероприятиеПрограммаМероприятия.СоставМероприятия) В
		|			(ВЫБРАТЬ
		|				втМероприятие.ДокументМероприятие,
		|				втМероприятие.СоставМероприятия
		|			ИЗ
		|				втМероприятие КАК втМероприятие)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеДляОтправкиPushПоПрограмме.Выступление КАК Основание,
		|	ДОБАВИТЬКДАТЕ(втДанныеДляОтправкиPushПоПрограмме.ВремяНачало, МИНУТА, -5) КАК ДатаОтправки,
		|	""Через 5 минут начнется "" + ВЫБОР
		|		КОГДА втДанныеДляОтправкиPushПоПрограмме.Выступление.Докладчик = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
		|			ТОГДА втДанныеДляОтправкиPushПоПрограмме.Выступление.Наименование
		|		ИНАЧЕ "" выступление "" + втДанныеДляОтправкиPushПоПрограмме.Выступление.Докладчик.Наименование
		|	КОНЕЦ КАК ТекстСообщения,
		|	ЛОЖЬ КАК Отправлено,
		|	&ИдентификаторПользователя КАК ИдентификаторПриложения,
		|	&КодПрофиляПользователя КАК КодПрофиляПользователя
		|ИЗ
		|	втДанныеДляОтправкиPushПоПрограмме КАК втДанныеДляОтправкиPushПоПрограмме
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втДанныеДляОтправкиPushПоПрограмме.Выступление,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(втДанныеДляОтправкиPushПоПрограмме.ВремяНачало, МИНУТА, ЧАС(втДанныеДляОтправкиPushПоПрограмме.Выступление.Продолжительность)), ЧАС, ЧАС(втДанныеДляОтправкиPushПоПрограмме.Выступление.Продолжительность)),
		|	ВЫБОР
		|		КОГДА втДанныеДляОтправкиPushПоПрограмме.Выступление.Докладчик = ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
		|			ТОГДА """" + втДанныеДляОтправкиPushПоПрограмме.Выступление.Наименование + "" заканчивается""
		|		ИНАЧЕ ""Оцените доклад "" + втДанныеДляОтправкиPushПоПрограмме.Выступление.Докладчик.Наименование
		|	КОНЕЦ,
		|	ЛОЖЬ,
		|	&ИдентификаторПользователя,
		|	&КодПрофиляПользователя
		|ИЗ
		|	втДанныеДляОтправкиPushПоПрограмме КАК втДанныеДляОтправкиPushПоПрограмме
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втДанныеДляОтправкиPushПоПрограмме.Выступление,
		|	ДОБАВИТЬКДАТЕ(втДанныеДляОтправкиPushПоПрограмме.ВремяНачало, МИНУТА, 5),
		|	""Вы можете задавать вопросы в приложении по выступлению "" + втДанныеДляОтправкиPushПоПрограмме.Выступление.Наименование,
		|	ЛОЖЬ,
		|	&ИдентификаторПользователя,
		|	&КодПрофиляПользователя
		|ИЗ
		|	втДанныеДляОтправкиPushПоПрограмме КАК втДанныеДляОтправкиPushПоПрограмме
		|ГДЕ
		|	втДанныеДляОтправкиPushПоПрограмме.Выступление.Докладчик <> ЗНАЧЕНИЕ(Справочник.СотрудникиОрганизаций.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втМероприятие.СоставМероприятия,
		|	втМероприятие.СоставМероприятия.ДатаОкончания,
		|	""Заполните, пожалуйста, анкету по мероприятию"" + втМероприятие.Мероприятие.Наименование,
		|	ЛОЖЬ,
		|	&ИдентификаторПользователя,
		|	&КодПрофиляПользователя
		|ИЗ
		|	втМероприятие КАК втМероприятие";
		
		Запрос.УстановитьПараметр("ИдентификаторПользователя"	, ApplicationID);
		Запрос.УстановитьПараметр("Номер"						, EventNumber);
		Запрос.УстановитьПараметр("КодПрофиляПользователя"		, ProfileCode);
		Запрос.УстановитьПараметр("КодСоставаМероприятия"		, CompositionCode);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Если РезультатЗапроса[1].Пустой() Тогда
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			РезультатСервиса.Result		= Ложь;
			РезультатСервиса.Message 	= "Не найдена заявка на участие, возможно Вы регистрировались под другим профилем." + ApplicationID + " " + ProfileCode + " " + EventNumber + " " + CompositionCode;
			
			Возврат РезультатСервиса;
			
		КонецЕсли;
		
		ВыборкаДанныхМероприятия = РезультатЗапроса[1].Выбрать();
		ВыборкаПрограммыМероприятия = РезультатЗапроса[2].Выбрать();
		
		ВыборкаДанныхМероприятия.Следующий();
		
		ДатаПодтвержденияУчастия = ТекущаяДата();
		
		ЗаписьРегистрацияНаМероприятия = РегистрыСведений.РегистрацияНаМероприятия.СоздатьМенеджерЗаписи();
		
		ЗаписьРегистрацияНаМероприятия.УчастникМероприятия 	= ВыборкаДанныхМероприятия.УчастникМероприятия;
		ЗаписьРегистрацияНаМероприятия.СоставМероприятия 	= ВыборкаДанныхМероприятия.СоставМероприятия;
		
		ЗаписьРегистрацияНаМероприятия.Прочитать();
		
		Если ЗаписьРегистрацияНаМероприятия.Выбран() Тогда
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			РезультатСервиса.Result		= Ложь;
			РезультатСервиса.Message 	= "Вы уже зарегистрированы.";
			
			Возврат РезультатСервиса;
			
		КонецЕсли;
		
		ЗаписьРегистрацияНаМероприятия.Дата 				= ТекущаяДата();
		ЗаписьРегистрацияНаМероприятия.ИмяКомпьютера 		= "Мобильное приложение";
		ЗаписьРегистрацияНаМероприятия.Пользователь 		= ПараметрыСеанса.ТекущийПользователь;
		ЗаписьРегистрацияНаМероприятия.УчастникМероприятия	= ВыборкаДанныхМероприятия.УчастникМероприятия;
		ЗаписьРегистрацияНаМероприятия.СоставМероприятия	= ВыборкаДанныхМероприятия.СоставМероприятия;
		
		ЗаписьРегистрацияНаМероприятия.Записать();
		
		Если РезультатЗапроса[4].Пустой() Тогда
			
			Если ТранзакцияАктивна() Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
			Возврат РезультатСервиса;
			
		КонецЕсли;
		
		ВыборкаPushУведомленийПоПрограммеМероприятия = РезультатЗапроса[4].Выбрать();
		
		НаборЗаписейPushУведомленияДляРассылкиПользователям = РегистрыСведений.PushУведомленияДляРассылкиПользователям.СоздатьНаборЗаписей();
		НаборЗаписейPushУведомленияДляРассылкиПользователям.Отбор.ИдентификаторПриложения.Установить(ApplicationID); 
		НаборЗаписейPushУведомленияДляРассылкиПользователям.Отбор.КодПрофиляПользователя.Установить(ProfileCode); 
		
		НаборЗаписейPushУведомленияДляРассылкиПользователям.Прочитать();
		
		Пока ВыборкаPushУведомленийПоПрограммеМероприятия.Следующий() Цикл
			ЗаписьPushУведомленияПоПрограммеМероприятия = НаборЗаписейPushУведомленияДляРассылкиПользователям.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьPushУведомленияПоПрограммеМероприятия, ВыборкаPushУведомленийПоПрограммеМероприятия);
		КонецЦикла;

		НаборЗаписейPushУведомленияДляРассылкиПользователям.Записать();	
	
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РезультатСервиса.Result		= Ложь;
		РезультатСервиса.Message 	= РезультатСервиса.Message + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

	Возврат РезультатСервиса;

КонецФункции

// возвращает файл, прикрепленный к мероприятияю по коду
Функция GetTheListOfFiles(EventNumber)
	
	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("GetTheListOfFiles_Result");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(EventNumber);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Действие не возможно.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	НачатьТранзакцию();

	Попытка
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацияНаМероприятиеДополнительныеМатериалы.ИмяФайла КАК Тип,
		|	РегистрацияНаМероприятиеДополнительныеМатериалы.Файл.Код КАК Код
		|ИЗ
		|	Документ.РегистрацияНаМероприятие.ДополнительныеМатериалы КАК РегистрацияНаМероприятиеДополнительныеМатериалы
		|ГДЕ
		|	РегистрацияНаМероприятиеДополнительныеМатериалы.Ссылка.Номер = &НомерМероприятия
		|	И РегистрацияНаМероприятиеДополнительныеМатериалы.Загружено = ИСТИНА";
		
		Запрос.УстановитьПараметр("НомерМероприятия", EventNumber);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			РезультатСервиса.Message = "Дополнительных материалов не найдено";
			Возврат РезультатСервиса;
		КонецЕсли;
		
		ВыборкаСпискаФайлов = РезультатЗапроса.Выбрать();
		
		ТипТаблицыСпискаФайлов			= ФабрикаXDTO.Тип(ПространствоИмен, "FileTable");
		ТипЭлементаТаблицыСпискаФайлов	= ФабрикаXDTO.Тип(ПространствоИмен, "File");
		
		ТаблицаСпискаФайлов_XDTO = ФабрикаXDTO.Создать(ТипТаблицыСпискаФайлов);
		
		Пока ВыборкаСпискаФайлов.Следующий() Цикл
			
			СтрокаСпискаФайлов_XDTO = ФабрикаXDTO.Создать(ТипЭлементаТаблицыСпискаФайлов);
			
			СтрокаСпискаФайлов_XDTO.FileType 		= ВыборкаСпискаФайлов.Тип;
			СтрокаСпискаФайлов_XDTO.FileNumber 		= ВыборкаСпискаФайлов.Код;
			
			ТаблицаСпискаФайлов_XDTO.Table.Добавить(СтрокаСпискаФайлов_XDTO);
			
		КонецЦикла;
		
		РезультатСервиса.FileTable = ТаблицаСпискаФайлов_XDTO;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РезультатСервиса.Result		= Ложь;
		РезультатСервиса.Message 	= РезультатСервиса.Message + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

	Возврат РезультатСервиса;
	
КонецФункции

// возвращает файл по его коду
Функция GetFileByCode(FileNumber)
	
	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("File");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(FileNumber);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Действие не возможно.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	НачатьТранзакцию();

	Попытка
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииФайлов.ФайлХранилище,
		|	ВерсииФайлов.Расширение
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Код = &НомерФайла";
		
		Запрос.УстановитьПараметр("НомерФайла", FileNumber);

		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			РезультатСервиса.Message = "Файл не найден.";
			Возврат РезультатСервиса;
			
		КонецЕсли;
		
		ВыборкаФайла = РезультатЗапроса.Выбрать();
		
		Если ВыборкаФайла.Следующий() Тогда
			
			ДвоичныеДанныеФайла 			= ВыборкаФайла.ФайлХранилище.Получить();
			
			РезультатСервиса.File 			= ДвоичныеДанныеФайла;
			РезультатСервиса.FileExtension 	= ВыборкаФайла.Расширение;
			
		КонецЕсли;;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РезультатСервиса.Result		= Ложь;
		РезультатСервиса.Message 	= РезультатСервиса.Message + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

	Возврат РезультатСервиса;
	
КонецФункции

// возвращает таблицу параметров оценки выступления
Функция GetEvaluationParametersTable(ReportCode, ApplicationID, ProfileCode)
	
	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("GetEvaluationParametersTable_Result");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ReportCode) И ЗначениеЗаполнено(ApplicationID);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Действие не возможно.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	НачатьТранзакцию();

	Попытка
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВыступленияНаМероприятияхПараметрыОценкиВыступления.Ссылка КАК Ссылка,
		|	ВыступленияНаМероприятияхПараметрыОценкиВыступления.ПараметрОценки.Наименование КАК ПараметрОценки
		|ИЗ
		|	Справочник.ВыступленияНаМероприятиях.ПараметрыОценкиВыступления КАК ВыступленияНаМероприятияхПараметрыОценкиВыступления
		|ГДЕ
		|	ВыступленияНаМероприятияхПараметрыОценкиВыступления.Ссылка.Код = &Код
		|ИТОГИ ПО
		|	Ссылка";	
		
		Запрос.УстановитьПараметр("Код"	, ReportCode);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			РезультатСервиса.Result		= Истина;
			РезультатСервиса.Message 	= "Параметров не найдено.";
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
				Возврат РезультатСервиса;
			КонецЕсли;
			                 
		КонецЕсли;
		
		ВыборкаВыступления = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		ВыборкаВыступления.Следующий();
		
		НоборЗаписейЗначенияПараметровОказанныхУслуг = РегистрыСведений.ЗначенияПараметровОказанныхУслуг.СоздатьНаборЗаписей();
				
		НоборЗаписейЗначенияПараметровОказанныхУслуг.Отбор.Параметр.Установить(Справочники.ПараметрыОказанныхУслуг.ОценкаВыступления);
		НоборЗаписейЗначенияПараметровОказанныхУслуг.Отбор.Идентификатор.Установить(ApplicationID);
		НоборЗаписейЗначенияПараметровОказанныхУслуг.Отбор.Основание.Установить(ВыборкаВыступления.Ссылка); 
		НоборЗаписейЗначенияПараметровОказанныхУслуг.Отбор.КодПрофиляПользователя.Установить(ProfileCode); 
		
		НоборЗаписейЗначенияПараметровОказанныхУслуг.Прочитать();
		НоборЗаписейЗначенияПараметровОказанныхУслуг.Очистить();
		
		ТипТаблицаПараметров		= ФабрикаXDTO.Тип(ПространствоИмен, "RatingParametersTable");
		ТипЭлементаТаблицаПараметров= ФабрикаXDTO.Тип(ПространствоИмен, "RatingParameters");
		
		ТаблицаПараметров_XDTO = ФабрикаXDTO.Создать(ТипТаблицаПараметров);
		
		ВыборкаПараметров = ВыборкаВыступления.Выбрать();
		
		Пока ВыборкаПараметров.Следующий() Цикл
			
			ИдентификаторУведомления = Строка(Новый УникальныйИдентификатор());
			
			СтрокаТаблицаПараметров_XDTO = ФабрикаXDTO.Создать(ТипЭлементаТаблицаПараметров);
			
			СтрокаТаблицаПараметров_XDTO.IdNotification	= ИдентификаторУведомления;
			СтрокаТаблицаПараметров_XDTO.Description 	= ВыборкаПараметров.ПараметрОценки;
			
			ТаблицаПараметров_XDTO.Table.Добавить(СтрокаТаблицаПараметров_XDTO);
			
			ЗаписьПоОценкеВыступления = НоборЗаписейЗначенияПараметровОказанныхУслуг.Добавить();
			
			ЗаписьПоОценкеВыступления.Параметр					= Справочники.ПараметрыОказанныхУслуг.ОценкаВыступления;
			ЗаписьПоОценкеВыступления.Идентификатор             = ApplicationID;
			ЗаписьПоОценкеВыступления.Основание			        = ВыборкаВыступления.Ссылка;
			ЗаписьПоОценкеВыступления.КодПрофиляПользователя	= ProfileCode;
			ЗаписьПоОценкеВыступления.Период					= ТекущаяДата();
			ЗаписьПоОценкеВыступления.ИдентификаторУведомления	= ИдентификаторУведомления;
			ЗаписьПоОценкеВыступления.ДатаАктульности			= ТекущаяДата();
			ЗаписьПоОценкеВыступления.Описание					= ВыборкаПараметров.ПараметрОценки;
			ЗаписьПоОценкеВыступления.УведомитьКлиента			= Ложь;
			
		КонецЦикла;
		
		НоборЗаписейЗначенияПараметровОказанныхУслуг.Записать();
		
		РезультатСервиса.RatingParametersTable = ТаблицаПараметров_XDTO;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РезультатСервиса.Result		= Ложь;
		РезультатСервиса.Message 	= РезультатСервиса.Message + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат РезультатСервиса;
		
КонецФункции

// получить данные анкеты
Функция GetQuestionnaire(ApplicationID, EventNumber, CompositionCode, ProfileCode)
	
	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("GetQuestionnaire_Result");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID) И ЗначениеЗаполнено(EventNumber) И ЗначениеЗаполнено(CompositionCode);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Действие не возможно.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	ПриглашенияНаМероприятия.СоставМероприятия.Анкета КАК Анкета
		|ПОМЕСТИТЬ втАнкета
		|ИЗ
		|	РегистрСведений.ПриглашенияНаМероприятия КАК ПриглашенияНаМероприятия
		|ГДЕ
		|	ПриглашенияНаМероприятия.Регистратор.Номер = &НомерМероприятия
		|	И (ПриглашенияНаМероприятия.Идентификатор = &ИдентификаторПользователя
		|				И ПриглашенияНаМероприятия.КодПрофиляПользователя = &КодПрофиляПользователя
		|			ИЛИ ПриглашенияНаМероприятия.Идентификатор = """")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АнкетыВопросы.Ссылка КАК Анкета,
		|	АнкетыВопросы.Вопрос,
		|	АнкетыВопросы.Вопрос.Обязательный КАК ЭтоОбязательныйВопрос,
		|	АнкетыВопросы.Вопрос.Наименование КАК ТекстВопроса,
		|	АнкетыВопросы.Вопрос.ТипВопроса КАК ТипВопроса
		|ПОМЕСТИТЬ втВопросыАнкеты
		|ИЗ
		|	Справочник.Анкеты.Вопросы КАК АнкетыВопросы
		|ГДЕ
		|	АнкетыВопросы.Ссылка В
		|			(ВЫБРАТЬ
		|				втАнкета.Анкета
		|			ИЗ
		|				втАнкета КАК втАнкета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВопросыАнкетыВариантыОтветов.Ссылка КАК Вопрос,
		|	ВопросыАнкетыВариантыОтветов.Ответ КАК ВариантОтвета
		|ПОМЕСТИТЬ втВариатыОтветов
		|ИЗ
		|	Справочник.ВопросыАнкеты.ВариантыОтветов КАК ВопросыАнкетыВариантыОтветов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВопросыАнкеты.ЭтоОбязательныйВопрос КАК ЭтоОбязательныйВопрос,
		|	втВопросыАнкеты.ТекстВопроса КАК ТекстВопроса,
		|	ПРЕДСТАВЛЕНИЕ(втВопросыАнкеты.ТипВопроса) КАК ТипВопроса,
		|	ЕСТЬNULL(втВариатыОтветов.ВариантОтвета, """") КАК ВариантОтвета,
		|	втВопросыАнкеты.Вопрос КАК Вопрос,
		|	втВопросыАнкеты.Анкета.Наименование КАК НазваниеАнкеты,
		|	втВопросыАнкеты.Вопрос.Код КАК КодВопроса,
		|	втВопросыАнкеты.Анкета.Код КАК КодАнкеты
		|ИЗ
		|	втВопросыАнкеты КАК втВопросыАнкеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ втВариатыОтветов КАК втВариатыОтветов
		|		ПО втВопросыАнкеты.Вопрос = втВариатыОтветов.Вопрос
		|ИТОГИ
		|	МАКСИМУМ(ЭтоОбязательныйВопрос),
		|	МАКСИМУМ(ТекстВопроса),
		|	МАКСИМУМ(ТипВопроса),
		|	МАКСИМУМ(НазваниеАнкеты),
		|	МАКСИМУМ(КодВопроса),
		|	МАКСИМУМ(КодАнкеты)
		|ПО
		|	Вопрос";
		
		Запрос.УстановитьПараметр("НомерМероприятия"			, EventNumber);
		Запрос.УстановитьПараметр("КодСоставаМероприятия"		, CompositionCode);
		Запрос.УстановитьПараметр("ИдентификаторПользователя"	, ApplicationID);
		Запрос.УстановитьПараметр("КодПрофиляПользователя"		, ProfileCode);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			РезультатСервиса.Message = "Не найдено данных анкеты.";
			Возврат РезультатСервиса;
		КонецЕсли;
		
		ТипТаблицыВопросов 			= ФабрикаXDTO.Тип(ПространствоИмен, "QuestionnaireDataTable");
		ТипЭлементаТаблицыВопроса 	= ФабрикаXDTO.Тип(ПространствоИмен, "QuestionnaireData");
		ТипТаблицыОтветов           = ФабрикаXDTO.Тип(ПространствоИмен, "TableOfAnswers");
		ТипЭлементаТаблицыОтветов 	= ФабрикаXDTO.Тип(ПространствоИмен, "Answer");
		
		ВыборкаВоспровАнкеты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		ТаблицаВопросовАнкеты_XDTO = ФабрикаXDTO.Создать(ТипТаблицыВопросов);
		
		Пока ВыборкаВоспровАнкеты.Следующий() Цикл
			
			РезультатСервиса.QuestionnaireName = ВыборкаВоспровАнкеты.НазваниеАнкеты;
			РезультатСервиса.QuestionnaireСode = ВыборкаВоспровАнкеты.КодАнкеты;
			
			СтрокаТаблицыВопросовАнкеты_XDTO = ФабрикаXDTO.Создать(ТипЭлементаТаблицыВопроса);
			
			СтрокаТаблицыВопросовАнкеты_XDTO.ThisIABindingQuestion = ВыборкаВоспровАнкеты.ЭтоОбязательныйВопрос;
			СтрокаТаблицыВопросовАнкеты_XDTO.TheTextOfTtheQuestion = ВыборкаВоспровАнкеты.ТекстВопроса;
			СтрокаТаблицыВопросовАнкеты_XDTO.QuestionType          = ВыборкаВоспровАнкеты.ТипВопроса;
			СтрокаТаблицыВопросовАнкеты_XDTO.QuestionСode 		   = ВыборкаВоспровАнкеты.КодВопроса;
			
			ВыборкаОтветовНаВопросыАнкеты =  ВыборкаВоспровАнкеты.Выбрать();
			ТаблицаОтветовНаВопросы_XDTO = ФабрикаXDTO.Создать(ТипТаблицыОтветов);
			
			Пока ВыборкаОтветовНаВопросыАнкеты.Следующий() Цикл
				
				СтрокаТаблицыОтветов_XDTO = ФабрикаXDTO.Создать(ТипЭлементаТаблицыОтветов);
				
				СтрокаТаблицыОтветов_XDTO.AnswerText = ВыборкаОтветовНаВопросыАнкеты.ВариантОтвета;
				
				ТаблицаОтветовНаВопросы_XDTO.Table.Добавить(СтрокаТаблицыОтветов_XDTO);
				
			КонецЦикла;
			                   
			СтрокаТаблицыВопросовАнкеты_XDTO.TableOfAnswers = ТаблицаОтветовНаВопросы_XDTO;
			
			ТаблицаВопросовАнкеты_XDTO.Table.Добавить(СтрокаТаблицыВопросовАнкеты_XDTO);
			
		КонецЦикла;
		
		РезультатСервиса.QuestionnaireDataTable = ТаблицаВопросовАнкеты_XDTO;   

	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РезультатСервиса.Result	= Ложь;
		РезультатСервиса.Message= РезультатСервиса.Message + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат РезультатСервиса;
	
КонецФункции

// установить данные анкеты
Функция SetTheResultOfTheUserQquestionnaire(ApplicationID, EventNumber, CompositionCode, ResultOfTheUserQquestionnaire, ProfileCode)

	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("OperationResult");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID) И ЗначениеЗаполнено(EventNumber) И ЗначениеЗаполнено(CompositionCode) И ЗначениеЗаполнено(ResultOfTheUserQquestionnaire);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Действие не возможно.";
		Возврат РезультатСервиса;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка

		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПриглашенияНаМероприятия.СоставМероприятия.Анкета КАК Анкета,
		|	ПриглашенияНаМероприятия.СоставМероприятия,
		|	ПриглашенияНаМероприятия.Регистратор КАК РегистрацияНаМероприятие
		|ИЗ
		|	РегистрСведений.ПриглашенияНаМероприятия КАК ПриглашенияНаМероприятия
		|ГДЕ
		|	(ПриглашенияНаМероприятия.Идентификатор = &Идентификатор
		|				И ПриглашенияНаМероприятия.КодПрофиляПользователя = &КодПрофиляПользователя
		|			ИЛИ ПриглашенияНаМероприятия.Идентификатор = """")
		|	И ПриглашенияНаМероприятия.СоставМероприятия.Код = &КодСоставаМероприятия
		|	И ПриглашенияНаМероприятия.Регистратор.Номер = &НомерМероприятия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОтветовНаВопросы.КодВопроса,
		|	ТаблицаОтветовНаВопросы.ТекстОтветаНаВопрос
		|ПОМЕСТИТЬ втТекстОтветаНаВопрос
		|ИЗ
		|	&ТаблицаОтветовНаВопросы КАК ТаблицаОтветовНаВопросы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АнкетыВопросы.Вопрос КАК Вопрос,
		|	втТекстОтветаНаВопрос.ТекстОтветаНаВопрос КАК Ответ,
		|	&ТекущаяДата КАК ДатаОтвета
		|ИЗ
		|	втТекстОтветаНаВопрос КАК втТекстОтветаНаВопрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Анкеты.Вопросы КАК АнкетыВопросы
		|		ПО втТекстОтветаНаВопрос.КодВопроса = АнкетыВопросы.Вопрос.Код";
		
		Запрос.УстановитьПараметр("Идентификатор"			, ApplicationID);
		Запрос.УстановитьПараметр("КодСоставаМероприятия"	, CompositionCode);
		Запрос.УстановитьПараметр("НомерМероприятия"		, EventNumber);
		Запрос.УстановитьПараметр("ТаблицаОтветовНаВопросы"	, ПреобразоватьСтрокуXMLВТаблицуЗначений(ResultOfTheUserQquestionnaire));
		Запрос.УстановитьПараметр("ТекущаяДата"				, ТекущаяДата());
		Запрос.УстановитьПараметр("КодПрофиляПользователя"	, ProfileCode);
		
		РезультатЗапроса = запрос.ВыполнитьПакет();
		
		Если РезультатЗапроса[0].Пустой() ИЛИ РезультатЗапроса[2].Пустой() Тогда
			РезультатСервиса.Result	= Ложь;
			РезультатСервиса.Message = "Нет данных";
			Возврат РезультатСервиса;
		КонецЕсли;
		
		ВыборкаДанныхМероприятия = РезультатЗапроса[0].Выбрать();
		ВыборкаДанныхМероприятия.Следующий();
		
		ВыборкаОтветовНаВопросыАнкеты = РезультатЗапроса[2].Выбрать();
		
		НаборЗаписейРезультатыАнкетированияПользователей = РегистрыСведений.РезультатыАнкетированияПользователей.СоздатьНаборЗаписей();
		НаборЗаписейРезультатыАнкетированияПользователей.Отбор.Анкета.Установить(ВыборкаДанныхМероприятия.Анкета);
		НаборЗаписейРезультатыАнкетированияПользователей.Отбор.Идентификатор.Установить(ApplicationID);
		НаборЗаписейРезультатыАнкетированияПользователей.Отбор.Мероприятие.Установить(ВыборкаДанныхМероприятия.РегистрацияНаМероприятие);
		НаборЗаписейРезультатыАнкетированияПользователей.Отбор.СоставМероприятия.Установить(ВыборкаДанныхМероприятия.СоставМероприятия);
		НаборЗаписейРезультатыАнкетированияПользователей.Отбор.КодПрофиляПользователя.Установить(ProfileCode);
		
		НаборЗаписейРезультатыАнкетированияПользователей.Прочитать();
		НаборЗаписейРезультатыАнкетированияПользователей.Очистить();
		
		Пока ВыборкаОтветовНаВопросыАнкеты.Следующий() Цикл
			
			ЗаписьРезультатаАнкетирования = НаборЗаписейРезультатыАнкетированияПользователей.Добавить();
			
			ЗаписьРезультатаАнкетирования.Идентификатор 			= ApplicationID;
			ЗаписьРезультатаАнкетирования.КодПрофиляПользователя 	= ProfileCode;
			
			ЗаполнитьЗначенияСвойств(ЗаписьРезультатаАнкетирования, ВыборкаДанныхМероприятия);
			ЗаполнитьЗначенияСвойств(ЗаписьРезультатаАнкетирования, ВыборкаОтветовНаВопросыАнкеты);
			
		КонецЦикла;
		
		НаборЗаписейРезультатыАнкетированияПользователей.Записать();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РезультатСервиса.Result	= Ложь;
		РезультатСервиса.Message= РезультатСервиса.Message + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат РезультатСервиса;

КонецФункции 

//задать вопрос по выступлению
Функция AskAQuestionAboutTheReport(ApplicationID, ProfileCode, EventNumber, CompositionCode, ReportCode, Question)

	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("OperationResult");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID) 
								И ЗначениеЗаполнено(EventNumber) 	
								И ЗначениеЗаполнено(CompositionCode) 
								И ЗначениеЗаполнено(ReportCode);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Действие не возможно.";
		Возврат РезультатСервиса;
	КонецЕсли;                                         
	
	НачатьТранзакцию();
	
	Попытка

		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрограммаМероприятий.Регистратор КАК РегистрацияНаМероприятие,
		|	ПрограммаМероприятий.СоставМероприятия,
		|	ПрограммаМероприятий.Выступление
		|ИЗ
		|	РегистрСведений.ПрограммаМероприятий КАК ПрограммаМероприятий
		|ГДЕ
		|	ПрограммаМероприятий.Регистратор.Номер = &НомерМероприятия
		|	И ПрограммаМероприятий.СоставМероприятия.Код = &КодСоставаМероприятия
		|	И ПрограммаМероприятий.Выступление.Код = &КодВыступления";
		
		Запрос.УстановитьПараметр("НомерМероприятия"		, EventNumber);
		Запрос.УстановитьПараметр("КодСоставаМероприятия"	, CompositionCode);
		Запрос.УстановитьПараметр("КодВыступления"			, ReportCode);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			РезультатСервиса.Result	= Ложь;
			РезультатСервиса.Message = "Выступление не найдено.";
			
			Возврат РезультатСервиса;
			
		КонецЕсли;
		
		ВыборкаДанныхВыступления = РезультатЗапроса.Выбрать();
		ВыборкаДанныхВыступления.Следующий();
		
		ЗаписьВопросыПоВыступлениямНаМероприятии = РегистрыСведений.ВопросыПоВыступлениямНаМероприятии.СоздатьМенеджерЗаписи();
		
		ЗаписьВопросыПоВыступлениямНаМероприятии.РегистрацияНаМероприятие 	= ВыборкаДанныхВыступления.РегистрацияНаМероприятие;
		ЗаписьВопросыПоВыступлениямНаМероприятии.СоставМероприятия 			= ВыборкаДанныхВыступления.СоставМероприятия;
		ЗаписьВопросыПоВыступлениямНаМероприятии.Выступление 				= ВыборкаДанныхВыступления.Выступление;
		ЗаписьВопросыПоВыступлениямНаМероприятии.Вопрос 						= Question; 
		ЗаписьВопросыПоВыступлениямНаМероприятии.Идентификатор 			= ApplicationID;
		ЗаписьВопросыПоВыступлениямНаМероприятии.КодПрофиляПользователя 	= ProfileCode;
		
		ЗаписьВопросыПоВыступлениямНаМероприятии.Прочитать();
		
		ЗаписьВопросыПоВыступлениямНаМероприятии.РегистрацияНаМероприятие	= ВыборкаДанныхВыступления.РегистрацияНаМероприятие;
		ЗаписьВопросыПоВыступлениямНаМероприятии.СоставМероприятия 			= ВыборкаДанныхВыступления.СоставМероприятия;
		ЗаписьВопросыПоВыступлениямНаМероприятии.Выступление 				= ВыборкаДанныхВыступления.Выступление;
		ЗаписьВопросыПоВыступлениямНаМероприятии.Вопрос 					= Question; 
		ЗаписьВопросыПоВыступлениямНаМероприятии.Идентификатор 				= ApplicationID;
		ЗаписьВопросыПоВыступлениямНаМероприятии.КодПрофиляПользователя 	= ProfileCode;
		ЗаписьВопросыПоВыступлениямНаМероприятии.Период 					= ТекущаяДата();
		ЗаписьВопросыПоВыступлениямНаМероприятии.ВопросОбработан 			= Ложь;
		
		ЗаписьВопросыПоВыступлениямНаМероприятии.Записать();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РезультатСервиса.Result	= Ложь;
		РезультатСервиса.Message= РезультатСервиса.Message + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат РезультатСервиса;
	
КонецФункции 

// заказать услугу (раздел "хочу")
Функция OrderService(ApplicationID, ProfileCode, EventNumber, CompositionCode, ServiceCode, ToOrder)

	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("OperationResult");
	
	РезультатСервиса.Result = ЗначениеЗаполнено(ApplicationID) 
								И ЗначениеЗаполнено(EventNumber) 	
								И ЗначениеЗаполнено(CompositionCode) 
								И ЗначениеЗаполнено(ServiceCode);
	
	Если НЕ РезультатСервиса.Result Тогда
		РезультатСервиса.Message = "Действие не возможно.";
		Возврат РезультатСервиса;
	КонецЕсли;                                         
	
	НачатьТранзакцию();
	
	Попытка

		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриглашенияНаМероприятия.СоставМероприятия
		|ПОМЕСТИТЬ втСоставМероприятия
		|ИЗ
		|	РегистрСведений.ПриглашенияНаМероприятия КАК ПриглашенияНаМероприятия
		|ГДЕ
		|	ПриглашенияНаМероприятия.Регистратор.Номер = &НомерМероприятия
		|	И ПриглашенияНаМероприятия.СоставМероприятия.Код = &КодСоставаМероприятия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоставМероприятияУслугиДоступныеДляЗаказаПослеМероприятия.ВидУслуги КАК ВидУслуги,
		|	СоставМероприятияУслугиДоступныеДляЗаказаПослеМероприятия.Ссылка КАК Основание
		|ИЗ
		|	Справочник.СоставМероприятия.УслугиДоступныеДляЗаказаПослеМероприятия КАК СоставМероприятияУслугиДоступныеДляЗаказаПослеМероприятия
		|ГДЕ
		|	СоставМероприятияУслугиДоступныеДляЗаказаПослеМероприятия.Ссылка В
		|			(ВЫБРАТЬ
		|				втСоставМероприятия.СоставМероприятия
		|			ИЗ
		|				втСоставМероприятия КАК втСоставМероприятия)";
		
		Запрос.УстановитьПараметр("НомерМероприятия"		, EventNumber);
		Запрос.УстановитьПараметр("КодСоставаМероприятия"	, CompositionCode);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			РезультатСервиса.Result	= Ложь;
			РезультатСервиса.Message = "Выступление не найдено.";
			
			Возврат РезультатСервиса;
			
		КонецЕсли;
		
		ВыборкаСоставаМероприятия = РезультатЗапроса.Выбрать();
		ВыборкаСоставаМероприятия.Следующий();
		
		НаборЗаписейУслугиЗаказанныеИзМобильногоПриложения = РегистрыСведений.УслугиЗаказанныеИзМобильногоПриложения.СоздатьНаборЗаписей();
		
		НаборЗаписейУслугиЗаказанныеИзМобильногоПриложения.Отбор.Идентификатор.Установить(ApplicationID) ;
		НаборЗаписейУслугиЗаказанныеИзМобильногоПриложения.Отбор.КодПрофиляПользователя.Установить(ProfileCode);
		НаборЗаписейУслугиЗаказанныеИзМобильногоПриложения.Отбор.Основание.Установить(ВыборкаСоставаМероприятия.Основание);
		НаборЗаписейУслугиЗаказанныеИзМобильногоПриложения.Отбор.ВидУслуги.Установить(ВыборкаСоставаМероприятия.ВидУслуги);
		
		НаборЗаписейУслугиЗаказанныеИзМобильногоПриложения.Прочитать();
		
		НаборЗаписейУслугиЗаказанныеИзМобильногоПриложения.Очистить();
		
		ЗаписьУслугиЗаказанныеИзМобильногоПриложения = НаборЗаписейУслугиЗаказанныеИзМобильногоПриложения.Добавить();
		
		ЗаписьУслугиЗаказанныеИзМобильногоПриложения.Идентификатор 			= ApplicationID;
		ЗаписьУслугиЗаказанныеИзМобильногоПриложения.КодПрофиляПользователя = ProfileCode;
		ЗаписьУслугиЗаказанныеИзМобильногоПриложения.Основание 				= ВыборкаСоставаМероприятия.Основание;
		ЗаписьУслугиЗаказанныеИзМобильногоПриложения.ВидУслуги 				= ВыборкаСоставаМероприятия.ВидУслуги;
		ЗаписьУслугиЗаказанныеИзМобильногоПриложения.Период 				= ТекущаяДата();
		ЗаписьУслугиЗаказанныеИзМобильногоПриложения.Актуальность			= ToOrder;
		
		НаборЗаписейУслугиЗаказанныеИзМобильногоПриложения.Записать();
	
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		РезультатСервиса.Result	= Ложь;
		РезультатСервиса.Message= РезультатСервиса.Message + ОписаниеОшибки();
		
		Возврат РезультатСервиса;
		
	КонецПопытки;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат РезультатСервиса;
	
КонецФункции

#КонецОбласти

Функция ПолучитьТаблицуДоступныхФункций(Идентификатор, КодПрофиляПользователя = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ИдентификаторыМобильныхПриложений.Контрагент <> ЗНАЧЕНИЕ(Справочник.Абоненты.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПодтвержденныйПользователь,
	|	ИдентификаторыМобильныхПриложений.КодПрофиляПользователя
	|ПОМЕСТИТЬ втЭтоПодтвержденныйПользователь
	|ИЗ
	|	РегистрСведений.ИдентификаторыМобильныхПриложений.СрезПоследних(, ) КАК ИдентификаторыМобильныхПриложений
	|ГДЕ
	|	ИдентификаторыМобильныхПриложений.Идентификатор = &ИдентификаторПриложения
	|	И ИдентификаторыМобильныхПриложений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияПользователяМобильногоПриложения.РегистрацияНовогоПрофиля)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФункцииМобильногоПриложения.Ссылка КАК Функция,
	|	ВЫБОР
	|		КОГДА ФункцииМобильногоПриложения.Публичная = ИСТИНА
	|				ИЛИ ФункцииМобильногоПриложения.ДоступнаПоУмолчаниюТолькоКлиенту = ИСТИНА
	|					И ЕСТЬNULL(втЭтоПодтвержденныйПользователь.ЭтоПодтвержденныйПользователь, ЛОЖЬ) = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Доступна,
	|	втЭтоПодтвержденныйПользователь.КодПрофиляПользователя
	|ПОМЕСТИТЬ втСписокФункцийМобильногоПриложения
	|ИЗ
	|	Справочник.ФункцииМобильногоПриложения КАК ФункцииМобильногоПриложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЭтоПодтвержденныйПользователь КАК втЭтоПодтвержденныйПользователь
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ФункцииМобильногоПриложения.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ФункцииМобильногоПриложения.Ссылка,
	|	ВЫБОР
	|		КОГДА ФункцииМобильногоПриложения.Публичная = ИСТИНА
	|				ИЛИ ФункцииМобильногоПриложения.ДоступнаПоУмолчаниюТолькоКлиенту = ИСТИНА
	|					И ЕСТЬNULL(втЭтоПодтвержденныйПользователь.ЭтоПодтвержденныйПользователь, ЛОЖЬ) = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	втЭтоПодтвержденныйПользователь.КодПрофиляПользователя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступностьФункцийМобильногоПриложения.Функция,
	|	ДоступностьФункцийМобильногоПриложения.ИдентификаторПриложения,
	|	ДоступностьФункцийМобильногоПриложения.Доступна,
	|	ДоступностьФункцийМобильногоПриложения.КодПрофиляПользователя
	|ПОМЕСТИТЬ втДоступныеФункции
	|ИЗ
	|	РегистрСведений.ДоступностьФункцийМобильногоПриложения КАК ДоступностьФункцийМобильногоПриложения
	|ГДЕ
	|	ДоступностьФункцийМобильногоПриложения.ИдентификаторПриложения = &ИдентификаторПриложения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДоступныеФункции.Функция,
	|	втДоступныеФункции.ИдентификаторПриложения,
	|	втДоступныеФункции.Доступна,
	|	2 КАК Приоритет,
	|	втДоступныеФункции.КодПрофиляПользователя
	|ПОМЕСТИТЬ втВсеДоступныеФункции
	|ИЗ
	|	втДоступныеФункции КАК втДоступныеФункции
	|ГДЕ
	|	втДоступныеФункции.Функция <> ЗНАЧЕНИЕ(Справочник.ФункцииМобильногоПриложения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втСписокФункцийМобильногоПриложения.Функция,
	|	&ИдентификаторПриложения,
	|	втСписокФункцийМобильногоПриложения.Доступна,
	|	ВЫБОР
	|		КОГДА втСписокФункцийМобильногоПриложения.Доступна = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 3
	|	КОНЕЦ,
	|	втСписокФункцийМобильногоПриложения.КодПрофиляПользователя
	|ИЗ
	|	втСписокФункцийМобильногоПриложения КАК втСписокФункцийМобильногоПриложения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеДоступныеФункции.Функция,
	|	МИНИМУМ(втВсеДоступныеФункции.Приоритет) КАК Приоритет,
	|	втВсеДоступныеФункции.КодПрофиляПользователя,
	|	втВсеДоступныеФункции.ИдентификаторПриложения
	|ПОМЕСТИТЬ втПриоритетФункций
	|ИЗ
	|	втВсеДоступныеФункции КАК втВсеДоступныеФункции
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеДоступныеФункции.Функция,
	|	втВсеДоступныеФункции.КодПрофиляПользователя,
	|	втВсеДоступныеФункции.ИдентификаторПриложения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеДоступныеФункции.Функция КАК Функция,
	|	втВсеДоступныеФункции.ИдентификаторПриложения,
	|	втВсеДоступныеФункции.Доступна,
	|	втВсеДоступныеФункции.КодПрофиляПользователя
	|ИЗ
	|	втВсеДоступныеФункции КАК втВсеДоступныеФункции
	|ГДЕ
	|	(втВсеДоступныеФункции.Функция, втВсеДоступныеФункции.Приоритет, втВсеДоступныеФункции.ИдентификаторПриложения, втВсеДоступныеФункции.КодПрофиляПользователя) В
	|			(ВЫБРАТЬ
	|				втПриоритетФункций.Функция,
	|				втПриоритетФункций.Приоритет,
	|				втПриоритетФункций.ИдентификаторПриложения,
	|				втПриоритетФункций.КодПрофиляПользователя
	|			ИЗ
	|				втПриоритетФункций КАК втПриоритетФункций)";
	
	Запрос.УстановитьПараметр("ИдентификаторПриложения"	, Идентификатор);
	
	Если КодПрофиляПользователя <> Неопределено Тогда
		Запрос.УстановитьПараметр("КодПрофиляПользователя"	, КодПрофиляПользователя);
		Запрос.Текст = Запрос.Текст + " И втВсеДоступныеФункции.КодПрофиляПользователя = &КодПрофиляПользователя";
	КонецЕсли;
	
	ТаблицаДоступныхФункцийПользователя = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДоступныхФункцийПользователя;
	
КонецФункции // ПолучитьТаблицуДоступныхФункций()

Функция ПолучитьДанныеПриложенияПоИдентификатору(ИдентификаторПриложения, СтруктураДанныхПриложения, КодПрофиляПользователя)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыМобильныхПриложенийСрезПоследних.КонтактноеЛицо,
	|	ИдентификаторыМобильныхПриложенийСрезПоследних.Контрагент
	|ИЗ
	|	РегистрСведений.ИдентификаторыМобильныхПриложений.СрезПоследних(
	|			,
	|			Идентификатор = &ИдентификаторПриложения
	|				И КодПрофиляПользователя = &КодПрофиляПользователя) КАК ИдентификаторыМобильныхПриложенийСрезПоследних";
	
	Запрос.УстановитьПараметр("ИдентификаторПриложения", ИдентификаторПриложения);
	Запрос.УстановитьПараметр("КодПрофиляПользователя", КодПрофиляПользователя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтруктураДанныхПриложения, Выборка);
	
	Возврат СтруктураДанныхПриложения;

КонецФункции 

// {Рарус lyumor Мобильное приложение  2017.10.20 
// Создает новое контактное лицо контрагента по идентификатору зарегистрированого приложения
// Параметры:
//		- ApplicationID: идентификатор приложения (строка) 
//		- Position: должность сотрудника в компании (строка) 
Функция ПолучитьКонтактноеЛицо(CodeOfContact, Контрагент, КонтактноеЛицо, Фамилия, Имя, Отчество, Телефон, email)
	
	СтруктураДанныхКонтактногоЛица = Новый Структура();
	СтруктураДанныхКонтактногоЛица.Вставить("CodeOfContact", "#Неопределено");
	СтруктураДанныхКонтактногоЛица.Вставить("КонтактноеЛицо", Справочники.ПользователиСервисов.ПустаяСсылка());

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат СтруктураДанныхКонтактногоЛица;
	КонецЕсли;
	
	ЭтоОбновлениеДанныхКонтактногоЛица = ЗначениеЗаполнено(КонтактноеЛицо);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	КонтактныеЛицаКонтрагентов.Код,
	//|	КонтактныеЛицаКонтрагентов.Ссылка,
	//|	КонтактныеЛицаКонтрагентов.КонтактноеЛицо,
	//|	КонтактныеЛицаКонтрагентов.КонтактноеЛицо.Фамилия КАК Фамилия,
	//|	КонтактныеЛицаКонтрагентов.КонтактноеЛицо.Имя КАК Имя,
	//|	КонтактныеЛицаКонтрагентов.КонтактноеЛицо.Отчество КАК Отчество
	//|ИЗ
	//|	Справочник.ПользователиСервисов КАК КонтактныеЛицаКонтрагентов
	//|ГДЕ
	//|	КонтактныеЛицаКонтрагентов.Владелец = &Контрагент
	//|	И (КонтактныеЛицаКонтрагентов.Ссылка = &КонтактноеЛицо
	//|				И &ЭтоОбновлениеДанныхКонтактногоЛица
	//|			ИЛИ НЕ &ЭтоОбновлениеДанныхКонтактногоЛица
	//|				И КонтактныеЛицаКонтрагентов.КонтактноеЛицо.Фамилия = &Фамилия
	//|				И КонтактныеЛицаКонтрагентов.КонтактноеЛицо.Имя = &Имя
	//|				И КонтактныеЛицаКонтрагентов.КонтактноеЛицо.Отчество = &Отчество)";
	
	"ВЫБРАТЬ
	|	ПользователиАбонентов.ПользовательСервиса.Код КАК Код,
	|	ПользователиАбонентов.Абонент КАК Абонент,
	|	ПользователиАбонентов.ПользовательСервиса КАК ПользовательСервиса
	|ИЗ
	|	РегистрСведений.ПользователиАбонентов КАК ПользователиАбонентов
	|ГДЕ
	|	ПользователиАбонентов.Абонент = &Контрагент
	|	И (ПользователиАбонентов.ПользовательСервиса = &КонтактноеЛицо
	|				И &ЭтоОбновлениеДанныхКонтактногоЛица
	|			ИЛИ НЕ &ЭтоОбновлениеДанныхКонтактногоЛица
	|				И ПользователиАбонентов.ПользовательСервиса.Наименование = &Наименование)";
	
	Запрос.УстановитьПараметр("КонтактноеЛицо"						, КонтактноеЛицо);
	Запрос.УстановитьПараметр("ЭтоОбновлениеДанныхКонтактногоЛица"	, ЭтоОбновлениеДанныхКонтактногоЛица);
	//Запрос.УстановитьПараметр("Фамилия"							, Фамилия);
	//Запрос.УстановитьПараметр("Имя"								, Имя);
	//Запрос.УстановитьПараметр("Отчество"							, Отчество);
	Запрос.УстановитьПараметр("Наименование"						, Фамилия + " " + Имя + " " + " " + Отчество);
	Запрос.УстановитьПараметр("Контрагент"							, Контрагент);
	
	КонтактноеЛицоКонтрагента = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаКонтактногоЛица = РезультатЗапроса.Выбрать();
		ВыборкаКонтактногоЛица.Следующий();
		
		КонтактноеЛицоКонтрагента = ВыборкаКонтактногоЛица.Ссылка;
		
	Иначе
		
		НовоеКонтактноеЛицо = Справочники.ПользователиСервисов.СоздатьЭлемент();
		//
		//НовоеКонтактноеЛицо.Имя			= Имя;
		//НовоеКонтактноеЛицо.Фамилия		= Фамилия;
		//НовоеКонтактноеЛицо.Отчество	= Отчество;
		//НовоеКонтактноеЛицо.Наименование= Фамилия + " " + Имя + " " + Отчество;
		//
		//НовоеКонтактноеЛицо.Записать();
		
		НовоеКонтактноеЛицо = Справочники.ПользователиСервисов.СоздатьЭлемент();
		НовоеКонтактноеЛицо.УстановитьНовыйКод();
		//ПользовательСервисаОбъект.GUIDОБД = Новый УникальныйИдентификатор(Стр.GUID);
		НовоеКонтактноеЛицо.Наименование = Фамилия + " " + Имя + " " + Отчество;
		Если ЗначениеЗаполнено(Контрагент.Владелец) Тогда 
			НовоеКонтактноеЛицо.Владелец = Контрагент.Владелец;
		Иначе
			НовоеКонтактноеЛицо.Владелец = Справочники.Сервисы.НайтиПоКоду("00001");
		КонецЕсли;
		НовоеКонтактноеЛицо.КонтактнаяИнформация.Очистить();
		Если ЗначениеЗаполнено(Телефон) Тогда 
			СтрКИ = НовоеКонтактноеЛицо.КонтактнаяИнформация.Добавить();
			СтрКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			СтрКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователяСервиса;
			Инфо = КонтактнаяИнформацияПоЗначениюРеквизитов("",
							"",
							Телефон,
							"");
			СтрКИ.Представление = Инфо.Представление;
			СтрКИ.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(Инфо);
			СтрКИ.НомерТелефона = Телефон;
		КонецЕсли;
		//Если ЗначениеЗаполнено(Стр.КонтактнаяИнформация.Телефон2) Тогда 
		//	СтрКИ = ПользовательСервисаОбъект.КонтактнаяИнформация.Добавить();
		//	СтрКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		//	СтрКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДополнительныйТелефонПользователяСервиса;
		//	Инфо = КонтактнаяИнформацияПоЗначениюРеквизитов(Стр.КонтактнаяИнформация.Телефон2КодСтраны,
		//	Стр.КонтактнаяИнформация.Телефон2КодГорода,
		//	Стр.КонтактнаяИнформация.Телефон2Номер,
		//	Стр.КонтактнаяИнформация.Телефон2Добавочный);
		//	СтрКИ.Представление = Инфо.Представление;
		//	СтрКИ.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(Инфо);
		//	попытка
		//		СтрКИ.НомерТелефона = УбратьРазделителиВНомерТелефона(Строка(Стр.КонтактнаяИнформация.Телефон2КодСтраны) + Стр.КонтактнаяИнформация.Телефон2КодГорода + Стр.КонтактнаяИнформация.Телефон2Номер);
		//	Исключение
		//	КонецПопытки;
		//КонецЕсли;
		Если ЗначениеЗаполнено(email) Тогда
			СтрКИ = НовоеКонтактноеЛицо.КонтактнаяИнформация.Добавить();
			СтрКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			СтрКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователяСервиса;
			СтрКИ.Представление = email;
			СтрКИ.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(email, СтрКИ.Вид);
		КонецЕсли;
		//Если ЗначениеЗаполнено(Стр.КонтактнаяИнформация.Почта2) Тогда
		//	СтрКИ = ПользовательСервисаОбъект.КонтактнаяИнформация.Добавить();
		//	СтрКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		//	СтрКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДополнительныйEmailПользователяСервиса;
		//	СтрКИ.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(Стр.КонтактнаяИнформация.Почта2, СтрКИ.Вид);
		//	СтрКИ.Представление = Стр.КонтактнаяИнформация.Почта2;
		//КонецЕсли;
		НовоеКонтактноеЛицо.ОбменДанными.Загрузка = Истина;
		НовоеКонтактноеЛицо.Записать();
		НаборЗаписей = РегистрыСведений.ПользователиАбонентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Абонент.Установить(Контрагент);
		НаборЗаписей.Отбор.ПользовательСервиса.Установить(НовоеКонтактноеЛицо.Ссылка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		новаяЗапись = НаборЗаписей.Добавить();
		новаяЗапись.Абонент = Контрагент;
		новаяЗапись.ПользовательСервиса = НовоеКонтактноеЛицо.Ссылка;
		новаяЗапись.Сервис = НовоеКонтактноеЛицо.Владелец;
		НаборЗаписей.Записать();

		КонтактноеЛицоКонтрагента = НовоеКонтактноеЛицо.Ссылка;
		//КонтактноеЛицоКонтрагента = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
		//
		//КонтактноеЛицоКонтрагента.Наименование 	= Фамилия + " " + Имя + " " + Отчество;
		//КонтактноеЛицоКонтрагента.Владелец 		= Контрагент;
		//КонтактноеЛицоКонтрагента.КонтактноеЛицо= НовоеКонтактноеЛицо.Ссылка;
		//КонтактноеЛицоКонтрагента.Комментарий	= "Создан автоматически из мобильного приложения ";
		//
		//КонтактноеЛицоКонтрагента.Записать();
		
	КонецЕсли;
	
	СтруктураДанныхКонтактногоЛица.КонтактноеЛицо = КонтактноеЛицоКонтрагента.Ссылка;
	СтруктураДанныхКонтактногоЛица.CodeOfContact = "" + КонтактноеЛицоКонтрагента.Код;
	
	//НаборЗаписейКонтактнаяИнформация = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	//
	//НаборЗаписейКонтактнаяИнформация.Отбор.Объект.Установить(СтруктураДанныхКонтактногоЛица.КонтактноеЛицо);
	//НаборЗаписейКонтактнаяИнформация.Прочитать();
	//НаборЗаписейКонтактнаяИнформация.Очистить();
	
	//Запись  = НаборЗаписейКонтактнаяИнформация.Добавить();
	
	//Запись.Объект					= СтруктураДанныхКонтактногоЛица.КонтактноеЛицо;
	//Запись.Тип 						= Перечисления.ТипыКонтактнойИнформации.Телефон;
	//Запись.Вид 						= Справочники.ВидыКонтактнойИнформации.ТелефонПользователяСервиса;
	//Запись.CRM_НомерТелефона		= Телефон;
	//Запись.Представление			= Телефон;
	//Запись.Поле3					= Телефон;
	//Запись.CRM_ПолеХраненияНомера	= БоР_ОбщийМодульКлиентСервер.ВЧисло("1" + Телефон);
	//
	//Запись  = НаборЗаписейКонтактнаяИнформация.Добавить();
	//
	//Запись.Объект			= СтруктураДанныхКонтактногоЛица.КонтактноеЛицо;
	//Запись.Тип 				= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	//Запись.Вид 				= Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляЛК_КонтактногоЛицаКонтрагента;;
	//Запись.Поле3			= email;
	//Запись.Представление 	= email;
	//
	//НаборЗаписейКонтактнаяИнформация.Записать();
	
	Возврат СтруктураДанныхКонтактногоЛица;
	
КонецФункции // }Рарус lyumor Мобильное приложение  2017.10.20

#КонецОбласти

#КонецОбласти
