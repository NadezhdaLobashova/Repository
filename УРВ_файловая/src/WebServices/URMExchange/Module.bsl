#Область Задание
Функция AddTask(СтрокаДанных) Экспорт
			
		#Область Инициализация_типов_XDTO_итд
		ПространствоИмен	= ПространствоИменСервиса();
		РезультатСервиса	= СоздатьРезультатСервиса("OperationResult");
		#КонецОбласти
		
		#Область Обработка_входных_данных_и_вывод_диагностики
		ТекущаяДата			= ТекущаяДата();
		
		Если СтрокаДанных.status = 1 Тогда
			Статус = Перечисления.СостоянияЗаданий.Запланировано;
		ИначеЕсли  СтрокаДанных.status = 2 Тогда
			Статус = Перечисления.СостоянияЗаданий.ПустойВыезд;
		ИначеЕсли  СтрокаДанных.status = 3 Тогда
			Статус = Перечисления.СостоянияЗаданий.УслугиОказаны;
		ИначеЕсли  СтрокаДанных.status = 4 Тогда
			Статус = Перечисления.СостоянияЗаданий.Отменено;
		ИначеЕсли  СтрокаДанных.status = 5 Тогда
			Статус = Перечисления.СостоянияЗаданий.Проверено;
		ИначеЕсли  СтрокаДанных.status = 6 Тогда
	        Статус = Перечисления.СостоянияЗаданий.Выдано;
		Иначе
			Статус = Перечисления.СостоянияЗаданий.ПустаяСсылка();
		КонецЕсли;

		
		ПараметрыФункции = Новый Структура;
		
		Попытка
			ПлановаяТрудоемкость = Число(СтрокаДанных.labourInput);
		Исключение
			ПлановаяТрудоемкость = 0;
		КонецПопытки;
		
		СтруктураДанныхДокумента = URMExchangeСервер.ПолучитьДанныеПоGUID(СтрокаДанных.projectID, Новый УникальныйИдентификатор(СтрокаДанных.PartnerGUID), Новый УникальныйИдентификатор(СтрокаДанных.employeeGUID),Новый УникальныйИдентификатор(СтрокаДанных.documentGUID));
		
		ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Контрагент"			, СтруктураДанныхДокумента.Контрагент               , Новый УникальныйИдентификатор(СтрокаДанных.PartnerGUID));
		ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "documentGUID"			, СтруктураДанныхДокумента.ДокументЗадание			, Новый УникальныйИдентификатор(СтрокаДанных.documentGUID));
		ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Сотрудник"			, СтруктураДанныхДокумента.Пользователь		        , Новый УникальныйИдентификатор(СтрокаДанных.employeeGUID));
		ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Проект"			    , СтруктураДанныхДокумента.Проект			        , Новый УникальныйИдентификатор(СтрокаДанных.projectID));
		ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Комментарий"	        , СтрокаДанных.comment	                            ,                                                      );
		ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "СрокС"			    , СтрокаДанных.startDate		                    , '00010101'                                           );
		ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "СрокПо"		        , СтрокаДанных.endDate		                        , '00010101'                                           );
		ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "КрайнийСрок"			, СтрокаДанных.deadline			                    , '00010101'                                           );
		ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "ПлановаяТрудоемкость"	, ПлановаяТрудоемкость			                    , 0                                                    );
		ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Состояние"	        , Статус			                                , Перечисления.СостоянияЗаданий.ПустаяСсылка()         );
		ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Наименование"	        , СтрокаДанных.name			                        ,                                                      );
		ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Номер"	            , СтрокаДанных.namber			                    ,                                                      );
		ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Дата"	                , СтрокаДанных.date			                        , '00010101'                                           );
		ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Проведен"	            , СтрокаДанных.done			                        , Ложь                                                 );
		ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "ПометкаУдаления"	    , СтрокаДанных.deleted			                    , Ложь                                                 );
                                                                         
		ТекстПараметров = ОбщегоНазначения.СформироватьСтрокуИзЗначений(ПараметрыФункции, Символы.ПС, Истина, Ложь, " = ");
		
		МассивЗаписейЖурнала = Неопределено;
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("НомерСообщения"	, 0);
		ПараметрыСообщения.Вставить("ВебСервис"			, "URMExchange");
		ПараметрыСообщения.Вставить("Операция"			, "AddTask");
		ПараметрыСообщения.Вставить("ТекстПараметров"	, ТекстПараметров);
		
		Для каждого Значение Из ПараметрыФункции Цикл
		   ПараметрыСообщения.Вставить(Значение.Ключ, Значение.Значение);
	    КонецЦикла;
		
		Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", "Вызов с параметрами &ПС &ТекстПараметров", ПараметрыСообщения, МассивЗаписейЖурнала);
		#КонецОбласти
		
				
		#Область Проверка_входных_параметров
		Если СтрокаДанных.Date = Дата(1,1,1) Тогда
			ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала,  "Не указана дата создания документа.");
		КонецЕсли;
		
		Если СтрокаДанных.PartnerGUID =  "00000000-0000-0000-0000-000000000000" Тогда
			 ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала,  "Не указан GUID контрагента.");
		ИначеЕсли Не ЗначениеЗаполнено(ПараметрыФункции.Контрагент) Тогда
			 ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала,  "Контрагента с GUID " + СокрЛП(СтрокаДанных.PartnerGUID) + " нет в базе.");
		КонецЕсли;
		 
		Если СтрокаДанных.employeeGUID =  "00000000-0000-0000-0000-000000000000" Тогда
			 ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала,  "Не указан GUID сотрудника.");
		ИначеЕсли Не ЗначениеЗаполнено(ПараметрыФункции.Сотрудник) Тогда
			 ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала,  "Сотрудника с GUID " + СокрЛП(СтрокаДанных.employeeGUID) + " нет в базе.");
		КонецЕсли;
		
		Если СтрокаДанных.projectID =  "00000000-0000-0000-0000-000000000000" Тогда
			 ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала,  "Не указан GUID проекта.");
		ИначеЕсли Не ЗначениеЗаполнено(ПараметрыФункции.Проект) Тогда
			 ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала,  "Проекта с GUID " + СокрЛП(СтрокаДанных.employeeGUID) + " нет в базе.");
		КонецЕсли;
		
		Если СтрокаДанных.documentGUID = "00000000-0000-0000-0000-000000000000" Тогда
			ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала,  "Не указан GUID документа.");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.namber) Тогда
			ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала,  "Не указан номер документа.");
		КонецЕсли;
	
		
		Если Не РезультатСервиса.Result Тогда
			ЗаписатьСообщенияВЖурнал(ПараметрыФункции,СтрокаДанных);
			ВозВрат РезультатСервиса;
		КонецЕсли;
		#КонецОбласти

		#Область Создание_документа_Задание
		
		НачатьТранзакцию();
		
		GUID_Задание  = Новый УникальныйИдентификатор(СтрокаДанных.documentGUID);
		
		Если ТипЗнч(ПараметрыФункции.documentGUID) <> Тип("ДокументСсылка.Задание") Тогда
			
			НовыйДокументЗадание  = Документы.Задание.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НовыйДокументЗадание,ПараметрыФункции);
			НовыйДокументЗадание.GUIDОБД = GUID_Задание;
			
		Иначе
			
			НовыйДокументЗадание = ПараметрыФункции.documentGUID.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(НовыйДокументЗадание,ПараметрыФункции);
			НовыйДокументЗадание.GUIDОБД = GUID_Задание;
			
		КонецЕсли;	
		
		Попытка
			РежимПроведения = РежимПроведенияДокумента.Неоперативный;
			НовыйДокументЗадание.Записать(РежимЗаписиДокумента.Проведение, РежимПроведения);
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = "";
			СообщенияПользователю = ПолучитьСообщенияПользователю();
			Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
				ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + СообщениеПользователю.Текст;
			КонецЦикла;
			РезультатСервиса.Result = Ложь;
			ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала, "Ошибка при проведении документа Задание:" + Символы.ПС + ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписатьСообщенияВЖурнал(ПараметрыФункции,СтрокаДанных);
			ВозВрат РезультатСервиса;
		КонецПопытки;
		Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", "Cоздан документ Задание №" + НовыйДокументЗадание.Номер + " от " + НовыйДокументЗадание.Дата, ПараметрыСообщения, МассивЗаписейЖурнала);
		
		НайтиЗаписьПоДокументуВРС(СтрокаДанных.documentGUID,ПараметрыСообщения);
		
		ЗафиксироватьТранзакцию();
		
		#КонецОбласти
		
		
		Если ЗначениеЗаполнено(РезультатСервиса.Message) Тогда
			РезультатСервиса.Message		= РезультатСервиса.Message + Символы.ПС + "ОК"; 
		Иначе
			РезультатСервиса.Message		= "ОК";
		КонецЕсли;
		
		#Область Диагностика
		ШаблонСообщения = "Успешно обработано. Ответ сервиса:&ПС" + ОбщегоНазначения.ПолучитьXDTOКакСтрокуXML(РезультатСервиса);
		Если ПараметрыСообщения.Свойство("ТекстПараметров") Тогда
			ШаблонСообщения = ШаблонСообщения + "&ПС Параметры:&ПС &ТекстПараметров";
		КонецЕсли;
		Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", ШаблонСообщения, ПараметрыСообщения, МассивЗаписейЖурнала);
		#КонецОбласти
		
	
	ВозВрат РезультатСервиса;
							
КонецФункции

Процедура ЗаписатьСообщенияВЖурнал(ПараметрыФункции, СтрокаДанных)
	НаборЗаписей = РегистрыСведений.ОбъектыURMExchange.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.documentGUID.Установить(Новый УникальныйИдентификатор(СтрокаДанных.documentGUID));
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись_ = НаборЗаписей.Добавить();
	Иначе
		Запись_ = НаборЗаписей[0];
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Запись_,ПараметрыФункции);
	Запись_.documentGUID         = Новый УникальныйИдентификатор(СтрокаДанных.documentGUID);
	Запись_.Контрагент           = Новый УникальныйИдентификатор(СтрокаДанных.PartnerGUID);
	Запись_.Пользователь         = Новый УникальныйИдентификатор(СтрокаДанных.employeeGUID);
	Запись_.Проект               = Новый УникальныйИдентификатор(СтрокаДанных.projectID);
                    
	Попытка 
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;			
КонецПроцедуры	

Процедура НайтиЗаписьПоДокументуВРС(documentGUID,ПараметрыСообщения)
	Если documentGUID = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат
	КонецЕсли;	
	НаборЗаписей = РегистрыСведений.ОбъектыURMExchange.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.documentGUID.Установить(Новый УникальныйИдентификатор(documentGUID));
	НаборЗаписей.Прочитать();
	Для Каждого Запись_ из НаборЗаписей Цикл
		НаборЗаписей.Удалить(Запись_);
	КонецЦикла;
	Попытка
	   НаборЗаписей.Записать();
	   Сообщить__Ж_ВС("Изменение данных в РС ""ОбъектыURMExchange""", "Удалена запись GUID " + documentGUID, ПараметрыСообщения, Неопределено);
   Исключение
	   Сообщить__Ж_ВС("Изменение данных в РС ""ОбъектыURMExchange""", "Не удалось очистить запись GUID " + documentGUID, ПараметрыСообщения, Неопределено);
   КонецПопытки;
КонецПроцедуры	
#КонецОбласти

#Область ПолучениеЧасов
Функция AddHours(ДатаНачалаПериода, ДатаОкончанияПериода, СотрудникGUID, ПроектGUID, КонтрагентGUID)
	
	#Область Инициализация_типов_XDTO_итд
		ПространствоИмен	= ПространствоИменСервиса();
		РезультатСервиса	= СоздатьРезультатСервиса("OperationResult");
	#КонецОбласти
	
	#Область Обработка_входных_данных_и_вывод_диагностики
	
	СтруктураСсылок = ПолучениеСсылкиНаОбъект(СотрудникGUID, ПроектGUID, КонтрагентGUID);
	
	ТекстПараметров = ОбщегоНазначения.СформироватьСтрокуИзЗначений(СтруктураСсылок, Символы.ПС, Истина, Ложь, " = ");
	
	МассивЗаписейЖурнала = Неопределено;
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("НомерСообщения"	, 0);
	ПараметрыСообщения.Вставить("ВебСервис"			, "URMExchange");
	ПараметрыСообщения.Вставить("Операция"			, "AddHours");
	ПараметрыСообщения.Вставить("ТекстПараметров"	, ТекстПараметров);
	
	Для каждого Значение Из СтруктураСсылок Цикл
		ПараметрыСообщения.Вставить(Значение.Ключ, Значение.Значение);
	КонецЦикла;
	
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", "Вызов с параметрами &ПС &ТекстПараметров", ПараметрыСообщения, МассивЗаписейЖурнала);
	#КонецОбласти
	
	
	#Область Проверка_входных_параметров
	Если СотрудникGUID <>  "00000000-0000-0000-0000-000000000000" Тогда
		Если Не ЗначениеЗаполнено(СтруктураСсылок.Сотрудник) Тогда
			 ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала,  "Сотрудника с GUID " + СокрЛП(СотрудникGUID) + " нет в базе УРВ.");
		 КонецЕсли;
	 КонецЕсли;
	 
	 Если ПроектGUID <>  "00000000-0000-0000-0000-000000000000" Тогда
		Если Не ЗначениеЗаполнено(СтруктураСсылок.Проект) Тогда
			 ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала,  "Проекта с GUID " + СокрЛП(ПроектGUID) + " нет в базе УРВ.");
		 Иначе
			 Если СтруктураСсылок.Проект.УчетПоКонтрагентам И КонтрагентGUID <> "00000000-0000-0000-0000-000000000000" Тогда
				Если Не ЗначениеЗаполнено(СтруктураСсылок.Контрагент) Тогда
			        ВыводОшибки(РезультатСервиса, ПараметрыСообщения, МассивЗаписейЖурнала,  "Контрагента с GUID " + СокрЛП(КонтрагентGUID) + " нет в базе УРВ.");
				КонецЕсли;
			КонецЕсли;	
		 КонецЕсли;
	 КонецЕсли;
	 
	 Если Не РезультатСервиса.Result Тогда
			ВозВрат РезультатСервиса;
		КонецЕсли;
    #КонецОбласти 
	
	УсловиеСотрудник = ?(СотрудникGUID =  "00000000-0000-0000-0000-000000000000", "", " (Сотрудник = &Сотрудник ИЛИ &Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))");
	УсловиеПроект    = ?(ПроектGUID =  "00000000-0000-0000-0000-000000000000","", "Проект = &Проект");
	Соединение = ?(УсловиеПроект <> "", " И ","");
	Соединение2 = ?(УсловиеСотрудник <> "" , " И ","");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПринятыеЧасыОстатки.Дата КАК Date,
		|	ПринятыеЧасыОстатки.ЭтапПроекта КАК ЭтапПроекта,
		|	ПринятыеЧасыОстатки.ИдентификаторСтроки КАК NumberGUID,
		|	УчетФактическихДанныхВремя.Описание КАК Description,
		|	ПринятыеЧасыОстатки.ЭтапПроекта.Наименование КАК StageName,
		|	ПринятыеЧасыОстатки.Сотрудник.GUIDОБД КАК EmployeeGUID,
		|	ПринятыеЧасыОстатки.Проект.КонтрагентАбонент КАК Контрагент,
		|	ПринятыеЧасыОстатки.ЧасыОстаток КАК Count
		|ИЗ
		|	РегистрНакопления.ПринятыеЧасы.Остатки(
		|			," + УсловиеПроект + Соединение + УсловиеСотрудник + Соединение2 + "
		|   (Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)) КАК ПринятыеЧасыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УчетФактическихДанных.Время КАК УчетФактическихДанныхВремя
		|		ПО ПринятыеЧасыОстатки.ИдентификаторСтроки = УчетФактическихДанныхВремя.ИдентификаторСтроки
		|			И (УчетФактическихДанныхВремя.Ссылка.Проведен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Date";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ДатаНачалаПериода));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ДатаОкончанияПериода));
	Запрос.УстановитьПараметр("Проект", СтруктураСсылок.Проект);
	Запрос.УстановитьПараметр("Сотрудник", СтруктураСсылок.Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	tableОбъектXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://bear.rarus.ru/OBDExchange", "TakenHoursTable"));
	
	Для Каждого СтрокаРезультат Из РезультатЗапроса Цикл
		Если СтруктураСсылок.Проект.УчетПоКонтрагентам И СтрокаРезультат.Контрагент <> СтруктураСсылок.Контрагент Тогда
			Продолжить;
		КонецЕсли;	
		тОбъектXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://bear.rarus.ru/OBDExchange", "TakenHours"));
		ЗаполнитьЗначенияСвойств(тОбъектXDTO,СтрокаРезультат,,"EmployeeGUID");
		тОбъектXDTO.EmployeeGUID = Строка(СтрокаРезультат.EmployeeGUID);
		тОбъектXDTO.StageGUID = Строка(СтрокаРезультат.ЭтапПроекта.УникальныйИдентификатор());
		тОбъектXDTO.Count     = URMExchangeСервер.СформироватьЧислоСтрокой(СтрокаРезультат.Count);
		tableОбъектXDTO.TakenHours.Добавить(тОбъектXDTO);
	КонецЦикла;

	Возврат tableОбъектXDTO
	
КонецФункции	
#КонецОбласти

#Область Заполнение_ЛУРВ

Функция AddDocTimeTracking(СтрокаДанных) Экспорт
	
	#Область Инициализация_типов_XDTO_итд
	ПространствоИмен	= ПространствоИменСервиса();
	РезультатСервиса	= СоздатьРезультатСервиса("OperationResult");
	#КонецОбласти
	
	#Область Обработка_входных_данных_и_вывод_диагностики
	
	ПараметрыФункции = Новый Структура;
	
	СтруктураДанных = ПолучениеСсылкиНаОбъект(СтрокаДанных.EmployeeGUID,СтрокаДанных.ProjectGUID,СтрокаДанных.PartnerGUID);
	Если ЗначениеЗаполнено(СтрокаДанных.DepartmentGUID) Тогда
	   Подразделение   = Справочники.Подразделения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаДанных.DepartmentGUID));
    Иначе
	   Подразделение = Справочники.Подразделения.ПустаяСсылка();
   КонецЕСли;
	
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Контрагент"			, СтруктураДанных.Контрагент                        , Новый УникальныйИдентификатор(СтрокаДанных.PartnerGUID));
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Сотрудник"			, СтруктураДанных.Сотрудник  		                , Новый УникальныйИдентификатор(СтрокаДанных.employeeGUID));
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Проект"			    , СтруктураДанных.Проект			                , Новый УникальныйИдентификатор(СтрокаДанных.PartnerGUID));
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Подразделение"		, Подразделение	                                    , ?(ЗначениеЗаполнено(СтрокаДанных.DepartmentGUID),Новый УникальныйИдентификатор(СтрокаДанных.DepartmentGUID), ""));
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Комментарий"	        , СтрокаДанных.comment	                            ,                                                      );
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "ДатаНачалаПериода"    , СтрокаДанных.DateStartPeriod		                , '00010101'                                           );
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "ДатаОкончанияПериода"	, СтрокаДанных.DateEndPeriod		                , '00010101'                                           );
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Номер"	            , СтрокаДанных.DocumentNomber			            ,                                                      );
	ЗаполнитьИДобавитьПараметр(ПараметрыФункции, "Дата"	                , СтрокаДанных.DocumentDate			                , '00010101'                                           );
		
	ТекстПараметров = ОбщегоНазначения.СформироватьСтрокуИзЗначений(ПараметрыФункции, Символы.ПС, Истина, Ложь, " = ");
	
	МассивЗаписейЖурнала = Неопределено;
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("НомерСообщения"	, 0);
	ПараметрыСообщения.Вставить("ВебСервис"			, "URMExchange");
	ПараметрыСообщения.Вставить("Операция"			, "AddDocTimeTracking");
	ПараметрыСообщения.Вставить("ТекстПараметров"	, ТекстПараметров);
	
	Для каждого Значение Из ПараметрыФункции Цикл
		ПараметрыСообщения.Вставить(Значение.Ключ, Значение.Значение);
	КонецЦикла;
	
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", "Вызов с параметрами &ПС &ТекстПараметров", ПараметрыСообщения, МассивЗаписейЖурнала);
	#КонецОбласти
	
	#Область Создание_Документа
	//НачатьТранзакцию();
	
	ДокументСсылка = ПолучитьДокументЛУРВ(Строкаданных.documentGUID);
	Если ДокументСсылка = Неопределено Тогда
	   ДокументОбъект = Документы.ЛистУчетаРабочегоВремени.СоздатьДокумент();
    Иначе
	   ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	   ДокументОбъект.Работы.Очистить();
   КонецЕсли;
   
   #Область Шапка
   ДокументОбъект.Сотрудник              = СтруктураДанных.Сотрудник;
   ДокументОбъект.Дата                   = СтрокаДанных.DocumentDate;
   ДокументОбъект.Номер                  = СтрокаДанных.DocumentNomber;
   ДокументОбъект.Проект                 = СтруктураДанных.Проект;
   ДокументОбъект.КонтрагентАбонент      = СтруктураДанных.Контрагент;
   ДокументОбъект.Подразделение          = Подразделение;
   ДокументОбъект.Закрыт                 = СтрокаДанных.Closed;
   ДокументОбъект.Сдан                   = СтрокаДанных.Handed;
   ДокументОбъект.ДатаСдачи              = СтрокаДанных.DateHanded;
   ДокументОбъект.Комментарий            = СтрокаДанных.Comment;
   ДокументОбъект.Ответственный          = ПолучитьОтветственного(СтрокаДанных.ResponsibleGUID);
   ДокументОбъект.ДатаНачалаПериода      = СтрокаДанных.DateStartPeriod;
   ДокументОбъект.ДатаОкончанияПериода   = СтрокаДанных.DateEndPeriod;
   ДокументОбъект.GUID_ОБД               = Новый УникальныйИдентификатор(СтрокаДанных.documentGUID);
   #КонецОбласти
   
   #Область ТабличнаяЧасть
   
   ТаблицаДанных = Новый ТаблицаЗначений;
   ТаблицаДанных.Колонки.Добавить("Индекс"      , Новый ОписаниеТипов("Число"));
   ТаблицаДанных.Колонки.Добавить("EmployeeGUID", Новый ОписаниеТипов("УникальныйИдентификатор"));
   ТаблицаДанных.Колонки.Добавить("JobGUID"     , Новый ОписаниеТипов("УникальныйИдентификатор"));
   
   Индекс = 0;
   Для Каждого СтрокаОбъект Из СтрокаДанных.Works Цикл
	  строкаТаблицаДанных = ТаблицаДанных.Добавить();
	  строкаТаблицаДанных.EmployeeGUID = Новый УникальныйИдентификатор(СтрокаОбъект.EmployeeGUID);
	  строкаТаблицаДанных.JobGUID      = Новый УникальныйИдентификатор(СтрокаОбъект.JobGUID);
	  строкаТаблицаДанных.Индекс       = Индекс;
	  Индекс = Индекс + 1;
  КонецЦикла;
  
  Запрос = Новый Запрос("ВЫБРАТЬ
                        |	ТаблицаДанных.EmployeeGUID КАК EmployeeGUID,
                        |	ТаблицаДанных.JobGUID КАК JobGUID,
                        |	ТаблицаДанных.Индекс КАК Индекс
                        |ПОМЕСТИТЬ ВТ_ВнешниеДанных
                        |ИЗ
                        |	&ТаблицаДанных КАК ТаблицаДанных
                        |;
                        |
                        |////////////////////////////////////////////////////////////////////////////////
                        |ВЫБРАТЬ
                        |	ВТ_ВнешниеДанных.EmployeeGUID КАК EmployeeGUID,
                        |	ВТ_ВнешниеДанных.JobGUID КАК JobGUID,
                        |	ВТ_ВнешниеДанных.Индекс КАК Индекс,
                        |	Пользователи.Ссылка КАК Сотрудник,
                        |	Задание.Ссылка КАК Задание
                        |ИЗ
                        |	ВТ_ВнешниеДанных КАК ВТ_ВнешниеДанных
                        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
                        |		ПО ВТ_ВнешниеДанных.EmployeeGUID = Пользователи.GUIDОБД
                        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задание КАК Задание
                        |		ПО ВТ_ВнешниеДанных.JobGUID = Задание.GUIDОБД");
  Запрос.УстановитьПараметр("ТаблицаДанных",ТаблицаДанных);
  тзРез = Запрос.Выполнить().Выгрузить();
  
  ТаблицаОбъектXDTO = СтрокаДанных.Works;
  Для Индекс = 0 По ТаблицаОбъектXDTO.Количество()-1 Цикл
	  
	  строкаДокумент = ДокументОбъект.Работы.Добавить();
	  ЗаполнитьЗначенияСвойств(строкаДокумент, тзРез[Индекс]);
	  ЭтапПроекта = Справочники.ЭтапыПроектов.ПолучитьСсылку(Новый УникальныйИдентификатор(ТаблицаОбъектXDTO[Индекс].StageGUID));
	  Если ЗначениеЗаполнено(ЭтапПроекта.Код) Тогда
	     строкаДокумент.ЭтапПроекта = ЭтапПроекта;
	  КонецЕсли;
	  строкаДокумент.Дата                   = ТаблицаОбъектXDTO[Индекс].DateWork;
	  строкаДокумент.ВремяНачала            = ТаблицаОбъектXDTO[Индекс].StartTime;
	  строкаДокумент.ВремяОкончания         = ТаблицаОбъектXDTO[Индекс].EndTime;
	  строкаДокумент.КоличествоЧасов        = URMExchangeСервер.СформироватьЧислоСтрокой(ТаблицаОбъектXDTO[Индекс].Hours);
	  строкаДокумент.КоличествоЧасовПринято = URMExchangeСервер.СформироватьЧислоСтрокой(ТаблицаОбъектXDTO[Индекс].TakenHours);
	  строкаДокумент.Описание               = ТаблицаОбъектXDTO[Индекс].Description;
	  строкаДокумент.ИдентификаторСтроки    = ТаблицаОбъектXDTO[Индекс].NumberGUID;
	  строкаДокумент.Время                  = ЧасыВоВремя(строкаДокумент.КоличествоЧасов);
	  
  КонецЦикла;
  
 #КонецОбласти
 
 Попытка 
	 ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	 РезультатСервиса.Message = "Проведен документ ЛУРВ №" + ДокументОбъект.Номер + " от " + ДокументОбъект.Дата;
 Исключение
	 ДокументОбъект.Записать();
	 РезультатСервиса.Message = "Записан документ ЛУРВ №" + ДокументОбъект.Номер + " от " + ДокументОбъект.Дата;
КонецПопытки;

Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", "Cоздан документ ЛУРВ №" + ДокументОбъект.Номер + " от " + ДокументОбъект.Дата, ПараметрыСообщения, МассивЗаписейЖурнала);
				
//ЗафиксироватьТранзакцию();
Возврат РезультатСервиса
	 
#КонецОбласти
		
КонецФункции

Функция ПолучитьДокументЛУРВ(GUID)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЛистУчетаРабочегоВремени.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ЛистУчетаРабочегоВремени КАК ЛистУчетаРабочегоВремени
	                      |ГДЕ
	                      |	ЛистУчетаРабочегоВремени.GUID_ОБД = &GUID_ОБД");
	Запрос.УстановитьПараметр("GUID_ОБД", Новый УникальныйИдентификатор(GUID));
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено
	КонецЕсли;
	Возврат Рез.Выгрузить()[0].Ссылка
КонецФункции

Функция ПолучитьОтветственного(GUID)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Пользователи.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |ГДЕ
	                      |	Пользователи.GUIDОБД = &GUIDОБД");
	Запрос.УстановитьПараметр("GUIDОБД",Новый УникальныйИдентификатор(GUID));
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка()
	КонецЕсли;
	Возврат Рез.Выгрузить()[0].Ссылка
КонецФункции

Функция ЧасыВоВремя(Часы, ДатаВремя = '00010101')
	Время = ДатаВремя + Часы * 3600;
	Возврат ?(Секунда(Время) < 30, НачалоМинуты(Время), КонецМинуты(Время) + 1);
КонецФункции

#КонецОбласти

Функция ПолучениеСсылкиНаОбъект(СотрудникGUID, ПроектGUID, КонтрагентGUID)
	
	СтруктураДанных = Новый Структура("Сотрудник, Проект, Контрагент");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Проекты.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Проекты КАК Проекты
	                      |ГДЕ
	                      |	Проекты.GUIDОБД ПОДОБНО &GUIDПроект
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Пользователи.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |ГДЕ
	                      |	Пользователи.GUIDОБД = &GUIDПользователь
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	Абоненты.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Абоненты КАК Абоненты
	                      |ГДЕ
	                      |	Абоненты.GUIDОБД = &GUIDАбонент");
	Запрос.УстановитьПараметр("GUIDПроект"       , ПроектGUID);
	Запрос.УстановитьПараметр("GUIDПользователь" , Новый УникальныйИдентификатор(СотрудникGUID));
	Запрос.УстановитьПараметр("GUIDАбонент"      , Новый УникальныйИдентификатор(КонтрагентGUID));
	Пакет = Запрос.ВыполнитьПакет();
	
	тзСотрудник = Пакет[1].Выгрузить();
	СтруктураДанных.Сотрудник = ?(тзСотрудник.Количество() =0 , Неопределено, тзСотрудник[0].Ссылка);
	
	тзПроект = Пакет[0].Выгрузить();
	СтруктураДанных.Проект = ?(тзПроект.Количество() =0 , Неопределено, тзПроект[0].Ссылка);
	
	Если НЕ СтруктураДанных.Проект = Неопределено Тогда
		Если СтруктураДанных.Проект.УчетПоКонтрагентам Тогда
			тзКонтрагент = Пакет[2].Выгрузить();
	        СтруктураДанных.Контрагент = ?(тзКонтрагент.Количество() =0 , Неопределено, тзКонтрагент[0].Ссылка);
		КонецЕсли;	
	КонецЕсли;	
	
    Возврат СтруктураДанных	
	
КонецФункции

Процедура ВыводОшибки(РезультатСервиса = Неопределено, ПараметрыСообщения, МассивЗаписейЖурнала, ТекстОшибки, ТехническаяИнформация = "") Экспорт
	ТекстСообщения	= ОбщегоНазначения.СформироватьТекстСообщения(ТекстОшибки, ПараметрыСообщения);
	Если РезультатСервиса <> Неопределено Тогда
		РезультатСервиса.Result		= Ложь;
		РезультатСервиса.Message	= РезультатСервиса.Message + Символы.ПС + ТекстСообщения;
	КонецЕсли;
	ПараметрыСообщения.Вставить("Ошибка"				, ТекстСообщения);
	ПараметрыСообщения.Вставить("ТехническаяИнформация"	, ТехническаяИнформация);
	ШаблонСообщения = "Ошибка: &Ошибка &ПС &ТехническаяИнформация";
	Если ПараметрыСообщения.Свойство("ТекстПараметров") Тогда
		 ШаблонСообщения = ШаблонСообщения + " &ПС Параметры: &ПС  &ТекстПараметров";
	КонецЕсли;
	Сообщить__Ж_ВС("Вызов Веб-сервиса &ВебСервис.&Операция", ШаблонСообщения, ПараметрыСообщения, МассивЗаписейЖурнала, УровеньЖурналаРегистрации.Предупреждение);
КонецПроцедуры

Функция ПространствоИменСервиса() Экспорт
	ВозВрат Вычислить("Метаданные.WebСервисы.URMExchange.ПространствоИмен");
КонецФункции

Функция СоздатьРезультатСервиса(Тип = "OperationResult") Экспорт
	ПространствоИмен	= ПространствоИменСервиса();
	ТипРезультат		= ФабрикаXDTO.Тип(ПространствоИмен, Тип);
 	РезультатСервиса	= ФабрикаXDTO.Создать(ТипРезультат);
	РезультатСервиса.Message					= "";
	РезультатСервиса.Result						= Истина;
	ВозВрат РезультатСервиса;
КонецФункции

Процедура ЗаполнитьНеопределенное(Значение, ЧемЗаполнить = "") Экспорт
	Если Значение = Неопределено Тогда
		Значение = ЧемЗаполнить;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьИДобавитьПараметр(ПараметрыФункции, Имя, Значение, ЧемЗаполнить = "") Экспорт
	ЗаполнитьНеопределенное(Значение, ЧемЗаполнить);
	ПараметрыФункции.Вставить(Имя, Значение);
КонецПроцедуры

Процедура Сообщить__Ж_ВС(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения = Неопределено, МассивЗаписейЖурнала, Знач УровеньЖурнала = Неопределено) Экспорт
	Сообщить__Ж(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения, УровеньЖурнала);	
КонецПроцедуры

#Область Короткие_вызовы_процедур_сообщения

Процедура Сообщить__С(ШаблонСообщения, ПараметрыСообщения = Неопределено) Экспорт
	ОбщегоНазначения.Сообщить_С(ШаблонСообщения, ПараметрыСообщения, Неопределено);
КонецПроцедуры

Процедура Сообщить__Ж(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения = Неопределено, Знач УровеньЖурнала = Неопределено) Экспорт
	ОбщегоНазначения.Сообщить_Ж(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения, УровеньЖурнала);
КонецПроцедуры

Процедура Сообщить__СЖ(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения = Неопределено, Знач УровеньЖурнала = Неопределено) Экспорт
	ОбщегоНазначения.Сообщить_СЖ(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения, УровеньЖурнала);
КонецПроцедуры

Процедура Сообщить__ЖО(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения = Неопределено) Экспорт
	ОбщегоНазначения.Сообщить_ЖО(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения);
КонецПроцедуры

Процедура Сообщить__СЖО(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения = Неопределено) Экспорт
	ОбщегоНазначения.Сообщить_СЖО(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения);
КонецПроцедуры

Процедура Сообщить__ЖП(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения = Неопределено) Экспорт
	ОбщегоНазначения.Сообщить_ЖП(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения);
КонецПроцедуры

Процедура Сообщить__СЖП(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения = Неопределено) Экспорт
	ОбщегоНазначения.Сообщить_СЖП(ИмяСобытия, ШаблонСообщения, ПараметрыСообщения);
КонецПроцедуры
#КонецОбласти
