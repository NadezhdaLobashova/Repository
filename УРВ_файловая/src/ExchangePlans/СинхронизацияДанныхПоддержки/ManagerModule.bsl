#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ПриПолученииОписанияВариантаНастройки(ОписаниеВариантаНастройки, ИдентификаторНастройки, ПараметрыВарианта) Экспорт
	
	//Если мы не указываем в настройках версию плана обмена, то и в отборах она не нужна
	ОписаниеВариантаНастройки.ЗначенияПоУмолчаниюКорреспондента.Вставить("ВерсияФорматаОбмена", "1.1");
	ОписаниеВариантаНастройки.Вставить("ИмяФормыЗначенийПоУмолчаниюКорреспондента", "ФормаНастройкиУзлаБазыКорреспондента");
	ОписаниеВариантаНастройки.Отборы.Вставить("ВерсияФорматаОбмена", "1.1");
	ОписаниеВариантаНастройки.ОтборыКорреспондента.Вставить("ВерсияФорматаОбмена", "1.1");
	
КонецПроцедуры
	
// Заполняет настройки, влияющие на использование плана обмена.
// 
// Параметры:
//  Настройки - Структура - настройки плана обмена по умолчанию, см. ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию,
//                          описание возвращаемого значения функции.
//
Процедура ПриПолученииНастроек(Настройки) Экспорт
	
	Настройки.ЭтоПланОбменаXDTO = Истина;
	Настройки.ФорматОбмена = "http://www.1cfresh.com/sd/data";
	
	ВерсииФормата = Новый Соответствие;
	ПолучитьВерсииФорматаОбмена(ВерсииФормата);
	Настройки.ВерсииФорматаОбмена = ВерсииФормата;
	Настройки.Алгоритмы.ПриПолученииОписанияВариантаНастройки = Истина;
	
КонецПроцедуры

// Позволяет переопределить настройки плана обмена, заданные по умолчанию.
// Значения настроек по умолчанию см. в ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию.
// 
// Параметры:
//	Настройки - Структура - содержит настройки по умолчанию.
//
Процедура ОпределитьНастройки(Настройки) Экспорт
	
	Настройки.ПредупреждатьОНесоответствииВерсийПравилОбмена = Ложь;
	
КонецПроцедуры

// Возвращает имя файла настроек по умолчанию;
// В этот файл будут выгружены настройки обмена для приемника;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 255 - имя файла по умолчанию для выгрузки настроек обмена данными.
//
Функция ИмяФайлаНастроекДляПриемника() Экспорт
	
	Возврат НСтр("ru = 'Синхронизация с менеджером сервиса'");
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена.
// 
Функция НастройкаОтборовНаУзле(ВерсияКорреспондента, ИмяФормы) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру значений по умолчанию для узла;
// Структура настроек повторяет состав реквизитов шапки плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена.
// 
Функция ЗначенияПоУмолчаниюНаУзле(ВерсияКорреспондента, ИмяФормы) Экспорт
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("ВерсияФорматаОбмена", "1.1");
	ЗначенияПоУмолчанию.Вставить("Сервис", Справочники.Сервисы.ПустаяСсылка());
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле().
// 
// Возвращаемое значение:
//  Строка - строка описания ограничений миграции данных для пользователя.
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента) Экспорт
	
	ТекстОписания = НСтр("ru='Синхронизируются данные по:
	|	- Абонентам
	|	- Пользователям сервиса
	|	- Приложениям
	|	- Подпискам на тарифы
	|	- Взаимоотношения абонентов
	|	- Взаимосвязи абонентов и пользователей
	|	- Взаимосвязи пользователей и приложений'");
	
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает строку описания значений по умолчанию для пользователя;
// Прикладной разработчик на основе установленных значений по умолчанию на узле должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзле().
// 
// Возвращаемое значение:
//  Строка - строка описания для пользователя значений по умолчанию.
//
Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента) Экспорт
	
	ТекстОписания = СтрШаблон(НСтр("ru='Обмен осуществляется с сервисом: %1%2Версия формата обмена: %3'"), 
		?(ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.Сервис), ЗначенияПоУмолчаниюНаУзле.Сервис, НСтр("ru='не указан'")),
		Символы.ПС,
		?(ПустаяСтрока(ЗначенияПоУмолчаниюНаУзле.ВерсияФорматаОбмена), НСтр("ru='не указана'"), ЗначенияПоУмолчаниюНаУзле.ВерсияФорматаОбмена));
		
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает представление команды создания нового обмена данными.
//
// Возвращаемое значение:
//  Строка - представление команды, выводимое в пользовательском интерфейсе.
//
// Например:
//	Возврат НСтр("ru = 'Создать обмен в распределенной информационной базе'");
//
Функция ЗаголовокКомандыДляСозданияНовогоОбменаДанными() Экспорт
	
	Возврат НСтр("ru = 'Синхронизация с менеджером сервиса'");
	
КонецФункции

// Определяет, будет ли использоваться помощник для создания новых узлов плана обмена.
//
// Возвращаемое значение:
//  Булево - признак использования помощника.
//
Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает пользовательскую форму для создания начального образа базы.
// Эта форма будет открыта после завершения настройки обмена с помощью помощника.
// Для планов обмена не РИБ функция возвращает пустую строку
//
// Возвращаемое значение:
//  Строка - имя формы
//
// Например:
//	Возврат "ПланОбмена._ДемоРаспределеннаяИнформационнаяБаза.Форма.ФормаСозданияНачальногоОбраза";
//
Функция ИмяФормыСозданияНачальногоОбраза() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена.
//
Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	
	Возврат Результат;
	
КонецФункции

// Возвращает возможность использование данного плана обмена в модели сервиса.
 //
Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Предназначена для точной идентификации имени этой конфигурации при настройке 
// синхронизации данных в модели сервиса.
// В случае если данная конфигурация разработана на основе оригинальной конфигурации
// и должна поддерживать обмен с другими прикладными решениями с помощью плана обмена,
// взятого из оригинальной конфигурации, то следует вернуть имя оригинальной конфигурации.
// Например, для конфигурации МояБухгалтерия, которая является доработанной конфигурацией БухгалтерияПредприятия,
// следует вернуть БухгалтерияПредприятия.
//
// Используется только для планов обмена в модели сервиса.
//
// Возвращаемое значение:
//  Строка - имя этой или другой конфигурации, от имени которой выполняется обмен данными
//           (имя конфигурации как задано в метаданных).
//
// Пример:
//  Возврат "БухгалтерияПредприятия";
//
Функция ИмяКонфигурацииИсточника() Экспорт
 
	Возврат Метаданные.Имя;
 
КонецФункции

// Возвращает признак того, что план обмена поддерживает обмен данными с корреспондентом, работающим в модели сервиса.
// Если признак установлен, то становится возможным создать обмен данными когда эта информационная база
// работает в локальном режиме, а корреспондент в модели сервиса.
//
Функция КорреспондентВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Функция возвращает имя обработки выгрузки данных
//
Функция ИмяОбработкиВыгрузки() Экспорт
    
    // Функция не будет использоваться. Вызывается только в обработке КОИБ, которая не применяется для данного плана обмена.
	Возврат "";
	
КонецФункции

// Функция возвращает имя обработки загрузки данных
//
Функция ИмяОбработкиЗагрузки() Экспорт
    
    // Функция не будет использоваться. Вызывается только в обработке КОИБ, которая не применяется для данного плана обмена.
	Возврат "";
	
КонецФункции

// Возвращает краткую информацию по обмену, выводимую при настройке синхронизации данных.
//
Функция КраткаяИнформацияПоОбмену() Экспорт
	
	ПоясняющийТекст = НСтр("ru = 'Позволяет синхронизировать данные между конфигурациями ""Менеджер сервиса"" и ""Управление службой поддержки"".
	|При синхронизации используется универсальный формат XDTO. Синхронизация данных выполняется в двустороннем режиме на уровне документов и справочной информации.'");
	
	Возврат ПоясняющийТекст;
	
КонецФункции

// Возвращаемое значение: Строка - Ссылка на подробную информацию по настраиваемой синхронизации,
// в виде гиперссылки или полного пути к форме.
//
Функция ПодробнаяИнформацияПоОбмену() Экспорт
    
    Возврат "ПланОбмена.СинхронизацияДанныхПоддержки.Форма.ПодробнаяИнформация";
    
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы через подключение к корреспонденту через внешнее соединение или веб-сервис.

Функция ОбщиеДанныеУзлов(ВерсияКорреспондента, ИмяФормы) Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена базы корреспондента с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена базы корреспондента.
// 
Функция НастройкаОтборовНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру значений по умолчанию для узла базы корреспондента;
// Структура настроек повторяет состав реквизитов шапки плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента.
//
Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы) Экспорт
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("ВерсияФорматаОбмена", "1.1");
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных отборов на узле базы корреспондента должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции НастройкаОтборовНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка - строка описания ограничений миграции данных для пользователя.
//
Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле, ВерсияКорреспондента) Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает строку описания значений по умолчанию для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных значений по умолчанию на узле базы корреспондента должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка - строка описания для пользователя значений по умолчанию.
//
Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента) Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(ВерсияКорреспондента) Экспорт
	
	Возврат "";
	
КонецФункции

#Область КонстантыИПроверкаПараметровУчета

Функция ПояснениеДляНастройкиПараметровУчета() Экспорт
	
	Возврат "";
	
КонецФункции

Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Обработчик события при подключении к корреспонденту.
// Событие возникает при успешном подключении к корреспонденту и получении версии конфигурации корреспондента
// при настройке обмена с использованием помощника через прямое подключение
// или при подключении к корреспонденту через Интернет.
// В обработчике можно проанализировать версию корреспондента и,
// если настройка обмена не поддерживается с корреспондентом указанной версии, то вызвать исключение.
//
//  Параметры:
// ВерсияКорреспондента (только чтение) - Строка - версия конфигурации корреспондента, например, "2.1.5.1".
//
Процедура ПриПодключенииККорреспонденту(ВерсияКорреспондента) Экспорт
	
	Если ВерсияКорреспондента = "0.0.0.0" Тогда
		ВерсияКорреспондента = "1.0.40.32";
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияКорреспондента, "1.0.40.32") < 0 Тогда
		
		ВызватьИсключение НСтр("ru = 'Настройка синхронизации данных поддерживается только с конфигурацией
			|""Менеджер сервиса"" версии 1.0.40.32 и выше.'"
		);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события при отправке данных узла-отправителя.
// Событие возникает при отправке данных узла-отправителя из текущей базы в корреспондент,
// до помещения данных узла в сообщения обмена.
// В обработчике можно изменить отправляемые данные или вовсе отказаться от отправки данных узла.
//
//  Параметры:
// Отправитель - ПланОбменаОбъект, Структура - узел плана обмена, от имени которого выполняется отправка данных.
// Игнорировать - Булево - признак отказа от выгрузки данных узла.
//                         Если в обработчике установить значение этого параметра в Истина,
//                         то отправка данных узла выполнена не будет. Значение по умолчанию - Ложь.
//
Процедура ПриОтправкеДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
КонецПроцедуры

// Обработчик события при получении данных узла-отправителя.
// Событие возникает при получении данных узла-отправителя,
// когда данные узла прочитаны из сообщения обмена, но не записаны в информационную базу.
// В обработчике можно изменить полученные данные или вовсе отказаться от получения данных узла.
//
//  Параметры:
// Отправитель - ПланОбменаОбъект, Структура - узел плана обмена, от имени которого выполняется получение данных.
// Игнорировать - Булево - признак отказа от получения данных узла.
//                         Если в обработчике установить значение этого параметра в Истина,
//                         то получение данных узла выполнена не будет. Значение по умолчанию - Ложь.
//
Процедура ПриПолученииДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределяемаяНастройкаДополненияВыгрузки

// Возвращает режим запуска, в случае интерактивного инициирования синхронизации.
// Возвращаемые значения:
//  АвтоматическаяСинхронизация Или ИнтерактивнаяСинхронизация.
//  На основании этих значений запускается либо помощник интерактивного обмена, либо автообмен.
//
Функция РежимЗапускаСинхронизацииДанных(УзелИнформационнойБазы) Экспорт
    
    Возврат "";
	
КонецФункции

// Возвращает флаг того, что при обмене в модели сервиса будет использована дополнительная настройка выгрузки.
//
// Возвращаемое значение: 
//     Булево - Истина, если необходимо вызывать НастроитьИнтерактивнуюВыгрузкуВМоделиСервиса 
//              для определения настроек для данного узла.
//
Функция НастраиватьИнтерактивнуюВыгрузкуВМоделиСервиса(Знач УзелИнформационнойБазы) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает сценарий работы помощника интерактивного сопоставления.
//
// Возвращаемое значение:
//   - НеОтправлять, ИнтерактивнаяСинхронизацияДокументов, ИнтерактивнаяСинхронизацияСправочников либо пустую строку. 
//
Функция ИнициализироватьСценарийРаботыПомощникаИнтерактивногоОбмена(УзелИнформационнойБазы) Экспорт

    Возврат "";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Функция ПолучитьПредставлениеКонфигурацииКорреспондента(КраткоеИмяКонфигурации) Экспорт
	КраткоеИмяКонфигурации = СокрЛП(КраткоеИмяКонфигурации);
	Если КраткоеИмяКонфигурации = "МенеджерСервиса" Тогда
		Возврат НСтр("ru = 'Менеджер сервиса'");
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ОбменЧерезФормат

Функция ФорматОбмена(ВерсияФормата) Экспорт
    
    Если ВерсияФормата = "1.0.1.1" Тогда
        Возврат "http://v8.1c.ru/edi/edi_stnd/ServiceManagerData";
    Иначе
        Возврат "http://www.1cfresh.com/sd/data";
    КонецЕсли;
	
КонецФункции

Процедура ПолучитьВерсииФорматаОбмена(ВерсииФормата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СинхронизацияДанныхПоддержки.ПутьКМенеджеруОбмена
		|ИЗ
		|	ПланОбмена.СинхронизацияДанныхПоддержки КАК СинхронизацияДанныхПоддержки
		|ГДЕ
		|	СинхронизацияДанныхПоддержки.ПутьКМенеджеруОбмена <> """"";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбработкаДляОтладки = ВнешниеОбработки.Создать(Выборка.ПутьКМенеджеруОбмена);
		ВерсииФормата.Вставить("1.0.1.1", ОбработкаДляОтладки);
		ВерсииФормата.Вставить("1.0", ОбработкаДляОтладки);
		ВерсииФормата.Вставить("1.1", ОбработкаДляОтладки);
	Иначе
		ВерсииФормата.Вставить("1.0.1.1", МенеджерОбменаДаннымиСервиса_1_0);
        ВерсииФормата.Вставить("1.0", МенеджерОбменаДаннымиСервиса_1_0);
        ВерсииФормата.Вставить("1.1", МенеджерОбменаДаннымиСервиса_1_1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли