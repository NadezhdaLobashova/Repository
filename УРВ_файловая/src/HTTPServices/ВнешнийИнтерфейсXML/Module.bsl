
Функция ВерсияПолучить(Запрос)
    
    Ответ = Новый HTTPСервисОтвет(200);
    ОбъектXDTO = ВнешнийИнтерфейс.Версия();
    Ответ.УстановитьТелоИзСтроки(ОбъектXDTO.version);
    
    Возврат Ответ;
    
КонецФункции

Функция МодельПолучить(Запрос)
    
    Ответ = Новый HTTPСервисОтвет(200);
    МодельXDTO = ФабрикаXDTO.ЭкспортМоделиXDTO(ВнешнийИнтерфейс.ПространствоИмен());
    ДобавитьЗаголовкиДанных(Ответ);
    Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(МодельXDTO));        
    
    Возврат Ответ;
    
КонецФункции

#Область ТипОбъекта

Функция ТипОбъектаСписок(Запрос)
    
    Если Не ТолькоДопустимыеПараметры(Запрос, "filter, columns, limit") Тогда
        Возврат ОтветПлохойЗапрос(НСтр("ru='Неизвестный параметр запроса.'")); 	                               
    КонецЕсли;
    
    ТипОбъекта = Запрос.ПараметрыURL["ТипОбъекта"];
    
    Если НРег(ТипОбъекта) = НРег("CurrentUser") Тогда
        ЗапросXDTO = ВнешнийИнтерфейс.СоздатьОбъект("GetCurrentUserRequest");
        ОтветXDTO = ВнешнийИнтерфейс.ОбработатьУниверсальноеСообщение(ЗапросXDTO);
        Ответ = Новый HTTPСервисОтвет(200);
        ДобавитьЗаголовкиДанных(Ответ);
        Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO));
        Возврат Ответ;
    ИначеЕсли НРег(ТипОбъекта) = НРег("ServiceUsersInfoList") Тогда
        Фильтр = Запрос.ПараметрыЗапроса.Получить("filter");
        Если Фильтр = Неопределено Тогда
            Возврат ОтветПлохойЗапрос(НСтр("ru='Не задан фильтр.'"));
        КонецЕсли;
        ЗапросXDTO = ВнешнийИнтерфейс.СоздатьОбъект("GetServiceUserInfoListRequest");
        Условия = СтрРазделить(Фильтр, ";", Ложь);
        Попытка
            Для каждого Условие Из Условия Цикл
                ВидыСравнений = СтрРазделить("LIKE;=", ";", Ложь);
                Для каждого Сравнение Из ВидыСравнений Цикл
                    НачалоСравнения = Найти(Условие, Сравнение);
                    Если НачалоСравнения = 0 Тогда
                        Продолжить;
                    КонецЕсли;
                    Поле = Лев(Условие, НачалоСравнения - 1);
                    СтрокаЗначения = Сред(Условие, НачалоСравнения + СтрДлина(Сравнение));
                    Значение = ЗначениеИзСтроки(ТипОбъекта, Поле, СтрокаЗначения);
                    Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Поле) Тогда
                        ОбъектXDTO = ВнешнийИнтерфейс.СоздатьОбъект("DynamicAttribute");
                        ОбъектXDTO.objectId = ВнешнийИнтерфейс.СоздатьObjectId("DynamicAttribute", Поле); 
                        Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
                            ОбъектЗначениеXDTO = ВнешнийИнтерфейс.СоздатьОбъект(Значение.type);
                            ОбъектЗначениеXDTO.objectId = Значение;
                            ОбъектXDTO.objectValue = ОбъектЗначениеXDTO;
                        Иначе
                            ОбъектXDTO.simpleValue = Значение;
                        КонецЕсли;
                        ЗапросXDTO.dynamicAttributes.Добавить(ОбъектXDTO);
                    Иначе
                        ЗапросXDTO[Поле] = ЗначениеИзСтроки(ТипОбъекта, Поле, СтрокаЗначения);
                    КонецЕсли; 
                КонецЦикла;
            КонецЦикла; 
        Исключение
            Возврат ОтветПлохойЗапрос(НСтр("ru='Некорректно задан фильтр.'"));
        КонецПопытки;
        ОтветXDTO = ВнешнийИнтерфейс.ОбработатьУниверсальноеСообщение(ЗапросXDTO);
    Иначе
        ТипОбъекта = Лев(ТипОбъекта, СтрДлина(ТипОбъекта)-1);
        ЗапросXDTO = ВнешнийИнтерфейс.СоздатьОбъект("GetListRequest");
        ЗапросXDTO.type = ТипОбъекта;
        ПараметрыXDTO = ВнешнийИнтерфейс.СоздатьОбъект("ListQuery");
        УстановитьЗначенияСпискаXDTO(ПараметрыXDTO.columns, Запрос.ПараметрыЗапроса.Получить("columns"));
        КоличествоЗаписей = Запрос.ПараметрыЗапроса.Получить("limit");
        Если КоличествоЗаписей <> Неопределено Тогда 
            Попытка
                КоличествоЗаписей = Число(КоличествоЗаписей);
            Исключение
                Возврат ОтветПлохойЗапрос(НСтр("ru='Лимит записей должен быть числом.'"));
            КонецПопытки;
        КонецЕсли;
        Если КоличествоЗаписей <> Неопределено Тогда
            ПараметрыXDTO.limit = КоличествоЗаписей;
        КонецЕсли;
        Если Не ЭтоДопустимыйТип(ТипОбъекта) Тогда
            Возврат ОтветНедопустимыйТипОбъекта();
        КонецЕсли;
        Фильтр = Запрос.ПараметрыЗапроса.Получить("filter");
        Попытка
            Если Фильтр <> Неопределено Тогда
                Условия = СтрРазделить(Фильтр, ";", Ложь);
                ВидыСравнений = СтрРазделить("IN HIERARCHY;IN;LIKE;=;<>;>=;<=;>;<", ";", Ложь);
                Для каждого Условие Из Условия Цикл
                    Для каждого Сравнение Из ВидыСравнений Цикл
                        НачалоСравнения = Найти(Условие, Сравнение);
                        Если НачалоСравнения <> 0 Тогда
                            Прервать;
                        КонецЕсли;
                    КонецЦикла; 
                    УсловиеXDTO = ВнешнийИнтерфейс.СоздатьОбъект("ListFilter");
                    Поле = Лев(Условие, НачалоСравнения - 1);
                    УсловиеXDTO.property = Поле;
                    УсловиеXDTO.comparisonOperator = Сравнение;
                    СтрокаЗначения = Сред(Условие, НачалоСравнения + СтрДлина(Сравнение));
                    УсловиеXDTO.value = ЗначениеИзСтроки(ТипОбъекта, Поле, СтрокаЗначения);
                    ПараметрыXDTO.filter.Добавить(УсловиеXDTO);
                КонецЦикла; 
            КонецЕсли;
        Исключение
            Возврат ОтветПлохойЗапрос(НСтр("ru='Некорректно задан фильтр.'"));
        КонецПопытки;
        ЗапросXDTO.query = ПараметрыXDTO;
        ОтветXDTO = ВнешнийИнтерфейс.ОбработатьУниверсальноеСообщение(ЗапросXDTO);
    КонецЕсли;    
    
    Если ВнешнийИнтерфейс.ПроверитьТип(ОтветXDTO, "Error") Тогда
        Ответ = Новый HTTPСервисОтвет(400); // Bad Request (плохой, негодный запрос)
    Иначе
        Ответ = Новый HTTPСервисОтвет(200); // OK (хорошо)
    КонецЕсли;
    
    ДобавитьЗаголовкиДанных(Ответ);
    Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO));
    
    Возврат Ответ;
    
КонецФункции

Функция ТипОбъектаДобавить(Запрос)
    
    ТипОбъекта = Запрос.ПараметрыURL["ТипОбъекта"];
    Если Не ЭтоДопустимыйТип(ТипОбъекта) Тогда
        Возврат ОтветНедопустимыйТипОбъекта();
    КонецЕсли;
    
    ЗапросXDTO = ВнешнийИнтерфейс.СоздатьОбъект("PostRequest");
    Объект = Запрос.ПолучитьТелоКакСтроку();
    
    Попытка
        ОбъектXDTO = ОбъектXDTOИзСтроки(Объект);
    Исключение
        ТекстОшибки = ОписаниеОшибки();
        ЗаписьЖурналаРегистрации(НСтр("ru='Внешний интерфейс'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки); 
        Возврат ОтветНекорректныеДанные(?(ВнешнийИнтерфейсПовтИсп.РежимОтладки(), ТекстОшибки, Неопределено));
    КонецПопытки;
    
    ЗапросXDTO.objects.Добавить(ОбъектXDTO);
    
    Операция = Запрос.ПараметрыЗапроса.Получить("action");
    Если НРег(Операция) = НРег("StartProcess") Тогда
        ЗапросXDTO.Action = "StartProcess";
    КонецЕсли;
     
    ОтветXDTO = ВнешнийИнтерфейс.ОбработатьУниверсальноеСообщение(ЗапросXDTO);
    Ответ = Новый HTTPСервисОтвет(200);
    ДобавитьЗаголовкиДанных(Ответ);
    Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO));
    
    Возврат Ответ;
    
КонецФункции

Функция ТипОбъектаОбновить(Запрос)
    
    ТипОбъекта = Запрос.ПараметрыURL["ТипОбъекта"];
    Если Не ЭтоДопустимыйТип(ТипОбъекта) Тогда
        Возврат ОтветНедопустимыйТипОбъекта();
    КонецЕсли;
    
    ЗапросXDTO = ВнешнийИнтерфейс.СоздатьОбъект("PutRequest");
    Объект = Запрос.ПолучитьТелоКакСтроку();
    
    Попытка
        ОбъектXDTO = ОбъектXDTOИзСтроки(Объект);
    Исключение
        ТекстОшибки = ОписаниеОшибки();
        ЗаписьЖурналаРегистрации(НСтр("ru='Внешний интерфейс'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки); 
        Возврат ОтветНекорректныеДанные(?(ВнешнийИнтерфейсПовтИсп.РежимОтладки(), ТекстОшибки, Неопределено));
    КонецПопытки;
    
    ЗапросXDTO.objects.Добавить(ОбъектXDTO);
    
    ОтветXDTO = ВнешнийИнтерфейс.ОбработатьУниверсальноеСообщение(ЗапросXDTO);
    Ответ = Новый HTTPСервисОтвет(200);
    ДобавитьЗаголовкиДанных(Ответ);
    Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO));
    
    Возврат Ответ;
    
КонецФункции

#КонецОбласти

#Область ТипОбъектаИдентификатор

Функция ТипОбъектаИдентификаторПолучить(Запрос)
    
    ТипОбъекта = Запрос.ПараметрыURL["ТипОбъекта"];
    Если Не ЭтоДопустимыйТип(ТипОбъекта) Тогда
        Возврат ОтветНедопустимыйТипОбъекта();
    КонецЕсли;
    
    Идентификатор = Запрос.ПараметрыURL["Идентификатор"];
    
    Если Идентификатор = НРег("new") Тогда
        ЗапросXDTO = ВнешнийИнтерфейс.СоздатьОбъект("GetNewRequest");
        ЗапросXDTO.type = ТипОбъекта;
    Иначе
        Попытка
        	УИД = Новый УникальныйИдентификатор(Идентификатор);
        Исключение
            Возврат ОтветНекорректныйИдентификаторВладельца();
        КонецПопытки;
        ЗапросXDTO = ВнешнийИнтерфейс.СоздатьОбъект("GetRequest");
        
       	objectId = ВнешнийИнтерфейс.СоздатьОбъект("ObjectId");
    	objectId.type = ТипОбъекта;
    	objectId.id = Идентификатор;
    	
    	ЗапросXDTO.objectIds.Добавить(objectId);
    КонецЕсли;
    
    УстановитьЗначенияСпискаXDTO(ЗапросXDTO.columns, Запрос.ПараметрыЗапроса.Получить("columns"));
    
    ОтветXDTO = ВнешнийИнтерфейс.ОбработатьУниверсальноеСообщение(ЗапросXDTO);
    
    Ответ = Новый HTTPСервисОтвет(200);
    ДобавитьЗаголовкиДанных(Ответ);
    Если ВнешнийИнтерфейс.ПроверитьТип(ОтветXDTO, "Error") Тогда
        Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO));
    ИначеЕсли ВнешнийИнтерфейс.ПроверитьТип(ОтветXDTO, "GetResponse") Тогда
        Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO.records[0]));
    Иначе
        Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO.record));
    КонецЕсли;
    
    Возврат Ответ;
    
КонецФункции

Функция ТипОбъектаИдентификаторОбновить(Запрос)
    
    ТипОбъекта = Запрос.ПараметрыURL["ТипОбъекта"];
    Если Не ЭтоДопустимыйТип(ТипОбъекта) Тогда
        Возврат ОтветНедопустимыйТипОбъекта();
    КонецЕсли;
    
    Идентификатор = Запрос.ПараметрыURL["Идентификатор"];
    
    Попытка
        УИД = Новый УникальныйИдентификатор(Идентификатор);
    Исключение
        Возврат ОтветНекорректныйИдентификаторВладельца();
    КонецПопытки;
    
    Операция = Запрос.ПараметрыЗапроса.Получить("action");
    Если Операция = Неопределено Тогда
        Возврат ОтветПлохойЗапрос(НСтр("ru='Не задан тип операции.'"));
    КонецЕсли;
    
    Если НРег(Операция) = НРег("Redirect") Тогда
        Попытка
            Параметры = Запрос.ПолучитьТелоКакСтроку();
            ПараметрыXDTO = ОбъектXDTOИзСтроки(Параметры);
        Исключение
            Возврат ОтветНекорректныеДанные();
        КонецПопытки;
        
        ЗапросXDTO = ВнешнийИнтерфейс.СоздатьОбъект("PutRedirectRequest");
        ЗапросXDTO.targetId = ВнешнийИнтерфейс.СоздатьObjectId(ТипОбъекта, Идентификатор);
        ЗапросXDTO.query = ПараметрыXDTO;
        ОтветXDTO = ВнешнийИнтерфейс.ОбработатьУниверсальноеСообщение(ЗапросXDTO);
        Ответ = Новый HTTPСервисОтвет(200);
        ДобавитьЗаголовкиДанных(Ответ);
        Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO));
    ИначеЕсли НРег(Операция) = НРег("CompleteTask") Или НРег(Операция) = НРег("ReturnOnCompletion") Тогда
        Попытка
            КомментарийВыполнения = Запрос.ПолучитьТелоКакСтроку();
        Исключение
            Возврат ОтветНекорректныеДанные();
        КонецПопытки;
        ЗапросXDTO = ВнешнийИнтерфейс.СоздатьОбъект("PutCompleteTaskRequest");
        ЗапросXDTO.targetId = ВнешнийИнтерфейс.СоздатьObjectId(ТипОбъекта, Идентификатор);
        ЗапросXDTO.comment = КомментарийВыполнения;
        ЗапросXDTO.action = Операция;
        ОтветXDTO = ВнешнийИнтерфейс.ОбработатьУниверсальноеСообщение(ЗапросXDTO);
        Ответ = Новый HTTPСервисОтвет(200);
        ДобавитьЗаголовкиДанных(Ответ);
        Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO));
    ИначеЕсли  НРег(Операция) = НРег("Consider") Тогда
        ЗапросXDTO = ВнешнийИнтерфейс.СоздатьОбъект("PutRequest");
        ЗапросXDTO.action = "Consider";
        ОбъектXDTO = ВнешнийИнтерфейс.СоздатьОбъект(ТипОбъекта);
        ОбъектXDTO.objectId = ВнешнийИнтерфейс.СоздатьObjectId(ТипОбъекта, Идентификатор);
        ЗапросXDTO.objects.Добавить(ОбъектXDTO);
        ОтветXDTO = ВнешнийИнтерфейс.ОбработатьУниверсальноеСообщение(ЗапросXDTO);
        Ответ = Новый HTTPСервисОтвет(200);
        ДобавитьЗаголовкиДанных(Ответ);
        Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO));
    Иначе
        Возврат ОтветПлохойЗапрос();
    КонецЕсли;
    
    Возврат Ответ;
    
КонецФункции

Функция ТипОбъектаИдентификаторУдалить(Запрос)
    
    ТипОбъекта = Запрос.ПараметрыURL["ТипОбъекта"];
    Если Не ЭтоДопустимыйТип(ТипОбъекта) Тогда
        Возврат ОтветНедопустимыйТипОбъекта();
    КонецЕсли;
    
    Идентификатор = Запрос.ПараметрыURL["Идентификатор"];
    
    Попытка
    	УИД = Новый УникальныйИдентификатор(Идентификатор);
    Исключение
        Возврат ОтветНекорректныйИдентификаторОбъекта()
    КонецПопытки;
    
    ЗапросXDTO = ВнешнийИнтерфейс.СоздатьОбъект("DeleteRequest");
    
   	objectId = ВнешнийИнтерфейс.СоздатьОбъект("ObjectId");
	objectId.type = ТипОбъекта;
	objectId.id = Идентификатор;
	
	ЗапросXDTO.objectIds.Добавить(objectId);
	
    ОтветXDTO = ВнешнийИнтерфейс.ОбработатьУниверсальноеСообщение(ЗапросXDTO);
    
    Ответ = Новый HTTPСервисОтвет(200);
    ДобавитьЗаголовкиДанных(Ответ);
    Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO));
    
    Возврат Ответ;
    
КонецФункции

#КонецОбласти 

#Область ПодчиненныеОбъекты

Функция ПодчиненныеОбъектыПолучитьСписок(Запрос)
    
    ТипВладельца = Запрос.ПараметрыURL["ТипВладельца"];
    Если Не ЭтоДопустимыйТип(ТипВладельца) Тогда
        Возврат ОтветНедопустимыйТипВладельца();
    КонецЕсли;
    
    ИдВладельца = Запрос.ПараметрыURL["ИдВладельца"];
    Попытка
    	УИД = Новый УникальныйИдентификатор(ИдВладельца);
    Исключение
        Возврат ОтветНекорректныйИдентификаторВладельца();
    КонецПопытки;
    
    ТипОбъекта = Запрос.ПараметрыURL["ТипОбъекта"];
    ТипОбъекта = Лев(ТипОбъекта, СтрДлина(ТипОбъекта)-1);
    
    Если Не (ЭтоДопустимыйТип(ТипОбъекта) Или НРег(ТипОбъекта) = НРег("Interaction")) Тогда
        Возврат ОтветНедопустимыйТипОбъекта();
    КонецЕсли;
    
    НаборКолонок = Запрос.ПараметрыЗапроса.Получить("columns");
    Если НаборКолонок <> Неопределено Тогда
        НаборКолонок = РаскодироватьСтроку(НаборКолонок, СпособКодированияСтроки.КодировкаURL);
        МассивКолонок = СтрРазделить(НаборКолонок, ",", Ложь);
    Иначе
        МассивКолонок = Новый Массив;
    КонецЕсли;
    
    ЗапросXDTO = ВнешнийИнтерфейс.СоздатьОбъект("GetSubListRequest");
    ЗапросXDTO.targetId = ВнешнийИнтерфейс.СоздатьObjectId(ТипВладельца, ИдВладельца);
    ЗапросXDTO.type = ТипОбъекта;
    Для Каждого Колонка Из МассивКолонок Цикл
        ЗапросXDTO.columns.Добавить(СокрЛП(Колонка));
    КонецЦикла;
    
	ОтветXDTO = ВнешнийИнтерфейс.ОбработатьУниверсальноеСообщение(ЗапросXDTO);
    Ответ = Новый HTTPСервисОтвет(200);
    ДобавитьЗаголовкиДанных(Ответ);
    Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO));
    
    Возврат Ответ;    
    
КонецФункции

Функция ПодчиненныеОбъектыДобавить(Запрос)
    
    ТипВладельца = Запрос.ПараметрыURL["ТипВладельца"];
    Если Не ЭтоДопустимыйТип(ТипВладельца) Тогда
        Возврат ОтветНедопустимыйТипВладельца();
    КонецЕсли;
    
    ИдВладельца = Запрос.ПараметрыURL["ИдВладельца"];
    Попытка
    	УИД = Новый УникальныйИдентификатор(ИдВладельца);
    Исключение
        Возврат ОтветНекорректныйИдентификаторВладельца();
    КонецПопытки;
    
    ТипОбъекта = Запрос.ПараметрыURL["ТипОбъекта"];
    Если Не ЭтоДопустимыйТип(ТипВладельца) Тогда
        Возврат ОтветНедопустимыйТипОбъекта();
    КонецЕсли;
    
    ЗапросXDTO = ВнешнийИнтерфейс.СоздатьОбъект("PostSubRequest");
    ЗапросXDTO.targetId = ВнешнийИнтерфейс.СоздатьObjectId(ТипВладельца, ИдВладельца);
    Объект = Запрос.ПолучитьТелоКакСтроку();
    ОбъектXDTO = ОбъектXDTOИзСтроки(Объект);
    ЗапросXDTO.record = ОбъектXDTO;
    ОтветXDTO = ВнешнийИнтерфейс.ОбработатьУниверсальноеСообщение(ЗапросXDTO);
    Ответ = Новый HTTPСервисОтвет(200);
    ДобавитьЗаголовкиДанных(Ответ);
    Если ВнешнийИнтерфейс.ПроверитьТип(ОтветXDTO, "Error") Тогда
        Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO));
    Иначе
        Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO.record));
    КонецЕсли;
    
    Возврат Ответ;
    
КонецФункции

#КонецОбласти 

#Область ПодчиненныеОбъектыПоИд

Функция ПолучитьПодчиненныйОбъект(Запрос)
    
    ТипВладельца = Запрос.ПараметрыURL["ТипВладельца"];
    Если Не ЭтоДопустимыйТип(ТипВладельца) Тогда
        Возврат ОтветНедопустимыйТипВладельца();
    КонецЕсли;
    
    ИдВладельца = Запрос.ПараметрыURL["ИдВладельца"];
    Попытка
    	УИД = Новый УникальныйИдентификатор(ИдВладельца);
    Исключение
        Возврат ОтветНекорректныйИдентификаторВладельца();
    КонецПопытки;
    
    ТипОбъекта = Запрос.ПараметрыURL["ТипОбъекта"];
    Если Не ЭтоДопустимыйТип(ТипВладельца) Тогда
        Возврат ОтветНедопустимыйТипОбъекта();
    КонецЕсли;
    
    Идентификатор = Запрос.ПараметрыURL["ИдОбъекта"];
    
    Если Идентификатор = НРег("new") Тогда
        ЗапросXDTO = ВнешнийИнтерфейс.СоздатьОбъект("GetNewSubRequest");
        Действие = Запрос.ПараметрыЗапроса.Получить("action");
        Если Действие <> Неопределено Тогда
            ЗапросXDTO.action = Действие;
        КонецЕсли; 
    Иначе
        ЗапросXDTO = ВнешнийИнтерфейс.СоздатьОбъект("GetSubListRequest");
    КонецЕсли;
    
    ЗапросXDTO.targetId = ВнешнийИнтерфейс.СоздатьObjectId(ТипВладельца, ИдВладельца);
    ЗапросXDTO.type = ТипОбъекта;
    
    УстановитьЗначенияСпискаXDTO(ЗапросXDTO.columns, Запрос.ПараметрыЗапроса.Получить("columns"));
    
    ОтветXDTO = ВнешнийИнтерфейс.ОбработатьУниверсальноеСообщение(ЗапросXDTO);
    Ответ = Новый HTTPСервисОтвет(200);
    ДобавитьЗаголовкиДанных(Ответ);
    
    Если ВнешнийИнтерфейс.ПроверитьТип(ОтветXDTO, "GetNewSubResponse") Тогда
        Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO.record));
    Иначе
        Ответ.УстановитьТелоИзСтроки(СтрокаИзОбъектаXDTO(ОтветXDTO));
    КонецЕсли;
    
    Возврат Ответ;
    
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОтветНедопустимыйТипВладельца()
    
    // Not Found (не найдено)
    Ответ = Новый HTTPСервисОтвет(404);
    Ответ.Заголовки.Вставить("content-type","text/html; charset=utf-8");
    Ответ.УстановитьТелоИзСтроки(НСтр("ru='<h1>Not Found</h1> Недопустимый тип владельца.'"));
    
    Возврат Ответ;    
    
КонецФункции

Функция ОтветНекорректныйИдентификаторВладельца()
    
    // 400 Bad Request
    Ответ = Новый HTTPСервисОтвет(400);
    Ответ.Заголовки.Вставить("content-type","text/html; charset=utf-8");
    Ответ.УстановитьТелоИзСтроки(НСтр("ru='<h1>Bad Request</h1> Некорректный идентификатор владельца.'"));
    
    Возврат Ответ;
    
КонецФункции

Функция ОтветНекорректныеДанные(Текст = Неопределено)
    
    Если Текст = Неопределено Тогда
    	Текст = НСтр("ru='Некорректные данные.'"); 
    КонецЕсли; 
    // 400 Bad Request
    Ответ = Новый HTTPСервисОтвет(400);
    Ответ.Заголовки.Вставить("content-type","text/html; charset=utf-8");
    Ответ.УстановитьТелоИзСтроки(СтрШаблон("<h1>Bad Request</h1> %1", Текст));
    
    Возврат Ответ;
    
КонецФункции

Функция ОтветНедопустимыйТипОбъекта()
    
    // Not Found (не найдено)
    Ответ = Новый HTTPСервисОтвет(404);
    Ответ.Заголовки.Вставить("content-type","text/html; charset=utf-8");
    Ответ.УстановитьТелоИзСтроки(НСтр("ru='<h1>Not Found</h1> Недопустимый тип объекта.'"));
    
    Возврат Ответ;
    
КонецФункции

Функция ОтветНекорректныйИдентификаторОбъекта()
    
    // 400 Bad Request
    Ответ = Новый HTTPСервисОтвет(400);
    Ответ.Заголовки.Вставить("content-type","text/html; charset=utf-8");
    Ответ.УстановитьТелоИзСтроки(НСтр("ru='<h1>Bad Request</h1> Некорректный идентификатор объекта.'"));
    
    Возврат Ответ;
    
КонецФункции

Функция ОтветПлохойЗапрос(Текст = Неопределено)
    
    // Bad Request (плохой, негодный запрос) 
    Ответ = Новый HTTPСервисОтвет(400);
    Ответ.Заголовки.Вставить("content-type","text/html; charset=utf-8");
    Ответ.УстановитьТелоИзСтроки(СтрШаблон(НСтр("ru='<h1>Bad Request</h1> %1'"), Текст));
    
    Возврат Ответ;
    
КонецФункции

Функция ТолькоДопустимыеПараметры(Запрос, Знач ДопустымыеПараметры)
    
    ДопустимыеПараметры = СтрРазделить(ДопустымыеПараметры, ", ", Ложь);
    
    Для каждого Параметр Из Запрос.ПараметрыЗапроса Цикл
        Если ДопустимыеПараметры.Найти(Параметр.Ключ) = Неопределено Тогда
            Возврат Ложь;
        КонецЕсли; 	
    КонецЦикла;
    
    Возврат Истина;
    
КонецФункции    
    
// Заполняет Список XDTO из переданных значений
//
// Параметры:
//  СписокXDTO - СписокXDTO - заполняемый список
//  Значения   - Строка, Массив - значения заполнения (строка разделяется знаками ",")
//
Процедура УстановитьЗначенияСпискаXDTO(СписокXDTO, Знач Значения)
    
    Если Значения <> Неопределено Тогда
        Значения = РаскодироватьСтроку(Значения, СпособКодированияСтроки.КодировкаURL);
        Значения = СтрРазделить(Значения, ",", Ложь);
    Иначе
        Значения = Новый Массив;
    КонецЕсли;
    
    Для Каждого Значение Из Значения Цикл
        СписокXDTO.Добавить(СокрЛП(Значение));
    КонецЦикла;
    
КонецПроцедуры

Функция ЭтоДопустимыйТип(ИмяТипаXDTO)
    
    СоответствиеТипов = ВнешнийИнтерфейсПовтИсп.СоответствиеТипов(Истина);
	Строка = СоответствиеТипов.Найти(СокрЛП(ИмяТипаXDTO), "ИмяXDTO");
    Если Строка = Неопределено Тогда
        Строка = СоответствиеТипов.Найти(НРег(СокрЛП(ИмяТипаXDTO)), "ИмяXDTOНРег");
    КонецЕсли;
    Если Строка = Неопределено Тогда
        Возврат Ложь;
    Иначе
        Возврат Истина;
    КонецЕсли;
    
КонецФункции

Функция ЗначениеИзСтроки(Знач ТипОбъекта, ИмяПоля, Знач СтрокаЗначения)
    
    Если Лев(СтрокаЗначения, 1) = "{" Тогда
        Тип_Ид = СтрРазделить(СтрокаЗначения, ",", Ложь);
        Тип = Прав(Тип_Ид[0], СтрДлина(Тип_Ид[0]) - 1);
        Ид = Лев(Тип_Ид[1], СтрДлина(Тип_Ид[1]) - 1);
        Возврат ВнешнийИнтерфейс.СоздатьObjectId(Тип, Ид);
    Иначе
        СоответствиеРеквизитов = ВнешнийИнтерфейсПовтИсп.СоответствиеСвойств(ТипОбъекта);
        Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИмяПоля) Тогда
            ДинамическийРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(ИмяПоля));
            Тип = ДинамическийРеквизит.ТипЗначения.Типы()[0];
            Возврат XMLЗначение(Тип, СтрокаЗначения);
        ИначеЕсли НРег(ИмяПоля) = НРег("objectId.view")  Тогда
            ИмяРеквизита = "Наименование";
        Иначе
            ИмяРеквизита = Неопределено;
            СоответствиеРеквизитов.Свойство(ИмяПоля, ИмяРеквизита);
        КонецЕсли;
        ТипОбъекта = ВнешнийИнтерфейс.ИмяТипа(ТипОбъекта);
        Если ИмяРеквизита <> Неопределено Тогда
            МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ТипОбъекта);
            Если ЭтоСтандартныйРеквизит(МетаданныеОбъекта, ИмяРеквизита) Тогда
                Тип = МетаданныеОбъекта.СтандартныеРеквизиты[ИмяРеквизита].Тип.Типы()[0];
            Иначе    
                Тип = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита).Тип.Типы()[0];
            КонецЕсли;
            Возврат XMLЗначение(Тип, СтрокаЗначения);
        Иначе
            Возврат СтрокаЗначения;
        КонецЕсли; 
    КонецЕсли;
    
КонецФункции

Процедура ДобавитьЗаголовкиДанных(Ответ)
    
    Ответ.Заголовки.Вставить("content-type","text/xml; charset=utf-8");
    
КонецПроцедуры

// Преобразует строку XML в ОбъектXDTO с использованием фабрики
//
Функция ОбъектXDTOИзСтроки(Строка)
    
    ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.УстановитьСтроку(Строка);
    ЧтениеXML.ПерейтиКСодержимому();
    ТипОбъекта = ФабрикаXDTO.Тип(ЧтениеXML.URIПространстваИмен, ЧтениеXML.Имя);
    ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъекта);
    ЧтениеXML.Закрыть(); 
    
    Возврат ОбъектXDTO;
    
КонецФункции

// Преобразует ОбъектXDTO в строку XML
//
Функция СтрокаИзОбъектаXDTO(ОбъектXDTO)
	
	ИнформацияДляЗаписиXML = Новый ЗаписьXML;
	ИнформацияДляЗаписиXML.УстановитьСтроку();
	
	ФабрикаXDTO.ЗаписатьXML(ИнформацияДляЗаписиXML, ОбъектXDTO);
	
	Возврат ИнформацияДляЗаписиXML.Закрыть(); 
	
КонецФункции

Функция ЭтоСтандартныйРеквизит(МетаданныеОбъекта, ИмяРеквизита)
    
    Для каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
        Если НРег(Реквизит.Имя) = НРег(ИмяРеквизита) Тогда
            Возврат Истина;
        КонецЕсли;
    КонецЦикла; 
    
    Возврат Ложь;
    
КонецФункции

#КонецОбласти 
