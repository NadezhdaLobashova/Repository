
Функция SetPartnerCreatChangePartner(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	//Возврат Ответ;

	ОбменСНСИ = Константы.ИспользоватьОбменДаннымиНСИ20.Получить();	
	Если ОбменСНСИ Тогда
		Возврат Ответ; 	
	КонецЕсли;
	
	ЗапросJSON = Запрос.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ЗапросJSON);
	СтруктураЗапроса = ПрочитатьJSON(ЧтениеJSON);
	
	ИНН = СокрЛП(СтруктураЗапроса.INN);
	Наименование = СокрЛП(СтруктураЗапроса.NAME);
	GUIDОБД = СокрЛП(СтруктураЗапроса.GUID);
	
	//Сначала ищем по GUIDОБД, если он заполнен
	Если ЗначениеЗаполнено(GUIDОБД) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Абоненты.Ссылка КАК Ссылка,
			|	Абоненты.ВерсияДанных КАК ВерсияДанных,
			|	Абоненты.ПометкаУдаления КАК ПометкаУдаления,
			|	Абоненты.Владелец КАК Владелец,
			|	Абоненты.Код КАК Код,
			|	Абоненты.Наименование КАК Наименование,
			|	Абоненты.ИНН КАК ИНН,
			|	Абоненты.GUIDОБД КАК GUIDОБД
			|ИЗ
			|	Справочник.Абоненты КАК Абоненты
			|ГДЕ
			|	НЕ Абоненты.ПометкаУдаления
			|	И Абоненты.GUIDОБД = &GUIDОБД";
		
		Запрос.УстановитьПараметр("GUIDОБД", Новый УникальныйИдентификатор(GUIDОБД));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			требуетсяИзменение = Ложь;
			Если ВыборкаДетальныеЗаписи.ИНН <> ИНН Тогда 
				требуетсяИзменение = Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(Наименование) И ВыборкаДетальныеЗаписи.Наименование <> Наименование Тогда 
				требуетсяИзменение = Истина;
			КонецЕсли;	
			Если требуетсяИзменение Тогда 
				АбонентОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				АбонентОбъект.ИНН = ИНН;
				АбонентОбъект.Наименование = Наименование;
				Если Не ЗначениеЗаполнено(АбонентОбъект.Владелец) Тогда 
					//{Рарус kruser 08.05.2019 86146
					//АбонентОбъект.Владелец = Справочники.Сервисы.НайтиПоКоду("00001");
					АбонентОбъект.Владелец = Справочники.Сервисы.СервисПоУмолчанию(Неопределено);
					//}Рарус kruser 08.05.2019 86146
				КонецЕсли;
				АбонентОбъект.Записать();
			КонецЕсли;
			Возврат Ответ;

		Иначе
			//если не нашли по GUIDОБД, то - создаем нового
 
			АбонентОбъект = Справочники.Абоненты.СоздатьЭлемент();
			АбонентОбъект.ИНН = ИНН;
			АбонентОбъект.Наименование = Наименование;
			АбонентОбъект.GUIDОБД = Новый УникальныйИдентификатор(GUIDОБД);
			Если Не ЗначениеЗаполнено(АбонентОбъект.Владелец) Тогда 
				//{Рарус kruser 08.05.2019 86146
				//АбонентОбъект.Владелец = Справочники.Сервисы.НайтиПоКоду("00001");
				АбонентОбъект.Владелец = Справочники.Сервисы.СервисПоУмолчанию(Неопределено);
				//}Рарус kruser 08.05.2019 86146
			КонецЕсли;
			АбонентОбъект.Записать();
			Возврат Ответ;
		КонецЕсли;
	КонецЕсли;

	////Сначала ищем по ИНН, если он заполнен
	//Если ЗначениеЗаполнено(ИНН) Тогда 
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	Абоненты.Ссылка КАК Ссылка,
	//		|	Абоненты.ВерсияДанных КАК ВерсияДанных,
	//		|	Абоненты.ПометкаУдаления КАК ПометкаУдаления,
	//		|	Абоненты.Владелец КАК Владелец,
	//		|	Абоненты.Код КАК Код,
	//		|	Абоненты.Наименование КАК Наименование,
	//		|	Абоненты.ИНН КАК ИНН,
	//		|	Абоненты.GUIDОБД КАК GUIDОБД
	//		|ИЗ
	//		|	Справочник.Абоненты КАК Абоненты
	//		|ГДЕ
	//		|	Абоненты.ИНН = &ИНН
	//		|	И НЕ Абоненты.ПометкаУдаления";
	//	
	//	Запрос.УстановитьПараметр("ИНН", ИНН);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	
	//	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
	//		требуетсяИзменение = Ложь;
	//		Если ЗначениеЗаполнено(Наименование) И ВыборкаДетальныеЗаписи.Наименование <> Наименование Тогда 
	//			требуетсяИзменение = Истина;
	//		КонецЕсли;
	//		Если Строка(ВыборкаДетальныеЗаписи.GUIDОБД) <> GUIDОБД Тогда 
	//			требуетсяИзменение = Истина;                      			
	//		КонецЕсли;	
	//		Если требуетсяИзменение Тогда 
	//			АбонентОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	//			АбонентОбъект.Наименование = Наименование;
	//			АбонентОбъект.GUIDОБД = Новый УникальныйИдентификатор(GUIDОБД);
	//			Если Не ЗначениеЗаполнено(АбонентОбъект.Владелец) Тогда 
	//				АбонентОбъект.Владелец = Справочники.Сервисы.НайтиПоКоду("00001");
	//			КонецЕсли;
	//			АбонентОбъект.Записать();
	//		КонецЕсли;
	//		Возврат Ответ;
	//	Иначе
	//		//если не нашли по ИНН, то возможно у нас есть этот контрагент, но только с каким то другим ИНН. Поэтому ищем по GUIDОБД 
	//		Запрос = Новый Запрос;
	//		Запрос.Текст = 
	//			"ВЫБРАТЬ
	//			|	Абоненты.Ссылка КАК Ссылка,
	//			|	Абоненты.ВерсияДанных КАК ВерсияДанных,
	//			|	Абоненты.ПометкаУдаления КАК ПометкаУдаления,
	//			|	Абоненты.Владелец КАК Владелец,
	//			|	Абоненты.Код КАК Код,
	//			|	Абоненты.Наименование КАК Наименование,
	//			|	Абоненты.ИНН КАК ИНН,
	//			|	Абоненты.GUIDОБД КАК GUIDОБД
	//			|ИЗ
	//			|	Справочник.Абоненты КАК Абоненты
	//			|ГДЕ
	//			|	НЕ Абоненты.ПометкаУдаления
	//			|	И Абоненты.GUIDОБД = &GUIDОБД";
	//		
	//		Запрос.УстановитьПараметр("GUIDОБД", Новый УникальныйИдентификатор(GUIDОБД));
	//		
	//		РезультатЗапроса = Запрос.Выполнить();
	//		
	//		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//		
	//		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
	//			требуетсяИзменение = Ложь;
	//			Если ВыборкаДетальныеЗаписи.ИНН <> ИНН Тогда 
	//				требуетсяИзменение = Истина;
	//			КонецЕсли;
	//			Если ЗначениеЗаполнено(Наименование) И ВыборкаДетальныеЗаписи.Наименование <> Наименование Тогда 
	//				требуетсяИзменение = Истина;
	//			КонецЕсли;	
	//			Если требуетсяИзменение Тогда 
	//				АбонентОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	//				АбонентОбъект.ИНН = ИНН;
	//				АбонентОбъект.Наименование = Наименование;
	//				Если Не ЗначениеЗаполнено(АбонентОбъект.Владелец) Тогда 
	//					АбонентОбъект.Владелец = Справочники.Сервисы.НайтиПоКоду("00001");
	//				КонецЕсли;
	//				АбонентОбъект.Записать();
	//			КонецЕсли;
	//			Возврат Ответ;
	//		Иначе	//Если и так не нашли - создаем нового
	//			АбонентОбъект = Справочники.Абоненты.СоздатьЭлемент();
	//			АбонентОбъект.ИНН = ИНН;
	//			АбонентОбъект.Наименование = Наименование;
	//			АбонентОбъект.GUIDОБД = Новый УникальныйИдентификатор(GUIDОБД);
	//			Если Не ЗначениеЗаполнено(АбонентОбъект.Владелец) Тогда 
	//				АбонентОбъект.Владелец = Справочники.Сервисы.НайтиПоКоду("00001");
	//			КонецЕсли;
	//			АбонентОбъект.Записать();
	//			Возврат Ответ;
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли ЗначениеЗаполнено(GUIDОБД) Тогда 
	//	//ИНН пустой, поэтому но возможно у нас есть этот контрагент, но только с пустым ИНН. Поэтому ищем по GUIDОБД 
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	Абоненты.Ссылка КАК Ссылка,
	//		|	Абоненты.ВерсияДанных КАК ВерсияДанных,
	//		|	Абоненты.ПометкаУдаления КАК ПометкаУдаления,
	//		|	Абоненты.Владелец КАК Владелец,
	//		|	Абоненты.Код КАК Код,
	//		|	Абоненты.Наименование КАК Наименование,
	//		|	Абоненты.ИНН КАК ИНН,
	//		|	Абоненты.GUIDОБД КАК GUIDОБД
	//		|ИЗ
	//		|	Справочник.Абоненты КАК Абоненты
	//		|ГДЕ
	//		|	НЕ Абоненты.ПометкаУдаления
	//		|	И Абоненты.GUIDОБД = &GUIDОБД";
	//	
	//	Запрос.УстановитьПараметр("GUIDОБД", Новый УникальныйИдентификатор(GUIDОБД));
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	
	//	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
	//		требуетсяИзменение = Ложь;
	//		Если ВыборкаДетальныеЗаписи.ИНН <> ИНН Тогда 
	//			требуетсяИзменение = Истина;
	//		КонецЕсли;
	//		Если ЗначениеЗаполнено(Наименование) И ВыборкаДетальныеЗаписи.Наименование <> Наименование Тогда 
	//			требуетсяИзменение = Истина;
	//		КонецЕсли;	
	//		Если требуетсяИзменение Тогда 
	//			АбонентОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	//			АбонентОбъект.ИНН = ИНН;
	//			АбонентОбъект.Наименование = Наименование;
	//			Если Не ЗначениеЗаполнено(АбонентОбъект.Владелец) Тогда 
	//				АбонентОбъект.Владелец = Справочники.Сервисы.НайтиПоКоду("00001");
	//			КонецЕсли;
	//			АбонентОбъект.Записать();
	//		КонецЕсли;
	//		Возврат Ответ;
	//	Иначе	//Если и так не нашли - создаем нового
	//		АбонентОбъект = Справочники.Абоненты.СоздатьЭлемент();
	//		АбонентОбъект.ИНН = ИНН;
	//		АбонентОбъект.Наименование = Наименование;
	//		АбонентОбъект.GUIDОБД = Новый УникальныйИдентификатор(GUIDОБД);
	//		Если Не ЗначениеЗаполнено(АбонентОбъект.Владелец) Тогда 
	//			АбонентОбъект.Владелец = Справочники.Сервисы.НайтиПоКоду("00001");
	//		КонецЕсли;
	//		АбонентОбъект.Записать();
	//		Возврат Ответ;
	//	КонецЕсли;
	//Иначе //одно наимеование не обрабатываем		
	//	
	//КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция SetContactPersonCreatContactPerson(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	//Возврат Ответ;
	
	ОбменСНСИ = Константы.ИспользоватьОбменДаннымиНСИ20.Получить();	
	Если ОбменСНСИ Тогда
		Возврат Ответ; 	
	КонецЕсли;

	ЗапросJSON = Запрос.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ЗапросJSON);
	СтруктураЗапроса = ПрочитатьJSON(ЧтениеJSON);
	
	Попытка
		Для каждого СтрКонтрагент Из СтруктураЗапроса Цикл
			
			Попытка 
				УникальныйИдентификатор1 = Новый УникальныйИдентификатор(СтрКонтрагент.GUIDКонтрагент);
				Абонент = Справочники.Абоненты.НайтиПоРеквизиту("GUIDОБД", УникальныйИдентификатор1);
			Исключение
				Ответ = Новый HTTPСервисОтвет(400);
				ОписаниеОшибки = ОписаниеОшибки() + Символы.ПС + "Некорректный GUID контрагента " + СтрКонтрагент.GUIDКонтрагент;
				Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки);
				//ответ.Причина(ОписаниеОшибки() + Символы.ПС + "Некорректный GUID контрагента");
				Возврат Ответ;	
			КонецПопытки;
			
			Если Не ОбщегоНазначения.СсылкаСуществует(Абонент)  Тогда 
				Ответ = Новый HTTPСервисОтвет(400);
				ОписаниеОшибки = "По данному GUID ("+ СтрКонтрагент.GUIDКонтрагент +") контрагент не найден";
				Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки);
				//ответ.Причина("По данному GUID ("+ GUIDОБД +") контрагент не найден");
				Возврат Ответ;
			КонецЕсли;

			СтруктураКонтактныеЛица = СтрКонтрагент.КонтактныеЛица;
			для Каждого Стр Из СтруктураКонтактныеЛица Цикл
				ПользовательСервиса = Справочники.ПользователиСервисов.НайтиПоРеквизиту("GUIDОБД", Новый УникальныйИдентификатор(Стр.GUID));
				Если ЗначениеЗаполнено(ПользовательСервиса) Тогда 
					ПользовательСервисаОбъект = ПользовательСервиса.ПолучитьОбъект();
				Иначе
					ПользовательСервисаОбъект = Справочники.ПользователиСервисов.СоздатьЭлемент();
					ПользовательСервисаОбъект.УстановитьНовыйКод();
				КонецЕсли;
				ПользовательСервисаОбъект.GUIDОБД = Новый УникальныйИдентификатор(Стр.GUID);
				ПользовательСервисаОбъект.Наименование = Стр.Представление;
				Если Не ЗначениеЗаполнено(ПользовательСервисаОбъект.Владелец) Тогда 
					Если ЗначениеЗаполнено(Абонент.Владелец) Тогда 
						ПользовательСервисаОбъект.Владелец = Абонент.Владелец;
					Иначе
						//{Рарус kruser 08.05.2019 86146
						//ПользовательСервисаОбъект.Владелец = Справочники.Сервисы.НайтиПоКоду("00001");
						ПользовательСервисаОбъект.Владелец = Справочники.Сервисы.СервисПоУмолчанию(Неопределено);
						//}Рарус kruser 08.05.2019 86146
					КонецЕсли;
				КонецЕсли;
				ПользовательСервисаОбъект.КонтактнаяИнформация.Очистить();
				Если ЗначениеЗаполнено(Стр.КонтактнаяИнформация.Телефон1) Тогда 
					СтрКИ = ПользовательСервисаОбъект.КонтактнаяИнформация.Добавить();
					СтрКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
					СтрКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователяСервиса;
					Инфо = КонтактнаяИнформацияПоЗначениюРеквизитов(Стр.КонтактнаяИнформация.Телефон1КодСтраны,
																	Стр.КонтактнаяИнформация.Телефон1КодГорода,
																	Стр.КонтактнаяИнформация.Телефон1Номер,
																	Стр.КонтактнаяИнформация.Телефон1Добавочный);
					СтрКИ.Представление = Инфо.Представление;
					СтрКИ.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(Инфо);
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр.КонтактнаяИнформация.Телефон2) Тогда 
					СтрКИ = ПользовательСервисаОбъект.КонтактнаяИнформация.Добавить();
					СтрКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
					СтрКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДополнительныйТелефонПользователяСервиса;
					Инфо = КонтактнаяИнформацияПоЗначениюРеквизитов(Стр.КонтактнаяИнформация.Телефон2КодСтраны,
																	Стр.КонтактнаяИнформация.Телефон2КодГорода,
																	Стр.КонтактнаяИнформация.Телефон2Номер,
																	Стр.КонтактнаяИнформация.Телефон2Добавочный);
					СтрКИ.Представление = Инфо.Представление;
					СтрКИ.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(Инфо);
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр.КонтактнаяИнформация.Почта1) Тогда
					СтрКИ = ПользовательСервисаОбъект.КонтактнаяИнформация.Добавить();
					СтрКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					СтрКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователяСервиса;
					СтрКИ.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(Стр.КонтактнаяИнформация.Почта1, СтрКИ.Вид);
					СтрКИ.Представление = Стр.КонтактнаяИнформация.Почта1;
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр.КонтактнаяИнформация.Почта2) Тогда
					СтрКИ = ПользовательСервисаОбъект.КонтактнаяИнформация.Добавить();
					СтрКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					СтрКИ.Вид = Справочники.ВидыКонтактнойИнформации.ДополнительныйEmailПользователяСервиса;
					СтрКИ.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(Стр.КонтактнаяИнформация.Почта2, СтрКИ.Вид);
					СтрКИ.Представление = Стр.КонтактнаяИнформация.Почта2;
				КонецЕсли;
				ПользовательСервисаОбъект.ОбменДанными.Загрузка = Истина;
				ПользовательСервисаОбъект.Записать();
				НаборЗаписей = РегистрыСведений.ПользователиАбонентов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Абонент.Установить(Абонент);
				НаборЗаписей.Отбор.ПользовательСервиса.Установить(ПользовательСервисаОбъект.Ссылка);
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				новаяЗапись = НаборЗаписей.Добавить();
				новаяЗапись.Абонент = Абонент;
				новаяЗапись.ПользовательСервиса = ПользовательСервисаОбъект.Ссылка;
				новаяЗапись.Сервис = ПользовательСервисаОбъект.Владелец;
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЦикла;
		
		//Если тHTTPОтвет.КодСостояния <> 200 Тогда  
		//	ЗаписьЖурналаРегистрации(
		//	НСтр("ru = 'Контрагент.Отправка в УРВ'"),
		//	УровеньЖурналаРегистрации.Ошибка,
		//	,
		//	,
		//	"Ошибка отправки в УРВ. Контрагент " + Абонент.Наименование + " (" + Код + ")" + Символы.ПС + тHTTPОтвет.ПолучитьТелоКакСтроку(),);
		//	Сообщить("Ошибка отправки в контрагента в УРВ.")
		//КонецЕсли;
		Возврат Ответ;
	Исключение
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ПользователиСервисов.Получение из ОБД'"),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		"Ошибка получения списка контактных лиц" + Символы.ПС + ОписаниеОшибки());
		//Сообщить("Ошибка отправки в контрагента в УРВ." + Символы.ПС + ОписаниеОшибки())
		Ответ = Новый HTTPСервисОтвет(400);
		ОписаниеОшибки = "Ошибка записи списка контактных лиц" + Символы.ПС + ОписаниеОшибки();
		Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки);
		//ответ.Причина("По данному GUID ("+ GUIDОБД +") контрагент не найден");
		Возврат Ответ;
	КонецПопытки;

КонецФункции

Функция КонтактнаяИнформацияПоЗначениюРеквизитов(КодСтраны="",КодГорода="",НомерТелефона="",Добавочный="")
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация") );
	
	Данные = ФабрикаXDTO.Создать( ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") );
	Данные.КодСтраны  = КодСтраны;
	Данные.КодГорода  = КодГорода;
	Данные.Номер      = НомерТелефона;
	Данные.Добавочный = Добавочный;
	Результат.Представление = УправлениеКонтактнойИнформациейСлужебный.ПредставлениеТелефона(Данные);
		
	Результат.Состав      = Данные;
	Результат.Комментарий = "";
	
	Возврат Результат;
КонецФункции

Функция MessageReceiveMessage(Запрос)
	ЗапросJSON = Запрос.ПолучитьТелоКакСтроку();
		
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ЗапросJSON);
	СтруктураЗапроса 			= ПрочитатьJSON(ЧтениеJSON);
	GUIDОБД = СокрЛП(СтруктураЗапроса.GUID);
	Если ЗначениеЗаполнено(GUIDОБД) Тогда 
		Попытка 
			УИдентификатор = Новый УникальныйИдентификатор(GUIDОБД);
			Абонент = Справочники.Абоненты.НайтиПоРеквизиту("GUIDОБД", УИдентификатор);
		Исключение
			Ответ = Новый HTTPСервисОтвет(400);
			ОписаниеОшибки = ОписаниеОшибки() + Символы.ПС + "Некорректный GUID контрагента";
			Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки);
			Возврат Ответ;	
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(Абонент) Тогда
			ОбращенияКонтрагента = 	Новый Массив;
		Иначе	
			ОбращенияКонтрагента = УРВСервер.ПолучитьОбращенияКонтрагента(Абонент);
		КонецЕсли;
	
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
		ЗаписатьJSON(ЗаписьJSON, ОбращенияКонтрагента);
		ЗапросJSON = ЗаписьJSON.Закрыть();
		
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки(ЗапросJSON);
		Возврат Ответ;	

	Иначе
		Ответ = Новый HTTPСервисОтвет(400);
		ОписаниеОшибки = "Не заполнен GUID контрагента";
		Ответ.УстановитьТелоИзСтроки(ОписаниеОшибки);
		Возврат Ответ;	
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции
