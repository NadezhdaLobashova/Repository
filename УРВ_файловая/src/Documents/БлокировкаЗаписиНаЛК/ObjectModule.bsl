
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ДополнительныеСвойства.Свойство("Отказ") И ДополнительныеСвойства.Отказ = Истина Тогда
		Отказ = ДополнительныеСвойства.Отказ;
		ВозВрат;
	КонецЕсли;
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		ВозВрат;
	КонецЕсли;
	
	Движения.РасписаниеКонсультаций.Очистить();
	Движения.РасписаниеКонсультаций.Записать();
	ДвиженияРасписаниеКонсультаций = ПолучитьДвиженияРасписаниеКонсультаций(РежимПроведения, Отказ);
	Если ДвиженияРасписаниеКонсультаций = Неопределено Тогда
		Отказ = Истина;
		ВозВрат;
	КонецЕсли;
	Движения.РасписаниеКонсультаций.Загрузить(ДвиженияРасписаниеКонсультаций);
	Движения.РасписаниеКонсультаций.Записывать = Истина;
	
	Движения.Записать();
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		ВозВрат;
	КонецЕсли;
	
	БоР_ОбщийМодуль.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	БоР_ОбщийМодульКлиентСервер.РазвернутьФорматированныйДокументИзXML(ОписаниеXML, , , ОписаниеТекст);
	
	Если Не ЗначениеЗаполнено(Автор) Тогда
		Автор = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = ТекущаяДата();
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьДвиженияРасписаниеКонсультаций(РежимПроведения, Отказ) Экспорт
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		МоментВремени = Неопределено;
	Иначе
		МоментВремени = МоментВремени();
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ДР = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьДоступностьРолей();
	ДоступностьДляПП				= БоР_ОбщийМодульКлиентСервер.ВБулево(БоР_ОбщийМодуль.ПолучитьНастройку("ЛК_ПолныеПраваЭтоПривилегированныйСотрудник"));
	ДанныеПоРолям = Справочники.Пользователи.ДанныеПоРолямСотрудникаЛК(ТекущийПользователь);
	ЭтоПривилегированныйСотрудник	= (ДанныеПоРолям["Итого"] - ДанныеПоРолям[Перечисления.РолиСотрудниковЛК.Сотрудник]) > 0 ИЛИ (ДоступностьДляПП И ДР.ПолныеПрава);
	ЭтоСотрудник					= ДанныеПоРолям[Перечисления.РолиСотрудниковЛК.Сотрудник] > 0;
	
	Если Не ЭтоПривилегированныйСотрудник Тогда
		ДоступноСотруднику = РегистрыСведений.РолиСотрудниковЛК.ПолучитьДоступныеДействия(Сотрудник);
		Если НЕ ДоступноСотруднику.ДоступноБлокировка Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Для блокировки недостаточно прав.";
			Сообщение.Поле = "Сотрудник";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			Отказ = Истина;                                                                                                                                             
			ВозВрат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	#Область ПараметрыСообщения
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Сотрудник"						, Сотрудник);
	ПараметрыСообщения.Вставить("ДатаВремяНачала"				, ДатаВремяНачала);
	ПараметрыСообщения.Вставить("ДатаВремяОкончания"			, ДатаВремяОкончания);
	ПараметрыСообщения.Вставить("Сообщение_УстановитьДанные"	, ЭтотОбъект);
	#КонецОбласти	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ
	|	РасписаниеКонсультацийСрезПоследних.Сотрудник,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала КАК П_ДатаВремяНачала,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания КАК П_ДатаВремяОкончания,
	|	РасписаниеКонсультацийСрезПоследних.Продолжительность КАК П_Продолжительность,
	|	РасписаниеКонсультацийСрезПоследних.Состояние КАК П_Состояние,
	|	РасписаниеКонсультацийСрезПоследних.Контрагент КАК П_Контрагент,
	|	РасписаниеКонсультацийСрезПоследних.КонтактноеЛицо КАК П_КонтактноеЛицо,
	|	РасписаниеКонсультацийСрезПоследних.ВидУслуги КАК П_ВидУслуги,
	|	РасписаниеКонсультацийСрезПоследних.ТемаВопроса КАК П_ТемаВопроса,
	|	РасписаниеКонсультацийСрезПоследних.Работа КАК П_Работа,
	|	РасписаниеКонсультацийСрезПоследних.Проект КАК П_Проект,
	//|	РасписаниеКонсультацийСрезПоследних.Задание КАК П_Задание,
	//|	РасписаниеКонсультацийСрезПоследних.ПакетЧасов КАК П_ПакетЧасов,
	|	РасписаниеКонсультацийСрезПоследних.Событие КАК П_Событие,
	|	ВЫБОР
	|		КОГДА РасписаниеКонсультацийСрезПоследних.ЗапретитьЗамещение
	|			ТОГДА ЛОЖЬ
	|		КОГДА РасписаниеКонсультацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Запланировано)
	|			ТОГДА &Замещение
	|		КОГДА РасписаниеКонсультацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Блокировка)
	|			ТОГДА &Замещение
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК МожноОтменить
	|ПОМЕСТИТЬ ВТПересечения
	|ИЗ
	|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних(
	|			&МоментВремени,
	|			Сотрудник = &Сотрудник
	|				И ДатаВремяНачала >= &НачалоПериода
	|				И ДатаВремяНачала <= &КонецПериода) КАК РасписаниеКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
	|	И РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала < &ДатаВремяОкончания
	|	И РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания > &ДатаВремяНачала
	|	И РасписаниеКонсультацийСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Свободно)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПересечения.П_ДатаВремяНачала,
	|	ВТПересечения.Сотрудник,
	|	ВТПересечения.П_ДатаВремяОкончания,
	|	ВТПересечения.П_Продолжительность,
	|	ВТПересечения.П_Состояние,
	|	ВТПересечения.П_Контрагент,
	|	ВТПересечения.П_КонтактноеЛицо,
	|	ВТПересечения.П_ВидУслуги,
	|	ВТПересечения.П_ТемаВопроса
	|ИЗ
	|	ВТПересечения КАК ВТПересечения
	|ГДЕ
	|	НЕ ВТПересечения.МожноОтменить
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ДатаВремяНачала КАК ДатаВремяНачала,
	|	&Сотрудник КАК Сотрудник,
	|	&ДатаВремяОкончания КАК ДатаВремяОкончания,
	|	&Продолжительность КАК Продолжительность,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Блокировка) КАК Состояние,
	|	&Работа КАК Работа,
	|	&Проект КАК Проект,
	//|	ЗНАЧЕНИЕ(Документ.франЗадание.ПустаяСсылка) КАК Задание,
	//|	ЗНАЧЕНИЕ(Документ.ПакетЧасов.ПустаяСсылка) КАК ПакетЧасов,
	|	ЗНАЧЕНИЕ(Документ.Обращение.ПустаяСсылка) КАК Событие,
	|	&ОписаниеXML,
	|	&ОписаниеТекст
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ВТПересечения.П_ДатаВремяНачала,
	|	ВТПересечения.Сотрудник,
	|	ДОБАВИТЬКДАТЕ(ВТПересечения.П_ДатаВремяНачала, МИНУТА, &ШагСеткиМин),
	|	&ШагСеткиМин,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Свободно),
	|	ЗНАЧЕНИЕ(Справочник.Работы.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка),
	//|	ЗНАЧЕНИЕ(Документ.франЗадание.ПустаяСсылка),
	//|	ЗНАЧЕНИЕ(Документ.ПакетЧасов.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Документ.Обращение.ПустаяСсылка),
	|	"""",
	|	""""
	|ИЗ
	|	ВТПересечения КАК ВТПересечения
	|ГДЕ
	|	&Замещение
	|	И ВТПересечения.МожноОтменить
	|	И НЕ(ВТПересечения.Сотрудник = &Сотрудник
	|				И ВТПересечения.П_ДатаВремяНачала = &ДатаВремяНачала)";
	
	#КонецОбласти
	
	ШагСеткиМин = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания();
	Запрос.УстановитьПараметр("МоментВремени"		, МоментВремени);
	Запрос.УстановитьПараметр("Период"				, Дата);
	Запрос.УстановитьПараметр("Ссылка"				, Ссылка);
	
	Запрос.УстановитьПараметр("ДатаВремяНачала"		, ДатаВремяНачала);
	Запрос.УстановитьПараметр("Сотрудник"			, Сотрудник);
	Запрос.УстановитьПараметр("ДатаВремяОкончания"	, ДатаВремяОкончания);
	Запрос.УстановитьПараметр("Продолжительность"	, Продолжительность);
	Запрос.УстановитьПараметр("Работа"				, Работа);
	Запрос.УстановитьПараметр("Проект"				, Проект);
	Запрос.УстановитьПараметр("ОписаниеXML"			, ОписаниеXML);
	Запрос.УстановитьПараметр("ОписаниеТекст"		, ОписаниеТекст);
	
	Запрос.УстановитьПараметр("Замещение"			, Замещение);
	Запрос.УстановитьПараметр("ШагСеткиМин"			, ШагСеткиМин);
	Запрос.УстановитьПараметр("НачалоПериода"		, НачалоДня(ДатаВремяНачала));
	Запрос.УстановитьПараметр("КонецПериода"		, КонецДня(ДатаВремяНачала));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатПересечения = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2];
	Если Не РезультатПересечения.Пустой() Тогда
		ПараметрыСообщения.Вставить("Сообщение_Поле"		, "Сотрудник");
		ШаблонСообщения = "Блокировка [&Сотрудник, &ДатаВремяНачала - &ДатаВремяОкончания] конфликтует с существующими записями:";
		Выборка = РезультатПересечения.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.П_Состояние = Перечисления.СостоянияЭлементаРасписанияЛК.ЗаписанКлиент Тогда
				ПараметрыСообщения.Вставить("П_ДатаВремяНачала"		, Выборка.П_ДатаВремяНачала);
				ПараметрыСообщения.Вставить("П_ДатаВремяОкончания"	, Выборка.П_ДатаВремяОкончания);
				ПараметрыСообщения.Вставить("П_Контрагент"			, Выборка.П_Контрагент);
				ШаблонСообщения = ШаблонСообщения + " &ПС " + 
				БоР_ОбщийМодуль.СформироватьТекстСообщения("	Запись [&Сотрудник, &П_ДатаВремяНачала - &П_ДатаВремяОкончания]. Уже записан контрагент &П_Контрагент", ПараметрыСообщения);
				Отказ = Истина;
			Иначе
				ПараметрыСообщения.Вставить("П_ДатаВремяНачала"		, Выборка.П_ДатаВремяНачала);
				ПараметрыСообщения.Вставить("П_ДатаВремяОкончания"	, Выборка.П_ДатаВремяОкончания);
				ПараметрыСообщения.Вставить("П_Состояние"			, Выборка.П_Состояние);
				ШаблонСообщения = ШаблонСообщения + " &ПС " + 
				БоР_ОбщийМодуль.СформироватьТекстСообщения("	Запись [&Сотрудник, &П_ДатаВремяНачала - &П_ДатаВремяОкончания]. Установлено состояние &П_Состояние", ПараметрыСообщения);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		БоР_ОбщийМодуль.Сообщить_С(ШаблонСообщения, ПараметрыСообщения);
	КонецЕсли;
	
	Если Отказ Тогда
		ВозВрат Неопределено
	КонецЕсли;
	
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	ВозВрат РезультатЗапроса.Выгрузить();
	
КонецФункции
