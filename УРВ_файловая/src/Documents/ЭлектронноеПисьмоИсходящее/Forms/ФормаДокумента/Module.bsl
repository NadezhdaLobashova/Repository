
#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстВыбора;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.ДатаОтправления) Тогда
		МестнаяДатаОтправления = МестноеВремя(Объект.ДатаОтправления);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Рассмотрено = Истина;
		ПриСозданииИПриЧтенииНаСервере();
		Взаимодействия.УстановитьПредметПоДаннымЗаполнения(Параметры, Предмет);
		ИзменилисьКонтакты = Истина;
	КонецЕсли;
	
	Взаимодействия.ЗаполнитьСписокВыбораДляРассмотретьПосле(Элементы.РассмотретьПосле.СписокВыбора);
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
	// Подготовить оповещения взаимодействий.
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект,Параметры);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ШаблоныСообщений
	ОпределитьВозможностьЗаполненияПисьмаПоШаблону();
	// Конец СтандартныеПодсистемы.ШаблоныСообщений
		
	УстановитьРеквизитыИнициатора();
	
	Если Объект.ОтправленоСОшибкой Тогда
		Элементы.ОписаниеОшибкиПриОтправке.Видимость = Истина;
	Иначе
		Элементы.ОписаниеОшибкиПриОтправке.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И ТипЗнч(Параметры.ЗначениеКопирования) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ЗаполнитьФайлыИзПисьма(Параметры.ЗначениеКопирования);
    КонецЕсли;
    
    // Активизируем поле текста, если заполнен отправитель и получатель.
    Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) И ЗначениеЗаполнено(Объект.СписокПолучателейПисьма) Тогда
        Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
            ТекущийЭлемент = Элементы.ТекстПисьмаФорматированныйДокумент;
        Иначе
            ТекущийЭлемент = Элементы.ТекстПисьма;
        КонецЕсли;
    КонецЕсли;
	
	//{Рарус kruser 10.06.2019 87760
	УстановитьВидимостьДляКлиентаКомпании();
	//}Рарус kruser 10.06.2019 87760
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ВзаимодействияКлиент.ОтработатьОповещение(ЭтотОбъект, ИмяСобытия, Параметр, Источник);

	Если ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
		Если ТипЗнч(Источник) = Тип("СправочникСсылка.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы") Тогда
			
			ВложенияТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
			Если ВложенияТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РеквизитыФайла = РеквизитыФайла(Источник);
			ЗаполнитьЗначенияСвойств(ВложенияТекущиеДанные, РеквизитыФайла);
			ВложенияТекущиеДанные.РазмерПредставление = 
				ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(РеквизитыФайла.Размер);
			ВложенияТекущиеДанные.ИмяФайла = ?(ПустаяСтрока(РеквизитыФайла.Расширение),
			                                   РеквизитыФайла.Наименование,
			                                   РеквизитыФайла.Наименование + "." + РеквизитыФайла.Расширение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем СтрокаНачало, СтрокаКонец, КолонкаНачало, КолонкаКонец;
	Перем НачалоВыделения, КонецВыделения;
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Документ.ЭлектронноеПисьмоИсходящее.Форма.ФормированиеВнешнейСсылкиНаОбъект") Тогда
		
		Если ФорматСообщения = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст") Тогда
			Элементы.ТекстПисьма.ПолучитьГраницыВыделения(СтрокаНачало, КолонкаНачало, СтрокаКонец, КолонкаКонец);
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(ТекстПисьма);
			СтрокаВставки = ТекстовыйДокумент.ПолучитьСтроку(СтрокаНачало);
			СтрокаВставки = Лев(СтрокаВставки, КолонкаНачало - 1) + ВыбранноеЗначение + Прав(СтрокаВставки,СтрДлина(СтрокаВставки) - КолонкаКонец + 1);
			ТекстовыйДокумент.ЗаменитьСтроку(СтрокаНачало, СтрокаВставки);
			ТекстПисьма = ТекстовыйДокумент.ПолучитьТекст();
		Иначе
			
			Элементы.ТекстПисьмаФорматированныйДокумент.ПолучитьГраницыВыделения(НачалоВыделения, КонецВыделения);
			ТекстПисьмаФорматированныйДокумент.Вставить(НачалоВыделения, ВыбранноеЗначение);
			
		КонецЕсли;
	
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ЖурналДокументов.Взаимодействия.Форма.ПараметрыЭлектронногоПисьма") Тогда
		
		Если ВыбранноеЗначение <> Неопределено И Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
			
			Объект.УведомитьОДоставке          = ВыбранноеЗначение.УведомитьОДоставке;
			Объект.УведомитьОПрочтении         = ВыбранноеЗначение.УведомитьОПрочтении;
			Объект.ВключатьТелоИсходногоПисьма = ВыбранноеЗначение.ВключатьТелоИсходногоПисьма;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.АдреснаяКнига")
		ИЛИ ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.УточнениеКонтактов") Тогда
		
		ЗаполнитьПодобранныхПолучателейПослеВыбора(ВыбранноеЗначение);
		
	Иначе
		
		ВзаимодействияКлиент.ФормаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, КонтекстВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Взаимодействия.УстановитьРеквизитыФормыВзаимодействияПоДаннымРегистра(ЭтотОбъект);
	ПриСозданииИПриЧтенииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОчиститьСообщения();
	
	Если Не ВыполняетсяОтправка Тогда
		
		Если ПроверитьЗаполнениеСписковАдресатов() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") 
			ИЛИ Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
			ВзаимодействияКлиент.ПроверкаЗаполненностиРеквизитовОтложеннойОтправки(Объект, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			Если СтрокаТаблицыВложений.Расположение = 2 Тогда
				Попытка
					Данные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
					СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Данные, "");
					СтрокаТаблицыВложений.Расположение = 4;
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,"Вложения",, Отказ);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Объект.ЕстьВложения = (Вложения.Количество() <> 0);
	
	Объект.ПолучателиПисьма.Очистить();
	Объект.ПолучателиКопий.Очистить();
	Объект.ПолучателиСкрытыхКопий.Очистить();
	Объект.ПолучателиОтвета.Очистить();
	Для каждого Получатель Из СписокПолучателей Цикл
		
		ПочтовыеАдреса = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(Получатель.Представление);
		
		Для каждого ПочтовыйАдрес Из ПочтовыеАдреса Цикл
			
			Если Получатель.ВариантОтправки = НСтр("ru = 'Обратный адрес:'") Тогда
				НоваяСтрока = Объект.ПолучателиОтвета.Добавить();
			ИначеЕсли Получатель.ВариантОтправки = НСтр("ru = 'Копия:'") Тогда
				НоваяСтрока = Объект.ПолучателиКопий.Добавить();
			ИначеЕсли Получатель.ВариантОтправки = НСтр("ru = 'Скрытая копия:'") Тогда
				НоваяСтрока = Объект.ПолучателиСкрытыхКопий.Добавить();
			Иначе
				НоваяСтрока = Объект.ПолучателиПисьма.Добавить();
			КонецЕсли;
			
			НоваяСтрока.Адрес = ПочтовыйАдрес.Адрес;
			НоваяСтрока.Представление = ПочтовыйАдрес.Псевдоним;
			НоваяСтрока.Контакт = Получатель.Контакт;
		КонецЦикла;
		
	КонецЦикла;
	
	Объект.СписокПолучателейПисьма =
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма, Ложь);
	Объект.СписокПолучателейКопий =
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиКопий, Ложь);
	Объект.СписокПолучателейСкрытыхКопий = 
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиСкрытыхКопий, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, РежимЗаписи, РежимПроведения)
	
	ДокументHTMLТекущегоПисьмаПодготовлен = Ложь;
	
	// Подготовим документ HTML из содержимого форматированного документа.
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
		 И ТекущийОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		
		ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
		
		СтруктураВложений = Новый Структура;
		ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекущийОбъект.ТекстHTML, СтруктураВложений);
		Для каждого Вложение Из СтруктураВложений Цикл
			
			НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
			НоваяСтрока.ИмяФайла = Вложение.Ключ;
			НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
			НоваяСтрока.Картинка = Вложение.Значение;
			
		КонецЦикла;
		
		Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
			
			ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ТекстHTML);
			Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
			    ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
			ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ОчистительТекста = Новый ФорматированныйДокумент;
		ОчистительТекста.УстановитьHTML(СтрЗаменить(ТекстПисьма, Символы.ПС, "<br>"), Новый Структура);
		ТекущийОбъект.Текст = ОчистительТекста.ПолучитьТекст();
		
	КонецЕсли;
	
	Если НеобходимаОбработкаПисьмаОснования() Тогда
		
		Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			
			ТекущийОбъект.ТекстHTML = СформироватьТекстПисьмаВключаяПисьмоОснование(
				?(ДокументHTMLТекущегоПисьмаПодготовлен,ДокументHTML,Неопределено), ТекущийОбъект);
				
			ТекущийОбъект.Текст = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъект.ТекстHTML);
			
		Иначе
			
			ТекущийОбъект.Текст = СформироватьТекстПисьмаВключаяПисьмоОснование(Неопределено, ТекущийОбъект);
			
		КонецЕсли;
		
	Иначе
		
		Если ДокументHTMLТекущегоПисьмаПодготовлен Тогда
			
			ТекущийОбъект.ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			ТекущийОбъект.Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъект.ТекстHTML);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		
		ТекущийОбъект.ПисьмаВложения.Очистить();
		ИндексСтроки = 1;
		Для Каждого Вложение Из Вложения Цикл
			
			Если Вложение.Расположение = 5 И ЗначениеЗаполнено(Вложение.Письмо) Тогда
				НоваяСтрока = ТекущийОбъект.ПисьмаВложения.Добавить();
				НоваяСтрока.Письмо                     = Вложение.Письмо;
				НоваяСтрока.ПорядковыйНомерВоВложениях = ИндексСтроки;
			КонецЕсли;
			
			ИндексСтроки =  ИндексСтроки + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВыполняетсяОтправка И Не ОтправлятьСообщенияСразу Тогда
		
		ТекущийОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
		
	КонецЕсли;
	
	Если Объект.СтатусПисьма <> ТекущийСтатусПисьма 
		И ТекущийОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее 
		И Не ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML")
		И (ТипЗнч(ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		ИЛИ ТипЗнч(ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"))
		И ТипТекстаВходящегоПисьма = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
		
		ТекущийОбъект.ЕстьВложения = Истина;
		
	КонецЕсли;
	
	ТекущийОбъект.Размер = ОценитьРазмерПисьма();
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Взаимодействия.ПередЗаписьюВзаимодействияИзФормы(ЭтотОбъект, ТекущийОбъект, ИзменилисьКонтакты);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект, ЭтотОбъект);
	
	Если Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Письмо = ТекущийОбъект.Ссылка;
	
	// Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа.
	ТаблицаВложенийКартинокФорматированногоДокумента = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
	Для каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
		УдаленныеВложения.Добавить(Вложение.Ссылка);
	КонецЦикла;
	
	// Удалим удаленные вложения
	Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
		ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	
	УдаленныеВложения.Очистить();
	
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
			
			ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
			ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			                     Письмо,
			                     АдресКартинкиВоВременномХранилище,
			                     "_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_"),
			                     ДвоичныеДанныеКартинки.Размер());
			
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НеобходимаОбработкаПисьмаОснования() Тогда
		
		ВложенияПисьмаОснования = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Объект.ВзаимодействиеОснование);
		
		Для Каждого Вложение Из ВложенияПисьмаОснования Цикл
			
			ДвоичныеДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(Вложение.Ссылка);
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
			ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			Письмо,АдресКартинкиВоВременномХранилище,Вложение.Наименование, Вложение.Размер);
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИДФайлаЭлектронногоПисьма;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
		
		Размер = 0;
		ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
		
		Если СтрокаТаблицыВложений.Расположение = 4 Тогда
			// из временного хранилища
			Если СтрокаТаблицыВложений.Размер = 0 Тогда
				Продолжить;
			КонецЕсли;
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ИмяФайла, Размер);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 3 Тогда
			// из файла на сервере
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 1 Тогда
			
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
				Письмо, СтрокаТаблицыВложений.Ссылка, УникальныйИдентификатор);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 0 Тогда
			// перезаписать вложение
			
		КонецЕсли;
		
		СтрокаТаблицыВложений.Расположение = 0;
		
	КонецЦикла;
	
	Если Объект.СтатусПисьма <> ТекущийСтатусПисьма Тогда
		ПрикрепитьВходящееПисьмоОснованиеКакВложениеЕслиНеобходимо(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьВложения();
	Взаимодействия.УстановитьЗаголовокФормыЭлектронногоПисьма(ЭтотОбъект);
	УстановитьЗаголовокКнопкиПоУмолчанию();
	
	Если Объект.СтатусПисьма <> ТекущийСтатусПисьма Тогда
		
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(Объект.Ссылка,
			Взаимодействия.ОпределитьПапкуДляПисьмаПоУмолчанию(Объект.Ссылка, Истина));
		ТекущийСтатусПисьма = Объект.СтатусПисьма;
		
	КонецЕсли;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект,
		Объект,
		ПараметрыЗаписи,
		"ЭлектронноеПисьмоИсходящее");
	
	ОбновитьОтображениеДанных();
	
	Оповестить("ПроизведенаРабота", Предмет, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыОписаниеДополнительноПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ТекущаяСтраница.Имя = "СтраницаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура РассмотретьПослеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ОбработатьВыборВПолеРассмотретьПосле(
		РассмотретьПосле, ВыбранноеЗначение, СтандартнаяОбработка, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтправителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.УчетнаяЗапись <> ВыбранноеЗначение Тогда
		ИзменитьПодпись(Объект.УчетнаяЗапись, ВыбранноеЗначение);
		Объект.УчетнаяЗапись = ВыбранноеЗначение;
		ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		Если ЭлементСписка <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			Объект.ОтправительПредставление = ЭлементСписка.Представление;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВходящегоПисьмаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПредметНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	МассивФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ТипЗнч(ФайлПринятый) = Тип("Файл") Тогда
					МассивФайлов.Добавить(ФайлПринятый);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		ДополнительныеПараметры = Новый Структура("ВыбранныйФайл", ВыбранныйФайл);
		ОписаниеОповещение = Новый ОписаниеОповещения("ПроверкаЭтоФайлПослеЗавершения", ЭтотОбъект, ДополнительныеПараметры);
		ВыбранныйФайл.НачатьПроверкуЭтоФайл(ОписаниеОповещение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПолучателей

&НаКлиенте
Процедура СписокПолучателейПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	Если Элементы.СписокПолучателей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
		
		ВариантОтправки = Элементы.СписокПолучателей.ТекущиеДанные.ВариантОтправки;
		Если ВариантОтправки  = "Кому:" Тогда
			ГруппаПодбора = НСтр("ru = 'Кому'");
		ИначеЕсли ВариантОтправки  = "Копия:" Тогда
			ГруппаПодбора = НСтр("ru = 'Копии'");
		ИначеЕсли ВариантОтправки = "СкрытаяКопия:" Тогда
			ГруппаПодбора = НСтр("ru = 'Скрытые'");
		КонецЕсли;
		
		РедактироватьСписокПолучателей(Истина, ГруппаПодбора);
	Иначе
		РедактироватьСписокПолучателей(Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Адрес = "";
	ПозицияНачало = СтрНайти(ДанныеСтроки.Представление, "<");
	Если ПозицияНачало > 0 Тогда
		ПозицияОкончание = СтрНайти(ДанныеСтроки.Представление, ">", НаправлениеПоиска.СНачала, ПозицияНачало);
		Если ПозицияОкончание > 0 Тогда
			Адрес = Сред(ДанныеСтроки.Представление, ПозицияНачало + 1, ПозицияОкончание - ПозицияНачало - 1);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Адрес) Тогда
		Адрес = ДанныеСтроки.Представление;
	КонецЕсли;
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(Адрес, "@") = 0 ИЛИ СтрНайти(Адрес, ".") = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо ввести адрес электронной почты'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущиеДанные.Адрес = СокрЛП(Адрес);

	Отбор = Новый Структура("Адрес", Адрес);
	НайденныеСтроки = СписокПолучателей.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Такой адрес электронной почту уже есть в списке.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИзменилисьКонтакты = Истина;
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ЭлектронноеПисьмоИсходящее");

КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(Текст) < 3 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеВыбораДляЭлектронногоПисьма(Текст, 0);
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		ДанныеВыбора = Неопределено
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВариантОтправки = Элементы.СписокПолучателейВариантОтправки.СписокВыбора.НайтиПоЗначению("Кому:");
		Элемент.ТекущийЭлемент = Элементы.СписокПолучателейПредставление;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредметПриИзменении(Элемент)
	
	УстановитьРеквизитыИнициатора();
	
КонецПроцедуры
 
&НаКлиенте
Процедура СписокПолучателейПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущиеДанные = Элементы.СписокПолучателей.ТекущиеДанные;
		ТекущиеДанные.Адрес         = ВыбранноеЗначение.Адрес;
		ТекущиеДанные.Представление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ВыбранноеЗначение.Представление, ВыбранноеЗначение.Адрес, "");
		ТекущиеДанные.Контакт       = ВыбранноеЗначение.Контакт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейПередУдалением(Элемент, Отказ)
	Если СписокПолучателей.Количество() = 1 Тогда
		Отказ = Истина;
		СписокПолучателей[0].Представление = "";
		СписокПолучателей[0].Адрес = "";
		СписокПолучателей[0].Контакт = Неопределено;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ЧислоФайлов = 0;
	СкопироватьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) скопированы в буфер обмена.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Копирование в буфер'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ЧислоФайлов)
	
	ЧислоФайлов = Элементы.Вложения.ВыделенныеСтроки.Количество();
	МассивФайлов = Новый Массив;
	Для каждого ИдентификаторСтроки из Элементы.Вложения.ВыделенныеСтроки Цикл
	
		Вложение = Вложения.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Вложение.Расположение = 1 ИЛИ Вложение.Расположение = 0 Тогда
			МассивФайлов.Добавить(Вложение.Ссылка);
		Иначе
			ДанныеВложения = Новый Структура("Расположение, ИмяФайлаНаКомпьютере, ИмяФайла, ИндексКартинки, Размер");
			ЗаполнитьЗначенияСвойств(ДанныеВложения, Вложение);
			МассивФайлов.Добавить(ДанныеВложения);
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначения.СкопироватьВБуферОбмена(МассивФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
		
	ЧислоФайлов = 0;
	ВставитьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) вставлены из буфера обмена.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Вставка из буфера'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ЧислоФайлов)
	
	Если ОбщегоНазначения.ПустойБуферОбмена() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	МассивФайлов = ДанныеИзБуфераОбмена.Данные;
	
	ЧислоФайлов = МассивФайлов.Количество();
	
	ЗагрузитьФайлы(МассивФайлов, Вложения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВложенияИзКарточкиБЗ(Команда)
	ВложенияИзКарточкиБЗНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВложенияИзКарточкиБЗНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Предмет) ИЛИ НЕ Тип("ДокументСсылка.Обращение") = ТипЗнч(Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	Карточка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "КарточкаБазыЗнаний");
	Если НЕ ЗначениеЗаполнено(Карточка) Тогда
		Возврат;
	КонецЕсли;
	
	ТипФайлаКарточки = "СправочникСсылка."+Карточка.Метаданные().Имя+"ПрисоединенныеФайлы";
	
	Если НЕ Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.СодержитТип(Тип(ТипФайлаКарточки)) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	Файлы.ИндексКартинки,
	|	Файлы.Размер,
	|	Файлы.Расширение,
	|	Файлы.Наименование
	|ИЗ
	|	Справочник.%1ПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Карточка";
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, Карточка.Метаданные().Имя); 
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Карточка", Карточка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Вложение = Вложения.Добавить();
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Выборка.Ссылка);
		Вложение.Расположение = 4;
		Вложение.ИмяФайлаНаКомпьютере = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		//РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Вложение.Ссылка, "ИндексКартинки, Размер, Расширение, Наименование");
		ЗаполнитьЗначенияСвойств(Вложение, Выборка, "Ссылка, ИндексКартинки, Размер");
		Вложение.ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2", Выборка.Наименование, Выборка.Расширение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияИзОбращения(Команда)
	ВложенияИзОбращенияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВложенияИзОбращенияНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;	
		
	ТипФайлаПредмета = "СправочникСсылка."+Предмет.Метаданные().Имя+"ПрисоединенныеФайлы";
	Если НЕ Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.СодержитТип(Тип(ТипФайлаПредмета)) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	Файлы.ИндексКартинки,
	|	Файлы.Размер,
	|	Файлы.Расширение,
	|	Файлы.Наименование
	|ИЗ
	|	Справочник.%1ПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Предмет";
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, Предмет.Метаданные().Имя); 
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Вложение = Вложения.Добавить();
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Выборка.Ссылка, УникальныйИдентификатор);
		Вложение.Расположение = 4;
		Вложение.ИмяФайлаНаКомпьютере = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		ЗаполнитьЗначенияСвойств(Вложение, Выборка, "Ссылка, ИндексКартинки, Размер");
		Вложение.ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2", Выборка.Наименование, Выборка.Расширение);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьОрфографию(Команда)
    
    ПроверкаОрфографииКлиент.ПроверитьОрфографию(ЭтотОбъект, "ТекстПисьма");
    
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОрфограциюHTML(Команда)
    
    ТекстHTML = "";
    ВложенияHTML = Новый Структура;
    ТекстДляПроверки = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
    ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекстHTML, ВложенияHTML);
	ТекстHTMLОригинальный = ТекстHTML;
	ТекстHTMLИзмененный = ТекстHTML;
    
	СловЗаменено = 0;
	СловПропущено = 0;
	
	Попытка
		Word = Новый COMОбъект("Word.Application");
		Если Word.Documents.Count = 0 Тогда
			Word.Documents.Add();
		КонецЕсли;
	Исключение
		Word = Неопределено;
		Возврат;
	КонецПопытки;
		
	Исключения = Новый Соответствие;
	СловаЗамены = Новый Соответствие;
	ПорядокСлов = Новый Соответствие;
	
	Текст = ТекстДляПроверки;
	НомерСтрокиНачальный = 1;
	ПозицияВСтроке = -1;
	СловоЗамены = "";
	СловоОригинальное = "";
	НомерСлова = -1;
	НомерСтрокиТекущий = -1;
    
    ПараметрыПроверкиОрфографии = Новый Структура;
	ПараметрыПроверкиОрфографии.Вставить("Текст", Текст);
	ПараметрыПроверкиОрфографии.Вставить("НомерСтрокиНачальный", НомерСтрокиНачальный);
	ПараметрыПроверкиОрфографии.Вставить("ПозицияВСтроке", ПозицияВСтроке); 
	ПараметрыПроверкиОрфографии.Вставить("СловоОригинальное", СловоОригинальное);
	ПараметрыПроверкиОрфографии.Вставить("СловоЗамены", СловоЗамены);
	ПараметрыПроверкиОрфографии.Вставить("НомерСлова", НомерСлова);
	ПараметрыПроверкиОрфографии.Вставить("ТекстДляПроверки", ТекстДляПроверки);
	ПараметрыПроверкиОрфографии.Вставить("Вложения", ВложенияHTML);
	ПараметрыПроверкиОрфографии.Вставить("ТекстHTMLОригинальный", ТекстHTMLОригинальный); 
	ПараметрыПроверкиОрфографии.Вставить("ТекстHTMLИзмененный", ТекстHTMLИзмененный); 
	ПараметрыПроверкиОрфографии.Вставить("Word", Word);
	ПараметрыПроверкиОрфографии.Вставить("Исключения", Исключения); 
	ПараметрыПроверкиОрфографии.Вставить("СловаЗамены", СловаЗамены); 
	ПараметрыПроверкиОрфографии.Вставить("ПорядокСлов", ПорядокСлов);
	ПараметрыПроверкиОрфографии.Вставить("НомерСтрокиТекущий", НомерСтрокиТекущий);
	ПараметрыПроверкиОрфографии.Вставить("СловЗаменено", СловЗаменено);
	ПараметрыПроверкиОрфографии.Вставить("СловПропущено", СловПропущено);
    
   	ПроверитьОрфографиюВБлокеТекста(ПараметрыПроверкиОрфографии);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОрфографиюВБлокеТекста(ПараметрыПроверкиОрфографии)
	
	СимволыРазделители = ПроверкаОрфографииКлиент.ПолучитьСимволыРазделители();
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("ТекстовыйДокумент") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("ТекстовыйДокумент", Новый ТекстовыйДокумент());	
	КонецЕсли;		
	ПараметрыПроверкиОрфографии.ТекстовыйДокумент.УстановитьТекст(ПараметрыПроверкиОрфографии.Текст);
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("КоличествоСтрокТекста") Тогда 
		ПараметрыПроверкиОрфографии.Вставить(
			"КоличествоСтрокТекста", 
			ПараметрыПроверкиОрфографии.ТекстовыйДокумент.КоличествоСтрок());
	КонецЕсли;	
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("НомерСтроки") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("НомерСтроки", ПараметрыПроверкиОрфографии.НомерСтрокиНачальный);
	КонецЕсли;	
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("НомерПервогоСимвола") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("НомерПервогоСимвола", 1);
	КонецЕсли;	
	
	Если Не ПараметрыПроверкиОрфографии.Свойство("НомерАнализируемогоСимвола") Тогда 
		ПараметрыПроверкиОрфографии.Вставить("НомерАнализируемогоСимвола", 1);
	КонецЕсли;	
	
	// Перебор строк
	Для СчСтроки = ПараметрыПроверкиОрфографии.НомерСтроки 
		По ПараметрыПроверкиОрфографии.КоличествоСтрокТекста Цикл
		
		ПараметрыПроверкиОрфографии.НомерСтроки = СчСтроки;
		
		СтрокаСостояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru= 'Всего в тексте %1 строк. Проверяется %2 строка.'"),
			Строка(ПараметрыПроверкиОрфографии.КоличествоСтрокТекста), 
			Строка(ПараметрыПроверкиОрфографии.НомерСтроки));
		Состояние(СтрокаСостояние);
		
		// Получение строки, которую далее будем проверять
		СтрокаИзТекста = ПараметрыПроверкиОрфографии.ТекстовыйДокумент.ПолучитьСтроку(ПараметрыПроверкиОрфографии.НомерСтроки);
		
		Если ПараметрыПроверкиОрфографии.ПозицияВСтроке <> -1 
			И (ПараметрыПроверкиОрфографии.НомерСтроки = ПараметрыПроверкиОрфографии.НомерСтрокиНачальный) Тогда
			ПараметрыПроверкиОрфографии.НомерПервогоСимвола = ПараметрыПроверкиОрфографии.ПозицияВСтроке;
		Иначе	
			ПараметрыПроверкиОрфографии.НомерПервогоСимвола = Найти(СтрокаИзТекста, """");
			Если ПараметрыПроверкиОрфографии.НомерПервогоСимвола <> 0 Тогда
				ПараметрыПроверкиОрфографии.НомерПервогоСимвола = ПараметрыПроверкиОрфографии.НомерПервогоСимвола + 1;
			Иначе
				ПараметрыПроверкиОрфографии.НомерПервогоСимвола = 1;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыПроверкиОрфографии.НомерСтрокиТекущий = ПараметрыПроверкиОрфографии.НомерСтроки;
		
		ДлинаСтроки = СтрДлина(СтрокаИзТекста);
		НоваяСтрока = Лев(СтрокаИзТекста, ПараметрыПроверкиОрфографии.НомерПервогоСимвола - 1);
		Слово = "";
		СловоСобрано = Ложь;
		
		// Посимвольный обход строки для выделения и проверки слов
		Для СчСимволов = ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола 
			По ДлинаСтроки Цикл
			
			ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола = СчСимволов;
			
			ПозицияВСтроке = ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола;
			Символ = Сред(СтрокаИзТекста, ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола, 1);
			
			Если Найти(СимволыРазделители, Символ) <> 0 Тогда
				
				Если СтрДлина(Слово) = 0 Тогда
					НоваяСтрока = НоваяСтрока + Символ;
				Иначе
					ДобавочныйСимвол = Символ;
					СловоСобрано = Истина;
				КонецЕсли;
				
			Иначе
				
				Слово = Слово + Символ;
				Если ДлинаСтроки = ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола Тогда 
					СловоСобрано = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ПараметрыПроверкиОрфографии.Свойство("Слово") Тогда 
				ПараметрыПроверкиОрфографии.Вставить("Слово", "");
			КонецЕсли;	
			
			ПараметрыПроверкиОрфографии.Слово = Слово;
			
			Если СловоСобрано Тогда
				
				Результат = ОрфографияОбработатьСлово(ПараметрыПроверкиОрфографии, Слово, СтрокаИзТекста);
				Слово = "";
				СловоСобрано = Ложь;
				ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола = 
					ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола + 1;
				
				Если Не Результат Тогда
					// Процедура проверки прервана модальным окном и будет продолжена при его закрытии
					Возврат;
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола = 1;
		
	КонецЦикла;
	
	ЗавершитьПроверкуОрфографии(ПараметрыПроверкиОрфографии);
	
КонецПроцедуры

&НаКлиенте
Функция ОрфографияОбработатьСлово(ПараметрыПроверкиОрфографии, Слово, СтрокаИзТекста)
				
	СловоНужноПроверитьWord = Истина;
	НеСовпадаетЧислоВхожденийВТекстеИHtml = Ложь;
	
	ЧислоВТексте = СтрЧислоВхождений(ПараметрыПроверкиОрфографии.ТекстДляПроверки, Слово);
	ЧислоВHTML = СтрЧислоВхождений(ПараметрыПроверкиОрфографии.ТекстHTMLОригинальный, Слово);
	Если ЧислоВHTML <> ЧислоВТексте Тогда
		НеСовпадаетЧислоВхожденийВТекстеИHtml = Истина;
	КонецЕсли;	
	
	НаличиеСлова = ПараметрыПроверкиОрфографии.Исключения.Получить(Слово);
	Если НаличиеСлова <> Неопределено Тогда
		СловоНужноПроверитьWord = Ложь;
		ПараметрыПроверкиОрфографии.СловПропущено = ПараметрыПроверкиОрфографии.СловПропущено + 1;
	КонецЕсли;	
	
	ЗамененноеСлово = ПараметрыПроверкиОрфографии.СловаЗамены.Получить(Слово);
	Если ЗамененноеСлово <> Неопределено Тогда
		Слово = ЗамененноеСлово;
		ПараметрыПроверкиОрфографии.СловЗаменено = ПараметрыПроверкиОрфографии.СловЗаменено + 1;
	КонецЕсли;	
	
	Если СловоНужноПроверитьWord Тогда
		
		Если Не ПараметрыПроверкиОрфографии.Word.CheckSpelling(Слово) Тогда
			
			СписокВариантов = Новый СписокЗначений;
			
			Если НеСовпадаетЧислоВхожденийВТекстеИHtml = Ложь Тогда
				
				ВариантыЗамены = ПараметрыПроверкиОрфографии.Word.getSpellingSuggestions(Слово);
				
				Если ВариантыЗамены.Count <> 0 Тогда
					Для НомерВарианта = 1 По ВариантыЗамены.Count Цикл
						СписокВариантов.Добавить(ВариантыЗамены.Item(НомерВарианта).Name);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура("ИсходнаяСтрока,СловоЗамены,СписокВариантов,НеСовпадаетЧислоВхожденийВТекстеИHtml");
			ПараметрыФормы.ИсходнаяСтрока = СокрЛП(СтрокаИзТекста);
			ПараметрыФормы.СловоЗамены = Слово;
			ПараметрыФормы.СписокВариантов = СписокВариантов.Скопировать();
			ПараметрыФормы.НеСовпадаетЧислоВхожденийВТекстеИHtml = НеСовпадаетЧислоВхожденийВТекстеИHtml;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПроверкиОрфографииВБлокеТекста", ЭтотОбъект, ПараметрыПроверкиОрфографии);
			ОткрытьФорму(
                "ОбщаяФорма.ПроверкаОрфографии", 
				ПараметрыФормы,
				ЭтаФорма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			Возврат Ложь;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Слово = "";
	СловоСобрано = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПроверкуОрфографии(ПараметрыПроверкиОрфографии)
	
	ПараметрыПроверкиОрфографии.Word.Quit();
	ПараметрыПроверкиОрфографии.Word = Неопределено;
	
	Если СокрЛП(ПараметрыПроверкиОрфографии.ТекстHTMLОригинальный) <> СокрЛП(ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный) Тогда
        УстановитьТекстПисьма(ПараметрыПроверкиОрфографии);
		Модифицированность = Истина;
	КонецЕсли;
    
	
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Проверка орфографии завершена. 
		|Заменено слов: %1, пропущено слов: %2.'"),
		ПараметрыПроверкиОрфографии.СловЗаменено, ПараметрыПроверкиОрфографии.СловПропущено);
		
	ПоказатьПредупреждение(,ТекстПредупреждения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПисьма(ПараметрыПроверкиОрфографии)
    
    ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный, ПараметрыПроверкиОрфографии.Вложения);
    
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПроверкиОрфографииВБлокеТекста(КодВозврата, ПараметрыПроверкиОрфографии) Экспорт
    
	Если ТипЗнч(КодВозврата) <> Тип("Структура") Тогда
		ЗавершитьПроверкуОрфографии(ПараметрыПроверкиОрфографии);
		Возврат;
	КонецЕсли;	
	
	СловоИсходное = ПараметрыПроверкиОрфографии.Слово;
	Кнопка = КодВозврата.Кнопка;
	
	Если Кнопка = "Завершить" Тогда
		ЗавершитьПроверкуОрфографии(ПараметрыПроверкиОрфографии);
		Возврат;
	КонецЕсли;
	
	Если Кнопка = "ПропуститьВсе" Тогда
		ПараметрыПроверкиОрфографии.Исключения.Вставить(ПараметрыПроверкиОрфографии.Слово, 1);
		ПараметрыПроверкиОрфографии.СловПропущено = ПараметрыПроверкиОрфографии.СловПропущено + 1;
	КонецЕсли;
	
	Если Кнопка = "Пропустить" Тогда
		ПараметрыПроверкиОрфографии.СловПропущено = ПараметрыПроверкиОрфографии.СловПропущено + 1;
	КонецЕсли;
	
	Если Кнопка = "Заменить" Тогда
		
		ПараметрыПроверкиОрфографии.СловоОригинальное = ПараметрыПроверкиОрфографии.Слово;
		ПараметрыПроверкиОрфографии.СловоЗамены = КодВозврата.СловоЗамены;
		
		ПараметрыПроверкиОрфографии.ПозицияВСтроке = ПараметрыПроверкиОрфографии.ПозицияВСтроке 
			+ 1 
			+ СтрДлина(ПараметрыПроверкиОрфографии.СловоЗамены) 
			- СтрДлина(ПараметрыПроверкиОрфографии.СловоОригинальное);
			
		ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола = ПараметрыПроверкиОрфографии.НомерАнализируемогоСимвола	
		 + (СтрДлина(ПараметрыПроверкиОрфографии.СловоЗамены) - СтрДлина(ПараметрыПроверкиОрфографии.СловоОригинальное));
			
		ПараметрыПроверкиОрфографии.НомерСлова = 
			ПараметрыПроверкиОрфографии.ПорядокСлов.Получить(СловоИсходное);
		
		ПараметрыПроверкиОрфографии.СловЗаменено = ПараметрыПроверкиОрфографии.СловЗаменено + 1;
		
		ПроверкаОрфографииЗаменить(ПараметрыПроверкиОрфографии);
		Возврат;
		
	КонецЕсли;
	
	Если Кнопка = "ЗаменитьВсе" Тогда
		
		ПараметрыПроверкиОрфографии.СловоЗамены = КодВозврата.СловоЗамены;
		ПараметрыПроверкиОрфографии.СловаЗамены.Вставить(ПараметрыПроверкиОрфографии.Слово, ПараметрыПроверкиОрфографии.СловоЗамены);
		ПараметрыПроверкиОрфографии.ПозицияВСтроке = ПараметрыПроверкиОрфографии.ПозицияВСтроке 
			+ 1 
			+ СтрДлина(ПараметрыПроверкиОрфографии.СловоЗамены) 
			- СтрДлина(ПараметрыПроверкиОрфографии.СловоОригинальное);
		ПараметрыПроверкиОрфографии.СловоОригинальное = ПараметрыПроверкиОрфографии.Слово;
		ПараметрыПроверкиОрфографии.НомерСлова = 
			ПараметрыПроверкиОрфографии.ПорядокСлов.Получить(СловоИсходное);
		
		ПараметрыПроверкиОрфографии.СловЗаменено = ПараметрыПроверкиОрфографии.СловЗаменено + 1;
		
		ПроверкаОрфографииЗаменитьВсе(ПараметрыПроверкиОрфографии);
		Возврат;
		
	КонецЕсли;
	
	Если Кнопка = "ДобавитьИсключение" Тогда
		
		ПараметрыПроверкиОрфографии.Исключения.Вставить(ПараметрыПроверкиОрфографии.Слово, 1);
		ПроверкаОрфографииКлиент.ДобавитьСловоВИсключенияWord(
			ПараметрыПроверкиОрфографии.Word, 
			ПараметрыПроверкиОрфографии.Слово);
		
	КонецЕсли;
	
	НомерСлова = ПараметрыПроверкиОрфографии.ПорядокСлов.Получить(СловоИсходное);
	Если ПараметрыПроверкиОрфографии.НомерСлова = Неопределено
		Или ПараметрыПроверкиОрфографии.НомерСлова = -1 Тогда
		ПараметрыПроверкиОрфографии.НомерСлова = 0;
	КонецЕсли;	
	ПараметрыПроверкиОрфографии.НомерСлова = ПараметрыПроверкиОрфографии.НомерСлова + 1;
	ПараметрыПроверкиОрфографии.ПорядокСлов.Вставить(СловоИсходное, ПараметрыПроверкиОрфографии.НомерСлова);
	
	ПроверитьОрфографиюВБлокеТекста(ПараметрыПроверкиОрфографии); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаОрфографииЗаменить(ПараметрыПроверкиОрфографии)
	
	// Заменяем не все вхождения слова, а только одно
	ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный = ЗаменитьСлово(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный, 
		ПараметрыПроверкиОрфографии.СловоОригинальное, 
		ПараметрыПроверкиОрфографии.СловоЗамены, 
		ПараметрыПроверкиОрфографии.НомерСлова);
		
	ПараметрыПроверкиОрфографии.Текст = ПолучитьТекстИзHTML(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный);
		
	// Продолжение проверки	
	ПроверитьОрфографиюВБлокеТекста(ПараметрыПроверкиОрфографии);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаОрфографииЗаменитьВсе(ПараметрыПроверкиОрфографии)
	
	// Заменяем все вхождения слова
	ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный = ЗаменитьВсеСловаПосле(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный, 
		ПараметрыПроверкиОрфографии.СловоОригинальное, 
		ПараметрыПроверкиОрфографии.СловоЗамены, 
		ПараметрыПроверкиОрфографии.НомерСлова, 
		ПараметрыПроверкиОрфографии.СловЗаменено);
		
	ПараметрыПроверкиОрфографии.Текст = ПолучитьТекстИзHTML(
		ПараметрыПроверкиОрфографии.ТекстHTMLИзмененный);			
	
	// Продолжение проверки	
	ПроверитьОрфографиюВБлокеТекста(ПараметрыПроверкиОрфографии);	
	
КонецПроцедуры

&НаКлиенте
Функция ЗаменитьСлово(ТекстHTMLИзмененный, СловоОригинальное, СловоЗамены, НомерПредыдущегоСлова)
	
	НовыйТекстHTML = "";
	
	Если НомерПредыдущегоСлова = -1 Или НомерПредыдущегоСлова = Неопределено Тогда
		НомерПредыдущегоСлова = 0;
	КонецЕсли;	
	
	Если НомерПредыдущегоСлова <> 0 Тогда
		
		ПозицияНачалаСлова = -1;
		ТекущийНомерСлова = 0;
		
		Пока Истина Цикл
			
			ПозицияНачалаСлова = ПроверкаОрфографииКлиент.НайтиПосле(ТекстHTMLИзмененный, СловоОригинальное, ПозицияНачалаСлова + 1);
			Если ПозицияНачалаСлова = 0 Тогда
				Возврат ТекстHTMLИзмененный;
			КонецЕсли;
			
			ТекущийНомерСлова = ТекущийНомерСлова + 1;
			Если ТекущийНомерСлова = НомерПредыдущегоСлова + 1 Тогда
				
				НовыйТекстHTML = Лев(ТекстHTMLИзмененный, ПозицияНачалаСлова - 1)
					+ СловоЗамены
					+ Сред(ТекстHTMLИзмененный, ПозицияНачалаСлова + СтрДлина(СловоОригинальное));
					
				Возврат НовыйТекстHTML;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	Иначе // просто первое вхождение слова	
		
		ПозицияНачалаСлова = Найти(ТекстHTMLИзмененный, СловоОригинальное);
		Если ПозицияНачалаСлова = 0 Тогда
			Возврат ТекстHTMLИзмененный;
		КонецЕсли;	
		
		НовыйТекстHTML = Лев(ТекстHTMLИзмененный, ПозицияНачалаСлова - 1)
			+ СловоЗамены
			+ Сред(ТекстHTMLИзмененный, ПозицияНачалаСлова + СтрДлина(СловоОригинальное));
		
	КонецЕсли;	
	
	Возврат НовыйТекстHTML;
	
КонецФункции	

&НаКлиенте
Функция ЗаменитьВсеСловаПосле(ТекстHTMLИзмененный, СловоОригинальное, СловоЗамены, НомерПредыдущегоСлова, СловЗаменено)
	
	НовыйТекстHTML = ТекстHTMLИзмененный;
	
	Если НомерПредыдущегоСлова = -1 Или НомерПредыдущегоСлова = Неопределено Тогда
		НомерПредыдущегоСлова = 0;
	КонецЕсли;	
	
	ПозицияНачалаСлова = -1;
	ТекущийНомерСлова = 0;
	ЧислоЗамен = 0;
	СимволыРазделители = ПроверкаОрфографииКлиент.ПолучитьСимволыРазделители();
	
	Пока Истина Цикл
		
		ПозицияНачалаСлова = ПроверкаОрфографииКлиент.НайтиПосле(НовыйТекстHTML, СловоОригинальное, ПозицияНачалаСлова + 1);
		Если ПозицияНачалаСлова = 0 Тогда
			Возврат НовыйТекстHTML;
		КонецЕсли;
		
		ТекущийНомерСлова = ТекущийНомерСлова + 1;
		Если ТекущийНомерСлова >= НомерПредыдущегоСлова + 1 Тогда
			
			ИспользоватьСлово = Истина;
			
			Если ПозицияНачалаСлова > 1 Тогда
				СимволДо = Сред(НовыйТекстHTML, ПозицияНачалаСлова - 1, 1);
				Если Найти(СимволыРазделители, СимволДо) = 0 Тогда
					ИспользоватьСлово = Ложь;
				КонецЕсли;		
			КонецЕсли;	
			
			ПозицияКонцаСлова = ПозицияНачалаСлова + СтрДлина(СловоОригинальное);
			Если ПозицияКонцаСлова < СтрДлина(НовыйТекстHTML) Тогда
				СимволПосле = Сред(НовыйТекстHTML, ПозицияКонцаСлова, 1);
				Если Найти(СимволыРазделители, СимволПосле) = 0 Тогда
					ИспользоватьСлово = Ложь;
				КонецЕсли;		
			КонецЕсли;	
			
			Если ИспользоватьСлово Тогда
				
				Если ЧислоЗамен <> 0 Тогда
					СловЗаменено = СловЗаменено + 1;
				КонецЕсли;	
				ЧислоЗамен = ЧислоЗамен + 1;
				
				НовыйТекстHTML = Лев(НовыйТекстHTML, ПозицияНачалаСлова - 1)
					+ СловоЗамены
					+ Сред(НовыйТекстHTML, ПозицияНачалаСлова + СтрДлина(СловоОригинальное));
					
			Иначе
				ПозицияНачалаСлова = ПозицияНачалаСлова + 1;
			КонецЕсли;		
			
		КонецЕсли;	
		
	КонецЦикла;	
		
	Возврат НовыйТекстHTML;
	
КонецФункции	

&НаКлиенте
Функция ПолучитьТекстИзHTML(Знач ТекстHTML)
    
    ОчистительТекста = Новый ФорматированныйДокумент;
    ОчистительТекста.УстановитьHTML(ТекстHTML, Новый Структура);
    
    Возврат СокрЛП(ОчистительТекста.ПолучитьТекст());

КонецФункции


&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		РаботаСКартинкамиКлиент.УстановитьКомпоненту();
	КонецЕсли;
	
	ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
	Если Не ПустаяСтрока(ПутьКФайлу) Тогда
		Картинка = Новый Картинка(ПутьКФайлу);
		АдресКартинки = ПоместитьВоВременноеХранилище(Картинка, АдресКартинки);
		ВставитьКартинкуИзБуфераНаСервере(АдресКартинки);
		Модифицированность = Истина;
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзШаблона(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьИзШаблонаЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(СервисИнициатора) Тогда
		ПараметрыФормы.Вставить("Сервис", СервисИнициатора);
		ПараметрыФормы.Вставить("Витрина", ВитринаИнициатора);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ШаблоныТекстов.ФормаВыбора",ПараметрыФормы,ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзКонсультации(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьИзКонсультацииЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Обращение", Предмет);
	
	ОткрытьФорму("Справочник.Консультации.ФормаВыбора",ПараметрыФормы,ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПереслатьВыполнить(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
		ПереслатьВыполнить();
	Иначе
		
		Если ПроверитьЗаполнениеСписковАдресатов() Тогда
			Возврат;
		КонецЕсли;
		
		Если СписокПолучателей.Количество() = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Необходимо указать хотя бы одного получателя письма.'"),, "СписокПолучателей");
			Возврат;
			
		ИначеЕсли (СписокПолучателей.Количество() = 1 И ПустаяСтрока(СписокПолучателей[0].Адрес)) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Необходимо указать хотя бы одного получателя письма.'"),, "СписокПолучателей[0].Представление");
			Возврат;
			
		КонецЕсли;
		
		Если Объект.ВнутренняяПереписка = ПредположительноВнутренняяПереписка Тогда
			ОтправитьВыполнить();
		Иначе
			Оповещение = Новый ОписаниеОповещения("ОтправитьПереслатьВыполнитьЗавершение", ЭтотОбъект);
			 
			Если ПредположительноВнутренняяПереписка Тогда
				ТекстВопроса = НСтр("ru='В получателях письма нет адреса инициатора обращения, 
										|возможно письмо является внутренней перепиской. Установить признак?'");
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Установить'")); 
				Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Не устанавливать'"));
				Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			Иначе
				ТекстВопроса = НСтр("ru='В получателях письма есть адрес инициатора обращения, 
										|возможно письмо не является внутренней перепиской. Снять признак?'"); 
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Снять'")); 
				Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Не снимать'"));
				Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			КонецЕсли;
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПереслатьВыполнитьЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВнутренняяПереписка = ПредположительноВнутренняяПереписка;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли; 
	
	ОтправитьВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура HTML(Команда)
	
	Если ФорматСообщения <> ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML") Тогда
		
		ФорматСообщения = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML");
		ФорматСообщенияПриИзменении();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйТекст(Команда)
	
	Если ФорматСообщения <> ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст") Тогда
		
		ФорматСообщения = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст");
		ФорматСообщенияПриИзменении();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТекстПисьмаОснования(Команда)
	
	Элементы.ОтображатьТекстПисьмаОснования.Пометка = НЕ Элементы.ОтображатьТекстПисьмаОснования.Пометка;
	Элементы.ГруппаВходящее.Видимость = Элементы.ОтображатьТекстПисьмаОснования.Пометка;
	Объект.ОтображатьТелоИсходногоПисьма = Не Объект.ОтображатьТелоИсходногоПисьма;
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьКонтакты(Команда)
	
	Если Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
		
		РедактироватьСписокПолучателей(Истина, НСтр("ru = 'Копии'"));
		
	Иначе
		
		РедактироватьСписокПолучателей(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПисьма(Команда)
	
	ТекстИдентификаторы = Новый ТекстовыйДокумент;
	ТекстИдентификаторы.ДобавитьСтроку("Идентификатор сообщения:  " + Объект.ИдентификаторСообщения);
	ТекстИдентификаторы.ДобавитьСтроку("Идентификатор основания:  " + Объект.ИдентификаторОснования);
	ТекстИдентификаторы.ДобавитьСтроку("Идентификаторы оснований: " 
	                                   + ПолучитьПредставлениеИдентификаторовОснований(Объект.ИдентификаторыОснований));
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Создано", Объект.Дата);
	СтруктураПараметры.Вставить("Отправлено", Объект.ДатаОтправления);
	СтруктураПараметры.Вставить("УведомитьОДоставке", Объект.УведомитьОДоставке);
	СтруктураПараметры.Вставить("УведомитьОПрочтении", Объект.УведомитьОПрочтении);
	СтруктураПараметры.Вставить("ЗаголовкиИнтернета", ТекстИдентификаторы);
	СтруктураПараметры.Вставить("Письмо", Объект.Ссылка);
	СтруктураПараметры.Вставить("ТипПисьма", "ЭлектронноеПисьмоИсходящее");
	СтруктураПараметры.Вставить("Кодировка", Объект.Кодировка);
	СтруктураПараметры.Вставить("ВнутреннийНомер", Объект.Номер);
	СтруктураПараметры.Вставить("ВключатьТелоИсходногоПисьма", Объект.ВключатьТелоИсходногоПисьма);
	СтруктураПараметры.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	
	ОткрытьФорму("ЖурналДокументов.Взаимодействия.Форма.ПараметрыЭлектронногоПисьма", СтруктураПараметры, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьВнешнююСсылкуНаОбъектИнформационнойБазы(Команда)
	
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.ФормированиеВнешнейСсылкиНаОбъект",,ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ШаблоныСообщений

&НаКлиенте
Процедура СформироватьПоШаблону(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		МодульШаблоныСообщенийКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШаблоныСообщенийКлиент");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПослеВыбораШаблона", ЭтотОбъект);
		ПредметСообщения = ?(ЗначениеЗаполнено(Предмет), Предмет, "Общий");
		МодульШаблоныСообщенийКлиент.ПодготовитьСообщениеПоШаблону(ПредметСообщения, "Письмо", Оповещение);
	КонецЕсли
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере 
Процедура УстановитьРеквизитыИнициатора()
	
	АдресаИнициатора.Очистить();
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.Обращение") И ЗначениеЗаполнено(Предмет) Тогда
		РеквизитыИнициатора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, "Сервис, Витрина, Инициатор");
		СервисИнициатора = РеквизитыИнициатора.Сервис;
		ВитринаИнициатора = РеквизитыИнициатора.Витрина;
		ИнициаторОбращения = РеквизитыИнициатора.Инициатор;
		ДанныеАдресов = КонтактнаяИнформацияУСП.ВсеЭлектронныеАдресаПользователяСервиса(ИнициаторОбращения);
		Для каждого ДанныеАдреса Из ДанныеАдресов Цикл
			АдресаИнициатора.Добавить(ВРег(ДанныеАдреса.Адрес));
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьКартинкуИзБуфераНаСервере(АдресКартинки)
	
	Начало = Неопределено;
	Окончание = Неопределено;
	Элементы.ТекстПисьмаФорматированныйДокумент.ПолучитьГраницыВыделения(Начало, Окончание);
	Если Окончание = Неопределено Тогда
		ЗакладкаДляВставки = ТекстПисьмаФорматированныйДокумент.ПолучитьЗакладкуНачала();
	Иначе
		ЗакладкаДляВставки = Окончание;
	КонецЕсли; 
	
	ТекстПисьмаФорматированныйДокумент.Вставить(ЗакладкаДляВставки, 
		ПолучитьИзВременногоХранилища(АдресКартинки), Тип("КартинкаФорматированногоДокумента"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Тема.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтатусПисьма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВложенияКонтекстноеМенюСвойстваВложения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтатусПисьма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаКлиенте
Процедура НаКонтролеПриИзменении()
	
	УправлениеДоступностью();
	
	Рассмотрено = НЕ НаКонтроле;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеСписковАдресатов()
	
	Отказ = Ложь;
	
	ПредположительноВнутренняяПереписка = Истина;
	Для каждого СтрокаАдреса Из СписокПолучателей Цикл
	
		
		Результат = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(СтрокаАдреса.Представление);
		Для Каждого СтруктураАдреса Из Результат Цикл
			Если АдресаИнициатора.НайтиПоЗначению(ВРег(СтруктураАдреса.Адрес)) <> Неопределено Тогда
				ПредположительноВнутренняяПереписка = Ложь;
			КонецЕсли;
			Если Не ПустаяСтрока(СтруктураАдреса.ОписаниеОшибки) Тогда
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураАдреса.ОписаниеОшибки, , "СписокПолучателей[" + Строка(СписокПолучателей.Индекс(СтрокаАдреса)) + "].Представление");
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			Результат = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(СтрокаАдреса.Адрес);
			Для Каждого СтруктураАдреса Из Результат Цикл
				Если АдресаИнициатора.НайтиПоЗначению(ВРег(СтруктураАдреса.Адрес)) <> Неопределено Тогда
					ПредположительноВнутренняяПереписка = Ложь;
				КонецЕсли;
				Если Не ПустаяСтрока(СтруктураАдреса.ОписаниеОшибки) Тогда
					Отказ = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураАдреса.ОписаниеОшибки, , "СписокПолучателей[" + Строка(СписокПолучателей.Индекс(СтрокаАдреса)) + "].Представление");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Функция НеобходимаОбработкаПисьмаОснования()

	Возврат ВыполняетсяОтправка И Объект.ВключатьТелоИсходногоПисьма И ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML") 
	        И (Не Объект.ВзаимодействиеОснование = Неопределено) И (Не Объект.ВзаимодействиеОснование.Пустая()) 
	        И Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;

КонецФункции

//{Рарус kruser 10.06.2019 87760
&НаСервере
Процедура УстановитьВидимостьДляКлиентаКомпании()

	Если УРВСервер.ПроверитьДоступностьРолиКлиентКомпании() Тогда
		
		Элементы.ФормаКоманднаяПанель.Видимость = Ложь;
		Элементы.Предмет.КнопкаОткрытия = Ложь;
		Элементы.Предмет.ТолькоПросмотр = Истина;
		Элементы.Ответственный.КнопкаОткрытия = Ложь;
		Элементы.НаКонтроле.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры
//}Рарус kruser 10.06.2019 87760

/////////////////////////////////////////////////////////////////////////////////
//  Управление доступностью элементов формы.

&НаКлиенте
Процедура УправлениеДоступностью()

	Элементы.РассмотретьПосле.Доступность = НаКонтроле;
	
	Если Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее") 
		И (НЕ ИнформационнаяБазаФайловая
		ИЛИ (Объект.ДатаКогдаОтправить <> Дата(1,1,1) И Объект.ДатаКогдаОтправить > ОбщегоНазначенияКлиент.ДатаСеанса())
		ИЛИ (Объект.ДатаАктуальностиОтправки <> Дата(1,1,1) И Объект.ДатаАктуальностиОтправки < ОбщегоНазначенияКлиент.ДатаСеанса())) Тогда
		
		Элементы.Отправить.Доступность = Ложь;
		
	Иначе
		
		Элементы.Отправить.Доступность = Истина;
		
	КонецЕсли;
	
	Элементы.ГруппаДатаОтправкиАктуальность.Доступность = (Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено")); 

КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьДоступностьЭлементовВЗависимостиОтСтатусаПисьма()

	Если Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда
		УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(
			Элементы.ОтправительПредставление.СписокВыбора,ДоступныеДляОтправкиУчетныеЗаписи);
		Если (Объект.Ссылка.Пустая() Или Объект.УчетнаяЗапись.Пустая()) И ДоступныеДляОтправкиУчетныеЗаписи.Количество() > 0 Тогда
			Если Объект.УчетнаяЗапись.Пустая() Тогда
				Объект.УчетнаяЗапись = ДоступныеДляОтправкиУчетныеЗаписи[0].УчетнаяЗапись;
			КонецЕсли;
			ЭлементСписка = Элементы.ОтправительПредставление.СписокВыбора.НайтиПоЗначению(Объект.УчетнаяЗапись);
			Если ЭлементСписка <> Неопределено Тогда
				Объект.ОтправительПредставление = ЭлементСписка.Представление;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Элементы.ОтправительПредставление.ТолькоПросмотр             = Истина;
		Элементы.СписокПолучателейВариантОтправки.ТолькоПросмотр     = Истина;
		Элементы.СписокПолучателейПредставление.РедактированиеТекста = Ложь;
		
	КонецЕсли;
	
	Если Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		
		Если Вложения.Количество() > 0 Тогда
			Элементы.ДобавитьВложение.Доступность = Ложь;
			Элементы.УдалитьВложение.Доступность  = Ложь;
			Элементы.ДобавитьПисьмо.Доступность   = Ложь;
			Элементы.ФайлыУдалитьВложение.Доступность  = Ложь;
			Элементы.ФайлыДобавитьВложение.Доступность = Ложь;
		Иначе
			Элементы.ФайлыЗаголовок.Видимость = Ложь;
			Элементы.Вложения.Видимость = Ложь;
		КонецЕсли;
		
		Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
			ТекстПисьма = Объект.ТекстHTML;
			ТекстПисьма = Взаимодействия.ОбработатьТекстHTML(Объект.Ссылка);
			Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеHTMLДокумента;
			Элементы.ТекстПисьма.ТолькоПросмотр = Ложь;
		Иначе
			ТекстПисьма = Объект.Текст;
			Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
			Элементы.ТекстПисьма.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее 
			И (НЕ ИнформационнаяБазаФайловая 
			ИЛИ (Объект.ДатаКогдаОтправить <> Дата(1,1,1) И Объект.ДатаКогдаОтправить > ТекущаяДатаСеанса())
			ИЛИ (Объект.ДатаАктуальностиОтправки <> Дата(1,1,1) И Объект.ДатаАктуальностиОтправки < ТекущаяДатаСеанса())) Тогда
			
			Элементы.Отправить.Доступность = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ОпределитьСпособРедактированияПисьма();
		
	КонецЕсли;

КонецПроцедуры

#Область РаботаСВложениями

&НаСервере
Процедура ДобавитьВложениеПисьмо(Письмо)
	
	Если Вложения.НайтиСтроки(Новый Структура("Письмо", Письмо)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРеквизиты = "Размер, Тема";
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		СтрокаРеквизиты =  СтрокаРеквизиты + ", ДатаПолучения";
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		СтрокаРеквизиты =  СтрокаРеквизиты + ", Дата, ДатаОтправления";
	Иначе
		Возврат;
	КонецЕсли;
	
	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо, СтрокаРеквизиты);
	
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ДатаПисьма = РеквизитыПисьма.ДатаПолучения;
	Иначе
		ДатаПисьма = ?(ЗначениеЗаполнено(РеквизитыПисьма.ДатаОтправления), РеквизитыПисьма.ДатаОтправления, РеквизитыПисьма.Дата);
	КонецЕсли;

	ПредставлениеПисьма = ВзаимодействияКлиентСервер.ПредставлениеПисьма(РеквизитыПисьма.Тема, ДатаПисьма);
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Письмо               = Письмо;
	НоваяСтрока.ИмяФайла             = ПредставлениеПисьма;
	НоваяСтрока.ИндексКартинки       = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла("eml");
	НоваяСтрока.ИмяФайлаНаКомпьютере = "";
	НоваяСтрока.ПодписанЭП           = Ложь;
	НоваяСтрока.Размер               = РеквизитыПисьма.Размер;
	НоваяСтрока.РазмерПредставление  = ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(НоваяСтрока.Размер);
	НоваяСтрока.Расположение         = 5;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПисьмаВложения()

	ТаблицаПисемВложений = Взаимодействия.ДанныеХранимыхВБазеПисемВложений(Объект.Ссылка);
	
	Для Каждого ПисьмоВложение Из ТаблицаПисемВложений Цикл
			
		ПредставлениеПисьма = ВзаимодействияКлиентСервер.ПредставлениеПисьма(ПисьмоВложение.Тема, ПисьмоВложение.Дата);
		
		НоваяСтрока = Вложения.Добавить();
		НоваяСтрока.Письмо               = ПисьмоВложение.Письмо;
		НоваяСтрока.ИмяФайла             = ПредставлениеПисьма;
		НоваяСтрока.ИндексКартинки       = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла("eml");
		НоваяСтрока.ИмяФайлаНаКомпьютере = "";
		НоваяСтрока.ПодписанЭП           = Ложь;
		НоваяСтрока.Размер               = ПисьмоВложение.Размер;
		НоваяСтрока.РазмерПредставление  = ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(НоваяСтрока.Размер);
		НоваяСтрока.Расположение         = 5;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПисьмо(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыОткрытия.Вставить("ТолькоПочта", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеДобавленияПисьма", ЭтотОбъект);
	ОткрытьФорму("ЖурналДокументов.Взаимодействия.ФормаСписка",
	             ПараметрыОткрытия,
	             ЭтотОбъект,,,,
	             ОписаниеОповещения,
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДобавленияПисьма(Результат, Параметры) Экспорт
	
	Если ВзаимодействияКлиентСервер.ЯвляетсяЭлектроннымПисьмом(Результат) Тогда
		
		ДобавитьВложениеПисьмо(Результат);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьВложениеВыполнить();

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	Если Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") Тогда
		УдалитьВложениеВыполнить();
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ВложенияКонтекстноеМенюСвойстваВложения.Доступность = (ТекущиеДанные.Расположение <> 5);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВыполнить()
	
	#Если Не ВебКлиент Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.МножественныйВыбор = Истина;
		ОписаниеОповещение = Новый ОписаниеОповещения("ДиалогВыбораФайловПослеВыбора", ЭтотОбъект);
		Диалог.Показать(ОписаниеОповещение);
		
	#Иначе

		Адрес = "";
		ВыбранныйФайл = "";
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ПомещениеФайлаПриОкончании", ЭтотОбъект);
		НачатьПомещениеФайла(ОбработчикОповещенияОЗакрытии, Адрес, ВыбранныйФайл, Истина, УникальныйИдентификатор);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеВыполнить()

	ДобавитьВложениеВСписокУдаленных();
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Индекс = Вложения.Индекс(ТекущиеДанные);
		Вложения.Удалить(Индекс);
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
	СтрокиКУдалению = новый Массив;
	
	Для каждого ИдентификаторСтроки Из Элементы.Вложения.ВыделенныеСтроки Цикл
		
		ТекДанные = Вложения.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если (ТекДанные <> Неопределено) И (ТекДанные.Расположение = 0) Тогда
			УдаленныеВложения.Добавить(ТекДанные.Ссылка);
		КонецЕсли;
		
		Если ТекДанные <> Неопределено Тогда
			СтрокиКУдалению.Добавить(ТекДанные);
		КонецЕсли;
		
	КонецЦикла;
	Для каждого Строка Из СтрокиКУдалению Цикл
		Вложения.Удалить(Вложения.Индекс(Строка));
	КонецЦикла; 
	
	ОбновитьОтображениеДанных();
	ВидимостьДоступностьЭлементовВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДоступностьЭлементовВложений()
	
	Если Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыФайловНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВСписокУдаленных()

	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если (ТекущиеДанные <> Неопределено) И (ТекущиеДанные.Расположение = 0) Тогда
		УдаленныеВложения.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнить()
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.Размер = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.Расположение = 0) ИЛИ (ТекущиеДанные.Расположение = 1) Тогда
		
		Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
			
			ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ТекущиеДанные.Ссылка, ПараметрыПисьмаВложения(), ЭтотОбъект);
			
		Иначе
			
			УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(ТекущиеДанные.Ссылка, ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.Расположение = 2 Тогда
		
		ПутьКФайлу = ТекущиеДанные.ИмяФайлаНаКомпьютере;
		#Если Не ВебКлиент Тогда
			
			Если ВзаимодействияКлиентСервер.ЭтоФайлПисьмо(ТекущиеДанные.ИмяФайла) Тогда
				
				Попытка
					
					Данные = Новый ДвоичныеДанные(ТекущиеДанные.ИмяФайлаНаКомпьютере);
					
					ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор), 
					                                           ПараметрыПисьмаВложения(),
					                                           ЭтотОбъект);
					
				Исключение
					ОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра(ПутьКФайлу);
				КонецПопытки;
			Иначе
				ОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра(ПутьКФайлу);
			КонецЕсли;
			
		#Иначе
			ПолучитьФайл(ПутьКФайлу, ТекущиеДанные.ИмяФайла, Истина);
		#КонецЕсли
		
	ИначеЕсли ТекущиеДанные.Расположение = 4 Тогда
		
		ПутьКФайлу = ТекущиеДанные.ИмяФайлаНаКомпьютере;
		#Если Не ВебКлиент Тогда
			Если ЭтоАдресВременногоХранилища(ТекущиеДанные.ИмяФайлаНаКомпьютере) Тогда
				ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
				СоздатьКаталог(ИмяВременнойПапки);
				ПутьКФайлу = ИмяВременнойПапки + "\" + ТекущиеДанные.ИмяФайла;
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(ТекущиеДанные.ИмяФайлаНаКомпьютере);
				ДвоичныеДанные.Записать(ПутьКФайлу);
			КонецЕсли;
			ОбщегоНазначенияКлиент.ОткрытьФайлВПрограммеПросмотра(ПутьКФайлу);
		#Иначе
			ПолучитьФайл(ПутьКФайлу, ТекущиеДанные.ИмяФайла, Истина);
		#КонецЕсли
		
	ИначеЕсли ТекущиеДанные.Расположение = 5 Тогда
		
		ПараметрыВложения = ВзаимодействияКлиент.ПустаяСтруктураПараметровПисьмаВложения();
		ПараметрыВложения.ДатаПисьмаОснования = ?(ЗначениеЗаполнено(Объект.ДатаОтправления), Объект.ДатаОтправления , Объект.Дата);
		ПараметрыВложения.ПисьмоОснование     = Объект.Ссылка;
		ПараметрыВложения.ТемаПисьмаОснования = Объект.Тема;
		
		ВзаимодействияКлиент.ОткрытьВложениеПисьмо(ТекущиеДанные.Письмо,
		                                           ПараметрыПисьмаВложения(),
		                                           ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФайлы(Источник, Приемник)
	
	МассивИменФайлов = Новый Массив;
	МассивСсылокНаФайлы = Новый Массив;
	МассивАдресовФайлов = Новый Массив;
	
	Если ТипЗнч(Источник) = Тип("Файл") И 
		Источник.ЭтоФайл() = Истина Тогда
		
		МассивИменФайлов.Добавить(Источник.ПолноеИмя);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("Массив") Тогда
		
		Если Источник.Количество() >= 1 Тогда
			Для Каждого ФайлПринятый Из Источник Цикл
				Если ТипЗнч(ФайлПринятый) = Тип("Файл") И ФайлПринятый.ЭтоФайл() Тогда
					МассивИменФайлов.Добавить(ФайлПринятый.ПолноеИмя);
				КонецЕсли;
				
				Если ТипВсеПрисоединенныеФайлы.СодержитТип(ТипЗнч(ФайлПринятый)) Тогда
					МассивСсылокНаФайлы.Добавить(ФайлПринятый);
				КонецЕсли;
				
				Если ТипЗнч(ФайлПринятый) = Тип("Структура") Тогда
					МассивАдресовФайлов.Добавить(ФайлПринятый);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из МассивИменФайлов Цикл
		
		НоваяСтрока = Приемник.Добавить();
		НоваяСтрока.Расположение = 2;
		НоваяСтрока.ИмяФайлаНаКомпьютере = ВыбранныйФайл;
		
		ИмяФайла   = "";
		Расширение = "";
		ВзаимодействияКлиентСервер.ПолучитьКаталогИИмяФайла(ВыбранныйФайл, "", ИмяФайла);
		НоваяСтрока.ИмяФайла = ИмяФайла;
		
		Расширение                      = ВзаимодействияКлиентСервер.РасширениеФайла(ИмяФайла);
		НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
		Файл                            = Новый Файл(ВыбранныйФайл);
		НоваяСтрока.Размер              = Файл.Размер();
		НоваяСтрока.РазмерПредставление = ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(НоваяСтрока.Размер);
		
	КонецЦикла;
	
	Для Каждого ФайлПринятый Из МассивСсылокНаФайлы Цикл
		НоваяСтрока = Приемник.Добавить();
		НоваяСтрока.Расположение = 1;
		НоваяСтрока.Ссылка = ФайлПринятый;
	КонецЦикла;
	
	Для Каждого ФайлПринятый Из МассивАдресовФайлов Цикл
		
		НоваяСтрока = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ФайлПринятый, "Расположение, ИмяФайлаНаКомпьютере, ИмяФайла, ИндексКартинки, Размер"); //
				
	КонецЦикла;
	
	ЗаполнитьРеквизитыФайловНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения(ПереданныеПараметры = Неопределено)
	
	Если Объект.Ссылка.Пустая() И ПереданныеПараметры <> Неопределено Тогда
		Если ПереданныеПараметры.Свойство("Основание") 
			И ТипЗнч(ПереданныеПараметры.Основание) = Тип("Структура") 
			И ПереданныеПараметры.Основание.Свойство("Команда") Тогда 
			
			Если  ПереданныеПараметры.Основание.Команда = "Переслать" Тогда
			
				ТабВложения = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(ПереданныеПараметры.Основание.Основание, Истина);
				Для Каждого СтрокаТаблицыВложений Из ТабВложения Цикл
					Если ПустаяСтрока(СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма) Тогда
						НоваяСтрока = Вложения.Добавить();
						НоваяСтрока.Ссылка              = СтрокаТаблицыВложений.Ссылка;
						НоваяСтрока.ИмяФайла            = СтрокаТаблицыВложений.ИмяФайла;
						НоваяСтрока.ИндексКартинки      = СтрокаТаблицыВложений.ИндексКартинки;
						НоваяСтрока.Размер              = СтрокаТаблицыВложений.Размер;
						НоваяСтрока.РазмерПредставление = СтрокаТаблицыВложений.РазмерПредставление;
						НоваяСтрока.Расположение        = 1;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ПереданныеПараметры.Основание.Команда = "ПереслатьКакВложение"
				И Параметры.Основание.Свойство("Основание")  Тогда

				ДобавитьВложениеПисьмо(Параметры.Основание.Основание);
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		Вложения.Очистить();
		ТабВложения = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка, Истина);
		Для Каждого СтрокаТаблицыВложений Из ТабВложения Цикл
			Если ПустаяСтрока(СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма) Тогда
				НоваяСтрока = Вложения.Добавить();
				НоваяСтрока.Ссылка              = СтрокаТаблицыВложений.Ссылка;
				НоваяСтрока.ИмяФайла            = СтрокаТаблицыВложений.ИмяФайла;
				НоваяСтрока.ИндексКартинки      = СтрокаТаблицыВложений.ИндексКартинки;
				НоваяСтрока.Размер              = СтрокаТаблицыВложений.Размер;
				НоваяСтрока.РазмерПредставление = СтрокаТаблицыВложений.РазмерПредставление;
				НоваяСтрока.ПодписанЭП          = СтрокаТаблицыВложений.ПодписанЭП;
				НоваяСтрока.Расположение        = 0;
			КонецЕсли;
		КонецЦикла;
		
		ДобавитьПисьмаВложения();
		
	КонецЕсли;
	
	Вложения.Сортировать("ИмяФайла");
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьВходящееПисьмоОснованиеКакВложениеЕслиНеобходимо(ТекущийОбъект)
	
	Если ТекущийОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее 
		И Не ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML") 
		И (ТипЗнч(ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
		ИЛИ ТипЗнч(ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) 
		И ТипТекстаВходящегоПисьма = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
		
		Если ТипЗнч(ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ТекстHTMLВходящее = Взаимодействия.СформироватьТекстHTMLДляВходящегоПисьма(ВзаимодействиеОснование, Истина, Истина);
		Иначе
			ТекстHTMLВходящее = Взаимодействия.СформироватьТекстHTMLДляИсходящегоПисьма(ВзаимодействиеОснование, Истина, Истина);
		КонецЕсли;
		
		ИмяФайла = ПолучитьИмяВременногоФайла("html");
		ФайлИсходноеСообщение = Новый ЗаписьТекста(ИмяФайла,КодировкаТекста.UTF16);
		ФайлИсходноеСообщение.Записать(ТекстHTMLВходящее);
		ФайлИсходноеСообщение.Закрыть();
		ДвоичныеДанные       = Новый ДвоичныеДанные(ИмяФайла);
		АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		ФайлНаДиске = Новый Файл(ИмяФайла);
		Если ФайлНаДиске.Существует() Тогда
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов", ТекущийОбъект.Ссылка);
		ПараметрыФайла.Вставить("Автор", Неопределено);
		ПараметрыФайла.Вставить("ИмяБезРасширения", НСтр("ru = 'Пересылаемое сообщение'"));
		ПараметрыФайла.Вставить("РасширениеБезТочки", "html");
		ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВХранилище);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваВложения(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИндексВКоллекции = Вложения.Индекс(ТекущиеДанные);
	
	Если ТекущиеДанные.Ссылка = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("ТекущийИндексВКоллекции", ТекущийИндексВКоллекции);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОЗаписиФайлаПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Свойства файла доступны только после его записи. Записать?'");
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьСвойстваВложения(ТекущийИндексВКоллекции);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаПриОкончании(РезультатПомещения, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если РезультатПомещения = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Расположение = 4;
	НоваяСтрока.ИмяФайлаНаКомпьютере = Адрес;
	НоваяСтрока.ИмяФайла = ВыбранноеИмяФайла;
	
	Расширение = ВзаимодействияКлиентСервер.РасширениеФайла(ВыбранноеИмяФайла);
	НоваяСтрока.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	
	Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ОбновитьОтображениеДанных();

КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗаписиФайлаПослеЗакрытия(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьСвойстваВложения(ДополнительныеПараметры.ТекущийИндексВКоллекции);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйФайлПослеИнициализации(Файл, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещение = Новый ОписаниеОповещения("ПолучениеРазмераПослеОкончания", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПолучениеРазмера(ОписаниеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеРазмераПослеОкончания(Размер, ДополнительныеПараметры) Экспорт

	СтрокаТаблицыВложений  = ДополнительныеПараметры.СтрокаТаблицыВложений;
	СтрокаТаблицыВложений.Размер = Размер;
	СтрокаТаблицыВложений.РазмерПредставление = ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(Размер); 

КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораФайловПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		НоваяСтрока = Вложения.Добавить();
		НоваяСтрока.Расположение = 2;
		НоваяСтрока.ИмяФайлаНаКомпьютере = ВыбранныйФайл;
		
		ИмяФайла   = "";
		Расширение = "";
		ВзаимодействияКлиентСервер.ПолучитьКаталогИИмяФайла(ВыбранныйФайл, "", ИмяФайла);
		НоваяСтрока.ИмяФайла = ИмяФайла;
		
		Расширение                      = ВзаимодействияКлиентСервер.РасширениеФайла(ИмяФайла);
		НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
		ДополнительныеПараметры = Новый Структура("СтрокаТаблицыВложений", НоваяСтрока);
		ОписаниеОповещение = Новый ОписаниеОповещения("НовыйФайлПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры);
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(ОписаниеОповещение, ВыбранныйФайл);
		
	КонецЦикла;
	
	Если ВыбранныеФайлы.Количество() > 0 Тогда
		Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЭтоФайлПослеЗавершения(ЭтоФайл, ДополнительныеПараметры) Экспорт

	Если НЕ ЭтоФайл Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмя = ДополнительныеПараметры.ВыбранныйФайл.ПолноеИмя;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Расположение = 2;
	НоваяСтрока.ИмяФайлаНаКомпьютере = ПолноеИмя;
	
	ИмяФайла   = "";
	Расширение = "";
	ВзаимодействияКлиентСервер.ПолучитьКаталогИИмяФайла(ПолноеИмя, "", ИмяФайла);
	НоваяСтрока.ИмяФайла = ИмяФайла;
	
	Расширение                      = ВзаимодействияКлиентСервер.РасширениеФайла(ИмяФайла);
	НоваяСтрока.ИндексКартинки      = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	ДополнительныеПараметры         = Новый Структура("СтрокаТаблицыВложений", НоваяСтрока);
	ОписаниеОповещение              = Новый ОписаниеОповещения("НовыйФайлПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры);
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(ОписаниеОповещение, ПолноеИмя);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФайловНаСервере()
	Отбор = Новый Структура("Расположение", 1);
	МассивСтрок = Вложения.НайтиСтроки(Отбор);
	Для каждого Вложение из МассивСтрок Цикл
		Если ЗначениеЗаполнено(Вложение.Ссылка) Тогда
			РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Вложение.Ссылка, "ИндексКартинки, Размер, Расширение, Наименование");
			ЗаполнитьЗначенияСвойств(Вложение, РеквизитыФайла, "ИндексКартинки, Размер");
			Вложение.ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2, %3", РеквизитыФайла.Наименование, РеквизитыФайла.Расширение, ВзаимодействияКлиентСервер.ПолучитьСтроковоеПредставлениеРазмераФайла(РеквизитыФайла.Размер));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


#КонецОбласти

#Область ФормированиеТелаПисьма

&НаСервере
Функция СформироватьТекстПисьмаВключаяПисьмоОснование(ДокументHTMLТекущееРедактирование, ТекущийОбъект)
	
	Выборка = Взаимодействия.ПолучитьДанныеПисьмаОснования(Объект.ВзаимодействиеОснование);
	
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
		
		Возврат СформироватьИсходящееОбычныйТекст(Выборка, ТекущийОбъект);
		
	Иначе
		
		Возврат СформироватьИсходящееHTML(Выборка,ДокументHTMLТекущееРедактирование, ТекущийОбъект);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьИсходящееHTML(Выборка, ДокументHTMLТекущееРедактирование, ТекущийОбъект)
	
	// Получим ДокументHTML входящего письма.
	Если Выборка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		ДокументHTML = Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(Выборка.Текст);
	Иначе
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(Выборка.ТекстHTML);
	КонецЕсли;
	
	ЭлементТелоПисьма = ДокументHTML.Тело;
	Если ЭлементТелоПисьма = Неопределено Тогда
		Если ДокументHTMLТекущееРедактирование = Неопределено Тогда
			Возврат ТекущийОбъект.ТекстHTML;
		Иначе
			Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTMLТекущееРедактирование);
		КонецЕсли
	КонецЕсли;
	
	Если ДокументHTMLТекущееРедактирование = Неопределено Тогда
		ДокументHTMLТекущееРедактирование = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ТекстHTML);
	КонецЕсли;
	
	МассивДочернихУзловТела = Взаимодействия.МассивДочернихУзловСодержащихHTML(ЭлементТелоПисьма);
	
	// Добавляем текст отредактированный в поле форматированного документа.
	Если ДокументHTMLТекущееРедактирование.Тело <> Неопределено Тогда
		Для каждого ДочернийУзел Из ДокументHTMLТекущееРедактирование.Тело.ДочерниеУзлы Цикл
			
			ЭлементТелоПисьма.ДобавитьДочерний(ДокументHTML.ИмпортироватьУзел(ДочернийУзел,Истина));
			
		КонецЦикла;
	КонецЕсли;
	
	ЭлементDIV = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементТелоПисьма,
		"div",
		Новый Структура("style", "border:none;border-left:solid blue 1.5pt;padding:0cm 0cm 0cm 4.0pt"));
		
	Для каждого ДочернийУзел Из МассивДочернихУзловТела Цикл
		
		ЭлементDIV.ДобавитьДочерний(ДочернийУзел);
		
	КонецЦикла;

	// Подготовим шапку письма основания.
	// Горизонтальный разделитель.
	СтруктураАтрибутов = Новый Структура;
	СтруктураАтрибутов.Вставить("size", "2");
	СтруктураАтрибутов.Вставить("width", "100%");
	СтруктураАтрибутов.Вставить("align", "center");
	СтруктураАтрибутов.Вставить("tabindex", "-1");
	
	ЭлементHR = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементDIV,
		"hr",
		СтруктураАтрибутов);
	Взаимодействия.ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементDIV ,ЭлементHR, МассивДочернихУзловТела);
	
	// Данные письма основания
	ЭлементШрифт = Взаимодействия.СформироватьЭлементДанныхШапкиПисьма(ЭлементDIV, Выборка);
	Взаимодействия.ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементDIV, ЭлементШрифт, МассивДочернихУзловТела);
	
	Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецФункции

&НаСервере
Функция СформироватьИсходящееОбычныйТекст(ВыборкаДанныеВходящегоПисьма, ТекущийОбъект)

	// Формирование шапки входящего письма.
	СтрокаШапка = НСтр("ru = '-----Пересылаемое сообщение-----'");
	
	СтрокаШапка = СтрокаШапка + Символы.ПС+ НСтр("ru = 'От'") + ": "+ ВыборкаДанныеВходящегоПисьма.ОтправительПредставление
		          + ?(ВыборкаДанныеВходящегоПисьма.ИмяОбъектаМетаданных = "ЭлектронноеПисьмоВходящее",
		          "[" + ВыборкаДанныеВходящегоПисьма.ОтправительАдрес +"]",
		          "");
		
	СтрокаШапка = СтрокаШапка + Символы.ПС+ НСтр("ru = 'Отправлено'") + ": " 
	              + Формат(ВыборкаДанныеВходящегоПисьма.Дата,"ДЛФ=DT");
	
	СтрокаШапка = СтрокаШапка + Символы.ПС+ НСтр("ru = 'Кому'") + ": " 
	    + Взаимодействия.ПолучитьПредставленияПолучателейВходящегоПисьма(ВыборкаДанныеВходящегоПисьма.ПолучателиПисьма.Выгрузить());
		
	ТаблицаПолучателейКопий = ВыборкаДанныеВходящегоПисьма.ПолучателиКопий.Выгрузить();
	
	Если ТаблицаПолучателейКопий.Количество() > 0 Тогда
		СтрокаШапка = СтрокаШапка + Символы.ПС+ НСтр("ru = 'Копии'") + ": "
		+ Взаимодействия.ПолучитьПредставленияПолучателейВходящегоПисьма(ТаблицаПолучателейКопий);
	КонецЕсли;
	
	СтрокаШапка = СтрокаШапка + Символы.ПС+ НСтр("ru = 'Тема'") + ": " + ВыборкаДанныеВходящегоПисьма.Тема;
	
	// Преобразование к обычному тексту текста HTML если это необходимо.
	Если ВыборкаДанныеВходящегоПисьма.ТипТекста <> Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		
		ТекстВходящегоПисьма =  Взаимодействия.ПолучитьОбычныйТекстИзHTML(ВыборкаДанныеВходящегоПисьма.ТекстHTML);
		
	Иначе
		
		ТекстВходящегоПисьма = ВыборкаДанныеВходящегоПисьма.Текст
		
	КонецЕсли;
	
	Возврат ТекущийОбъект.Текст + Символы.ПС + Символы.ПС + СтрокаШапка + Символы.ПС + Символы.ПС + ТекстВходящегоПисьма;

КонецФункции

#Область Прочее

// Определяет способ редактирования письма и
// отображает текст письма согласно способу редактирования.
&НаСервере
Процедура ОпределитьСпособРедактированияПисьма()

	Если Объект.ТипТекста.Пустая() Тогда
		
		ФорматСообщения = Взаимодействия.ФорматСообщенияПоУмолчанию(Пользователи.ТекущийПользователь());
		
		// Если тип текста не был заполнен, то может оказаться, что формат выбран некорректно, поэтому:
		// 1) Если текст заполнен, но не заполнен HTML - то формат сообщения исправляем на "текст".
		// 2) Если HTML заполнен, но не заполнен текст - то формат сообщения исправляем на "HTML".
		Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст 
			И СокрЛП(Объект.Текст) = "" И СокрЛП(Объект.ТекстHTML) <> "" Тогда
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
		ИначеЕсли ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
			И СокрЛП(Объект.Текст) <> "" И СокрЛП(Объект.ТекстHTML) = "" Тогда
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
		КонецЕсли;
		
	Иначе
		Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
		Иначе
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Не ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML") 
			И ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
		КонецЕсли;
		
		ПараметрыРаботыПользователяПользователя =
			Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
			Объект.УчетнаяЗапись,
			ФорматСообщения,
			?(Объект.ВзаимодействиеОснование = Неопределено, Истина, Ложь));
		
		Объект.УведомитьОДоставке            = ПараметрыРаботыПользователяПользователя.УведомитьОДоставке;
		Объект.УведомитьОПрочтении           = ПараметрыРаботыПользователяПользователя.УведомитьОПрочтении;
		Объект.ВключатьТелоИсходногоПисьма   = ПараметрыРаботыПользователяПользователя.ВключатьТелоИсходногоПисьма;
		Объект.ОтображатьТелоИсходногоПисьма = ПараметрыРаботыПользователяПользователя.ОтображатьТелоИсходногоПисьма;
		
	КонецЕсли;
	
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаФорматированныйДокумент;
		Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
		Если Не Объект.Ссылка.Пустая() Тогда
			СтруктураВложений = Новый Структура;
			Объект.ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
				Объект.Ссылка, Объект.ТекстHTML,СтруктураВложений);
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Объект.ТекстHTML, СтруктураВложений);
		ИначеЕсли ПараметрыРаботыПользователяПользователя.Подпись <> Неопределено И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
            
			ВзаимодействияУСП.ДобавитьФорматированныйДокументКФорматированномуДокументу(ТекстПисьмаФорматированныйДокумент, ПараметрыРаботыПользователяПользователя.Подпись);
			
		КонецЕсли;
		
	Иначе
		
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаОбычныйТекст;
		Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
		Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		ТекстПисьма = Объект.Текст;
		Если Объект.Ссылка.Пустая() И ПараметрыРаботыПользователяПользователя.Подпись <> Неопределено Тогда
			
			ТекстПисьма = ТекстПисьма + ПараметрыРаботыПользователяПользователя.Подпись;
			
		КонецЕсли;
		Объект.Кодировка = "UTF-8";
		
	КонецЕсли;
	
	Элементы.ФорматСообщения.Видимость = Истина;
	Элементы.ФорматСообщения.Заголовок = ФорматСообщения;
	
КонецПроцедуры

// Обрабатывает переданные параметры при создании письма.
&НаСервере
Процедура ОбработатьПереданныеПараметры(ПереданныеПараметры)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		//УстановитьТекстПисьма();
		
		Если ПереданныеПараметры.Свойство("Вложения") И ПереданныеПараметры.Вложения <> Неопределено Тогда
			
			Если ТипЗнч(ПереданныеПараметры.Вложения) = Тип("СписокЗначений") Или ТипЗнч(ПереданныеПараметры.Вложения) = Тип("Массив") Тогда
				Для Каждого Вложение Из ПереданныеПараметры.Вложения Цикл
					ОписаниеВложения = Вложения.Добавить();
					Если ТипЗнч(ПереданныеПараметры.Вложения) = Тип("СписокЗначений") Тогда
						Если ЭтоАдресВременногоХранилища(Вложение.Значение) Тогда
							ОписаниеВложения.Расположение = 4;
							ДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложение.Значение);
							Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
								ОписаниеВложения.Размер = ДвоичныеДанные.Размер();
							КонецЕсли;
							ОписаниеВложения.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
						ИначеЕсли ТипЗнч(Вложение.Значение) = Тип("ДвоичныеДанные") Тогда
							ОписаниеВложения.Расположение = 4;
							ОписаниеВложения.Размер = Вложение.Значение.Размер();
							ОписаниеВложения.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Вложение.Значение, УникальныйИдентификатор);
						Иначе
							ОписаниеВложения.Расположение = 2;
							ОписаниеВложения.ИмяФайлаНаКомпьютере = Вложение.Значение;
						КонецЕсли;
						ОписаниеВложения.ИмяФайла = Вложение.Представление;
					Иначе // ТипЗнч(ПереданныеПараметры.Вложения) = "массив структур"
						Если Не ПустаяСтрока(Вложение.АдресВоВременномХранилище) Тогда
							ОписаниеВложения.Расположение = 4;
							ДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
							Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
								ОписаниеВложения.Размер = ДвоичныеДанные.Размер();
							КонецЕсли;
							ОписаниеВложения.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(
								ДвоичныеДанные, УникальныйИдентификатор);
						Иначе
							ОписаниеВложения.Расположение = 2;
							ОписаниеВложения.ИмяФайлаНаКомпьютере = Вложение.ПутьКФайлу;
						КонецЕсли;
					КонецЕсли;
					ОписаниеВложения.ИмяФайла = Вложение.Представление;
					Расширение = ВзаимодействияКлиентСервер.РасширениеФайла(ОписаниеВложения.ИмяФайла);
					ОписаниеВложения.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПереданныеПараметры.Тема) Тогда
			Объект.Тема = ПереданныеПараметры.Тема;
		КонецЕсли;
		
		Если ТипЗнч(Параметры.Тело) = Тип("Структура") Тогда
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Параметры.Тело.ТекстHTML, Параметры.Тело.СтруктураВложений);
			Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками;
		ИначеЕсли ТипЗнч(Параметры.Тело) = Тип("Строка") И Не ПустаяСтрока(Параметры.Тело) Тогда
			Объект.Текст = Параметры.Тело;
			ТекстПисьмаФорматированныйДокумент.Добавить(Объект.Текст);
			СтруктураВложений = Новый Структура;
			ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(Объект.ТекстHTML, СтруктураВложений);
        ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
            Если Параметры.ЗначениеКопирования.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
                СтруктураВложений = Новый Структура;
                Объект.ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Параметры.ЗначениеКопирования, Объект.ТекстHTML, СтруктураВложений);                
                ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Объект.ТекстHTML, СтруктураВложений);
            КонецЕсли;
		КонецЕсли;
		
		УдалитьДублиКонтактов();
		
		Если Параметры.Свойство("Кому") И Параметры.Кому <> Неопределено Тогда
			
			Объект.ПолучателиПисьма.Очистить();
			
			Если ТипЗнч(Параметры.Кому) = Тип("Строка") И НЕ ПустаяСтрока(Параметры.Кому) Тогда
				Объект.СписокПолучателейПисьма = Параметры.Кому;
				НоваяСтрока = Объект.ПолучателиПисьма.Добавить();
				НоваяСтрока.Адрес = Параметры.Кому;
				
			ИначеЕсли ТипЗнч(Параметры.Кому) = Тип("СписокЗначений") Тогда
				
				Для Каждого ЭлементСписка Из Параметры.Кому Цикл
					НоваяСтрока = Объект.ПолучателиПисьма.Добавить();
					НоваяСтрока.Адрес = ЭлементСписка.Значение;
					НоваяСтрока.Представление = ЭлементСписка.Представление;
				КонецЦикла;
				
				Объект.СписокПолучателейПисьма = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма, Ложь);
				
			ИначеЕсли ТипЗнч(Параметры.Кому) = Тип("Массив") Тогда
				
				Для Каждого ЭлементМассива Из Параметры.Кому Цикл
					
					МассивАдресов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭлементМассива.Адрес, ";");
					
					Для Каждого Адрес Из МассивАдресов Цикл
						Если ПустаяСтрока(Адрес) Тогда 
							Продолжить;
						ИначеЕсли Объект.ПолучателиПисьма.НайтиСтроки(Новый Структура("Адрес", Адрес)).Количество() <> 0 Тогда
							Продолжить;
						КонецЕсли;
						НоваяСтрока = Объект.ПолучателиПисьма.Добавить();
						НоваяСтрока.Адрес = СокрЛП(Адрес);
						НоваяСтрока.Представление = ЭлементМассива.Представление;
						НоваяСтрока.Контакт = ЭлементМассива.Контакт;
					КонецЦикла;
					
				КонецЦикла;
				Объект.СписокПолучателейПисьма = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		ОчиститьДублиАдресатов(Объект.ПолучателиПисьма);
		
		Если НЕ ПереданныеПараметры.Отправитель.Пустая() Тогда
			
			Объект.УчетнаяЗапись = ПереданныеПараметры.Отправитель;
		Иначе
            ВзаимодействияУСП.УстановитьУчетнуюЗаписьПоПараметрам(Объект, Параметры);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
			РеквизитыОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПереданныеПараметры.Отправитель,"Ссылка, ИмяПользователя, АдресЭлектроннойПочты");
			Объект.ОтправительПредставление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(
				РеквизитыОтправителя.ИмяПользователя, РеквизитыОтправителя.АдресЭлектроннойПочты, "");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет необходимость отображения письма основания.
&НаСервере
Процедура ОтобразитьПисьмоОснование()
	
	Если Не Объект.ВзаимодействиеОснование = Неопределено И НЕ Объект.ВзаимодействиеОснование.Пустая()
		И Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик 
		И (ТипЗнч(Объект.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		ИЛИ ТипЗнч(Объект.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) Тогда
		
		ЗначенияРеквизитовВходящегоПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ВзаимодействиеОснование,"ТипТекста,ТекстHTML,Текст");
		
		ТипТекстаВходящегоПисьма = ?(ЗначенияРеквизитовВходящегоПисьма.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст,
			Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст,
			Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
		
		Если ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML") Тогда
			
			Если ЗначенияРеквизитовВходящегоПисьма.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
				
				ТекстВходящегоПисьма = ЗначенияРеквизитовВходящегоПисьма.Текст;
				Элементы.ТекстВходящегоПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
				
			Иначе
				
				ТекстВходящегоПисьма = Взаимодействия.ОбработатьТекстHTML(Объект.ВзаимодействиеОснование);
				Элементы.ТекстВходящегоПисьма.Вид = ВидПоляФормы.ПолеHTMLДокумента;
				Элементы.ТекстВходящегоПисьма.ТолькоПросмотр = Ложь
				
			КонецЕсли;
			
			Если Не Объект.ОтображатьТелоИсходногоПисьма Тогда
				Элементы.ГруппаВходящее.Видимость = Ложь;
			Иначе
				Элементы.ОтображатьТекстПисьмаОснования.Пометка = Истина;
			КонецЕсли;
			
		Иначе
			
			Элементы.ГруппаВходящее.Видимость = Ложь;
			ТекстПисьма = СформироватьТекстПисьмаВключаяПисьмоОснование(Неопределено, Объект);
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаВходящее.Видимость = Ложь;
		Элементы.ОтображатьТекстПисьмаОснования.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВыполнить()
	
	ОчиститьСообщения();
	
	НайденныеСтроки = ДоступныеДляОтправкиУчетныеЗаписи.НайтиСтроки(Новый Структура("УчетнаяЗапись", Объект.УчетнаяЗапись));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru ='Выбранная учетная запись не доступна для отправки писем'"),, "ОтправительПредставление", "Объект");
		Возврат;
	КонецЕсли;
	
	Если НайденныеСтроки[0].УдалятьПослеОтправки Тогда
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Отправить'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отправить и сохранить'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
			
			ТекстВопроса = НСтр("ru = 'Для данной учетной записи не предусмотрено сохранение отправленных писем в системе.
			                    |Продолжить?'");
			
			ОбработчикОповещенияЗакрытия = Новый ОписаниеОповещения("ВопросОНеСохраненииОтправленногоПисьма", ЭтотОбъект);
			ПоказатьВопрос(ОбработчикОповещенияЗакрытия,ТекстВопроса, СписокКнопок,, КодВозвратаДиалога.Да, НСтр("ru = 'Отправка письма'"));
			
	Иначе
		
		ОтправитьПисьмоКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереслатьВыполнить()
	
	Основание = Новый Структура("Основание,Команда", Объект.Ссылка, "Переслать");
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.ФормаДокумента", ПараметрыОткрытия);

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКнопкиПоУмолчанию()
	
	Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда
		Элементы.Отправить.Заголовок = НСтр("ru = 'Переслать'");
	ИначеЕсли Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее Тогда
		Элементы.Отправить.Заголовок = НСтр("ru = 'Отправить сейчас'");
	ИначеЕсли Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			НастройкиРаботыСПочтой = Взаимодействия.ПолучитьНастройкуРаботаСПочтой();
			Если НастройкиРаботыСПочтой.Свойство("ОтправлятьСообщенияСразу") И НастройкиРаботыСПочтой.ОтправлятьСообщенияСразу Тогда
				ОтправлятьСообщенияСразу = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.Отправить.Заголовок = НСтр("ru = 'Отправить'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматСообщенияПриИзменении()
	
	Если Объект.ТипТекста <> ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст") 
		И ФорматСообщения = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст") Тогда
		
		ВзаимодействияКлиент.ВопросПриИзмененииФорматаСообщенияНаОбычныйТекст(ЭтотОбъект);
		
	Иначе
		
		ТекстПисьмаФорматированныйДокумент.Добавить(ТекстПисьма);
		Объект.Текст = "";
		Объект.ТипТекста =  ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML");
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаФорматированныйДокумент;
		Элементы.ФорматСообщения.Заголовок = ФорматСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	Взаимодействия.УстановитьЗаголовокФормыЭлектронногоПисьма(ЭтотОбъект);
	УстановитьЗаголовокКнопкиПоУмолчанию();
	ОбработатьПереданныеПараметры(Параметры);
	ЗаполнитьВложения(Параметры);
	
	Для Каждого ПолучательПисьма Из Объект.ПолучателиПисьма Цикл
		Если ЗначениеЗаполнено(ПолучательПисьма.Контакт) Тогда
			СоответствияАдресовИКонтактов.Добавить(ПолучательПисьма.Контакт, ПолучательПисьма.Адрес);
		КонецЕсли;
	КонецЦикла;
	
	ОпределитьВидимостьДоступностьЭлементовВЗависимостиОтСтатусаПисьма();
	ОтобразитьПисьмоОснование();
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Взаимодействия.УстановитьРеквизитыФормыВзаимодействияПоДаннымРегистра(ЭтотОбъект);
		ТекущийСтатусПисьма = Объект.СтатусПисьма;
	КонецЕсли;
	
	НаКонтроле = НЕ Рассмотрено;
	
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ЭлектронноеПисьмоИсходящее");
	
	Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Или 
		Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее Тогда
		Элементы.Тема.РедактированиеТекста                  = Ложь;
		Элементы.Заполнить.Видимость                        = Ложь;
		Элементы.ФормаДобавитьТекстИзШаблона.Видимость      = Ложь;
		Элементы.ФормаЗаполнитьИзКонсультации.Видимость     = Ложь;
	КонецЕсли;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	СформироватьСпискиПолучателейПисьма();
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ДанныеВыбораДляЭлектронногоПисьма(Текст, ИндексВСпискеПолучателей)
	
	ВозвращаемыйСписок = Новый СписокЗначений;
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ОписанияКонтактов();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	|	СправочникКонтакт.Ссылка КАК Контакт,
	|	ПРЕДСТАВЛЕНИЕ(СправочникКонтакт.Ссылка) КАК Представление,
	|	ТаблицаКонтактнаяИнформация.АдресЭП КАК АдресЭП 
	|ИЗ
	|	Справочник.Пользователи КАК СправочникКонтакт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = СправочникКонтакт.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) И (ТаблицаКонтактнаяИнформация.АдресЭП <> """"))
	|ГДЕ
	|	(СправочникКонтакт.Наименование ПОДОБНО &ВведеннаяСтрока
	|			ИЛИ ТаблицаКонтактнаяИнформация.АдресЭП ПОДОБНО &ВведеннаяСтрока
	|			ИЛИ ТаблицаКонтактнаяИнформация.ДоменноеИмяСервера ПОДОБНО &ВведеннаяСтрока
	|			ИЛИ ТаблицаКонтактнаяИнформация.Представление ПОДОБНО &ВведеннаяСтрока)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			УсловиеПолейВводаПоСтроке = "";
			МетаданныеОбъекта = Метаданные.НайтиПоТипу(ЭлементМассиваОписания.Тип);
			СписокПолей = МетаданныеОбъекта.ВводПоСтроке;
			Для Каждого Поле Из СписокПолей Цикл
				Если МетаданныеОбъекта.СтандартныеРеквизиты[Поле.Имя].Тип.Типы()[0] = Тип("Строка") Тогда
					УсловиеПолейВводаПоСтроке = УсловиеПолейВводаПоСтроке + " ИЛИ СправочникКонтакт." + Поле.Имя + " ПОДОБНО &ВведеннаяСтрока";
				КонецЕсли;
			КонецЦикла;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СправочникКонтакт.Ссылка                                                           КАК Контакт,
			|	СправочникКонтакт." + ЭлементМассиваОписания.ИмяРеквизитаПредставлениеКонтакта + " КАК Представление,
			|	ТаблицаКонтактнаяИнформация.АдресЭП                                                КАК АдресЭП
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + " КАК СправочникКонтакт
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
			|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = СправочникКонтакт.Ссылка)
			|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) И (ТаблицаКонтактнаяИнформация.АдресЭП <> """"))
			|ГДЕ
			|	(ТаблицаКонтактнаяИнформация.АдресЭП ПОДОБНО &ВведеннаяСтрока
			|			ИЛИ ТаблицаКонтактнаяИнформация.ДоменноеИмяСервера ПОДОБНО &ВведеннаяСтрока
			|			ИЛИ ТаблицаКонтактнаяИнформация.Представление ПОДОБНО &ВведеннаяСтрока 
			|" + УсловиеПолейВводаПоСтроке + ") 
			|";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВведеннаяСтрока", Текст + "%");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ВозвращаемыйСписок;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗначениеВыбора = Новый Структура;
		ЗначениеВыбора.Вставить("Контакт", Выборка.Контакт);
		ЗначениеВыбора.Вставить("Адрес", Выборка.АдресЭП);
		ЗначениеВыбора.Вставить("Представление", Выборка.Представление);
		ЗначениеВыбора.Вставить("ИндексВСпискеПолучателей", ИндексВСпискеПолучателей);
		ВозвращаемыйСписок.Добавить(ЗначениеВыбора, 
			ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Выборка.Представление, Выборка.АдресЭП, ""));
		
	КонецЦикла;
	
	Возврат ВозвращаемыйСписок;
	
КонецФункции 

&НаКлиенте
Функция ПолучитьПредставлениеИдентификаторовОснований(Знач Идентификаторы)

	Идентификаторы = СтрЗаменить(Идентификаторы, "<",  " ");
	Идентификаторы = СтрЗаменить(Идентификаторы, ">",  " ");
	Идентификаторы = СтрЗаменить(Идентификаторы, "  ", " ");
	Идентификаторы = СокрЛП(СтрЗаменить(Идентификаторы, "  ", " "));
	Идентификаторы = СтрЗаменить(Идентификаторы, " ", Символы.ПС + "                          ");
	
	Возврат Идентификаторы;

КонецФункции

&НаКлиенте
Процедура РедактироватьСписокПолучателей(ДляПодбора, ГруппаПодбора = "")
	
	Объект.ПолучателиПисьма.Очистить();
	Объект.ПолучателиКопий.Очистить();
	Объект.ПолучателиСкрытыхКопий.Очистить();
	Объект.ПолучателиОтвета.Очистить();
	Для каждого Получатель Из СписокПолучателей Цикл
		Если Получатель.ВариантОтправки = НСтр("ru = 'Обратный адрес:'") Тогда
			НоваяСтрока = Объект.ПолучателиОтвета.Добавить();
		ИначеЕсли Получатель.ВариантОтправки = НСтр("ru = 'Копия:'") Тогда
			НоваяСтрока = Объект.ПолучателиКопий.Добавить();
		ИначеЕсли Получатель.ВариантОтправки = НСтр("ru = 'Скрытая копия:'") Тогда
			НоваяСтрока = Объект.ПолучателиСкрытыхКопий.Добавить();
		Иначе
			НоваяСтрока = Объект.ПолучателиПисьма.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Получатель);
	КонецЦикла;
	
	// Получим список адресатов
	СоответствиеТабличныхЧастей = Новый Соответствие;
	СоответствиеТабличныхЧастей.Вставить("Кому", Объект.ПолучателиПисьма);
	СоответствиеТабличныхЧастей.Вставить("Копии", Объект.ПолучателиКопий);
	СоответствиеТабличныхЧастей.Вставить("Скрытые", Объект.ПолучателиСкрытыхКопий);
	СоответствиеТабличныхЧастей.Вставить("Ответ", Объект.ПолучателиОтвета);
	
	СписокВыбранных = Новый СписокЗначений;
	Для Каждого ТабличнаяЧасть Из СоответствиеТабличныхЧастей Цикл
		СписокВыбранных.Добавить(
			УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(ТабличнаяЧасть.Значение), ТабличнаяЧасть.Ключ);
	КонецЦикла;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных", СписокВыбранных);
	ПараметрыОткрытия.Вставить("Предмет", Предмет);
	ПараметрыОткрытия.Вставить("Письмо", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию",?(ПустаяСтрока(ГруппаПодбора),НСтр("ru = 'Кому'"), ГруппаПодбора));
	
	// Откроем форму для редактирования списка адресатов.
	ОповещениеПослеЗакрытия = Новый ОписаниеОповещения("ПослеЗаполненияАдреснойКниги", ЭтотОбъект);
	ИмяОбщейФормы = ?(ДляПодбора, "ОбщаяФорма.АдреснаяКнига", "ОбщаяФорма.УточнениеКонтактов");
	
	ОткрытьФорму(ИмяОбщейФормы, ПараметрыОткрытия, ЭтотОбъект,,,, ОповещениеПослеЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполненияАдреснойКниги(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьПодобранныхПолучателейПослеВыбора(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодобранныхПолучателейПослеВыбора(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") И ТипЗнч(ВыбранноеЗначение) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	// Получим список адресатов
	СоответствиеТабличныхЧастей = Новый Соответствие;
	СоответствиеТабличныхЧастей.Вставить("Кому", Объект.ПолучателиПисьма);
	СоответствиеТабличныхЧастей.Вставить("Копии", Объект.ПолучателиКопий);
	СоответствиеТабличныхЧастей.Вставить("Скрытые", Объект.ПолучателиСкрытыхКопий);
	СоответствиеТабличныхЧастей.Вставить("Получатели", Объект.ПолучателиОтвета);
	
	ДляПодбора = (Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено"));
	
	// Заполним адресатов
	Если ДляПодбора Тогда
		ЗаполнитьПодобранныхПолучателей(СоответствиеТабличныхЧастей, ВыбранноеЗначение);
	Иначе
		ЗаполнитьУточненныеКонтакты(ВыбранноеЗначение);
	КонецЕсли;
	
	// Установим признак модифицированности.
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ЭлектронноеПисьмоИсходящее");
	ИзменилисьКонтакты = Истина;
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодобранныхПолучателей(СоответствиеТабличныхЧастей, Результат)

	Для Каждого ТабличнаяЧасть Из СоответствиеТабличныхЧастей Цикл
		ТабличнаяЧасть.Значение.Очистить();
	КонецЦикла;
	
	Для Каждого Элемент Из Результат Цикл
		
		ТабличнаяЧасть = СоответствиеТабличныхЧастей.Получить(Элемент.Группа);
		Если ТабличнаяЧасть = Неопределено Тогда
			ТабличнаяЧасть = Объект.ПолучателиПисьма;
		КонецЕсли;
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Адрес = Элемент.Адрес;
		НоваяСтрока.Представление = Элемент.Представление;
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ",", "");
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ";", "");
		НоваяСтрока.Контакт = Элемент.Контакт;
		
	КонецЦикла;
	
	ОчиститьДублиАдресатов(Объект.ПолучателиПисьма);
	
	СформироватьСпискиПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСпискиПолучателей()

	Объект.СписокПолучателейПисьма =
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма, Ложь);
	Объект.СписокПолучателейКопий =
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиКопий, Ложь);
	Объект.СписокПолучателейСкрытыхКопий = 
		ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиСкрытыхКопий, Ложь);

	СформироватьСпискиПолучателейПисьма();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиПолучателейПисьма()
	
	СписокПолучателей.Очистить();
	
	ДобавитьАдресВСписокПолучателей(СписокПолучателей, Объект.ПолучателиПисьма, НСтр("ru = 'Кому:'"));
	ДобавитьАдресВСписокПолучателей(СписокПолучателей, Объект.ПолучателиКопий, НСтр("ru = 'Копия:'"));
	ДобавитьАдресВСписокПолучателей(СписокПолучателей, Объект.ПолучателиСкрытыхКопий, НСтр("ru = 'Скрытая копия:'"));
	ДобавитьАдресВСписокПолучателей(СписокПолучателей, Объект.ПолучателиОтвета, НСтр("ru = 'Обратный адрес:'"));
	
	Если СписокПолучателей.Количество() = 0 Тогда
		НоваяСтрока = СписокПолучателей.Добавить();
		НоваяСтрока.ВариантОтправки = "Кому:";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьАдресВСписокПолучателей(СписокПолучателей, ПолучателиПисьма, Кому)

	Для каждого СтрокаПолучатель Из ПолучателиПисьма Цикл
		НоваяСтрока = СписокПолучателей.Добавить();
		НоваяСтрока.ВариантОтправки = Кому;
		НоваяСтрока.Адрес           = СтрокаПолучатель.Адрес;
		НоваяСтрока.Контакт         = СтрокаПолучатель.Контакт;
		НоваяСтрока.Представление   = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(СтрокаПолучатель.Представление, 
			СтрокаПолучатель.Адрес, "");
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУточненныеКонтакты(Результат)
	
	Объект.ПолучателиКопий.Очистить();
	Объект.ПолучателиОтвета.Очистить();
	Объект.ПолучателиПисьма.Очистить();
	Объект.ПолучателиСкрытыхКопий.Очистить();
	
	Для каждого ЭлементМассива Из Результат Цикл
	
		Если ЭлементМассива.Группа = "Кому" Тогда
			ТаблицаПолучателей = Объект.ПолучателиПисьма;
		ИначеЕсли ЭлементМассива.Группа = "Копии" Тогда
			ТаблицаПолучателей = Объект.ПолучателиКопий;
		ИначеЕсли ЭлементМассива.Группа = "Скрытые" Тогда
			ТаблицаПолучателей = Объект.ПолучателиСкрытыхКопий;
		Иначе
			ТаблицаПолучателей = Объект.ПолучателиОтвета;
		КонецЕсли;
		
		СтрокаПолучатели = ТаблицаПолучателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПолучатели, ЭлементМассива);
	
	КонецЦикла;
	
	СформироватьСпискиПолучателей();

КонецПроцедуры

&НаСервере
Функция ВыполнитьОтправкуНаСервере()
	
	ПисьмоОбъект = РеквизитФормыВЗначение("Объект");
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстСообщения", "");
	Результат.Вставить("ПисьмоОтправлено", Ложь);
	
	Попытка
		
		ПараметрыПисьма = Неопределено;
		
		ИмяСервераИсходящейПочты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.УчетнаяЗапись, "СерверИсходящейПочты", Истина);
		
		Если УправлениеЭлектроннойПочтой.СерверИсходящейПочтыНеТребуетДополнительнойОтправкиПоIMAP(ИмяСервераИсходящейПочты) Тогда
			Взаимодействия.ВыполнитьОтправкуПисьма(ПисьмоОбъект,,ПараметрыПисьма);
		Иначе
			Взаимодействия.ВыполнитьОтправкуПисьма(ПисьмоОбъект,,ПараметрыПисьма,"Все");
		КонецЕсли;
		
	Исключение
		
		ДанныеАнализаОшибочныхПолучателей = УправлениеЭлектроннойПочтой.РезультатАнализаОшибочныхПолучателей(ПисьмоОбъект, ПараметрыПисьма.ОшибочныеПолучатели);
		
		ЭтоПроблемаОтвергнутыхСерверомПочтовыхАдресов = ДанныеАнализаОшибочныхПолучателей.ЭтоПроблемаОтвергнутыхСерверомПочтовыхАдресов;
		ВсеАдресатыПисьмаОтвергнутыСервером           = ДанныеАнализаОшибочныхПолучателей.ВсеАдресатыПисьмаОтвергнутыСервером;
		ПредставлениеОшибочныхАдресатов               = ДанныеАнализаОшибочныхПолучателей.ПредставлениеОшибочныхАдресатов;
		
		Если ЭтоПроблемаОтвергнутыхСерверомПочтовыхАдресов 
			И Не ВсеАдресатыПисьмаОтвергнутыСервером Тогда
			
			Результат.ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Следующие адресаты электронного письма не приняты почтовым сервером:
				|%1. Письмо отправлено остальным адресатам.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПредставлениеОшибочныхАдресатов);
			
		Иначе
			
			ЗначениеВРеквизитФормы(ПисьмоОбъект, "Объект");
			Результат.ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Результат;
			
		КонецЕсли;
		
	КонецПопытки;
	
	ИдентификаторПисьма = ПараметрыПисьма.ИдентификаторСообщения;
	
	Результат.ПисьмоОтправлено = Истина;
	
	Если НЕ ПисьмоОбъект.УдалятьПослеОтправки Тогда
		
		ПисьмоОбъект.ИдентификаторСообщения = ИдентификаторПисьма;
		ПисьмоОбъект.СтатусПисьма    = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
		ПисьмоОбъект.ДатаОтправления = ТекущаяУниверсальнаяДата();
		ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗначениеВРеквизитФормы(ПисьмоОбъект, "Объект");
		
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(
			Объект.Ссылка, Взаимодействия.ОпределитьПапкуДляПисьма(Объект.Ссылка));
		ТекущийСтатусПисьма = Объект.СтатусПисьма;
		
	Иначе
		
		ПисьмоОбъект.Прочитать();
		ПисьмоОбъект.Удалить();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОценитьРазмерПисьма()

	Размер = СтрДлина(Объект.Тема)*2;
	Размер = Размер + ?(Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML,
	                    СтрДлина(Объект.ТекстHTML),
	                    СтрДлина(Объект.Текст)) * 2;
	
	Для каждого Вложение Из Вложения Цикл
		Размер = Размер + Вложение.Размер * 1.5;
	КонецЦикла;
	
	Для каждого СтрокаТаблицыСоответствий Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
		Размер = Размер + СтрокаТаблицыСоответствий.Картинка.ПолучитьДвоичныеДанные().Размер()*1.5;
	КонецЦикла;
	
	Возврат Размер;

КонецФункции

&НаСервере
Функция РеквизитыФайла(Файл)
	
	ТребуемыеРеквизиты = "Наименование, Расширение, ИндексКартинки, Размер";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		ТребуемыеРеквизиты = ТребуемыеРеквизиты + ", ПодписанЭП";
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл, ТребуемыеРеквизиты);
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПисьмоКлиент()
	
	Если Не ОтправлятьСообщенияСразу Тогда
		ОтправлятьСообщенияСразу = (
		Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее"));
		Объект.Автор = ПользователиКлиентСервер.АвторизованныйПользователь();
		Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML") Тогда
			Объект.Текст = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
		КонецЕсли;
	КонецЕсли;
	
	ВыполняетсяОтправка = Истина;
	
	Если Объект.Ссылка.Пустая() 
		ИЛИ Модифицированность 
		ИЛИ Объект.ВключатьТелоИсходногоПисьма 
		ИЛИ (Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик")) Тогда
		Записать();
	КонецЕсли;
	
	ВыполняетсяОтправка = Ложь;
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтправлятьСообщенияСразу Тогда
		Результат = ВыполнитьОтправкуНаСервере();
	Иначе
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если Результат.ПисьмоОтправлено 
		И Результат.ТекстСообщения = "" Тогда
		
		Закрыть();
	
	ИначеЕсли Результат.ПисьмоОтправлено 
		И Результат.ТекстСообщения <> "" Тогда
		
		Прочитать();
		ПоказатьПредупреждение(, Результат.ТекстСообщения);
		
	ИначеЕсли Результат.ТекстСообщения <> "" Тогда
		
		ПоказатьПредупреждение(, Результат.ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОНеСохраненииОтправленногоПисьма(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.УдалятьПослеОтправки = Истина;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.УдалятьПослеОтправки = Ложь;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьПисьмоКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииФорматаПриЗакрытии(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		ФорматСообщения = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML");
	Иначе
		ТекстПисьма = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
		Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст");
		ТекстПисьмаФорматированныйДокумент.Удалить();
		Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
		Объект.ТекстHTML = "";
		Объект.Кодировка = "UTF-8";
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаОбычныйТекст;
	КонецЕсли;
		
	Элементы.ФорматСообщения.Заголовок = ФорматСообщения;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваВложения(ТекущийИндексВКоллекции)
	
	ТекущиеДанные = Вложения.Получить(ТекущийИндексВКоллекции);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Вложения.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
		
	ФайлДоступенДляРедактирования = 
		(Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик"));
	ПараметрыФормы = Новый Структура("ПрисоединенныйФайл, ТолькоПросмотр", 
		ТекущиеДанные.Ссылка,НЕ ФайлДоступенДляРедактирования);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы,, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПодпись(ПредыдущаяУчетнаяЗапись, НоваяУчетнаяЗапись)

	ПараметрыПредыдущаяУЗ =
			Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
			ПредыдущаяУчетнаяЗапись,
			ФорматСообщения,
			?(Объект.ВзаимодействиеОснование = Неопределено, Истина, Ложь));
			
	ПараметрыНоваяУЗ =
			Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
			НоваяУчетнаяЗапись,
			ФорматСообщения,
			?(Объект.ВзаимодействиеОснование = Неопределено, Истина, Ложь));
	
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
		Если ПустаяСтрока(ТекстПисьма) Тогда
			ТекстПисьма = ПараметрыНоваяУЗ.Подпись;
		Иначе
			Если СтрЧислоВхождений(ТекстПисьма, ПараметрыПредыдущаяУЗ.Подпись) > 0 Тогда
				ТекстПисьма = СтрЗаменить(ТекстПисьма, ПараметрыПредыдущаяУЗ.Подпись, ПараметрыНоваяУЗ.Подпись);
			Иначе
				ТекстПисьма = ТекстПисьма + ПараметрыНоваяУЗ.Подпись;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		
		ТекстПисьмо = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
		Если ПустаяСтрока(ТекстПисьмо) Тогда
			
			ТекстПисьмаФорматированныйДокумент = ПараметрыНоваяУЗ.Подпись;
			
		Иначе
			
			Если ТипЗнч(ПараметрыПредыдущаяУЗ.Подпись) = Тип("ФорматированныйДокумент") Тогда
				
				ТекстПредыдущаяУЗ = ПараметрыПредыдущаяУЗ.Подпись.ПолучитьТекст();
				
				Если СтрЧислоВхождений(ТекстПисьмо, ТекстПредыдущаяУЗ) > 0 Тогда
					
					УдалитьЭлементыСтаройПодписи(ТекстПисьмаФорматированныйДокумент,ПараметрыПредыдущаяУЗ.Подпись);
					
				КонецЕсли;
				
				Если ТипЗнч(ПараметрыНоваяУЗ.Подпись) = Тип("ФорматированныйДокумент") Тогда
					ВзаимодействияУСП.ДобавитьФорматированныйДокументКФорматированномуДокументу(ТекстПисьмаФорматированныйДокумент, ПараметрыНоваяУЗ.Подпись);	
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыСтаройПодписи(ТекстПисьмаФорматированныйДокумент, СтараяПодпись)

	ТекстПисьмаБезПараграфов = Новый ФорматированныйДокумент;
    ВзаимодействияУСП.ДобавитьФорматированныйДокументКФорматированномуДокументу(ТекстПисьмаБезПараграфов, ТекстПисьмаФорматированныйДокумент);
	СтараяПодписьБезПараграфов = Новый ФорматированныйДокумент;
	ВзаимодействияУСП.ДобавитьФорматированныйДокументКФорматированномуДокументу(СтараяПодписьБезПараграфов, СтараяПодпись);
	
	ПервыйЗначимыйЭлементПодпись       = Неопределено;
	ПоследнийЗначимыйЭлементПодпись    = Неопределено;
	КоличествоЭлементовПодпись = СтараяПодписьБезПараграфов.Элементы[0].Элементы.Количество();
	КоличествоЭлементовТекст   = ТекстПисьмаБезПараграфов.Элементы[0].Элементы.Количество();
	
	Для Инд = 0 По КоличествоЭлементовПодпись - 1 Цикл
		
		ЭлементПодписи = СтараяПодписьБезПараграфов.Элементы[0].Элементы[Инд];
		Если ТипЗнч(ЭлементПодписи) = Тип("ТекстФорматированногоДокумента")
			Или ТипЗнч(ЭлементПодписи) = Тип("КартинкаФорматированногоДокумента") Тогда 
			
			ПервыйЗначимыйЭлементПодпись   = ЭлементПодписи;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Инд = 0 По КоличествоЭлементовПодпись - 1 Цикл
		
		ЭлементПодписи = СтараяПодписьБезПараграфов.Элементы[0].Элементы[КоличествоЭлементовПодпись - 1 - Инд];
		Если ТипЗнч(ЭлементПодписи) = Тип("ТекстФорматированногоДокумента")
			Или ТипЗнч(ЭлементПодписи) = Тип("КартинкаФорматированногоДокумента") Тогда  
			
			ПоследнийЗначимыйЭлементПодпись    = ЭлементПодписи;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИндексПервогоЭлементаТекст    = -1;
	ИндексПоследнегоЭлементаТекст = -1;
	
	Для Инд = 0 По КоличествоЭлементовТекст - 1 Цикл;
		
		ЭлементТекста = ТекстПисьмаБезПараграфов.Элементы[0].Элементы[КоличествоЭлементовТекст - 1 - Инд];
		Если ИндексПервогоЭлементаТекст = - 1 Тогда
			Если ТипЗнч(ЭлементТекста) = ТипЗнч(ПервыйЗначимыйЭлементПодпись) Тогда
				
				Если ТипЗнч(ЭлементТекста) = Тип("ТекстФорматированногоДокумента")
					И ЭлементТекста.Текст = ПервыйЗначимыйЭлементПодпись.Текст Тогда
					ИндексПервогоЭлементаТекст = КоличествоЭлементовТекст - 1 - Инд;
				КонецЕсли;
				Если ТипЗнч(ЭлементТекста) = Тип("КартинкаФорматированногоДокумента")
					И ЭлементТекста.Картинка = ПервыйЗначимыйЭлементПодпись.Картинка Тогда
					ИндексПервогоЭлементаТекст = КоличествоЭлементовТекст - 1 - Инд;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИндексПоследнегоЭлементаТекст = - 1 Тогда
			Если ТипЗнч(ЭлементТекста) = ТипЗнч(ПоследнийЗначимыйЭлементПодпись) Тогда
				
				Если ТипЗнч(ЭлементТекста) = Тип("ТекстФорматированногоДокумента")
					И ЭлементТекста.Текст = ПоследнийЗначимыйЭлементПодпись.Текст Тогда
					ИндексПоследнегоЭлементаТекст = КоличествоЭлементовТекст - 1 - Инд;
				КонецЕсли;
				Если ТипЗнч(ЭлементТекста) = Тип("КартинкаФорматированногоДокумента")
					И ЭлементТекста.Картинка = ПоследнийЗначимыйЭлементПодпись.Картинка Тогда
					ИндексПоследнегоЭлементаТекст = КоличествоЭлементовТекст - 1 - Инд;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИндексПервогоЭлементаТекст <> -1 И ИндексПоследнегоЭлементаТекст <> -1 Тогда
			
			Прервать;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если ИндексПервогоЭлементаТекст <> - 1 И ИндексПоследнегоЭлементаТекст <> -1 Тогда
		
		Для Инд = 0 По ИндексПоследнегоЭлементаТекст - ИндексПервогоЭлементаТекст Цикл
			ТекстПисьмаБезПараграфов.Элементы[0].Элементы.Удалить(ИндексПоследнегоЭлементаТекст - Инд);
		КонецЦикла;
		
		ТекстПисьмаФорматированныйДокумент = ТекстПисьмаБезПараграфов;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДублиКонтактов();
	
	УдаляемыеКонтакты = Новый Массив;
	
	Для ТекущаяСтрока = 0 По Объект.ПолучателиПисьма.Количество() - 1 Цикл
		Для ПроверяемаяСтрока = ТекущаяСтрока + 1 По Объект.ПолучателиПисьма.Количество() - 1 Цикл
			Если Объект.ПолучателиПисьма[ПроверяемаяСтрока].Адрес = Объект.ПолучателиПисьма[ТекущаяСтрока].Адрес Тогда
				УдаляемыеКонтакты.Добавить(Объект.ПолучателиПисьма[ПроверяемаяСтрока]);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
	
	Для Каждого УдаляемыйКонтакт Из УдаляемыеКонтакты Цикл
		Объект.ПолучателиПисьма.Удалить(УдаляемыйКонтакт);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФорматированныйДокументКФорматированномуДокументу(ПриемникДокумент, ДобавляемыйДокумент)

	Для Инд = 0 По ДобавляемыйДокумент.Элементы.Количество() -1 Цикл
		ДобавляемыйЭлемент = ДобавляемыйДокумент.Элементы[Инд];
		Если ТипЗнч(ДобавляемыйЭлемент) = Тип("ПараграфФорматированногоДокумента") Тогда
			НовыйПараграф = ПриемникДокумент.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПараграф, ДобавляемыйЭлемент, "ТипПараграфа, ГоризонтальноеПоложение, МеждустрочныйИнтервал,Отступ");
			ДобавитьФорматированныйДокументКФорматированномуДокументу(НовыйПараграф, ДобавляемыйЭлемент);
		Иначе
			Если ТипЗнч(ДобавляемыйЭлемент) = Тип("ТекстФорматированногоДокумента") Тогда
				НовыйЭлемент = ПриемникДокумент.Элементы.Добавить(ДобавляемыйЭлемент.Текст, Тип("ТекстФорматированногоДокумента"));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент,ДобавляемыйЭлемент,,"ЗакладкаКонца, ЗакладкаНачала, Родитель");
			ИначеЕсли ТипЗнч(ДобавляемыйЭлемент) = Тип("КартинкаФорматированногоДокумента") Тогда
				НовыйЭлемент = ПриемникДокумент.Элементы.Добавить(ДобавляемыйЭлемент.Картинка, Тип("КартинкаФорматированногоДокумента"));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент,ДобавляемыйЭлемент,,"ЗакладкаКонца, ЗакладкаНачала, Родитель");
			ИначеЕсли ТипЗнч(ДобавляемыйЭлемент) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
				Если ТипЗнч(ДобавляемыйДокумент) = Тип("ПараграфФорматированногоДокумента") 
					И (ДобавляемыйДокумент.ТипПараграфа = ТипПараграфа.МаркированныйСписок
					Или ДобавляемыйДокумент.ТипПараграфа = ТипПараграфа.НумерованныйСписок) Тогда
					Продолжить;
				КонецЕсли;
				НовыйЭлемент = ПриемникДокумент.Элементы.Добавить( , Тип("ПереводСтрокиФорматированногоДокумента"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДублиАдресатов(ТаблицаПолучателей)
	
	СоответствиеАдресовСтрокКУдалению = Новый Соответствие;
	
	Для Каждого СтрокаПолучатель Из ТаблицаПолучателей Цикл
		Если СоответствиеАдресовСтрокКУдалению.Получить(СтрокаПолучатель.Адрес) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НайденныеСтроки =  ТаблицаПолучателей.НайтиСтроки(Новый Структура("Адрес", СтрокаПолучатель.Адрес));
		Если НайденныеСтроки.Количество() > 1 Тогда
			МассивКУдалению = Новый Массив;
			Для Инд = 0 По НайденныеСтроки.Количество() - 1 Цикл
				Если Инд = 0 Тогда
					Если НЕ ЗначениеЗаполнено(НайденныеСтроки[Инд].Контакт) Тогда
						МассивКУдалению.Добавить(НайденныеСтроки[Инд]);
					КонецЕсли;
				Иначе
					Если МассивКУдалению.Количество() = 0 ИЛИ (НЕ ЗначениеЗаполнено(НайденныеСтроки[Инд].Контакт)) Тогда
						МассивКУдалению.Добавить(НайденныеСтроки[Инд]);
					ИначеЕсли ЗначениеЗаполнено(НайденныеСтроки[Инд].Контакт) И НЕ (Инд = МассивКУдалению.Количество()) Тогда
						МассивКУдалению.Добавить(НайденныеСтроки[Инд]);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НайденныеСтроки.Количество() = МассивКУдалению.Количество() Тогда
				МассивКУдалению.Удалить(0);
			КонецЕсли;
			
			СоответствиеАдресовСтрокКУдалению.Вставить(СтрокаПолучатель.Адрес,МассивКУдалению);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаСоответствия Из СоответствиеАдресовСтрокКУдалению Цикл
		Для Каждого СтрокаКУдалению Из СтрокаСоответствия.Значение Цикл
			ТаблицаПолучателей.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзШаблонаЗавершение(ШаблонТекста, ПараметрыОповещения) Экспорт
	
    Если ШаблонТекста <> Неопределено Тогда
    	ЗакладкаНачала = Неопределено;
    	ЗакладкаОкончания = Неопределено;
    	Элементы.ТекстПисьмаФорматированныйДокумент.ПолучитьГраницыВыделения(ЗакладкаНачала, ЗакладкаОкончания);
  		ПозицияНачала = ТекстПисьмаФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаНачала);
   		ПозицияОкончания = ТекстПисьмаФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаОкончания);
		ЗаполнитьИзШаблонаЗавершениеНаСервере(ШаблонТекста, ПозицияНачала, ПозицияОкончания);
        ЗакладкаНачала = ТекстПисьмаФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(ПозицияНачала);
        ЗакладкаОкончания = ТекстПисьмаФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(ПозицияОкончания);
        Элементы.ТекстПисьмаФорматированныйДокумент.УстановитьГраницыВыделения(ЗакладкаНачала, ЗакладкаОкончания);
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Функция ПараметрыПисьмаВложения()
	
	ПараметрыВложения = ВзаимодействияКлиент.ПустаяСтруктураПараметровПисьмаВложения();
	ПараметрыВложения.ДатаПисьмаОснования = ?(ЗначениеЗаполнено(Объект.ДатаОтправления), Объект.ДатаОтправления , Объект.Дата);
	ПараметрыВложения.ПисьмоОснование     = Объект.Ссылка;
	ПараметрыВложения.ТемаПисьмаОснования = Объект.Тема;
	
	Возврат ПараметрыВложения;
	
КонецФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьИзШаблонаЗавершениеНаСервере(ШаблонТекста, ПозицияНачала, ПозицияОкончания)
	
	ТекстШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонТекста, "ТекстХранилище").Получить();
	
	Если ТекстШаблона = Неопределено Тогда
		Возврат;
	КонецЕсли; 
		
	Если ЗначениеЗаполнено(Предмет) Тогда
		СтруктураВложений = Новый Структура;
		ТекстHTML = "";
		ТекстШаблона.ПолучитьHTML(ТекстHTML, СтруктураВложений);
		ВзаимодействияУСП.ЗаменитьПараметрыНаЗначения(ТекстHTML, Предмет, СтруктураВложений);
		ТекстШаблона.УстановитьHTML(ТекстHTML, СтруктураВложений);
	КонецЕсли;
	
	ТекстПисьма = ТекстШаблона.ПолучитьТекст() + ТекстПисьма;
	
	ВзаимодействияУСП.ВставитьФорматированныйДокументВФорматированныйДокумент(
        ТекстПисьмаФорматированныйДокумент, ТекстШаблона, ПозицияНачала, ПозицияОкончания);
	
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаполнитьИзКонсультацииЗавершение(Консультация, ПараметрыОповещения) Экспорт
	
	Если Консультация <> Неопределено Тогда
    	ЗакладкаНачала = Неопределено;
    	ЗакладкаОкончания = Неопределено;
    	Элементы.ТекстПисьмаФорматированныйДокумент.ПолучитьГраницыВыделения(ЗакладкаНачала, ЗакладкаОкончания);
  		ПозицияНачала = ТекстПисьмаФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаНачала);
   		ПозицияОкончания = ТекстПисьмаФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаОкончания);
		ЗаполнитьИзКонсультацииЗавершениеНаСервере(Консультация, ПозицияНачала, ПозицияОкончания);
        ЗакладкаНачала = ТекстПисьмаФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(ПозицияНачала);
        ЗакладкаОкончания = ТекстПисьмаФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(ПозицияОкончания);
        Элементы.ТекстПисьмаФорматированныйДокумент.УстановитьГраницыВыделения(ЗакладкаНачала, ЗакладкаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзКонсультацииЗавершениеНаСервере(Консультация, ПозицияНачала, ПозицияОкончания)
	
	ОписаниеКонсультации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Консультация, "ОписаниеХранилище").Получить();
	
	Если ОписаниеКонсультации = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Предмет) Тогда
		СтруктураВложений = Новый Структура;
		ТекстHTML = "";
		ОписаниеКонсультации.ПолучитьHTML(ТекстHTML, СтруктураВложений);
		ВзаимодействияУСП.ЗаменитьПараметрыНаЗначения(ТекстHTML, Предмет);
		ОписаниеКонсультации.УстановитьHTML(ТекстHTML, СтруктураВложений);
	КонецЕсли;
		
	ТекстПисьма = ОписаниеКонсультации.ПолучитьТекст() + ТекстПисьма;
	
	ВзаимодействияУСП.ВставитьФорматированныйДокументВФорматированныйДокумент(
        ТекстПисьмаФорматированныйДокумент, ОписаниеКонсультации, ПозицияНачала, ПозицияОкончания);
	
	ВложенияОбращения = Новый Массив;
	ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(Консультация, ВложенияОбращения);
	ВложенияДляПисьма = Новый СписокЗначений;
	
	Для каждого Вложение Из ВложенияОбращения Цикл
		ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Вложение);
		ВложенияДляПисьма.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
	КонецЦикла;
	
	Для Каждого Вложение Из ВложенияДляПисьма Цикл
		ОписаниеВложения = Вложения.Добавить();
		Если ЭтоАдресВременногоХранилища(Вложение.Значение) Тогда
			ОписаниеВложения.Расположение = 4;
			ОписаниеВложения.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(Вложение.Значение), УникальныйИдентификатор);
		ИначеЕсли ТипЗнч(Вложение.Значение) = Тип("ДвоичныеДанные") Тогда
			ОписаниеВложения.Расположение = 4;
			ОписаниеВложения.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Вложение.Значение, УникальныйИдентификатор);
		Иначе
			ОписаниеВложения.Расположение = 2;
			ОписаниеВложения.ИмяФайлаНаКомпьютере = Вложение.Значение;
		КонецЕсли;
		ОписаниеВложения.ИмяФайла = Вложение.Представление;
		Расширение = ВзаимодействияКлиентСервер.РасширениеФайла(ОписаниеВложения.ИмяФайла);
		ОписаниеВложения.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФайлыИзПисьма(Письмо)
	
    ВложенияПисьма = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Письмо);
	ВложенияДляПисьма = Новый СписокЗначений;
	
    Для каждого Вложение Из ВложенияПисьма Цикл
        
        Если Не ЗначениеЗаполнено(Вложение.ИДФайлаЭлектронногоПисьма) Тогда
    		ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Вложение.Ссылка);
    		ВложенияДляПисьма.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
        КонецЕсли;
        
	КонецЦикла;
	
	Для Каждого Вложение Из ВложенияДляПисьма Цикл
		ОписаниеВложения = Вложения.Добавить();
		Если ЭтоАдресВременногоХранилища(Вложение.Значение) Тогда
			ОписаниеВложения.Расположение = 4;
			ОписаниеВложения.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(Вложение.Значение), УникальныйИдентификатор);
		ИначеЕсли ТипЗнч(Вложение.Значение) = Тип("ДвоичныеДанные") Тогда
			ОписаниеВложения.Расположение = 4;
			ОписаниеВложения.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Вложение.Значение, УникальныйИдентификатор);
		Иначе
			ОписаниеВложения.Расположение = 2;
			ОписаниеВложения.ИмяФайлаНаКомпьютере = Вложение.Значение;
		КонецЕсли;
		ОписаниеВложения.ИмяФайла = Вложение.Представление;
		Расширение = ВзаимодействияКлиентСервер.РасширениеФайла(ОписаниеВложения.ИмяФайла);
		ОписаниеВложения.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.ШаблоныСообщений

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПослеВыбораШаблона(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ЗаполнитьШаблонПослеВыбора(Результат);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШаблонПослеВыбора(Результат)
	
	Если ТипЗнч(Результат.Текст) = Тип("Структура") Тогда
		РезультатТекст = Результат.Текст.ТекстHTML;
		СтруктураВложений = Результат.Текст.СтруктураВложений;
		НужнаКонвертацияИзHTML = Ложь;
	Иначе
		СтруктураВложений = Новый Структура();
		РезультатТекст = Результат.Текст;
		НужнаКонвертацияИзHTML = СтрНачинаетсяС(РезультатТекст , "<!DOCTYPE html");
	КонецЕсли;
	
	ТекстПисьмаФорматированныйДокумент.УстановитьHTML(РезультатТекст, СтруктураВложений);
	Если НужнаКонвертацияИзHTML Тогда
		РезультатТекст = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
	КонецЕсли;
	ТекстПисьма = РезультатТекст;
	Объект.Тема = Результат.Тема;
	
	Если ЗначениеЗаполнено(Результат.Получатель) Тогда
		Для каждого Получатель Из Результат.Получатель Цикл
			НоваяСтрока = СписокПолучателей.Добавить();
			НоваяСтрока.ВариантОтправки = НСтр("ru = 'Кому:'");
			НоваяСтрока.Адрес           = Получатель.Значение;
			НоваяСтрока.Представление   = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Получатель.Представление, 
				Получатель.Значение, "");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВозможностьЗаполненияПисьмаПоШаблону()
	
	ИспользуютсяШаблоныСообщений = Ложь;
	Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		МодульШаблоныСообщенийСлужебный = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщенийСлужебный");
		Если МодульШаблоныСообщенийСлужебный.ИспользуютсяШаблоныСообщений() Тогда
			ИспользуютсяШаблоныСообщений = МодульШаблоныСообщенийСлужебный.ЕстьДоступныеШаблоны("Письмо");
		КонецЕсли;
	КонецЕсли;
	Элементы.ФормаСформироватьПоШаблону.Видимость = ИспользуютсяШаблоныСообщений;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#КонецОбласти