#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция - Есть продлевающие подписки
//
// Параметры:
//  Подписка - ДокументСсылка.Подписка - подписка. 
// 
// Возвращаемое значение:
//  Булево - признак наличия продлевающей подписки.
//
Функция ЕстьПродлевающиеПодписки(Подписка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Подписка.Ссылка КАК Подписка
		|ИЗ
		|	Документ.Подписка КАК Подписка
		|ГДЕ
		|	Подписка.ОсновнаяПодписка = &ОсновнаяПодписка
		|	И Подписка.ТипПодписки = ЗНАЧЕНИЕ(Перечисление.ТипыПодписок.Продлевающая)
		|	И Подписка.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("ОсновнаяПодписка", Подписка);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция - Есть расширяющие подписки по дате.
//
// Параметры:
//  Подписка         - ДокументСсылка.Подписка - подписка. 
//  ДатаПодключения  - Дата - дата подключения.
// 
// Возвращаемое значение:
//  Булево - признак наличия расширяющей подписки.
//
Функция ЕстьРасширяющиеПодпискиПоДате(Подписка, ДатаПодключения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Подписка.Ссылка КАК Подписка
		|ИЗ
		|	Документ.Подписка КАК Подписка
		|ГДЕ
		|	Подписка.ОсновнаяПодписка = &ОсновнаяПодписка
		|	И Подписка.ТипПодписки = ЗНАЧЕНИЕ(Перечисление.ТипыПодписок.Расширяющая)
		|	И Подписка.ПометкаУдаления = ЛОЖЬ
		|	И Подписка.ДатаПодключения <= &ДатаПодключения
		|	И Подписка.ДатаОтключения >= &ДатаПодключения");
	Запрос.УстановитьПараметр("ОсновнаяПодписка", Подписка);
	Запрос.УстановитьПараметр("ДатаПодключения", ДатаПодключения);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция - Есть расширяющие подписки.
//
// Параметры:
//  Подписка - ДокументСсылка.Подписка - подписка. 
// 
// Возвращаемое значение:
//  Булево - признак наличия расширяющей подписки.
//
Функция ЕстьРасширяющиеПодписки(Подписка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Подписка.Ссылка КАК Подписка
		|ИЗ
		|	Документ.Подписка КАК Подписка
		|ГДЕ
		|	Подписка.ОсновнаяПодписка = &ОсновнаяПодписка
		|	И Подписка.ТипПодписки = ЗНАЧЕНИЕ(Перечисление.ТипыПодписок.Расширяющая)
		|	И Подписка.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("ОсновнаяПодписка", Подписка);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция - Разрешено добавлять расширяющую подписку.
//
// Параметры:
//  Подписка - ДокументСсылка.Подписка - подписка. 
// 
// Возвращаемое значение:
//  Булево - признак разрешения добавления расширяющей подписки.
//
Функция РазрешеноДобавлятьРасширяющуюПодписку(Знач Подписка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	БлокировкаДобавленияРасширяющейПодписки.Подписка
		|ИЗ
		|	РегистрСведений.БлокировкаДобавленияРасширяющейПодписки КАК БлокировкаДобавленияРасширяющейПодписки
		|ГДЕ
		|	БлокировкаДобавленияРасширяющейПодписки.Подписка = &Подписка");
	Запрос.УстановитьПараметр("Подписка", Подписка);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Функция - Активная подписка абонента
//
// Параметры:
//  Абонент - СправочникСсылка.Абонент - проверяемый абонент.
//  НаДату  - Дата - дата подписки 
// 
// Возвращаемое значение:
//  ДокументСсылка.Подписка - активная подписка. 
//
Функция АктивнаяПодпискаАбонента(Абонент, НаДату = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
        |   Подписка.Ссылка КАК Подписка
        |ИЗ
        |   Документ.Подписка КАК Подписка
        |ГДЕ
        |   Подписка.Абонент = &Абонент
        |   И НЕ Подписка.ПометкаУдаления
        |   И НЕ Подписка.Тариф.РасширениеТарифа
        |   И Подписка.ДатаПодключения <= &НаДату
        |   И Подписка.ДатаОтключения >= &ТекущаяДата
        |
        |УПОРЯДОЧИТЬ ПО
        |   Подписка.ДатаОтключения УБЫВ";
	
	Запрос.УстановитьПараметр("Абонент", Абонент);
	Запрос.УстановитьПараметр("НаДату", НаДату);
    Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Подписка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция - Срок действия
//
// Параметры:
//  Подписка - ДокументСсылка.Подписка - подписка. 
// 
// Возвращаемое значение:
//  Дата - срок действия.
//
Функция СрокДействия(Подписка) Экспорт
    
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
        |   ЕСТЬNULL(Подписка.Ссылка.ДатаОтключения, &ПустаяДата) КАК ДатаОтключения,
        |   ВЫРАЗИТЬ(&ОсновнаяПодписка КАК Документ.Подписка).ДатаОтключения КАК ОсновнаяДатаОтключения
        |ИЗ
        |   Документ.Подписка КАК Подписка
        |ГДЕ
        |   Подписка.ОсновнаяПодписка = &ОсновнаяПодписка
        |   И Подписка.ТипПодписки = ЗНАЧЕНИЕ(Перечисление.ТипыПодписок.Продлевающая)
        |   И Подписка.ПометкаУдаления = ЛОЖЬ
        |
        |УПОРЯДОЧИТЬ ПО
        |   Подписка.ДатаОтключения УБЫВ");
	Запрос.УстановитьПараметр("ОсновнаяПодписка", Подписка);
    Запрос.УстановитьПараметр("ПустаяДата", '00010101');
    
    Результат = Запрос.Выполнить();
    
    Если Результат.Пустой() Тогда
        Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подписка, "ДатаОтключения");
    Иначе
        Данные = Результат.Выгрузить()[0];
        Возврат Макс(Данные.ДатаОтключения, Данные.ОсновнаяДатаОтключения);
    КонецЕсли; 

КонецФункции

// Функция - Описание подписки.
//
// Параметры:
//  Подписка - ДокументСсылка.Подписка - подписка. 
//  Элемент  - ЭлементФормы - элемент формы для вставки описания.
// 
// Возвращаемое значение:
//  Строка - описание подписки.
//
Функция ОписаниеПодписки(Подписка, Элемент = Неопределено) Экспорт
    
    УстановитьПривилегированныйРежим(Истина);
    
    СвойстваПодписки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подписка, "ДатаОтключения, ДатаПодключения, Тариф, Тариф.Комментарий");
    ПодпискаОписание = СтрШаблон(НСтр("ru='%1 (до %2)'"), СвойстваПодписки.Тариф, Формат(СвойстваПодписки.ДатаОтключения,"ДЛФ=D"));
    СрокПодписки = СрокДействия(Подписка);
    
    Если Элемент <> Неопределено Тогда
        Элемент.ЦветТекста = ?(СрокПодписки >= ТекущаяДатаСеанса(), ЦветаСтиля.ЦветТекстаПоля, ЦветаСтиля.ПросроченныеДанныеЦвет);
		Элемент.Гиперссылка = Истина;
        Элемент.Подсказка = СвойстваПодписки.ТарифКомментарий;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Подписка.Тариф,
        |   Подписка.ДатаОтключения
        |ИЗ
        |   Документ.Подписка КАК Подписка
        |ГДЕ
        |   Подписка.ОсновнаяПодписка = &ОсновнаяПодписка
        |   И НЕ Подписка.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("ОсновнаяПодписка", Подписка);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        ПодпискаОписание = ПодпискаОписание + "; " + СтрШаблон(НСтр("ru='%1 (до %2)'"), Выборка.Тариф, Формат(Выборка.ДатаОтключения,"ДЛФ=D"));         
    КонецЦикла;
    
    УстановитьПривилегированныйРежим(Ложь);
    
    Возврат ПодпискаОписание;
    
КонецФункции   

#КонецОбласти

#КонецЕсли