
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
    КонецЕсли;
    
    Поля = Новый Массив;
    Поля.Добавить("Осталось");
    Список.УстановитьОграниченияИспользованияВГруппировке(Поля);
    Список.УстановитьОграниченияИспользованияВОтборе(Поля);
	
	УстановитьУсловноеОформление();
	
	Если Не УправлениеДоступомУСПВызовСервера.ДоступныПользователиСервиса() Тогда
		Элементы.Инициатор.Видимость = Ложь;
	КонецЕсли;
	
    Список.Параметры.УстановитьЗначениеПараметра("НизкаяВажность", Перечисления.ВариантыВажности.НизкаяВажность);
    Список.Параметры.УстановитьЗначениеПараметра("ВысокаяВажность", Перечисления.ВариантыВажности.ВысокаяВажность);
	Список.Параметры.УстановитьЗначениеПараметра("ТипКонсультация", Перечисления.ТипыОбращений.Консультация);
	Список.Параметры.УстановитьЗначениеПараметра("ТипОшибка", Перечисления.ТипыОбращений.Ошибка);
	Список.Параметры.УстановитьЗначениеПараметра("ТипПожелание", Перечисления.ТипыОбращений.Пожелание);
	Список.Параметры.УстановитьЗначениеПараметра("ПустаяДата", '00010101');
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяУниверсальнаяДата());
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Элементы.СписокНастроитьАвтообновление.Видимость = Ложь;
	Иначе
		НастройкиАвтообновления = Автообновление.ПолучитьНастройкиАвтообновленияФормы(ЭтаФорма);
		Элементы.СписокНастроитьАвтообновление.Видимость = Истина;
    КонецЕсли;
    
	Если Параметры.Отбор.Свойство("Абонент") Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru='Обращения абонента'"); 
    ИначеЕсли Параметры.Отбор.Свойство("Инициатор") Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru='Обращения пользователя'"); 
		Элементы.Инициатор.Видимость = Ложь;
	КонецЕсли;
	
	//{Рарус kruser 25.04.2019 84132
	ДобавитьКомандуСоздатьВнутреннееОбращение();
	//}Рарус kruser 25.04.2019 84132	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//{Рарус kruser 10.06.2019 87760
	Если УРВСервер.ПроверитьДоступностьРолиКлиентКомпании() Тогда		
		Отказ = Истина;		
		ОткрытьФорму("Документ.Обращение.Форма.ФормаСпискаКлиентаКомпании");			
	КонецЕсли;
	//}Рарус kruser 10.06.2019 87760

	ТекущаяДатаКлиента = ТекущаяДата();
	
	Список.Параметры.УстановитьЗначениеПараметра("СекундДоМестногоВремени",
		ТекущаяДатаКлиента - УниверсальноеВремя(ТекущаяДатаКлиента));
	
	#Если Не ВебКлиент Тогда
		УстановитьАвтообновлениеФормы();
	#КонецЕсли
	
КонецПроцедуры

//{Рарус kruser 25.04.2019 84132
&НаСервере
Процедура ДобавитьКомандуСоздатьВнутреннееОбращение()
	
	Если РольДоступна(Метаданные.Роли.СозданиеВнутреннихОбращений) Или Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		НоваяКомандаФормы = ЭтаФорма.Команды.Добавить("СоздатьВнутреннееОбращение");
		НоваяКомандаФормы.Действие = "СоздатьВнутреннееОбращение";
		НоваяКомандаФормы.Заголовок = "Создать внутреннее обращение";  
		
		НовыйЭлемент = Элементы.Вставить("СоздатьВнутреннееОбращение", Тип("КнопкаФормы"), Элементы.КоманднаяПанельФормы, Элементы.КоманднаяПанельФормы.ПодчиненныеЭлементы.СписокСкопировать);
		НовыйЭлемент.Вид 			= ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.Заголовок		= "Внутреннее обращение";
		НовыйЭлемент.ИмяКоманды		= "СоздатьВнутреннееОбращение";	
		НовыйЭлемент.Отображение 	= ОтображениеКнопки.КартинкаИТекст;
		НовыйЭлемент.Картинка		= БиблиотекаКартинок.СоздатьЭлементСписка;
		
	ИначеЕсли Не РольДоступна(Метаданные.Роли.ПросмотрВнутреннихОбращений) Тогда  	
		
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));		
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ВнутреннееОбращение");
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;		
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение 	= Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры
//}Рарус kruser 25.04.2019 84132

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПринятьВРаботу(Команда)
	
    Ссылки = ОбслуживаниеКлиент.СсылкиИзСтрокСписка(Элементы.Список.ВыделенныеСтроки);
    ПринятьВРаботуНаСервере(Ссылки);
    ОбслуживаниеКлиент.ПринятьОбращенияВРаботуЗавершение(Ссылки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаЛинию(Команда)
	
    Ссылки = ОбслуживаниеКлиент.СсылкиИзСтрокСписка(Элементы.Список.ВыделенныеСтроки);
	ПеревестиНаЛиниюНаСервере(Ссылки);
    ОбслуживаниеКлиент.ПеревестиОбращенияНаЛиниюЗавершение(Ссылки);
	
КонецПроцедуры  

&НаКлиенте
Процедура Перенаправить(Команда)
	
    Оповещение = Новый ОписаниеОповещения("ПеренаправитьЗавершение", ЭтотОбъект);
	ОбслуживаниеКлиент.ПеренаправитьОбъекты(Элементы.Список.ВыделенныеСтроки, Тип("ДокументСсылка.Обращение"), Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ВыполнитьОбновлениеСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтообновление(Команда)
	
	УстановитьПараметрыАвтообновленияФормы();
	
КонецПроцедуры

//{Рарус kruser 25.04.2019 84132
&НаКлиенте
Процедура СоздатьВнутреннееОбращение(Элемент)
	
	ПараметрыФормы = Новый Структура("ВнутреннееОбращение", Истина);		
	ОткрытьФорму("Документ.Обращение.ФормаОбъекта", ПараметрыФормы);
		
КонецПроцедуры
//}Рарус kruser 25.04.2019 84132

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
    
    ОбщегоНазначенияУСПКлиентСервер.УстановитьДоступностьЭлементаФормы(
        ЭтотОбъект, "ПринятьВРаботу", Элемент.ТекущаяСтрока <> Неопределено);
    ОбщегоНазначенияУСПКлиентСервер.УстановитьДоступностьЭлементаФормы(
        ЭтотОбъект, "ПеревестиНаЛинию", Элемент.ТекущаяСтрока <> Неопределено);
    ОбщегоНазначенияУСПКлиентСервер.УстановитьДоступностьЭлементаФормы(
        ЭтотОбъект, "Перенаправить", Элемент.ТекущаяСтрока <> Неопределено);
    ОбщегоНазначенияУСПКлиентСервер.УстановитьДоступностьЭлементаФормы(
        ЭтотОбъект, "ФормаБизнесПроцессПоручениеСоздатьПоручение", Элемент.ТекущаяСтрока <> Неопределено);
    ОбщегоНазначенияУСПКлиентСервер.УстановитьДоступностьЭлементаФормы(
        ЭтотОбъект, "ФормаЖурналДокументовВзаимодействияЗарегистрироватьЗвонок", Элемент.ТекущаяСтрока <> Неопределено);
    ОбщегоНазначенияУСПКлиентСервер.УстановитьДоступностьЭлементаФормы(
        ЭтотОбъект, "ФормаЖурналДокументовВзаимодействияНаписатьЭлектронноеПисьмо", Элемент.ТекущаяСтрока <> Неопределено);
        
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
    
    Для Каждого Строка Из Строки Цикл
        ОсталосьОформление = Строка.Значение.Оформление.Получить("Осталось");
        Если ЗначениеЗаполнено(ОсталосьОформление) Тогда
            ОсталосьОформление.УстановитьЗначениеПараметра("Текст", ОбщегоНазначенияУСПКлиентСервер.ДниЧасыМинуты(Строка.Значение.Данные.Осталось));
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПринятьВРаботуНаСервере(Ссылки)
    
	Обслуживание.ПринятьОбъектыВРаботу(Ссылки, Элементы.Список);
	
КонецПроцедуры

&НаСервере
Процедура ПеревестиНаЛиниюНаСервере(Ссылки)
    
	Обслуживание.ПеревестиОбъектыНаЛинию(Ссылки, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗавершение(Результат, ПараметрыОповещения) Экспорт
    
    Если Результат <> Неопределено И Результат.МассивОбъектов.Количество() > 0 Тогда
        ПеренаправитьЗавершениеНаСервере();
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ПеренаправитьЗавершениеНаСервере()
    
    Элементы.Список.Обновить();
    
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформлениеСпискаОбращений = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеСпискаОбращений.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	// удаление предустановленных элементов оформления
	Предустановленные = Новый Массив;
	ЭлементыОформления = УсловноеОформлениеСпискаОбращений.Элементы;
	Для каждого ЭлементУсловногоОформления Из ЭлементыОформления Цикл
		Если ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Предустановленные.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлементУсловногоОформления Из Предустановленные Цикл
		ЭлементыОформления.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	// Оформление при срыве сроков реакции
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаОбращений.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокРеакцииСорван");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокОбработкиСорван");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПредупреждениеЦвет);
	
	// Оформление при срыве сроков обработки
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаОбращений.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокОбработкиСорван");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
		
КонецПроцедуры

&НаКлиенте
Процедура Автообновление()
	
	Если ТипЗнч(НастройкиАвтообновления) <> Тип("Структура")
		Или (ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И Не НастройкиАвтообновления.Автообновление) Тогда
		ОтключитьОбработчикОжидания("Автообновление");
	Иначе
		ОбновитьРезультатВыполнения = Ложь;
		ВыполнитьОбновлениеСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАвтообновлениеФормы()
	
	Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И НастройкиАвтообновления.Автообновление Тогда
		ПодключитьОбработчикОжидания(
			"Автообновление", 
			НастройкиАвтообновления.ПериодАвтоОбновления,
			Ложь);
	Иначе
		ОтключитьОбработчикОжидания("Автообновление");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ВыполнитьОбновлениеСписка()
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяУниверсальнаяДата());
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормы()
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"УстановитьПараметрыАвтообновленияФормыПродолжение",
			ЭтотОбъект);
	
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияФормы(
		ЭтаФорма, 
		НастройкиАвтообновления,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормыПродолжение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		НастройкиАвтообновления = Результат;
		УстановитьАвтообновлениеФормы();
	КонецЕсли;
	
КонецПроцедуры

//{Рарус_shav 2018.11.26 75946
&НаКлиенте
Процедура ОбращениеЧерезПомощник(Команда)
	ОткрытьФорму("Обработка.АРМРегистрацииОбращений.Форма.Форма");
КонецПроцедуры
//}Рарус_shav 2018.11.26 75946


#КонецОбласти
