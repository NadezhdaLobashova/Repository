
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура УстановитьЗаголовкиКлиент(Выборка)
	Элементы.Новые.Заголовок = СтрШаблон(НСтр("ru='Новые (%1)'"), Формат(?(Выборка.Новые = Null, 0, Выборка.Новые),"ЧЦ=10; ЧН=0; ЧГ=0"));
	Элементы.НаМне.Заголовок = СтрШаблон(НСтр("ru='На мне (%1)'"), Формат(?(Выборка.НаМне = Null, 0, Выборка.НаМне),"ЧЦ=10; ЧН=0; ЧГ=0"));
	Элементы.ВРаботеУЛинии.Заголовок = СтрШаблон(НСтр("ru='В работе у линии (%1)'"), Формат(?(Выборка.ВРаботеУЛинии = Null, 0, Выборка.ВРаботеУЛинии),"ЧЦ=10; ЧН=0; ЧГ=0")); 
	Элементы.ОбщиеНаЛинии.Заголовок = СтрШаблон(НСтр("ru='Общие на линии (%1)'"), Формат(?(Выборка.ОбщиеНаЛинии = Null, 0, Выборка.ОбщиеНаЛинии),"ЧЦ=10; ЧН=0; ЧГ=0")); 
	Элементы.Все.Заголовок = СтрШаблон(НСтр("ru='Все (%1)'"), Формат(?(Выборка.Все = Null, 0, Выборка.Все),"ЧЦ=10; ЧН=0; ЧГ=0")); 
	КоличествоНаМне = Выборка.НаМне;	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	//Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
	//	Возврат;
	//КонецЕсли;
	
    Поля = Новый Массив;
    Поля.Добавить("Осталось");
    Список.УстановитьОграниченияИспользованияВГруппировке(Поля);
    Список.УстановитьОграниченияИспользованияВОтборе(Поля);
    
    ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	СведенияПользователя = РегистрыСведений.СведенияОПользователях.СведенияОПользователе(ТекущийПользователь);
	ОбслуживающаяОрганизация = СведенияПользователя.ОбслуживающаяОрганизация;
	ЛинияПоддержки = СведенияПользователя.ЛинияПоддержки;
	ПерваяЛинияПоддержки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияПользователя.ОбслуживающаяОрганизация, "ПерваяЛинияПоддержки");
	ЭтоПерваяЛиния = (СведенияПользователя.ЛинияПоддержки = ПерваяЛинияПоддержки);
	ПользователиЛинииПоддержки.ЗагрузитьЗначения(РаботаСПользователями.ПользователиЛинииПоддержки(ЛинияПоддержки, Истина));
    
	УстановитьУсловноеОформление();
	
    Список.Параметры.УстановитьЗначениеПараметра("НизкаяВажность", Перечисления.ВариантыВажности.НизкаяВажность);
    Список.Параметры.УстановитьЗначениеПараметра("ВысокаяВажность", Перечисления.ВариантыВажности.ВысокаяВажность);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеЗакрыто", Перечисления.СостоянияОбращений.Закрыто);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеНовое", Перечисления.СостоянияОбращений.Новое);
	Список.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	Список.Параметры.УстановитьЗначениеПараметра("ЛинияПоддержки", ЛинияПоддержки);
	Список.Параметры.УстановитьЗначениеПараметра("ПользователиЛинииПоддержки", ПользователиЛинииПоддержки.ВыгрузитьЗначения());
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяУниверсальнаяДата());
	Список.Параметры.УстановитьЗначениеПараметра("ПустаяДата", '00010101000000');
	Список.Параметры.УстановитьЗначениеПараметра("ТипКонсультация", Перечисления.ТипыОбращений.Консультация);
	Список.Параметры.УстановитьЗначениеПараметра("ТипОшибка", Перечисления.ТипыОбращений.Ошибка);
	Список.Параметры.УстановитьЗначениеПараметра("ТипПожелание", Перечисления.ТипыОбращений.Пожелание);

    Если Не ЭтоПерваяЛиния Тогда
        Элементы.Новые.Видимость = Ложь;
	КонецЕсли; 
	
	ВариантОтбора = ?(ЭтоПерваяЛиния, Перечисления.ВариантыОтборовОбращений.Новые, Перечисления.ВариантыОтборовОбращений.НаМне); 
	НастроитьСписокПоВариантуОтбора();
		
	Если Не УправлениеДоступомУСПВызовСервера.ДоступныПользователиСервиса() Тогда
		Элементы.Инициатор.Видимость = Ложь;
	КонецЕсли;

	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Элементы.СписокНастроитьАвтообновление.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюНастроитьАвтообновление.Видимость = Ложь;
	Иначе
		НастройкиАвтообновления = Автообновление.ПолучитьНастройкиАвтообновленияФормы(ЭтаФорма);
		Элементы.СписокНастроитьАвтообновление.Видимость = Истина;
		Элементы.СписокКонтекстноеМенюНастроитьАвтообновление.Видимость = Истина;
	КонецЕсли;
	
	//{Рарус kruser 25.04.2019 84132
	ДобавитьКомандуСоздатьВнутреннееОбращение();
	//}Рарус kruser 25.04.2019 84132	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СгруппироватьПоКолонкеНаСервере(Настройки["РежимГруппировки"]);
	
	ВариантОтбора = Настройки.Получить("ВариантОтбора");
	
	Если ВариантОтбора = Неопределено Тогда
		ВариантОтбора = ?(ЭтоПерваяЛиния, Перечисления.ВариантыОтборовОбращений.Новые, Перечисления.ВариантыОтборовОбращений.НаМне); 
	ИначеЕсли ВариантОтбора = Перечисления.ВариантыОтборовОбращений.Новые И Не ЭтоПерваяЛиния Тогда
		ВариантОтбора = Перечисления.ВариантыОтборовОбращений.НаМне;
	КонецЕсли;
	
	НастроитьСписокПоВариантуОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененоОбращение" Тогда
		Результат = Неопределено;
		УстановитьЗаголовкиВариантовОтборов(ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, Результат);
		УстановитьЗаголовкиКлиент(Результат);
		ОбработатьНаклейку();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущаяДатаКлиента = ТекущаяДата();
	
	СекундДоМестногоВремени = ТекущаяДатаКлиента - УниверсальноеВремя(ТекущаяДатаКлиента);
	Список.Параметры.УстановитьЗначениеПараметра("СекундДоМестногоВремени", СекундДоМестногоВремени);
		
	#Если Не ВебКлиент Тогда
		УстановитьАвтообновлениеФормы();
	#КонецЕсли
	Элементы.Список.Обновить();
	Результат = Неопределено;
	УстановитьЗаголовкиВариантовОтборов(ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, Результат);
	УстановитьЗаголовкиКлиент(Результат);
    ОбработатьНаклейку();	
    
КонецПроцедуры

//{Рарус kruser 25.04.2019 84132
&НаСервере
Процедура ДобавитьКомандуСоздатьВнутреннееОбращение()
		
	Если РольДоступна(Метаданные.Роли.СозданиеВнутреннихОбращений) Или Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		НоваяКомандаФормы = ЭтаФорма.Команды.Добавить("СоздатьВнутреннееОбращение");
		НоваяКомандаФормы.Действие = "СоздатьВнутреннееОбращение";
		НоваяКомандаФормы.Заголовок = "Создать внутреннее обращение";  
		
		НовыйЭлемент = Элементы.Вставить("СоздатьВнутреннееОбращение", Тип("КнопкаФормы"), Элементы.КоманднаяПанельФормы, Элементы.СписокСкопировать);
		НовыйЭлемент.Вид 			= ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.Заголовок		= "Внутреннее обращение";
		НовыйЭлемент.ИмяКоманды		= "СоздатьВнутреннееОбращение";	
		НовыйЭлемент.Отображение 	= ОтображениеКнопки.КартинкаИТекст;
		НовыйЭлемент.Картинка		= БиблиотекаКартинок.СоздатьЭлементСписка;
				
	ИначеЕсли Не РольДоступна(Метаданные.Роли.ПросмотрВнутреннихОбращений) Тогда  	
	
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));		
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ВнутреннееОбращение");
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;		
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ПравоеЗначение 	= Ложь;
	КонецЕсли;
	
КонецПроцедуры
//}Рарус kruser 25.04.2019 84132

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПринятьВРаботу(Команда)
    
    Ссылки = ОбслуживаниеКлиент.СсылкиИзСтрокСписка(Элементы.Список.ВыделенныеСтроки);
	Результат = Неопределено;
    ПринятьВРаботуНаСервере(Ссылки, ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, Результат);
    ОбработатьНаклейку();
	УстановитьЗаголовкиКлиент(Результат);
    ОбслуживаниеКлиент.ПринятьОбращенияВРаботуЗавершение(Ссылки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаЛинию(Команда)
    
    Ссылки = ОбслуживаниеКлиент.СсылкиИзСтрокСписка(Элементы.Список.ВыделенныеСтроки);
	Результат = Неопределено;
	ПеревестиНаЛиниюНаСервере(Ссылки, ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, Результат);
    ОбслуживаниеКлиент.ПеревестиОбращенияНаЛиниюЗавершение(Ссылки);
    ОбработатьНаклейку();
	Элементы.Список.Обновить();
	УстановитьЗаголовкиКлиент(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
    
    Оповещение = Новый ОписаниеОповещения("ПеренаправитьЗавершение", ЭтотОбъект);
	ОбслуживаниеКлиент.ПеренаправитьОбъекты(Элементы.Список.ВыделенныеСтроки, Тип("ДокументСсылка.Обращение"), Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Новые(Команда)
    
    ВариантОтбора = ПредопределенноеЗначение("Перечисление.ВариантыОтборовОбращений.Новые");
    НастроитьСписокПоВариантуОтбора();
    
КонецПроцедуры

&НаКлиенте
Процедура Все(Команда)
    
    ВариантОтбора = ПредопределенноеЗначение("Перечисление.ВариантыОтборовОбращений.Все");
    НастроитьСписокПоВариантуОтбора();
    
КонецПроцедуры

&НаКлиенте
Процедура НаМне(Команда)
    
    ВариантОтбора = ПредопределенноеЗначение("Перечисление.ВариантыОтборовОбращений.НаМне");
    НастроитьСписокПоВариантуОтбора();
    
КонецПроцедуры

&НаКлиенте
Процедура ВРаботеУЛинии(Команда)
    
    ВариантОтбора = ПредопределенноеЗначение("Перечисление.ВариантыОтборовОбращений.ВРаботеУЛинии");
    НастроитьСписокПоВариантуОтбора();
    
КонецПроцедуры

&НаКлиенте
Процедура ОбщиеНаЛинии(Команда)
    
    ВариантОтбора = ПредопределенноеЗначение("Перечисление.ВариантыОтборовОбращений.ОбщиеНаЛинии");
    НастроитьСписокПоВариантуОтбора();
    
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоВажности(Команда)
	
	СгруппироватьПоКолонкеНаСервере("Важность");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоИсполнителю(Команда)
	
	СгруппироватьПоКолонкеНаСервере("Исполнитель");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоБезГруппировки(Команда)
	
	СгруппироватьПоКолонкеНаСервере("");
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоТипОбращения(Команда)
	
	СгруппироватьПоКолонкеНаСервере("ТипОбращения");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтообновление(Команда)
	
	УстановитьПараметрыАвтообновленияФормы();
	
КонецПроцедуры

//{Рарус kruser 25.04.2019 84132
&НаКлиенте
Процедура СоздатьВнутреннееОбращение(Элемент)
	
	ПараметрыФормы = Новый Структура("ВнутреннееОбращение", Истина);		
	ОткрытьФорму("Документ.Обращение.ФормаОбъекта", ПараметрыФормы);
		
КонецПроцедуры
//}Рарус kruser 25.04.2019 84132

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
    
    ОбщегоНазначенияУСПКлиентСервер.УстановитьДоступностьЭлементаФормы(
        ЭтотОбъект, "ПринятьВРаботу", Элемент.ТекущаяСтрока <> Неопределено);
    ОбщегоНазначенияУСПКлиентСервер.УстановитьДоступностьЭлементаФормы(
        ЭтотОбъект, "ПеревестиНаЛинию", Элемент.ТекущаяСтрока <> Неопределено);
    ОбщегоНазначенияУСПКлиентСервер.УстановитьДоступностьЭлементаФормы(
        ЭтотОбъект, "Перенаправить", Элемент.ТекущаяСтрока <> Неопределено);
    ОбщегоНазначенияУСПКлиентСервер.УстановитьДоступностьЭлементаФормы(
        ЭтотОбъект, "ФормаБизнесПроцессПоручениеСоздатьПоручение", Элемент.ТекущаяСтрока <> Неопределено);
    ОбщегоНазначенияУСПКлиентСервер.УстановитьДоступностьЭлементаФормы(
        ЭтотОбъект, "ФормаЖурналДокументовВзаимодействияЗарегистрироватьЗвонок", Элемент.ТекущаяСтрока <> Неопределено);
    ОбщегоНазначенияУСПКлиентСервер.УстановитьДоступностьЭлементаФормы(
        ЭтотОбъект, "ФормаЖурналДокументовВзаимодействияНаписатьЭлектронноеПисьмо", Элемент.ТекущаяСтрока <> Неопределено);
        
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
    
    Для Каждого Строка Из Строки Цикл
        ОсталосьОформление = Строка.Значение.Оформление.Получить("Осталось");
        Если ЗначениеЗаполнено(ОсталосьОформление) Тогда
            ОсталосьОформление.УстановитьЗначениеПараметра("Текст", ОбщегоНазначенияУСПКлиентСервер.ДниЧасыМинуты(Строка.Значение.Данные.Осталось));
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПринятьВРаботуНаСервере(Ссылки, ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, Результат)
    
	Обслуживание.ПринятьОбъектыВРаботу(Ссылки, Элементы.Список);
	УстановитьЗаголовкиВариантовОтборов(ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, Результат);
	    
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеревестиНаЛиниюНаСервере(Ссылки, ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, Результат)
    
	Обслуживание.ПеревестиОбъектыНаЛинию(Ссылки);
	Результат = Неопределено;
	УстановитьЗаголовкиВариантовОтборов(ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, Результат);
	    
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗавершение(Результат, ПараметрыОповещения) Экспорт
    
	Если Результат <> Неопределено И Результат.МассивОбъектов.Количество() > 0 Тогда
		ПараметрРезультат = Неопределено;
        ПеренаправитьЗавершениеНаСервере(ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, ПараметрРезультат);    
		Элементы.Список.Обновить();
		УстановитьЗаголовкиКлиент(ПараметрРезультат);
        ОбработатьНаклейку();
    КонецЕсли;
    
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренаправитьЗавершениеНаСервере(ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, Результат);
        
    УстановитьЗаголовкиВариантовОтборов(ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, Результат);   
    
КонецПроцедуры
 
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформлениеСпискаОбращений = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеСпискаОбращений.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	// удаление предустановленных элементов оформления
	Предустановленные = Новый Массив;
	ЭлементыОформления = УсловноеОформлениеСпискаОбращений.Элементы;
	Для каждого ЭлементУсловногоОформления Из ЭлементыОформления Цикл
		Если ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Предустановленные.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлементУсловногоОформления Из Предустановленные Цикл
		ЭлементыОформления.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	// Оформление при срыве сроков реакции
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаОбращений.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КартинкаСрока");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = 3;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПредупреждениеЦвет);
	
	// Оформление при срыве сроков обработки
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаОбращений.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КартинкаСрока");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = 1;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);
		
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокПоВариантуОтбора()
	
	Список.Параметры.УстановитьЗначениеПараметра("Вариант", ОбщегоНазначения.ИмяЗначенияПеречисления(ВариантОтбора));
    Элементы.Новые.Пометка = (ВариантОтбора = ПредопределенноеЗначение("Перечисление.ВариантыОтборовОбращений.Новые"));
    Элементы.НаМне.Пометка = (ВариантОтбора = ПредопределенноеЗначение("Перечисление.ВариантыОтборовОбращений.НаМне"));
    Элементы.ОбщиеНаЛинии.Пометка = (ВариантОтбора = ПредопределенноеЗначение("Перечисление.ВариантыОтборовОбращений.ОбщиеНаЛинии"));
    Элементы.ВРаботеУЛинии.Пометка = (ВариантОтбора = ПредопределенноеЗначение("Перечисление.ВариантыОтборовОбращений.ВРаботеУЛинии"));
    Элементы.Все.Пометка = (ВариантОтбора = ПредопределенноеЗначение("Перечисление.ВариантыОтборовОбращений.Все"));
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗаголовкиВариантовОтборов(ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, Результат)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВЫБОР
		|			КОГДА ДокументОбращение.Состояние = &СостояниеНовое
		|					И НЕ ДокументОбращение.Исполнитель ССЫЛКА Справочник.Пользователи
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Новые,
		|	СУММА(ВЫБОР
		|			КОГДА ДокументОбращение.Исполнитель = &ТекущийПользователь
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НаМне,
		|	СУММА(1) КАК Все,
		|	СУММА(ВЫБОР
		|			КОГДА ДокументОбращение.Исполнитель = &ЛинияПоддержки
		|					И ДокументОбращение.Состояние <> &СостояниеНовое
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОбщиеНаЛинии,
		|	СУММА(ВЫБОР
		|			КОГДА ДокументОбращение.Исполнитель В (&ПользователиЛинииПоддержки)
		|					И ДокументОбращение.Исполнитель <> &ТекущийПользователь
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВРаботеУЛинии
		|ИЗ
		|	Документ.Обращение КАК ДокументОбращение
		|ГДЕ
		|	ДокументОбращение.Состояние <> &СостояниеЗакрыто
		|	И НЕ ДокументОбращение.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("СостояниеЗакрыто", Перечисления.СостоянияОбращений.Закрыто);
	Запрос.УстановитьПараметр("СостояниеНовое", Перечисления.СостоянияОбращений.Новое);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ЛинияПоддержки", ЛинияПоддержки);
	Запрос.УстановитьПараметр("ПользователиЛинииПоддержки", ПользователиЛинииПоддержки.ВыгрузитьЗначения());
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Результат = Новый Структура("Новые, НаМне, Все, ОбщиеНаЛинии, ВРаботеУЛинии", 0, 0, 0, 0, 0);
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СгруппироватьПоКолонкеНаСервере(Знач ИмяКолонкиРеквизита)
	РежимГруппировки = ИмяКолонкиРеквизита;
	Список.Группировка.Элементы.Очистить();
	Если НЕ ПустаяСтрока(ИмяКолонкиРеквизита) Тогда
		ПолеГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиРеквизита);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	Результат = Неопределено;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТекущаяДата", УниверсальноеВремя(ТекущаяДата())); 
	ВыполнитьОбновлениеСписка(ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, Результат);
	Элементы.Список.Обновить();
	УстановитьЗаголовкиКлиент(Результат);
	ОбработатьНаклейку();
	
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура ВыполнитьОбновлениеСписка(ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, Результат)
	
	//Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяУниверсальнаяДата());
	УстановитьЗаголовкиВариантовОтборов(ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАвтообновлениеФормы()
	
	Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И НастройкиАвтообновления.Автообновление Тогда
		ПодключитьОбработчикОжидания(
			"Автообновление", 
			НастройкиАвтообновления.ПериодАвтоОбновления,
			Ложь);
	Иначе
		ОтключитьОбработчикОжидания("Автообновление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Автообновление()
	
	Если ТипЗнч(НастройкиАвтообновления) <> Тип("Структура")
		Или (ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И Не НастройкиАвтообновления.Автообновление) Тогда
		ОтключитьОбработчикОжидания("Автообновление");
	Иначе
		ОбновитьРезультатВыполнения = Ложь;
		Результат = Неопределено;
		//{Рарус kruser 2018.12.24 77539
		//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТекущаяДата", ТекущаяДата()); 
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТекущаяДата", УниверсальноеВремя(ТекущаяДата())); 
		//}Рарус kruser 2018.12.24 77539
		ВыполнитьОбновлениеСписка(ТекущийПользователь, ЛинияПоддержки, ПользователиЛинииПоддержки, Результат);
		УстановитьЗаголовкиКлиент(Результат);
        ОбработатьНаклейку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормы()
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"УстановитьПараметрыАвтообновленияФормыПродолжение",
			ЭтотОбъект);
	
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияФормы(
		ЭтаФорма, 
		НастройкиАвтообновления,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормыПродолжение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		НастройкиАвтообновления = Результат;
		УстановитьАвтообновлениеФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНаклейку()
    
  	Если Не ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
        Попытка
            Если КоличествоНаМне = 0 Тогда
                Выполнить("ПанельЗадачОС.УдалитьНаклейку();");
            Иначе
                Выполнить("ПанельЗадачОС.УстановитьНаклейку(КоличествоНаМне, Ложь);");
            КонецЕсли; 
        Исключение
            // Работает не во всех операционных системах.
        КонецПопытки;
    КонецЕсли;
    
КонецПроцедуры

//{Рарус_shav 2018.11.26 75946
&НаКлиенте
Процедура ОбращениеЧерезПомощник(Команда)
	ОткрытьФорму("Обработка.АРМРегистрацииОбращений.Форма.Форма");
КонецПроцедуры
//}Рарус_shav 2018.11.26 75946
#КонецОбласти
