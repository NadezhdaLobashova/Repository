&НаКлиенте
Перем КонтекстВыбора;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	\\крррр
	//{Рарус_shav 2018.11.26 75946
	Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
		Если Параметры.ЗначенияЗаполнения.Свойство("Абонент") Тогда
			Объект.Абонент = Параметры.ЗначенияЗаполнения.Абонент;
		КонецЕсли;	
		Если Параметры.ЗначенияЗаполнения.Свойство("Инициатор") Тогда
			Объект.Инициатор = Параметры.ЗначенияЗаполнения.Инициатор;
		КонецЕсли;	
		Если Параметры.ЗначенияЗаполнения.Свойство("Тема") Тогда
			Объект.Тема = Параметры.ЗначенияЗаполнения.Тема;
		КонецЕсли;
		
		//Лобашова 11.03.2019 81724 +
		Если Параметры.ЗначенияЗаполнения.Свойство("Проект") Тогда
			Объект.Проект = Параметры.ЗначенияЗаполнения.Проект;
		КонецЕсли;
		//Лобашова 11.03.2019 81724 -
		
	КонецЕсли;	
	//}Рарус_shav 2018.11.26 75946
	
	//{Рарус kruser 25.04.2019 84132
	Если Параметры.Свойство("ВнутреннееОбращение") Тогда
		Объект.ВнутреннееОбращение = Параметры.ВнутреннееОбращение;	
		Объект.Сервис = Справочники.Сервисы.СервисПоУмолчанию(Неопределено, Истина);
	КонецЕсли;
	//}Рарус kruser 25.04.2019 84132

	//{Рарус kruser 08.05.2019 86181
	Если Объект.Ссылка.Пустая() И Объект.ВнутреннееОбращение Тогда
		Объект.КаналПолучения = Неопределено;	
	КонецЕсли;
	//}Рарус kruser 08.05.2019 86181
	
	//Лобашова 89291 17.07.2019 +
	Если ЗначениеЗаполнено(Объект.Описание) тогда
		Описание.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(Объект.Описание));
	КонецЕсли;
	//Лобашова 89291 17.07.2019 -
	
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		МестнаяДата = МестноеВремя(Объект.Дата);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДатаОценки) Тогда
		МестнаяДатаОценки = МестноеВремя(Объект.ДатаОценки);
	КонецЕсли;
	
	ИсходнаяСсылка = Объект.Ссылка;
	ИсходныйИнициатор = Объект.Инициатор;
	ИсходноеСостояние = Объект.Состояние;
	ИсходныйИсполнитель = Объект.Исполнитель;
	СостояниеЗакрыто = Перечисления.СостоянияОбращений.Закрыто;
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	УстановитьУсловноеОформление();
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	СведенияОПользователе = РегистрыСведений.СведенияОПользователях.СведенияОПользователе(ТекущийПользователь);
	
	ЛинияПоддержки = СведенияОПользователе.ЛинияПоддержки;
	ОбслуживающаяОрганизация = СведенияОПользователе.ОбслуживающаяОрганизация;
	//Лобашова 18.04.2019 84959 +
	//ЗапрашиватьТрудозатраты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЛинияПоддержки, "ЗапрашиватьТрудозатратыВОбращениях");
	//Лобашова 18.04.2019 84959 -
	Комментарии.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	
	Если ОбслуживающаяОрганизация <> Справочники.ОбслуживающиеОрганизации.СлужбаПоддержки Тогда
		Элементы.ИсторияСобытий.Видимость = Ложь;
		Элементы.ВнутренняяПереписка.Видимость = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Комментарии, "ВнутренняяПереписка", Ложь, ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Иначе
		Элементы.ВнутренняяПереписка.Видимость = Истина;
		ВнутренняяПереписка = Истина;
	КонецЕсли;
	
	//+astyul, 75313, 06.11.2018
	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	Если Не ЭтоПолноправныйПользователь 
	//		И ЛинияПоддержки <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбслуживающаяОрганизация, "ПерваяЛинияПоддержки") Тогда
	//		Элементы.Инициатор.ТолькоПросмотр = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	//-astyul, 75313, 06.11.2018
	
	//Лобашова 12.08.2019 89291 +
	Элементы.ОкончаниеРазговора		.Доступность = Ложь;
	Элементы.ДекорацияКружок		.Видимость = Ложь;
	//Лобашова 12.08.2019 89291 -

	Элементы.ОтправитьПисьмо.Доступность = ЗначениеЗаполнено(Объект.КарточкаБазыЗнаний);
    
    УстановитьКартинкиДекорацийОценок();
	УстановитьВидимостьПоДоступнымРолям();
	Если ЗначениеЗаполнено(Объект.Инициатор) Тогда
		УстановитьОтборыПоИнициатору();
	КонецЕсли;
    
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокТрудозатраты.Отбор, "Источник", Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ИсторияСобытий.Отбор, "Источник", Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ИсторияСобытий.Отбор, "ВидСобытия", 
		Справочники.ВидыБизнесСобытий.ИзменениеОбращения, ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
    
    #Область Оценка	
	Если ЭтоПолноправныйПользователь Тогда
		Элементы.НадписьОжиданияОценки.Гиперссылка = Истина;
		Элементы.КомментарийОценки.ТолькоПросмотр = Ложь;
		Элементы.Оценка.ТолькоПросмотр = Ложь;
		Элементы.МестнаяДатаОценки.ТолькоПросмотр = Ложь;
		Элементы.Оценка1.Гиперссылка = Истина;
		Элементы.Оценка2.Гиперссылка = Истина;
		Элементы.Оценка3.Гиперссылка = Истина;
		Элементы.Оценка4.Гиперссылка = Истина;
		Элементы.Оценка5.Гиперссылка = Истина;
		Элементы.Комментарии.ИзменятьСоставСтрок = Истина;
		Элементы.КомментарииУдалить.Видимость = Истина;
	Иначе
		Элементы.Дата.ТолькоПросмотр = Истина;
    КонецЕсли;
    #КонецОбласти
    
    #Область ПрисоединенныеФайлы
	Элементы.ФайлыСписок.РежимВыбора = Ложь;
	
	ИмяСправочникаХранилищаФайлов = "ОбращениеПрисоединенныеФайлы";
	НастроитьДинамическийСписок(ИмяСправочникаХранилищаФайлов);
	
	ТипСправочникаСФайлами = Тип("СправочникСсылка.ОбращениеПрисоединенныеФайлы");
	
	МетаданныеСправочникаСФайлами = Метаданные.НайтиПоТипу(ТипСправочникаСФайлами);
	
	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", МетаданныеСправочникаСФайлами) Тогда
		СкрытьКнопкиДобавления();
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Редактирование", МетаданныеСправочникаСФайлами)
	 ИЛИ НЕ ПравоДоступа("Редактирование", Объект.Ссылка.Метаданные())
	 ИЛИ Параметры.ТолькоПросмотр = Истина Тогда
		
		СкрытьКнопкиИзменения();
	КонецЕсли;
	
	ИменаВсехКомандФормы = ПолучитьИменаКомандФормы();
	ИменаЭлементов = Новый Массив;
	
	Для Каждого ЭлементФормы ИЗ Элементы Цикл
		
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИменаВсехКомандФормы.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ИменаЭлементов.Добавить(ЭлементФормы.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ИменаЭлементовКнопокФормы = Новый ФиксированныйМассив(ИменаЭлементов);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись")
	 Или Константы["ИспользоватьЭлектронныеПодписи"].Получить() <> Истина Тогда
	    Элементы.СписокНомерКартинкиПодписанЗашифрован.Видимость = Ложь;
	КонецЕсли;
    
    УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьВидимостьРеквизитовОценки();	
    
	//ОбщегоНазначенияКлиентСервер.ПеренестиОтборыВДинамическийСписок(ЭтотОбъект, ФайлыСписок);
	
	ТипВсеПрисоединенныеФайлы = Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип;
    #КонецОбласти
    
    #Область Взаимодействия	
	УстановитьОтборПоПредмету();
	
	Для Каждого ТипПредмета Из Метаданные.ОпределяемыеТипы.ПредметВзаимодействия.Тип.Типы() Цикл
		СписокВыбораТипаПредмета.Добавить(Метаданные.НайтиПоТипу(ТипПредмета).ПолноеИмя(),Строка(ТипПредмета));
	КонецЦикла;
	
	Взаимодействия.ЗаполнитьСписокДоступныхДляСозданияДокументов(ДокументыДоступныеДляСоздания);
    ВзаимодействияСписок.Параметры.УстановитьЗначениеПараметра("ПустаяДата", '00010101000000');
    ВзаимодействияСписок.Параметры.УстановитьЗначениеПараметра("Черновик", Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик);
	
	Статус = "Все";
    #КонецОбласти

    #Область БизнесПроцессы
	ИспользоватьПодчиненныеБизнесПроцессы = ПолучитьФункциональнуюОпцию("ИспользоватьПодчиненныеБизнесПроцессы");	
	
	Элементы.ЗадачиСписок.Видимость = Не ИспользоватьПодчиненныеБизнесПроцессы;
	Элементы.КоманднаяПанельСписка.Видимость = Не ИспользоватьПодчиненныеБизнесПроцессы;
	Элементы.ПоказыватьВыполненные.Видимость = Не ИспользоватьПодчиненныеБизнесПроцессы;
	Элементы.ДеревоЗадач.Видимость = ИспользоватьПодчиненныеБизнесПроцессы;
	
	ЗадачиСписок.Параметры.Элементы[0].Значение = Объект.Ссылка;
	ЗадачиСписок.Параметры.Элементы[0].Использование = Истина;
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.СрокИсполнения.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(ЗадачиСписок);
	УстановитьОтбор(Новый Структура("ПоказыватьВыполненные", ПоказыватьВыполненные));
	
	Если ИспользоватьПодчиненныеБизнесПроцессы Тогда 
		ЗаполнитьДеревоЗадач();
	КонецЕсли;
	
	// Установка отбора динамического списка.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗадачиСписок, "ПометкаУдаления", Ложь, ВидСравненияКомпоновкиДанных.Равно, , ,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	#КонецОбласти
    
		
	ОбщегоНазначенияКлиентСервер.ПеренестиОтборыВДинамическийСписок(ЭтотОбъект);
	
	// Отображение контактной информации
	Если Не (РольДоступна(Метаданные.Роли.ЧтениеИзменениеКонтактнойИнформации) Или ЭтоПолноправныйПользователь) Тогда
		Элементы.АбонентКонтактнаяИнформация.Видимость = Ложь;
		Элементы.АбонентОбслуживающаяОрганизацияКонтактнаяИнформация.Видимость = Ложь;
		Элементы.ИнициаторКонтактнаяИнформация.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)  Тогда
		ИспользоватьПризнакРассмотрено = ПолучитьФункциональнуюОпцию("ИспользоватьПризнакРассмотрено");
		ОбновитьСостоянияДоступностиЗадач();
		ОбновитьСостоянияДоступностиВзаимодействий();
		ОбновитьЗаголовокСпискаФайлов();
		ЗаполнитьКонтакты();
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ОбщегоНазначенияУСП.УстановитьФорматированноеОписаниеИзХранилища(Описание, Параметры.ЗначениеКопирования.ОписаниеХранилище);
        Иначе
            Описание.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(" "));
    	КонецЕсли;
	КонецЕсли;
	
	УстановитьСписокСостоянийОбращенияНаСервере();
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Элементы.ОписаниеВставитьКартинкуИзБуфера.Видимость = Ложь;
        Элементы.КарточкаБазыЗнаний.МногострочныйРежим = Ложь;
	КонецЕсли;

    УстановитьПараметрыВыбораРаздела();
    УстановитьПараметрыВыбораКарточки();
	
	#Область Свойства
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Новый Структура("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты"));
	// Конец СтандартныеПодсистемы.Свойства
			
	НаборыСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Объект.Ссылка);
	Для каждого Строка Из НаборыСвойств Цикл
		ДоступныеНаборыСвойств.Добавить(Строка.Набор);
	КонецЦикла;
	
	// Заполнение таблицы значений свойств.
	ЗаполнитьТаблицуЗначенийСвойств(Истина);
	Элементы.ТаблицаЗначенийСвойств.Видимость = ТаблицаЗначенийСвойств.Количество() > 0;
    #КонецОбласти
	
	УстановитьСрокОбработкиНаСервере();
    ЗаполнитьШаблоныТекстов();
	УстановитьОписаниеПодписки();
    
	ОтветственныйСтрокой = ОбщегоНазначенияУСПКлиентСервер.ОписаниеИсполнителя(Объект.ОбслуживающаяОрганизация, Объект.ЛинияПоддержки, Объект.Исполнитель);
	
	//{Рарус_shav 2018.11.26 75946
	Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
		Если Параметры.ЗначенияЗаполнения.Свойство("Описание") Тогда
			Описание = Параметры.ЗначенияЗаполнения.Описание;
		КонецЕсли;	
	КонецЕсли;	
	//}Рарус_shav 2018.11.26 75946
	
	//+ Котова А.Ю. 11.10.2018 ТЗ№ 72364 {
	ВывестиРеквизитПроектНаФорму();
	//- Котова А.Ю. 11.10.2018 ТЗ№ 72364 }

	//{Рарус kruser 2018.12.21 78093
	ВывестиРеквизитЭтапПроектаНаФорму();
	//}Рарус kruser 2018.12.21 78093
	
	//astyul, 72626, 18.10.2018
	СформироватьДанныеОПодпискахИДоговорахОБД();
    //astyul, 72626, 18.10.2018	
	
	//Лобашова 15.03.2019 81724 +
	ЗаполнитьТрудозатратыВОбращении();
	
	//Лобашова 15.03.2019 81724 -
	
	//{Рарус kruser 02.04.2019 84062
	ВывестиРеквизитАвторНаФорму();
	//{Рарус kruser 02.04.2019 84062

	//{Рарус kruser 23.05.2019 86907 
	ВывестиРеквизитНомерОбращенияКлиентаНаФорму();
	//}Рарус kruser 23.05.2019 86907
	
	//{Рарус kruser 22.04.2019 84132
	УстановитьОтборНаСервисы();
	
	ДобавитьСписокОбращенийНаФорму();
	
	Если Объект.ВнутреннееОбращение Тогда	
		ЭтаФорма.Заголовок = "Внутреннее обращение";		
	КонецЕсли;
	//}Рарус kruser 22.04.2019 84132
	
	//{Рарус kruser 06.06.2019 87760
	Если УРВСервер.ПроверитьДоступностьРолиКлиентКомпании() Тогда
		УстановитьВидимостьРеквизитовДляклиента();
	КонецЕсли;
	//}Рарус kruser 06.06.2019 87760
	
КонецПроцедуры 

//Лобашова 18.03.2019 81724 +
//автозаполнение трудозатрат и запись их в регистр
&НаСервере
Процедура ЗаполнитьТрудозатратыВОбращении()
	
	Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
		
		Если Параметры.ЗначенияЗаполнения.Свойство("Трудозатраты") Тогда
			Попытка
				Источник = Объект.Ссылка;
				ОписаниеРаботы = СтрШаблон(НСтр("ru = 'Работа над ""%1""'"), Источник);
				//ДлительностьРаботы = УчетВремениКлиентСервер.ЧислоВСтроку(Параметры.Трудозатраты.Длительность*60);
				ДлительностьРаботы = Параметры.ЗначенияЗаполнения.Трудозатраты.Длительность*60;

				Работа = Параметры.ЗначенияЗаполнения.Трудозатраты.Работа;
				Проект = Параметры.ЗначенияЗаполнения.Проект;
				
				ПараметрыОтчета = Новый Структура();
				
				ПараметрыОтчета.Вставить("ДатаРаботы", ТекущаяДата());
				ПараметрыОтчета.Вставить("ОписаниеРаботы", ОписаниеРаботы);
				ПараметрыОтчета.Вставить("Длительность", ДлительностьРаботы);
				ПараметрыОтчета.Вставить("Источник", Источник);	
				ПараметрыОтчета.Вставить("ВремяНачала", 	Дата(1,1,1));
				ПараметрыОтчета.Вставить("ВремяОкончания",	Дата(1,1,1));		
				ПараметрыОтчета.Вставить("Работа", Работа);
				ПараметрыОтчета.Вставить("Проект", Проект);

				ПараметрыОповещения = Неопределено;
				
				УчетВремениВызовСервера.ДобавитьВОтчет(ПараметрыОтчета, ПараметрыОповещения);
				//ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ФактическиеТрудозатраты"));
			
				//ЗаписатьДокументНаСервере();
			Исключение
				Сообщить("Документ не записан, трудозатраты необходимо заполнить вручную!");
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры	

//Лобашова 18.03.2019 81724 -
	
//}Рарус kruser 2018.12.21 78093

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаполнитьКонтакты();
	
	ИспользоватьПризнакРассмотрено = ПолучитьФункциональнуюОпцию("ИспользоватьПризнакРассмотрено");
	
	ОбновитьСостоянияДоступностиЗадач();
	ОбновитьСостоянияДоступностиВзаимодействий();
	ОбновитьЗаголовокСпискаФайлов();
	УстановитьОписаниеПодписки();
	
	РедактируемыйОбъект = РеквизитФормыВЗначение("Объект");
	ОбщегоНазначенияУСП.УстановитьФорматированноеОписаниеИзХранилища(Описание, РедактируемыйОбъект.ОписаниеХранилище);
	ОтветственныйСтрокой = ОбщегоНазначенияУСПКлиентСервер.ОписаниеИсполнителя(Объект.ОбслуживающаяОрганизация, Объект.ЛинияПоддержки, Объект.Исполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьКнопок();
	УстановитьДоступностьПоИсполнителю();
    УстановитьТипКарточкиБазыЗнаний();
	
	// ТекущаяДата получена не для сохранения в базе данных, а используется
	// только расчета в динамическом списке местного времени от
	// универсального времени сохраненного в базе данных,
	// поэтому приведение к ТекущаяДатаСеанса не требуется.
	ТекущаяДатаКлиента = ТекущаяДата();
	
	СекундДоМестногоВремени = ТекущаяДатаКлиента - УниверсальноеВремя(ТекущаяДатаКлиента);
	
    #Если Не ВебКлиент Тогда
    	ФайлыСписок.Параметры.УстановитьЗначениеПараметра("СекундДоМестногоВремени", СекундДоМестногоВремени);
    	ВзаимодействияСписок.Параметры.УстановитьЗначениеПараметра("СекундДоМестногоВремени", СекундДоМестногоВремени);
    #КонецЕсли
	
	//Лобашова 30.07.2019 89291 +
	ПроверитьСвязьСРасписаниемЛК();
	//Лобашова 30.07.2019 89291 -
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ОбщегоНазначенияУСП.ПоместитьФорматированноеОписаниеВХранилище(Описание, ТекущийОбъект.ОписаниеХранилище);
    
    Если Не ЗначениеЗаполнено(Объект.КарточкаБазыЗнаний) Тогда
        Объект.КарточкаБазыЗнаний = Неопределено;
    КонецЕсли;
	
	//{Рарус kruser 02.04.2019 84062
	Если ТекущийОбъект.ЭтоНовый() Тогда		
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();					
	КонецЕсли;
	//}Рарус kruser 02.04.2019 84062
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Источник) Тогда
    	УстановитьОтборПоПредмету();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ЗадачаИсполнителя" Тогда
		ОбновитьСписокЗадач();
		
	ИначеЕсли ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
		
		СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		
		Если Параметр.Свойство("ЭтоНовый") И Параметр.ЭтоНовый Тогда
			
			Элементы.ФайлыСписок.ТекущаяСтрока = СсылкаНаФайл;
			УстановитьДоступностьКнопок();
		Иначе
			Если НЕ ПроверитьДействиеРазрешено() Тогда
				Возврат;
			КонецЕсли;
			
			Если СсылкаНаФайл = Элементы.ФайлыСписок.ТекущиеДанные.Ссылка Тогда
				УстановитьДоступностьКнопок();
			КонецЕсли;
		КонецЕсли;
		ОбновитьЗаголовокСпискаФайлов();
		
	ИначеЕсли ИмяСобытия = "ПроизведенаРабота" И Параметр = Объект.Ссылка Тогда
		ПроизведенаРабота = Истина;
        
    ИначеЕсли ИмяСобытия = "КарточкаБазыЗнаний_Запись" Тогда
        УстановитьПараметрыВыбораКарточки();    
        
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Статус = Настройки.Получить("Статус");
	Если Статус <> Неопределено Тогда
		Настройки.Удалить("Статус");
	КонецЕсли;
	Если Не ИспользоватьПризнакРассмотрено Или НЕ ЗначениеЗаполнено(Статус) Тогда
		Статус = "Все";
	КонецЕсли;
	Ответственный = Настройки.Получить("Ответственный");
	Если Ответственный <> Неопределено Тогда
		Настройки.Удалить("Ответственный");
	КонецЕсли;
	ВВидеДерева = Настройки.Получить("ВВидеДерева");
	Если ВВидеДерева <> Неопределено Тогда
		Настройки.Удалить("ВВидеДерева");
	КонецЕсли;
	
	Взаимодействия.ПриЗагрузкеТипаВзаимодействийИзНастроек(ЭтотОбъект, Настройки);
	
	УстановитьОтбор(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьДоступностьПоИсполнителю();
	Оповестить("ИзмененоОбращение", Объект.Ссылка, ЭтаФорма);
	
	ИсходноеСостояние = Объект.Состояние;
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
	ОповеститьОбИзменении(Тип("СправочникСсылка.ПроизошедшиеБизнесСобытия"));
	ПроизведенаРабота = Истина;
	
	Если ЗапрашиватьТрудозатраты И Не ВыполняетсяПеренаправление Тогда
		ПроизведенаРабота = Истина;
	КонецЕсли;
	ПроверитьСвязьСРасписаниемЛК();
КонецПроцедуры
 
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИсходнаяСсылка <> Объект.Ссылка Тогда
		УстановитьОтборПоПредмету();
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокТрудозатраты.Отбор, "Источник", Объект.Ссылка);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ИсторияСобытий.Отбор, "Источник", Объект.Ссылка);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Комментарии, "Владелец", Объект.Ссылка);
		НастроитьДинамическийСписок("ОбращениеПрисоединенныеФайлы");
		ЗадачиСписок.Параметры.Элементы[0].Значение = Объект.Ссылка;
		ИсходнаяСсылка = Объект.Ссылка;
	КонецЕсли;
	
	Если Элементы.Инициатор.ТолькоПросмотр = Ложь Тогда
		СведенияОПользователе = РегистрыСведений.СведенияОПользователях.СведенияОПользователе(ТекущийПользователь);
		ОбслуживающаяОрганизация = СведенияОПользователе.ОбслуживающаяОрганизация;
		ЛинияПоддержки = СведенияОПользователе.ЛинияПоддержки;
		
		Если Не ЭтоПолноправныйПользователь 
			И ЛинияПоддержки <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбслуживающаяОрганизация, "ПерваяЛинияПоддержки") Тогда
			//{Рарус kruser 2019.02.12 81208
			Если ТекущийПользователь = Объект.Исполнитель Тогда
			   Элементы.Инициатор.ТолькоПросмотр = Ложь;
			Иначе 
			//}Рарус kruser 2019.02.12 81208
			Элементы.Инициатор.ТолькоПросмотр = Истина;
			//{Рарус kruser 2019.02.12 81208			
			КонецЕсли;
			//}Рарус kruser 2019.02.12 81208
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьЗначенияСвойств();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашения") Тогда
		УстановитьСрокОбработкиНаСервере();
	КонецЕсли; 
	
    УстановитьВидимостьРеквизитовОценки();	
    
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
    
    Если Не ЗавершениеРаботы Тогда
    	Если ЕстьЧерновикиВзаимодействий(Объект.Ссылка) И Не ЗакрыватьБезВопросов Тогда
    		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
    		ПоказатьВопрос(Оповещение, 
    		НСтр("ru='По обращению есть не отправленные письма. 
    			|Закрыть форму обращения без отправки писем?'"), РежимДиалогаВопрос.ОКОтмена);
    		Отказ = Истина;
		//Лобашова 30.04.2019 81724 +
		Иначе 
			СтруктураВозВрата = Новый Структура;
			СтруктураВозВрата.Вставить("РезультатОткрытия"			, Истина);
			Закрыть(СтруктураВозВрата);			
			//Лобашова 30.04.2019 81724 -
        КонецЕсли;
	КонецЕсли;
	//Лобашова 12.08.2019 89291 +
	Если Элементы.ОкончаниеРазговора.Доступность Тогда
		Отказ = Истина;
	КонецЕсли;	
	//Лобашова 12.08.2019 89291 -
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ЗакрыватьБезВопросов = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы И ЗапрашиватьТрудозатраты И ПроизведенаРабота Тогда 
		УчетВремениКлиент.ДобавитьВОтчетКлиент(ТекущаяДата(), Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

//+ Котова А.Ю. 11.10.2018 ТЗ№ 72364 {
Процедура ВывестиРеквизитПроектНаФорму()
		
	НовыйЭлемент = Элементы.Вставить("Проект", Тип("ПолеФормы"), Элементы.ГруппаСвойства, Элементы.ГруппаРеквизиты);
	НовыйЭлемент.ПутьКДанным                  = "Объект.Проект";
	НовыйЭлемент.Вид                          = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ТолькоПросмотр               = Ложь;
	НовыйЭлемент.ПоложениеЗаголовка 		  = ПоложениеЗаголовкаЭлементаФормы.Лево;
	НовыйЭлемент.Заголовок					  = "Проект";
	НовыйЭлемент.КнопкаВыбора  				  = Истина;
	НовыйЭлемент.КнопкаОткрытия				  = Истина;
	
	//{Рарус kruser 06.06.2019 87760
	Если УРВСервер.ПроверитьДоступностьРолиКлиентКомпании() Тогда
		НовыйЭлемент.Видимость = Ложь;
	КонецЕсли;
	//}Рарус kruser 06.06.2019 87760

	//{Рарус kruser 2018.12.21 78093
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ПроектПриИзменении");
	//}Рарус kruser 2018.12.21 78093
	
КонецПроцедуры
//- Котова А.Ю. 11.10.2018 ТЗ№ 72364 }
//комментарий для проверки
//#TO DO +
//второй комментарий для проверки
	//
//{Рарус kruser 02.04.2019 84062
&НаСервере
Процедура ВывестиРеквизитАвторНаФорму()

	НовыйЭлемент = Элементы.Вставить("ГруппаАвторДокумента", Тип("ГруппаФормы"), Элементы.ГруппаПраво, Элементы.ГруппаОценка);
	НовыйЭлемент.Заголовок 				= "Автор обращения";
	НовыйЭлемент.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлемент.Отображение 			= ОтображениеОбычнойГруппы.СлабоеВыделение;
	НовыйЭлемент.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НовыйЭлемент.ШрифтЗаголовка 		= ШрифтыСтиля.ОбычныйШрифтТекста;
	
	//{Рарус kruser 06.06.2019 87760
	Если УРВСервер.ПроверитьДоступностьРолиКлиентКомпании() Тогда
		НовыйЭлемент.Видимость = Ложь;
	КонецЕсли;
	//}Рарус kruser 06.06.2019 87760

	НовыйЭлемент = Элементы.Вставить("АвторДокумента", Тип("ПолеФормы"), Элементы.ГруппаАвторДокумента); 
	НовыйЭлемент.ПутьКДанным				= "Объект.Автор";
	НовыйЭлемент.Вид						= ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ТолькоПросмотр				= Истина;
	НовыйЭлемент.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.Гиперссылка				= Истина;	
	НовыйЭлемент.Высота 					= 2;
	НовыйЭлемент.РастягиватьПоВертикали 	= Ложь;

КонецПроцедуры
//}Рарус kruser 02.04.2019 84062

//{Рарус kruser 23.05.2019 86907 
&НаСервере
Процедура ВывестиРеквизитНомерОбращенияКлиентаНаФорму()

	НовыйЭлемент = Элементы.Вставить("ГруппаНомерОбращенияКлиента", Тип("ГруппаФормы"), Элементы.ГруппаСвойства);
	НовыйЭлемент.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлемент.Отображение 			= ОтображениеОбычнойГруппы.Нет;
	НовыйЭлемент.ОтображатьЗаголовок 	= Ложь;
	НовыйЭлемент.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	НовыйЭлемент = Элементы.Вставить("НомерОбращенияКлиента", Тип("ПолеФормы"), Элементы.ГруппаНомерОбращенияКлиента); 
	НовыйЭлемент.ПутьКДанным				= "Объект.НомерОбращенияКлиента";
	НовыйЭлемент.Вид						= ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ТолькоПросмотр 			= Ложь;
	НовыйЭлемент.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Лево;

КонецПроцедуры
//}Рарус kruser 23.05.2019 86907

//{Рарус kruser 2018.12.21 78093
&НаСервере
Процедура ВывестиРеквизитЭтапПроектаНаФорму()
	
	НовыйЭлемент = Элементы.Вставить("ЭтапПроекта", Тип("ПолеФормы"), Элементы.ГруппаСвойства, Элементы.ГруппаРеквизиты);
	НовыйЭлемент.ПутьКДанным                  = "Объект.ЭтапПроекта";
	НовыйЭлемент.Вид                          = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ТолькоПросмотр               = Ложь;
	НовыйЭлемент.ПоложениеЗаголовка 		  = ПоложениеЗаголовкаЭлементаФормы.Лево;
	НовыйЭлемент.Заголовок					  = "Этап проекта";
	НовыйЭлемент.КнопкаВыбора  				  = Истина;
	НовыйЭлемент.КнопкаОткрытия				  = Истина;
	
	//{Рарус kruser 06.06.2019 87760
	Если УРВСервер.ПроверитьДоступностьРолиКлиентКомпании() Тогда
		НовыйЭлемент.Видимость = Ложь;
	КонецЕсли;
	//}Рарус kruser 06.06.2019 87760

КонецПроцедуры

//{Рарус kruser 22.04.2019 84132
&НаСервере
Процедура УстановитьОтборНаСервисы()
			
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Внутренний", Объект.ВнутреннееОбращение);		
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.Сервис.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры
//}Рарус kruser 22.04.2019 84132

//{Рарус kruser 23.04.2019 84132
&НаСервере
Процедура ДобавитьСписокОбращенийНаФорму()
	
	РольДоступнаПросмотр = РольДоступна(Метаданные.Роли.ПросмотрВнутреннихОбращений);
	РольДоступнаСоздание = РольДоступна(Метаданные.Роли.СозданиеВнутреннихОбращений);
	
	Если (РольДоступнаПросмотр Или РольДоступнаСоздание Или ЭтоПолноправныйПользователь) И Объект.ВнутреннееОбращение Тогда
		
		НовыйЭлемент = Элементы.Вставить("СтраницаВнешнихОбращений", Тип("ГруппаФормы"), Элементы.ГруппаСтраницы);
		НовыйЭлемент.Вид						= ВидГруппыФормы.Страница;
		НовыйЭлемент.Заголовок 					= "Внешние обращения";

		НовыйЭлемент = Элементы.Вставить("СписокВнешниеОбращения", Тип("ТаблицаФормы"), Элементы.СтраницаВнешнихОбращений);
		НовыйЭлемент.ПутьКДанным				= "Объект.ВнешниеОбращения";
		НовыйЭлемент.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		НовыйЭлемент.УстановитьДействие("Выбор", "ВнешниеОбращенияВыбор");
		
		Если РольДоступнаПросмотр И Не (РольДоступнаСоздание Или ЭтоПолноправныйПользователь) Тогда				
			НовыйЭлемент.ТолькоПросмотр = Истина;				
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Вставить("ВнешниеОбращенияНомерСтроки", Тип("ПолеФормы"), Элементы.СписокВнешниеОбращения);
		НовыйЭлемент.ПутьКДанным				= "Объект.ВнешниеОбращения.НомерСтроки";
		НовыйЭлемент.Вид						= ВидПоляФормы.ПолеНадписи;

		НовыйЭлемент = Элементы.Вставить("ВнешниеОбращенияОбращение", Тип("ПолеФормы"), Элементы.СписокВнешниеОбращения);
		НовыйЭлемент.ПутьКДанным				= "Объект.ВнешниеОбращения.Обращение";
		НовыйЭлемент.Вид						= ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.КнопкаВыбора 				= Истина;	
		НовыйЭлемент.КнопкаОткрытия				= Истина;
		
	Иначе
		
		//права просмотр
		Если РольДоступнаПросмотр Или РольДоступнаСоздание Или ЭтоПолноправныйПользователь Тогда
			
			ДобавляемыеРеквизиты = Новый Массив; 
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("ДинамическийСписок"));
			
			Реквизит = Новый РеквизитФормы("СписокВнутреннихОбращений", Новый ОписаниеТипов(Массив)); 
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
			ИзменитьРеквизиты(ДобавляемыеРеквизиты); 
			
			ЭтаФорма.СписокВнутреннихОбращений.ПроизвольныйЗапрос = Истина;
			
			ЭтаФорма.СписокВнутреннихОбращений.ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ОбращениеВнешниеОбращения.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.Обращение.ВнешниеОбращения КАК ОбращениеВнешниеОбращения
			|ГДЕ
			|	ОбращениеВнешниеОбращения.Обращение = &ДокументОснование
			|	И ОбращениеВнешниеОбращения.Ссылка.ВнутреннееОбращение";
			
			ЗначениеПараметраКомпоновкиДанных = ЭтаФорма.СписокВнутреннихОбращений.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДокументОснование"));
			
			Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
				
				ЗначениеПараметраКомпоновкиДанных.Значение = Объект.Ссылка;
				ЗначениеПараметраКомпоновкиДанных.Использование = Истина;
				
			КонецЕсли;
			
			НовыйЭлемент = Элементы.Вставить("СтраницаВнутреннихОбращений", Тип("ГруппаФормы"), Элементы.ГруппаСтраницы);
			НовыйЭлемент.Вид						= ВидГруппыФормы.Страница;
			НовыйЭлемент.Заголовок 					= "Внутренние обращения";			
			
			НовыйЭлемент = Элементы.Вставить("СписокВнутреннихОбращений", Тип("ТаблицаФормы"), Элементы.СтраницаВнутреннихОбращений);
			НовыйЭлемент.ПутьКДанным				= "СписокВнутреннихОбращений";
			НовыйЭлемент.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Нет;
			НовыйЭлемент.ПутьКДаннымКартинкиСтроки	= "СписокВнутреннихОбращений.СтандартнаяКартинка";
									
			НовыйЭлемент.УстановитьДействие("Выбор", "ВнутренниеОбращенияВыбор");
			
			НовыйЭлемент = Элементы.Вставить("СсылкаНаОбращение", Тип("ПолеФормы"), Элементы.СписокВнутреннихОбращений);
			НовыйЭлемент.ПутьКДанным				= "СписокВнутреннихОбращений.Ссылка";
			НовыйЭлемент.Вид						= ВидПоляФормы.ПолеНадписи;
			
			Если РольДоступнаСоздание Или ЭтоПолноправныйПользователь Тогда	
				
				НоваяКомандаФормы = ЭтаФорма.Команды.Добавить("СоздатьВнутреннееОбращение");
				НоваяКомандаФормы.Действие = "СоздатьВнутреннееОбращение";
				НоваяКомандаФормы.Заголовок = "Создать внутреннее обращение";  
				
				НовыйЭлемент = Элементы.Вставить("СоздатьВнутреннееОбращение", Тип("КнопкаФормы"), Элементы.СписокВнутреннихОбращенийКоманднаяПанель);
				НовыйЭлемент.Вид 			= ВидКнопкиФормы.КнопкаКоманднойПанели;
				НовыйЭлемент.Заголовок		= "Создать внутреннее обращение";
				НовыйЭлемент.ИмяКоманды		= "СоздатьВнутреннееОбращение";	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
//}Рарус kruser 23.04.2019 84132

//{Рарус kruser 06.06.2019 87760
&НаСервере
Процедура УстановитьВидимостьРеквизитовДляклиента()
	
	Элементы.ГруппаКоманды.Видимость = Ложь;
	Элементы.ГруппаКомментарии.Видимость = Ложь;
	Элементы.СтраницаЗадачи.Видимость = Ложь;
	Элементы.СтраницаКонтакты.Видимость = Ложь;
	Элементы.ИсторияСобытий.Видимость = Истина;
	Элементы.ГруппаСсылки.Видимость = Ложь;
	Элементы.СтраницаТрудозатраты.Видимость = Ложь;
	Элементы.СтраницаДополнительно.Видимость = Ложь;
	Элементы.Сервис.Видимость = Ложь;	
	Элементы.Витрина.Видимость = Ложь;	
	Элементы.ГруппаПодпискаИТС.Видимость = Ложь;
	Элементы.ГруппаСрокЗадан.Видимость = Ложь;
	Элементы.ГруппаСрокНеЗадан.Видимость = Ложь;
	Элементы.ГруппаСвязьСБазойЗнаний.Видимость = Ложь;
	Элементы.Комментарий.Видимость = Ложь;
	Элементы.Компонент.Видимость = Ложь;
	Элементы.Раздел.Видимость = Ложь;
	Элементы.ГруппаКомандыВзаимодействий.Видимость = Ложь;	
	Элементы.Абонент1.Видимость = Истина;
	
	Элементы.Инициатор.КнопкаОткрытия = Ложь;
	Элементы.Абонент1.КнопкаОткрытия = Ложь;
		
КонецПроцедуры
//}Рарус kruser 06.06.2019 87760

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РазделАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ДанныеВыбораДляРаздела(Текст, Объект.Сервис, Объект.Компонент);
	Если ДанныеВыбора.Количество() = 0 Тогда
		ДанныеВыбора = Неопределено
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Сервис, Компонент", Объект.Сервис, Объект.Компонент);
	ОткрытьФорму("Справочник.Разделы.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры
//}Рарус kruser 2018.12.21 78093

&НаКлиенте
Процедура ВитринаПриИзменении(Элемент)
    
    ВитринаПриИзмененииНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура ТипОбращенияПриИзменении(Элемент)
	
	УстановитьТипКарточкиБазыЗнаний();
    УстановитьПараметрыВыбораКарточки(Истина);
	УстановитьСписокСостоянийОбращенияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Обращение", Объект.Ссылка);
	ПараметрыФормы.Вставить("СекундДоМестногоВремени", СекундДоМестногоВремени);
	ОткрытьФорму("Документ.Обращение.Форма.СрокПоОбращению", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КарточкаБазыЗнанийПриИзменении(Элемент)
    
    УстановитьДоступностьОтправкиПисьмаПоКарточке();
	УстановитьТипКарточкиБазыЗнаний();
    
КонецПроцедуры

&НаКлиенте
Процедура КарточкаБазыЗнанийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    СтандартнаяОбработка = Ложь;
    
    ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Записывать", Не ЗначениеЗаполнено(Объект.Ссылка));
   
		
	Оповещение = Новый ОписаниеОповещения("КарточкаБазыЗнанийНачалоВыбораПродолжение", ЭтотОбъект, ПараметрыОповещения);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПоказатьВопрос(Оповещение, НСтр("ru='Обращение еще не записано.
			|Выбор карточки возможен только после записи обращения.
			|Обращение будет записано.'"), РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК,, КодВозвратаДиалога.Отмена);  
	Иначе
	    ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.ОК);
	КонецЕсли; 
    
КонецПроцедуры

&НаКлиенте
Процедура КарточкаБазыЗнанийНачалоВыбораПродолжение(Результат, ПараметрыОповещения) Экспорт
	
	Отказ = Истина;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Отказ = Не Записать();
		Иначе
			Отказ = Ложь;
		КонецЕсли; 
	КонецЕсли;
			
	Если Не Отказ Тогда
		
		Если Объект.ТипОбращения = ПредопределенноеЗначение("Перечисление.ТипыОбращений.Консультация") Тогда
			ИмяФормыВыбора = "Справочник.Консультации.ФормаВыбора";
		ИначеЕсли Объект.ТипОбращения =  ПредопределенноеЗначение("Перечисление.ТипыОбращений.Ошибка") Тогда
			ИмяФормыВыбора = "Справочник.Ошибки.ФормаВыбора";
		ИначеЕсли Объект.ТипОбращения =  ПредопределенноеЗначение("Перечисление.ТипыОбращений.Пожелание") Тогда
			ИмяФормыВыбора = "Справочник.Пожелания.ФормаВыбора";
		Иначе
			Возврат;
		КонецЕсли;
		
		КомпонентСписок = Новый Массив;
		КомпонентСписок.Добавить(Объект.Компонент);
		
		РазделСписок = Новый Массив;
		РазделСписок.Добавить(Объект.Раздел);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.КарточкаБазыЗнаний);
		ПараметрыФормы.Вставить("ИспользоватьТоп10", Истина);
		ПараметрыФормы.Вставить("Сервис", Объект.Сервис);
		ПараметрыФормы.Вставить("Витрина", Объект.Витрина);
		ПараметрыФормы.Вставить("Компоненты", КомпонентСписок);
		ПараметрыФормы.Вставить("Разделы", РазделСписок);
		ПараметрыФормы.Вставить("Обращение", Объект.Ссылка);
		
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, Элементы.КарточкаБазыЗнаний);
        
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КарточкаБазыЗнанийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    
    ИмяТипаКарточки = "СправочникСсылка.Консультации";
    Если Объект.ТипОбращения =  ПредопределенноеЗначение("Перечисление.ТипыОбращений.Ошибка") Тогда
        ИмяТипаКарточки = "СправочникСсылка.Ошибки";
    ИначеЕсли Объект.ТипОбращения =  ПредопределенноеЗначение("Перечисление.ТипыОбращений.Пожелание") Тогда
        ИмяТипаКарточки = "СправочникСсылка.Пожелания";
    КонецЕсли;
    
    Если ТипЗнч(ВыбранноеЗначение) = Тип(ИмяТипаКарточки) Тогда
        Объект.КарточкаБазыЗнаний = ВыбранноеЗначение;    
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОценкаНажатие(Элемент)
	
	Объект.Оценка = Число(Прав(Элемент.Имя,1));
	ПриИзмененииОценки();
	УстановитьКартинкиДекорацийОценок();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	Объект.ОписаниеДатаИзменения = ТекущаяДата();
	Объект.ОписаниеАвторИзменения = ТекущийПользователь;
	
КонецПроцедуры
    
&НаКлиенте
Процедура ИнициаторПриИзменении(Элемент)
	
	УстановитьДанныеПриВыбореИнициатора();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Владелец", Объект.Сервис);
	//astyul, 74135, 22.10.2018
	Отбор.Вставить("Абонент", Объект.Абонент);
	//astyul, 74135, 22.10.2018
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	Оповещение = Новый ОписаниеОповещения("ИнициаторНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПользователиСервисов.Форма.ПоискПользователяСкрытый", ПараметрыФормы, Элемент,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура АбонентПриИзменении(Элемент)
	
	ПриИзмененииАбонента();
	
	//astyul, 72626, 18.10.2018
	СформироватьДанныеОПодпискахИДоговорахОБД();
    //astyul, 72626, 18.10.2018	
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииАбонента()
	
	УстановитьДанныеАбонента();
	Объект.АбонентОбслуживающейОрганизации = Обслуживание.АбонентОбслуживающейОрганизацииАбонента(Объект.Абонент);
	// Лобашова 19.04.2019 85163 +
	Если НЕ Объект.Абонент.ОсновнойПроект = справочники.проекты.пустаяссылка() Тогда
		Объект.Проект = Объект.Абонент.ОсновнойПроект;
		ПроектПриИзмененииНаСервере();		
	КонецЕсли;
	// Лобашова 19.04.2019 85163 -
	УстановитьДанныеАбонентаОО();
    УстановитьОформлениеАбонентаОО();
	Если Объект.Состояние <> Перечисления.СостоянияОбращений.Закрыто Тогда
	    Объект.ПодпискаНаТариф = Документы.Подписка.АктивнаяПодпискаАбонента(Объект.Абонент);
	КонецЕсли;
	УстановитьОписаниеПодписки();
	
КонецПроцедуры

&НаКлиенте
Процедура АбонентООПриИзменении(Элемент)
	
	АбонентООПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СервисПриИзменении(Элемент)
	
	СервисПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомпонентПриИзменении(Элемент)
    
    КомпонентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РазделПриИзменении(Элемент)
    
    УстановитьПараметрыВыбораКарточки(Ложь);
    
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Копирование Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ВзаимодействияСписокПередНачаломДобавленияВыбор", ЭтотОбъект);
		 
		ПоказатьВыборИзМеню(Оповещение, ДокументыДоступныеДляСоздания, Элементы.ВзаимодействияСписок.КоманднаяПанель);
		
		ВзаимодействияКлиент.СписокПередНачаломДобавления(
			Элемент, Отказ, Копирование, Ложь, ДокументыДоступныеДляСоздания,
			Новый Структура("ЗначенияЗаполнения",Новый Структура("Предмет, Контакт", Объект.Ссылка, Контакт)));
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВзаимодействияСписокПриИзменении(Элемент)
    
    ОбновитьСостоянияДоступностиВзаимодействий();    
    
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияСписокПередНачаломДобавленияВыбор(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ОткрытьФорму(СтрШаблон("Документ.%1.ФормаОбъекта", Результат.Значение), ПараметрыФормы, ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьВыполненныеПриИзменении(Элемент)
	
	УстановитьОтбор(Новый Структура("ПоказыватьВыполненные", ПоказыватьВыполненные));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.ОбслуживающаяОрганизация) Тогда
		СписокВыбора.Добавить(Объект.ОбслуживающаяОрганизация);
	КонецЕсли; 
	Если ЗначениеЗаполнено(Объект.ЛинияПоддержки) Тогда
		СписокВыбора.Добавить(Объект.ЛинияПоддержки);
	КонецЕсли; 
	Если ЗначениеЗаполнено(Объект.Исполнитель) И Объект.Исполнитель <> Объект.ЛинияПоддержки Тогда
		СписокВыбора.Добавить(Объект.Исполнитель);
	КонецЕсли;
	
	//{Рарус kruser 06.06.2019 87760
	Если Не УРВСервер.ПроверитьДоступностьРолиКлиентКомпании() Тогда
	//}Рарус kruser 06.06.2019 87760
	Оповещение = Новый ОписаниеОповещения("ОтветственныйСтрокойНажатиеЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элементы.ГруппаОтветственныйПоОбращению);
	//{Рарус kruser 06.06.2019 87760
	КонецЕсли;
	//}Рарус kruser 06.06.2019 87760
	
КонецПроцедуры

//{Рарус kruser 2018.12.21 78093
&НаСервере
Процедура ПроектПриИзмененииНаСервере()
	 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭтапыПроектов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭтапыПроектов КАК ЭтапыПроектов
		|ГДЕ
		|	НЕ ЭтапыПроектов.ПометкаУдаления
		|	И ЭтапыПроектов.Владелец = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗначений = РезультатЗапроса.Выгрузить();
	
	Если ТаблицаЗначений.Количество() = 1 Тогда
		Объект.ЭтапПроекта = ТаблицаЗначений[0].Ссылка;
	Иначе
		Объект.ЭтапПроекта = Неопределено;	
	КонецЕсли;
	//Лобашова 18.04.2019 84959 +	
	Проект = Объект.Проект;
	ЗапрашиватьТрудозатраты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ЗапрашиватьТрудозатратыВОбращениях");
	//Лобашова 18.04.2019 84959 -
КонецПроцедуры
//}Рарус kruser 2018.12.21 78093

//{Рарус kruser 2018.12.21 78093
&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	ПроектПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомментарии

&НаКлиенте
Процедура КомментарииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("Дата, Автор, ЛинияПоддержки, Комментарий, ВнутренняяПереписка");
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект.Комментарии.НайтиПоИдентификатору(ВыбраннаяСтрока));
		ПараметрыФормы.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
		ОткрытьФорму("Документ.Обращение.Форма.ФормаКомментария", ПараметрыФормы, Элементы.Комментарии);
	Иначе
		ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка);
		ОткрытьФорму("Справочник.Комментарии.Форма.ФормаЭлемента", ПараметрыФормы, Элементы.Комментарии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элементы.Комментарии.Обновить();
		
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсторияСобытий

&НаКлиенте
Процедура ИсторияСобытийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "Ссылка1" Или Поле.Имя = "Ссылка2" Тогда
		Если ЗначениеЗаполнено(Элементы.ИсторияСобытий.ТекущиеДанные[Поле.Имя]) Тогда
			ПерейтиПоНавигационнойСсылке(ПолучитьНавигационнуюСсылку(Элементы.ИсторияСобытий.ТекущиеДанные[Поле.Имя]));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСобытийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыСписок

&НаКлиенте
Процедура ФайлыСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ФайлыСписок.РежимВыбора Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСписокПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Элемент", Элемент);
	ПараметрыОповещения.Вставить("Копирование", Копирование);
	ПараметрыОповещения.Вставить("Записывать", Не ЗначениеЗаполнено(Объект.Ссылка));
		
	Оповещение = Новый ОписаниеОповещения("ФайлыСписокПередНачаломДобавленияЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные еще не записаны.
			|Добавление файлов возможно только после записи данных.
			|Данные будут записаны.'"), РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК,, КодВозвратаДиалога.Отмена);  
	Иначе
	    ВыполнитьОбработкуОповещения(Оповещение, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСписокПередНачаломДобавленияЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ПараметрыОповещения.Записывать Тогда
		РезультатЗаписи = Записать();
	Иначе 
		РезультатЗаписи = Истина;
	КонецЕсли; 
	
	Если РезультатЗаписи = Истина Тогда
		Если ПараметрыОповещения.Копирование Тогда
		
		Если НЕ ПроверитьДействиеРазрешено() Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("ЗначениеКопирования", ПараметрыОповещения.Элемент.ТекущиеДанные.Ссылка);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы);
			
		Иначе
			РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ФайлыСписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",           ТекущиеДанные.Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы, , Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	МассивИменФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
	   И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		МассивИменФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1
		   И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			Для каждого Значение Из ПараметрыПеретаскивания.Значение Цикл
				
				Если ТипЗнч(Значение) = Тип("Файл") И Значение.ЭтоФайл() Тогда
					МассивИменФайлов.Добавить(Значение.ПолноеИмя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЕсли;
	
	Если МассивИменФайлов.Количество() > 0 Тогда
		
		РаботаСФайламиСлужебныйКлиент.ДобавитьФайлыПеретаскиванием(
			Объект.Ссылка, УникальныйИдентификатор, МассивИменФайлов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЗначенийСвойств

&НаКлиенте
Процедура ТаблицаЗначенийСвойствПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначенийСвойствПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначенийСвойствПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.НомерКартинки = -1 Тогда
		Отказ = Истина;
		Элемент.ТекущиеДанные.Значение = Элемент.ТекущиеДанные.ТипЗначения.ПривестиЗначение(Неопределено);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗначенийСвойствПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Элемент.ПодчиненныеЭлементы.ТаблицаЗначенийСвойствЗначение.ОграничениеТипа
		= Элемент.ТекущиеДанные.ТипЗначения;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВнутренниеОбращения

//{Рарус kruser 25.04.2019 84132
&НаКлиенте
Процедура ВнутренниеОбращенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элементы.СписокВнутреннихОбращений.ТекущиеДанные.Ссылка);
КонецПроцедуры
//}Рарус kruser 25.04.2019 84132

//{Рарус kruser 25.04.2019 84132
&НаКлиенте
Процедура ВнешниеОбращенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элементы.СписокВнешниеОбращения.ТекущиеДанные.Обращение);
КонецПроцедуры
//}Рарус kruser 25.04.2019 84132

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)

	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#Область ОбработчикиКомандОбращения

&НаКлиенте
Процедура УдалитьКомментарий(Команда)
	
	ТекущиеДанные = Элементы.Комментарии.ТекущиеДанные;
	Если ТекущиеДанные <>Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		УдалитьКомментарийНаСервере(ТекущиеДанные.Ссылка);
		Элементы.Комментарии.Обновить();
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьКомментарийНаСервере(СсылкаНаКомментарий)
	КомментарийОбъект = СсылкаНаКомментарий.ПолучитьОбъект();
	КомментарийОбъект.ПометкаУдаления = Истина;
	КомментарийОбъект.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОрфографию(Команда)
    
    ПроверкаОрфографииКлиент.ПроверитьОрфографию(ЭтотОбъект, "Описание");
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСрок(Команда)
    
    УстановитьСрокОбработкиНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПринятьВРаботу(Команда)
	
	Если Объект.Исполнитель = ТекущийПользователь Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Обращение уже принято в работу.'"); ;
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли; 
	
	Результат = ПринятьВРаботуНаСервере();
	Если Результат = Истина Тогда
		ОтветственныйСтрокой = ОбщегоНазначенияУСПКлиентСервер.ОписаниеИсполнителя(Объект.ОбслуживающаяОрганизация, Объект.ЛинияПоддержки, Объект.Исполнитель);
   		ПоказатьОповещениеПользователя(,, 
            НСтр("ru = 'Обращение принято в работу.'"), 
            БиблиотекаКартинок.Информация32);
		УстановитьДоступностьПоИсполнителю();
		ИсходноеСостояние = Объект.Состояние;
		ИсходныйИсполнитель = Объект.Исполнитель;
		Оповестить("ИзмененоОбращение", Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиНаЛинию(Команда)
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Результат = ПеревестиНаЛиниюНаСервере();
        Если Результат = Истина Тогда
       		ОтветственныйСтрокой = ОбщегоНазначенияУСПКлиентСервер.ОписаниеИсполнителя(Объект.ОбслуживающаяОрганизация, Объект.ЛинияПоддержки, Объект.Исполнитель);
   		    ПоказатьОповещениеПользователя(,, 
                СтрШаблон(НСтр("ru = 'Обращение переведено на линию ""%1"".'"), Объект.ЛинияПоддержки), 
                БиблиотекаКартинок.Информация32);
			УстановитьДоступностьПоИсполнителю();
			Оповестить("ИзмененоОбращение", Объект.Ссылка, ЭтаФорма);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
    Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбращений.Закрыто") Тогда
        ПоказатьПредупреждение(, НСтр("Нельзя перенаправить закрытое обращение."));
        Возврат
    КонецЕсли; 
    
    ВыполняетсяПеренаправление = Истина;
	
	Если Модифицированность И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СписокОбращений = Новый Массив;
		СписокОбращений.Добавить(Объект.Ссылка);
		Оповещение = Новый ОписаниеОповещения("ПеренаправитьЗавершение", ЭтотОбъект);
		ОбслуживаниеКлиент.ПеренаправитьОбъекты(СписокОбращений, Тип("ДокументСсылка.Обращение"), Оповещение);
		Оповестить("ИзмененоОбращение", Объект.Ссылка, ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗавершение(Результат, ПараметрыОповещения) Экспорт
	
    Если Результат <> Неопределено Тогда
		ПоказатьОповещениеПользователя(, 
		ПолучитьНавигационнуюСсылку(Объект.Ссылка), 
		СтрШаблон(НСтр("ru = 'Обращение ""%1"" перенаправлено.'"), Объект.Ссылка), 
		БиблиотекаКартинок.Информация32);
		Если Результат.Исполнитель <> ТекущийПользователь Тогда
			//+ Котова А.Ю. 25.09.2018 ТЗ№ 86200 {
			ПроверкаПройдена = Неопределено;
			СоответствиеПройденаПроверкаДокументов = Новый Соответствие;
			Если Результат.Свойство("СоответствиеПройденаПроверкаДокументов",СоответствиеПройденаПроверкаДокументов) Тогда
				ПроверкаПройдена = СоответствиеПройденаПроверкаДокументов.Получить(Объект.Ссылка);
			КонецЕсли;
			ПроверкаПройдена = ?(ПроверкаПройдена=Неопределено,ПроверитьЗаполнение(),ПроверкаПройдена);
			
			Если ПроверкаПройдена Тогда 
				//- Котова А.Ю. 25.09.2018 ТЗ№ 86200 }
				
				ЗакрыватьБезВопросов = Истина;
				ПроизведенаРабота = Истина;
				Закрыть();
				//+ Котова А.Ю. 25.09.2018 ТЗ№ 86200 {	
			КонецЕсли; 
			//- Котова А.Ю. 25.09.2018 ТЗ№ 86200 }

		Иначе
			Прочитать();
			Элементы.Комментарии.Обновить();
			УстановитьДоступностьПоИсполнителю();
		КонецЕсли;
		ОтветственныйСтрокой = ОбщегоНазначенияУСПКлиентСервер.ОписаниеИсполнителя(
            Объект.ОбслуживающаяОрганизация, Объект.ЛинияПоддержки, Объект.Исполнитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		РаботаСКартинкамиКлиент.УстановитьКомпоненту();
	КонецЕсли;
	
	ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
	
	Если Не ПустаяСтрока(ПутьКФайлу) Тогда
		Картинка = Новый Картинка(ПутьКФайлу);
		АдресКартинки = ПоместитьВоВременноеХранилище(Картинка, АдресКартинки);
		ВставитьКартинкуИзБуфераНаСервере(АдресКартинки);
		Модифицированность = Истина;
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	Если ПустаяСтрока(СокрЛП(НовыйКомментарий)) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Оповещение = Новый ОписаниеОповещения("ДобавитьКомментарийПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Документ не записан. Комментарии можно писать только для записанных документов. Записать документ?'"), 
			РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, , КодВозвратаДиалога.Нет);
	Иначе
		ДобавитьКомментарийЗавершение();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарийПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РезультатЗаписи = Записать();
		Если РезультатЗаписи Тогда
			ДобавитьКомментарийЗавершение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарийЗавершение()
	
	ДобавитьКомментарийНаСервере();
	Элементы.Комментарии.Обновить();
	НовыйКомментарий = "";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомментарийНаСервере()
	НоваяСтрока = Справочники.Комментарии.СоздатьЭлемент();
	НоваяСтрока.ВладелецКомментария = Объект.Ссылка;
	НоваяСтрока.Дата = ТекущаяДата();
	НоваяСтрока.Автор = ТекущийПользователь;
	НоваяСтрока.ЛинияПоддержки = ЛинияПоддержки;
	НоваяСтрока.Комментарий = НовыйКомментарий;
	НоваяСтрока.ВнутренняяПереписка = ВнутренняяПереписка;
	НоваяСтрока.Записать();
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УказатьТрудозатратыЗавершение", ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//Люфт Кристина Задача №87997 03.07.2019 +
		//ПоказатьВопрос(Оповещение, НСтр("ru='Данные еще не записаны.
		//	|Указать трудозатраты можно только после записи данных.
		//	|Данные будут записаны.'"), РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК,, КодВозвратаДиалога.Отмена); 
		 
          ПоказатьВопрос(Оповещение, НСтр("ru='Документ еще не записан.
 			|Указать трудозатраты можно только после записи документа.
			|Документ будет записан.'"), РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК,, КодВозвратаДиалога.Отмена); 
		 

	    //Люфт Кристина Задача №87997 03.07.2019 - 
	
	Иначе
 	    ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.ОК);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатратыЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Отказ = Истина;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Отказ = Не Записать();
		Иначе
			Отказ = Ложь;
		КонецЕсли; 
	КонецЕсли;
			
	Если Не Отказ Тогда
		УчетВремениКлиент.ДобавитьВОтчетКлиент(ТекущаяДата(), Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзШаблона(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВставитьИзШаблонаЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сервис", Объект.Сервис);
	ПараметрыФормы.Вставить("Витрина", Объект.Витрина);
    
    ОткрытьФорму("Справочник.ШаблоныТекстов.ФормаВыбора",ПараметрыФормы,ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

//{Рарус kruser 23.04.2019 84132
&НаКлиенте
Процедура СоздатьВнутреннееОбращение(Элемент)
		
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);		
		ОткрытьФорму("Документ.Обращение.ФормаОбъекта", ПараметрыФормы);
				
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Текущий документ не записан!");
	КонецЕсли;

КонецПроцедуры
//}Рарус kruser 23.04.2019 84132

#КонецОбласти

#Область ОбработчикиКомандФайлов

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ЧислоФайлов = 0;
	СкопироватьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) скопированы в буфер обмена.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Копирование в буфер'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ЧислоФайлов)
	
	ЧислоФайлов = Элементы.ФайлыСписок.ВыделенныеСтроки.Количество();
	
	ОбщегоНазначения.СкопироватьФайлыВБуферОбменаИзСпискаФайлов(Элементы.ФайлыСписок.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	Если Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЧислоФайлов = 0;
	ВставитьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) вставлены из буфера обмена.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Вставка из буфера'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ЧислоФайлов)
	
	Если ОбщегоНазначения.ПустойБуферОбмена() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	МассивФайлов = ДанныеИзБуфераОбмена.Данные;
	
	ЧислоФайлов = МассивФайлов.Количество();
		
	Для Каждого ФайлПринятый Из МассивФайлов Цикл
		Если ТипВсеПрисоединенныеФайлы.СодержитТип(ТипЗнч(ФайлПринятый)) Тогда
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(Объект.Ссылка, ФайлПринятый, УникальныйИдентификатор);
		ИначеЕсли ТипЗнч(ФайлПринятый) = Тип("Структура") Тогда
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Объект.Ссылка, ФайлПринятый.ИмяФайлаНаКомпьютере, ФайлПринятый.ИмяФайла, ФайлПринятый.Размер);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ФайлыСписок.Обновить();
	
	Модифицированность = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура Создать(Команда)
	
	Элементы.ФайлыСписок.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Команда)
	
	ОткрытьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ТекущиеДанные.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	//ПрисоединенныеФайлыСлужебныйКлиент.ОткрытьКаталогСФайлом(ДанныеФайла);
	РаботаСФайламиСлужебныйКлиент.КаталогФайла(Неопределено, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	Если ТекущиеДанные.Зашифрован Или ТекущиеДанные.ПодписанЭП Или ТекущиеДанные.ФайлРедактируется Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, , Ложь);
	Если ДанныеФайла.Зашифрован Или ДанныеФайла.ПодписанЭП Или ДанныеФайла.ФайлРедактируется Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ОбновитьИзФайлаНаДискеСОповещением(Неопределено, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован
	 ИЛИ (ТекущиеДанные.ФайлРедактируется И ТекущиеДанные.ФайлРедактируетТекущийПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ДанныеФайла.Зашифрован
	 ИЛИ (ДанныеФайла.ФайлРедактируется И ДанныеФайла.ФайлРедактируетТекущийПользователь) Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	Элементы.ФайлыСписок.СкопироватьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваФайла(Команда)
	
	Если Элементы.ФайлыСписок.ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПрисоединенныйФайл", Элементы.ФайлыСписок.ТекущиеДанные.Ссылка);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаления(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено("ПометкаУдаления") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	Если ТекущиеДанные.ПометкаУдаления Тогда
		ТекстВопроса = НСтр("ru = 'Снять пометку на удаление с файла
		                          |""%1""?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Пометить на удаление файл
		                          |""%1""?'");
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(ТекстВопроса, ТекущиеДанные.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПометкуУдаленияОтветПолучен", ЭтотОбъект, ТекущиеДанные);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияОтветПолучен(РезультатВопроса, ТекущиеДанные) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УстановитьЗначениеПометкиУдаления(ТекущиеДанные.Ссылка, НЕ ТекущиеДанные.ПометкаУдаления);
		Элементы.ФайлыСписок.Обновить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандДляПоддержкиЭПиШифрования

&НаКлиенте
Процедура ЭППодписать(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	Если ТекущиеДанные.ФайлРедактируется
	 ИЛИ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ДанныеФайла.ФайлРедактируется
	 ИЛИ ДанныеФайла.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	//ДополнительныеПараметры = Новый Структура;
	//ДополнительныеПараметры.Вставить("ПрисоединенныйФайл", ТекущиеДанные.Ссылка);
	//ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);
	//ДополнительныеПараметры.Вставить("ОповещениеПользователя");
	//ДополнительныеПараметры.Вставить("ОбработчикРезультата",
	//	Новый ОписаниеОповещения("ЭППодписатьПодписьСформирована", ЭтотОбъект));
	
	РаботаСФайламиСлужебныйКлиент.ПодписатьФайл(ТекущиеДанные.Ссылка, ДанныеФайла, ЭтаФорма.УникальныйИдентификатор, , Новый ОписаниеОповещения("ЭППодписатьПодписьСформирована", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЭППодписатьПодписьСформирована(Результат, Неопределен) Экспорт
	
	Если Результат.ПодписьСформирована Тогда
		УстановитьДоступностьКнопок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ДанныеФайла.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьВместеСЭП(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	Если ТекущиеДанные.ФайлРедактируется
	 ИЛИ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ДобавитьПодписьИзФайла(
		ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	Если ТекущиеДанные.ФайлРедактируется
	 ИЛИ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ДанныеФайла.ФайлРедактируется
	 ИЛИ ДанныеФайла.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.Зашифровать(,	ДанныеФайла, УникальныйИдентификатор);
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если НЕ ДанныеФайла.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.Расшифровать(, ТекущиеДанные.Ссылка, УникальныйИдентификатор, ДанныеФайла);
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандДляПоддержкиСовместнойРаботыСФайлами

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	Если (ТекущиеДанные.ФайлРедактируется И НЕ ТекущиеДанные.ФайлРедактируетТекущийПользователь)
	 ИЛИ ТекущиеДанные.Зашифрован
	 ИЛИ ТекущиеДанные.ПодписанЭП Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если (  ДанныеФайла.ФайлРедактируется
	      И НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь)
	 ИЛИ ДанныеФайла.Зашифрован
	 ИЛИ ДанныеФайла.ПодписанЭП Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Истина);
	
	Если НЕ ТекущиеДанные.ФайлРедактируется Тогда
		
		ЗанятьФайлДляРедактированияСервер(ТекущиеДанные.Ссылка);
		
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		УстановитьДоступностьКнопок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	МассивФайлов = Новый Массив;
	Для Каждого ЭлементСписка Из Элементы.ФайлыСписок.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.ФайлыСписок.ДанныеСтроки(ЭлементСписка);
		
		Если НЕ ДанныеСтроки.ФайлРедактируется
			ИЛИ НЕ ДанныеСтроки.ФайлРедактируетТекущийПользователь Тогда
			Продолжить;
		КонецЕсли;
		МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	Если МассивФайлов.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МассивФайлов",                     МассивФайлов);
		ПараметрыФормы.Вставить("ВозможностьСоздаватьВерсииФайлов", Ложь);
		ПараметрыФормы.Вставить("Редактирует",                      ДанныеСтроки.Редактирует);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ФормаЗавершениеРедактирования", ПараметрыФормы, ЭтотОбъект);
	ИначеЕсли МассивФайлов.Количество() = 1 Тогда 
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
		ПараметрыОбновленияФайла = РаботаСФайламиСлужебныйКлиент.ПараметрыОбновленияФайла(Обработчик, ДанныеСтроки.Ссылка, УникальныйИдентификатор);
		ПараметрыОбновленияФайла.Вставить("СоздатьНовуюВерсию", Ложь);
		РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.ФайлРедактируется
	 ИЛИ НЕ ТекущиеДанные.ФайлРедактируетТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ОсвободитьФайл(ТекущиеДанные.Ссылка);
	ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
	УстановитьДоступностьКнопок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандВзаимодействий

&НаКлиенте
// Установить флаг "Рассмотрено" в выбранных взаимодействиях - клиентская часть
Процедура РассмотреноВыполнить(Команда)
	
	Если НЕ ВыборКорректен() Тогда
		Возврат;
	КонецЕсли;
	
	ФлагРассмотрено = (Не Команда.Имя = "НеРассмотрено");
	
	ВыполненаЗамена = Ложь;
	УстановитьФлагРассмотрено(ВыполненаЗамена, ФлагРассмотрено);
	
	Если ВыполненаЗамена Тогда
		Элементы.ВзаимодействияСписок.Обновить();
		ОповеститьОбИзменении(Объект.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
// Установить ответственного в выбранных взаимодействиях - клиентская часть
//
Процедура ОтветственныйВыполнить()
	
	Если НЕ ВыборКорректен() Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыбора = Неопределено;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Установить предмет в выбранных взаимодействиях - клиентская часть
//
Процедура ПредметВыполнить()
	
	Если НЕ ВыборКорректен() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("КонтекстВыбора", "ПредметВыполнить");
	ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборПредметаПриЗавершении", ЭтотОбъект, ДополнительныеПараметры);
	СписокВыбораТипаПредмета.ПоказатьВыборЭлемента(ОбработчикОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТелефонныйЗвонок(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СоздатьТелефонныйЗвонокЗавершение", ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные еще не записаны.
			|Создание телефонного звонка возможно только после записи данных.
			|Данные будут записаны.'"), РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК,, КодВозвратаДиалога.Отмена);  
	Иначе
	    ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.ОК);
	КонецЕсли; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТелефонныйЗвонокЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Отказ = Истина;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Отказ = Не Записать();
		Иначе
			Отказ = Ложь;
		КонецЕсли; 
	КонецЕсли;
			
	Если Не Отказ Тогда
		ВзаимодействияКлиент.СоздатьНовоеВзаимодействие(
			"ТелефонныйЗвонок",
			Новый Структура("ЗначенияЗаполнения",
			Новый Структура("Предмет, Контакт, Тема, Описание", Объект.Ссылка, Объект.Инициатор, Объект.Тема, Описание.ПолучитьТекст())),
			ЭтотОбъект);
		Элементы.ВзаимодействияСписок.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоручение(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СоздатьПоручениеЗавершение", ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные еще не записаны.
			|Создание поручения возможно только после записи данных.
			|Данные будут записаны.'"), РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК,, КодВозвратаДиалога.Отмена);  
	Иначе
	    ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.ОК);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоручениеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Отказ = Истина;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Отказ = Не Записать();
		Иначе
			Отказ = Ложь;
		КонецЕсли; 
	КонецЕсли;
			
	Если Не Отказ Тогда
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ОткрытьФорму("БизнесПроцесс.Поручение.Форма.ФормаБизнесПроцесса", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлектронноеПисьмо(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СоздатьЭлектронноеПисьмоЗавершение", ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПоказатьВопрос(Оповещение, НСтр("ru='Данные еще не записаны.
			|Создание электронного письма возможно только после записи данных.
			|Данные будут записаны.'"), РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК,, КодВозвратаДиалога.Отмена);  
	Иначе
	    ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.ОК);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлектронноеПисьмоЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Отказ = Истина;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Отказ = Не Записать();
		Иначе
			Отказ = Ложь;
		КонецЕсли; 
	КонецЕсли;
			
	Если Не Отказ Тогда
		ПараметрыФормы = ПараметрыПисьмаПоОбращению();
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандЗадач

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ПринятьЗадачиКИсполнению(Элементы.ЗадачиСписок.ВыделенныеСтроки);
	ОбновитьСостоянияДоступностиЗадач();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("КомментарииДата");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("КомментарииАвтор");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Комментарии.Автор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВыделенныйКурсивныйШрифт);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветАвтораКомментария);
	
	// Список ИсторияСобытий
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Ссылка2");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсторияСобытий.Ссылка2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#Область ФайлыСписок
		
	// Оформление файла, занятого для редактирования другим пользователем.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФайлыСписок.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФайлыСписок.ФайлРедактируетДругойПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	
	// Оформление файла, занятого для редактирования текущим пользователем.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФайлыСписок.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФайлыСписок.ФайлРедактируетТекущийПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ФайлЗанятыйТекущимПользователем);
	#КонецОбласти 
	
	#Область ВзаимодействияСписок
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВзаимодействияСписок.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВзаимодействияСписок.Рассмотрено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПризнакРассмотрено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВыделенныйШрифт);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВзаимодействияОписание.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВзаимодействияСписок.Рассмотрено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПризнакРассмотрено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВыделенныйМелкийШрифт);
    
	#КонецОбласти
	
	#Область ЗадачиСписок

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗадач.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗадач.Просрочена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗадач.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗадач.Выполнена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗавершенныйБизнесПроцесс);
	
	#КонецОбласти 
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункцииОбращение

&НаСервере
Процедура СервисПриИзмененииНаСервере()
	
    СервисВитрины = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Витрина,"Владелец");
    СервисКомпонента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Компонент, "Владелец");
    
    Если Не ЗначениеЗаполнено(Объект.Витрина) Или Объект.Сервис <> СервисВитрины Тогда
         Объект.Витрина = БазаЗнанийПовтИсп.ОсновнаяВитринаСервиса(Объект.Сервис);
    КонецЕсли;
    Если СервисКомпонента <> СервисВитрины Тогда
        Объект.Компонент = Неопределено;
    КонецЕсли;
    УстановитьПараметрыВыбораРаздела(Истина);
    УстановитьПараметрыВыбораКарточки(Истина);
	Объект.ПодпискаНаТариф = Документы.Подписка.АктивнаяПодпискаАбонента(Объект.Абонент);
	УстановитьОписаниеПодписки();
	ЗаполнитьШаблоныТекстов();
    
КонецПроцедуры

&НаСервере
Процедура КомпонентПриИзмененииНаСервере()
    
	УстановитьПараметрыВыбораРаздела(Истина);
	УстановитьПараметрыВыбораКарточки(Ложь);
    
КонецПроцедуры

&НаСервере 
Процедура УстановитьСрокОбработкиНаСервере()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСоглашения") Тогда
		Элементы.ГруппаСрокЗадан.Видимость = Ложь;
		Элементы.ГруппаСрокНеЗадан.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сроки.СрокОбработки,
		|	Сроки.СрокОбработкиСорван,
		|	Сроки.СрокРеакцииСорван,
		|	ВЫБОР
		|		КОГДА Сроки.СрокОбработки = &ПустаяДата
		|			ТОГДА 0
		|		ИНАЧЕ РАЗНОСТЬДАТ(&ТекущаяДата, Сроки.СрокОбработки, СЕКУНДА) 
		|	КОНЕЦ КАК Срок
		|ИЗ
		|	РегистрСведений.СрокиОбращенийПоСоглашениям.СрезПоследних(, Обращение = &Обращение) КАК Сроки
		|ГДЕ
		|	Сроки.СрокРеакции <> &ПустаяДата
		|	ИЛИ Сроки.СрокОбработки <> &ПустаяДата";
	
	Запрос.УстановитьПараметр("Обращение",Объект.Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата",'00010101');
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяУниверсальнаяДата());
	Запрос.УстановитьПараметр("СостояниеЗакрыто", Перечисления.СостоянияОбращений.Закрыто);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.СрокОбработки = '00010101' Тогда
			Дополнение = "";
		Иначе
			Дополнение = СтрШаблон(НСтр("ru='(%1)'"), ОбщегоНазначенияУСПКлиентСервер.ДниЧасыМинуты(Выборка.Срок));
		КонецЕсли;
		Срок =  СтрШаблон("%1 %2", Формат(МестноеВремя(Выборка.СрокОбработки),"ДФ='dd.MM.yyyy HH:mm'"), Дополнение);
		Если Выборка.СрокОбработкиСорван Тогда
			Элементы.Срок.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
		ИначеЕсли Выборка.СрокРеакцииСорван Тогда
			Элементы.Срок.ЦветТекста = ЦветаСтиля.ПредупреждениеЦвет;
		Иначе
			Элементы.Срок.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли;
		Элементы.ГруппаСрокЗадан.Видимость = Истина;
		Элементы.ГруппаСрокНеЗадан.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСрокЗадан.Видимость = Ложь;
		Элементы.ГруппаСрокНеЗадан.Видимость = Истина;
	КонецЕсли;
	
	Элементы.Срок.Подсказка = РегистрыСведений.СрокиОбращенийПоСоглашениям.ОписаниеУсловийУстановкиСрока(Объект.Ссылка, СекундДоМестногоВремени);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПоИсполнителю()
	
    ЗапрещеноИзменение = (Не ЭтоПолноправныйПользователь
	    И (ТипЗнч(Объект.Исполнитель) = Тип("СправочникСсылка.ЛинииПоддержки")  
        ИЛИ ТекущийПользователь <> Объект.Исполнитель));
			
    //Элементы.Описание.ТолькоПросмотр = ЗапрещеноИзменение;
    Элементы.ТипОбращения.ТолькоПросмотр = ЗапрещеноИзменение;
    Элементы.Состояние.ТолькоПросмотр = ЗапрещеноИзменение;
    Элементы.ГруппаСвязьСБазойЗнаний.ТолькоПросмотр = ЗапрещеноИзменение;	
	Элементы.ГруппаРеквизиты.ТолькоПросмотр = ЗапрещеноИзменение;  
    Элементы.СтраницаКонтакты.ТолькоПросмотр = ЗапрещеноИзменение;
    Элементы.ФайлыСписок.ТолькоПросмотр = ЗапрещеноИзменение;
    
    Элементы.ОписаниеВставитьКартинкуИзБуфера.Доступность = Не ЗапрещеноИзменение;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьВидимостьПоДоступнымРолям()
	
	Если Не УправлениеДоступомУСПВызовСервера.ДоступныПользователиСервиса() Тогда
		Элементы.ГруппаКонтактыПравая.Видимость = Ложь;
		Элементы.СписокСоздатьЭлектронноеПисьмо.Видимость = Ложь;
		Элементы.СписокСоздатьТелефонныйЗвонок.Видимость = Ложь;
	КонецЕсли;
	
	Если Не УправлениеДоступомУСПВызовСервера.ДоступныАбоненты() Тогда
		Элементы.ГруппаКонтактыЛевая.Видимость = Ложь;
        Элементы.Абонент1.Видимость = Ложь;
        Элементы.ГруппаПодписка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовОценки()
    
	Элементы.ГруппаОценка.Видимость = Не (Объект.Оценка = 0 И Не Объект.ОжиданиеОценки);
    
    Элементы.ГруппаЗвезды.Видимость = Не Объект.ОжиданиеОценки;
	Элементы.КомментарийОценки.Видимость = Не Объект.ОжиданиеОценки;
	Элементы.ГруппаОжиданиеОценки.Видимость = Объект.ОжиданиеОценки;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьОписаниеПодписки()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьТарифы") Или
		Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сервис, "ИспользоватьТарифы") = Истина Тогда
		Элементы.ГруппаПодписка.Видимость = Ложь;
		Возврат;
    Иначе
		Элементы.ГруппаПодписка.Видимость = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПодпискаНаТариф) Тогда
        ПодпискаОписание = Документы.Подписка.ОписаниеПодписки(Объект.ПодпискаНаТариф, Элементы.ПодпискаОписание); 
	Иначе
		Элементы.ПодпискаОписание.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		ПодпискаОписание = НСтр("ru='Не определен'"); 
		Элементы.ПодпискаОписание.Гиперссылка = Ложь;
        Элементы.ПодпискаОписание.Подсказка = "";
	КонецЕсли; 
	
КонецПроцедуры
 
&НаСервере
Процедура ВставитьКартинкуИзБуфераНаСервере(АдресКартинки)
	
	Начало = Неопределено;
	Окончание = Неопределено;
	Элементы.Описание.ПолучитьГраницыВыделения(Начало, Окончание);
	Если Окончание = Неопределено Тогда
		ЗакладкаДляВставки = Описание.ПолучитьЗакладкуНачала();
	Иначе
		ЗакладкаДляВставки = Окончание;
	КонецЕсли; 
	
	Описание.Вставить(ЗакладкаДляВставки, ПолучитьИзВременногоХранилища(АдресКартинки), Тип("КартинкаФорматированногоДокумента"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторНачалоВыбораЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Неопределено Тогда
		ИсходныйИнициатор = Объект.Инициатор;
		Объект.Инициатор = Результат.ПользовательСервиса;
		Объект.АбонентОбслуживающейОрганизации = Результат.ОбслуживающаяОрганизация;
		Объект.Абонент = Результат.Абонент;
        ИнициаторНачалоВыбораЗавершениеНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ИнициаторНачалоВыбораЗавершениеНаСервере()
    
    УстановитьОтборыПоИнициатору();
    ПриИзмененииАбонента();
    ЗаполнитьКонтакты();
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТипКарточкиБазыЗнаний()
    
    Если Объект.ТипОбращения = ПредопределенноеЗначение("Перечисление.ТипыОбращений.Консультация") Тогда
        Элементы.КарточкаБазыЗнаний.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Консультации");
    ИначеЕсли Объект.ТипОбращения = ПредопределенноеЗначение("Перечисление.ТипыОбращений.Ошибка") Тогда
        Элементы.КарточкаБазыЗнаний.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Ошибки");
    ИначеЕсли Объект.ТипОбращения = ПредопределенноеЗначение("Перечисление.ТипыОбращений.Пожелание") Тогда
        Элементы.КарточкаБазыЗнаний.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пожелания");
    КонецЕсли;
	
	// {Рарус_shav 2019.02.16 Всегда пытается записать в Карточку, даже если нет прав
	Попытка
    Объект.КарточкаБазыЗнаний = Элементы.КарточкаБазыЗнаний.ОграничениеТипа.ПривестиЗначение(Объект.КарточкаБазыЗнаний);
	Исключение
	КонецПопытки;
	// }Рарус_shav 2019.02.16 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьОтправкиПисьмаПоКарточке()
	
	Элементы.ОтправитьПисьмо.Доступность = ЗначениеЗаполнено(Объект.КарточкаБазыЗнаний);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкиДекорацийОценок()
	
	Для Счетчик = 1 По 5 Цикл
		Элементы["Оценка" + Счетчик].Картинка = 
			?(Объект.Оценка >= Счетчик, БиблиотекаКартинок.ОценкаВыбрано, БиблиотекаКартинок.ОценкаНеВыбрано);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеПриВыбореИнициатора()
	
	Объект.Абонент = Обслуживание.АбонентПользователяСервиса(Объект.Инициатор);
	Объект.АбонентОбслуживающейОрганизации = Обслуживание.АбонентОбслуживающейОрганизацииАбонента(Объект.Абонент);
	УстановитьОтборыПоИнициатору();
	ЗаполнитьКонтакты();
	
	Если Объект.Состояние <> Перечисления.СостоянияОбращений.Закрыто Тогда
		Объект.ПодпискаНаТариф = Документы.Подписка.АктивнаяПодпискаАбонента(Объект.Абонент);
	КонецЕсли;
	УстановитьОписаниеПодписки();
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьКонтакты()
	
	УстановитьДанныеКонтакта();
	УстановитьДанныеАбонента();
	УстановитьДанныеАбонентаОО();
    УстановитьОформлениеАбонентаОО();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеКонтакта()
	
	Если Не УправлениеДоступомУСПВызовСервера.ДоступныПользователиСервиса() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
        |   ПользователиСервисов.ЧасовойПояс,
        |   МАКСИМУМ(КИТелефон.Представление) КАК Телефон,
        |   МАКСИМУМ(КИПочта.Представление) КАК Почта
        |ИЗ
        |   Справочник.ПользователиСервисов КАК ПользователиСервисов
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПользователиСервисов.КонтактнаяИнформация КАК КИТелефон
        |       ПО ПользователиСервисов.Ссылка = КИТелефон.Ссылка
        |           И (КИТелефон.Тип = &Телефон)
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПользователиСервисов.КонтактнаяИнформация КАК КИПочта
        |       ПО ПользователиСервисов.Ссылка = КИПочта.Ссылка
        |           И (КИПочта.Тип = &Почта)
        |ГДЕ
        |   ПользователиСервисов.Ссылка = &Инициатор
        |
        |СГРУППИРОВАТЬ ПО
        |   ПользователиСервисов.ЧасовойПояс";
		
	Запрос.УстановитьПараметр("Инициатор", Объект.Инициатор);
	Запрос.УстановитьПараметр("Почта", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Телефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИнициаторТелефон = Выборка.Телефон;
        ИнициаторАдресЭлектроннойПочты = Выборка.Почта;
        Если Не ЗначениеЗаполнено(Объект.АдресДляПереписки) Тогда
            Объект.АдресДляПереписки = Выборка.Почта;
        КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ЧасовойПояс) Тогда
			ИнициаторМестноеВремя = МестноеВремя(ТекущаяУниверсальнаяДата(), Выборка.ЧасовойПояс);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеАбонента()
	
	Если Не УправлениеДоступомУСПВызовСервера.ДоступныАбоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
        |   МАКСИМУМ(КИПочта.АдресЭП) КАК Почта,
        |   МАКСИМУМ(КИАдрес.Представление) КАК Адрес,
        |   МАКСИМУМ(КИТелефон.Представление) КАК Телефон
        |ИЗ
        |   Справочник.Абоненты КАК Абоненты
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Абоненты.КонтактнаяИнформация КАК КИТелефон
        |       ПО Абоненты.Ссылка = КИТелефон.Ссылка
        |           И (КИТелефон.Тип = &Телефон)
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Абоненты.КонтактнаяИнформация КАК КИПочта
        |       ПО Абоненты.Ссылка = КИПочта.Ссылка
        |           И (КИПочта.Тип = &Почта)
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Абоненты.КонтактнаяИнформация КАК КИАдрес
        |       ПО Абоненты.Ссылка = КИАдрес.Ссылка
        |           И (КИАдрес.Тип = &Адрес)
        |ГДЕ
        |   Абоненты.Ссылка = &Абонент";
		
	Запрос.УстановитьПараметр("Абонент", Объект.Абонент);
	Запрос.УстановитьПараметр("Адрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Почта", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Телефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		АбонентТелефон = Выборка.Телефон;
		АбонентаАдресЭлектроннойПочты = Выборка.Почта;
		АбонентПочтовыйАдрес = Выборка.Адрес;
	КонецЕсли;
	
	УстановитьОписаниеПодписки();
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьДанныеАбонентаОО()
	
	Если Не УправлениеДоступомУСПВызовСервера.ДоступныАбоненты() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(КИПочта.АдресЭП) КАК Почта,
		|	МАКСИМУМ(КИАдрес.Представление) КАК Адрес,
		|	МАКСИМУМ(КИТелефон.Представление) КАК Телефон
		|ИЗ
		|	Справочник.Абоненты КАК Абоненты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Абоненты.КонтактнаяИнформация КАК КИТелефон
		|		ПО Абоненты.Ссылка = КИТелефон.Ссылка
		|			И (КИТелефон.Тип = &Телефон)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Абоненты.КонтактнаяИнформация КАК КИПочта
		|		ПО Абоненты.Ссылка = КИПочта.Ссылка
		|			И (КИПочта.Тип = &Почта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Абоненты.КонтактнаяИнформация КАК КИАдрес
		|		ПО Абоненты.Ссылка = КИАдрес.Ссылка
		|			И (КИАдрес.Тип = &Адрес)
		|ГДЕ
		|	Абоненты.Ссылка = &Абонент";
		
	Запрос.УстановитьПараметр("Абонент", Объект.АбонентОбслуживающейОрганизации);
	Запрос.УстановитьПараметр("Адрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Почта", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Телефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		АбонентООТелефон = Выборка.Телефон;
		АбонентООАдресЭлектроннойПочты = Выборка.Почта;
		АбонентООПочтовыйАдрес = Выборка.Адрес;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеАбонентаОО()
	
    Запрос = Новый Запрос;
    Запрос.Текст = 
    	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Данные.ОбслуживающаяОрганизация.ГрафикРаботы КАК ГрафикРаботы,
        |   Данные.ОбслуживающаяОрганизация.ЧасовойПояс КАК ЧасовойПояс
        |ИЗ
        |   РегистрСведений.АбонентыОбслуживающихОрганизаций КАК Данные
        |ГДЕ
        |   Данные.Абонент = &Абонент";
    
    Запрос.УстановитьПараметр("Абонент", Объект.АбонентОбслуживающейОрганизации);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Отклонение = 0;
    ПоддержкаДоступна = Ложь;
    ОграничениеПоддержки = НСтр("ru='Поддержка не доступна'");
    ШарДоступности = БиблиотекаКартинок.КрасныйШар;
    ДанныеСтроки = Новый Массив;
    Если Выборка.Следующий() Тогда
        Дата0 = ТекущаяУниверсальнаяДата();
        МестнаяДата = МестноеВремя(Дата0, Выборка.ЧасовойПояс);
        МестноеВремя = '00010101' + (МестнаяДата - НачалоДня(МестнаяДата));
        Графики = Новый Массив;
        Графики.Добавить(Выборка.ГрафикРаботы);
        Расписание = ГрафикиРаботы.РасписанияРаботыНаПериод(Графики, НачалоДня(МестнаяДата), КонецДня(МестнаяДата));
        Если Расписание.Количество() > 0 Тогда
            Для каждого Элемент Из Расписание Цикл
                Если Элемент.ВремяНачала < МестноеВремя И Элемент.ВремяОкончания > МестноеВремя Тогда
                    ПоддержкаДоступна = Истина;
                    Если Элемент.ВремяОкончания - МестноеВремя < 3600 Тогда
                        ОграничениеПоддержки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                            НСтр("ru='Поддержка доступна еще %1'"), Формат('00010101' + (Элемент.ВремяОкончания - МестноеВремя), "ДФ='m"" мин""'"));     
                        ШарДоступности = БиблиотекаКартинок.ЖелтыйШар;
                    Иначе
                        ОграничениеПоддержки = НСтр("ru='Поддержка доступна'");
                        ШарДоступности = БиблиотекаКартинок.ЗеленыйШар;
                   КонецЕсли;
                КонецЕсли;
            КонецЦикла;  
       КонецЕсли;
    КонецЕсли;
    
    ДанныеСтроки.Добавить(Новый ФорматированнаяСтрока(ШарДоступности));
    ДанныеСтроки.Добавить(Новый ФорматированнаяСтрока(" " + ОграничениеПоддержки));
    
    Строка = Новый ФорматированнаяСтрока(ДанныеСтроки);
    Элементы.АбонентОбслуживающаяОрганизация.РасширеннаяПодсказка.Заголовок = Строка;
    Элементы.АбонентОбслуживающаяОрганизация.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	
КонецПроцедуры
 
&НаСервере
Процедура АбонентООПриИзмененииНаСервере()
	
	УстановитьДанныеАбонентаОО();
    УстановитьОформлениеАбонентаОО();
	
КонецПроцедуры

&НаСервере
Функция ПринятьВРаботуНаСервере()
	
	СведенияОПользователе = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
	
	Объект.ОбслуживающаяОрганизация = СведенияОПользователе.ОбслуживающаяОрганизация;
	Объект.ЛинияПоддержки = СведенияОПользователе.ЛинияПоддержки;
	Объект.Исполнитель = ТекущийПользователь;
	
	Если Объект.Состояние = Перечисления.СостоянияОбращений.Новое Или Объект.Состояние = Перечисления.СостоянияОбращений.Закрыто Тогда
		Объект.Состояние = Перечисления.СостоянияОбращений.Расследование;
	КонецЕсли;
	
	Возврат Записать();
	
КонецФункции

&НаСервере
Функция ПеревестиНаЛиниюНаСервере()
	
	СведенияОПользователе = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
	
	Если Объект.Исполнитель = ТекущийПользователь Тогда
		Объект.ОбслуживающаяОрганизация = СведенияОПользователе.ОбслуживающаяОрганизация;
		Объект.ЛинияПоддержки = СведенияОПользователе.ЛинияПоддержки;
		Объект.Исполнитель = СведенияОПользователе.ЛинияПоддержки;
		Возврат Записать();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Действие недоступно для текущего объекта.'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСписокСостоянийОбращенияНаКлиенте()
	
	СписокВыбора = Элементы.Состояние.СписокВыбора;
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОбращений.Новое"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОбращений.Расследование"));
	
	Если Объект.ТипОбращения = ПредопределенноеЗначение("Перечисление.ТипыОбращений.Ошибка") 
		ИЛИ Объект.ТипОбращения = ПредопределенноеЗначение("Перечисление.ТипыОбращений.Пожелание") Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОбращений.Исправление"));
	КонецЕсли;
	
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОбращений.ОжиданиеИнициатора"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОбращений.Закрыто"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокСостоянийОбращенияНаСервере()
	
	СписокВыбора = Элементы.Состояние.СписокВыбора;
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.СостоянияОбращений.Новое);
	СписокВыбора.Добавить(Перечисления.СостоянияОбращений.Расследование);
	
	Если Объект.ТипОбращения = Перечисления.ТипыОбращений.Ошибка 
		ИЛИ Объект.ТипОбращения = Перечисления.ТипыОбращений.Пожелание Тогда
		СписокВыбора.Добавить(Перечисления.СостоянияОбращений.Исправление);
	КонецЕсли;
	
	СписокВыбора.Добавить(Перечисления.СостоянияОбращений.ОжиданиеИнициатора);
	СписокВыбора.Добавить(Перечисления.СостоянияОбращений.Закрыто);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораРаздела(ОчищатьНесоответствие = Ложь)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Разделы.Ссылка
		|ИЗ
		|	Справочник.Разделы КАК Разделы
		|ГДЕ
		|	Разделы.Сервисы.Сервис В (&Сервисы)
		|	И Разделы.Компоненты.Компонент В (&Компоненты)";
	
	Сервисы = Новый Массив;
	Сервисы.Добавить(Объект.Сервис);
	
	Компоненты = Новый Массив;
	Компоненты.Добавить(Объект.Компонент);
	
	Запрос.УстановитьПараметр("Сервисы",Сервисы);
	Запрос.УстановитьПараметр("Компоненты", Компоненты);
	
	СписокРазделы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Если ОчищатьНесоответствие Тогда
		Если СписокРазделы.Найти(Объект.Раздел) = Неопределено Тогда
			Объект.Раздел = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	
    Запрос = Новый Запрос;
    
    Запрос.Текст = 
    	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 20
        |   Обращение.Раздел,
        |   НАЧАЛОПЕРИОДА(Обращение.Дата, ДЕНЬ) КАК Дата
        |ПОМЕСТИТЬ Данные
        |ИЗ
        |   Документ.Обращение КАК Обращение
        |ГДЕ
        |   НЕ Обращение.ПометкаУдаления
        |   И Обращение.Раздел <> &ПустойРаздел
        |   И Обращение.Компонент = &Компонент
        |
        |СГРУППИРОВАТЬ ПО
        |   Обращение.Раздел,
        |   НАЧАЛОПЕРИОДА(Обращение.Дата, ДЕНЬ)
        |
        |УПОРЯДОЧИТЬ ПО
        |   Дата УБЫВ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
        |   Данные.Раздел КАК Раздел,
        |   Данные.Раздел.Наименование КАК РазделНаименование
        |ИЗ
        |   Данные КАК Данные
        |
        |СГРУППИРОВАТЬ ПО
        |   Данные.Раздел,
        |   Данные.Раздел.Наименование
        |
        |УПОРЯДОЧИТЬ ПО
        |   РазделНаименование";
    
    Запрос.УстановитьПараметр("ПустойРаздел", Справочники.Разделы.ПустаяСсылка());
	Запрос.УстановитьПараметр("Компонент", Объект.Компонент);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Элементы.Раздел.СписокВыбора.Очистить();
    Пока Выборка.Следующий() Цикл
        Элементы.Раздел.СписокВыбора.Добавить(Выборка.Раздел);    
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораКарточки(ОчищатьНесоответствие = Ложь)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Объект.Ссылка КАК Ссылка
        |ИЗ
        |   Справочник.Консультации КАК Объект
        |ГДЕ
        |   Объект.Сервисы.Сервис В(&Сервисы)
        |   И Объект.Компоненты.Компонент В(&Компоненты)
        |   И Объект.Разделы.Раздел В(&Разделы)
        |   И НЕ Объект.ПометкаУдаления";
        
    Если Объект.ТипОбращения = Перечисления.ТипыОбращений.Ошибка Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "Консультации", "Ошибки");
    ИначеЕсли Объект.ТипОбращения = Перечисления.ТипыОбращений.Пожелание Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "Консультации", "Пожелания");
    КонецЕсли; 
	
	Сервисы = Новый Массив;
	Сервисы.Добавить(Объект.Сервис);
	
	Компоненты = Новый Массив;
	Компоненты.Добавить(Объект.Компонент);
    
    Разделы = Новый Массив;
	Разделы.Добавить(Объект.Раздел);

	Запрос.УстановитьПараметр("Сервисы",Сервисы);
	Запрос.УстановитьПараметр("Компоненты", Компоненты);
	Запрос.УстановитьПараметр("Разделы", Разделы);
	
	Карточки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ПараметрыДляВыбора = Новый Массив();
	ПараметрыДляВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Карточки));
	ПараметрыДляВыбора = Новый ФиксированныйМассив(ПараметрыДляВыбора);
	Элементы.КарточкаБазыЗнаний.ПараметрыВыбора = ПараметрыДляВыбора;
	
	Если ОчищатьНесоответствие Тогда
		Если Карточки.Найти(Объект.КарточкаБазыЗнаний) = Неопределено Тогда
			Объект.КарточкаБазыЗнаний = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	    
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПоИнициатору()
	
	ПараметрыДляВыбора = Новый Массив();
	Если ЗначениеЗаполнено(Объект.Инициатор) Тогда
		ПараметрыДляВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Обслуживание.АбонентыПользователяСервиса(Объект.Инициатор)));
	КонецЕсли;
	Элементы.Абонент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыДляВыбора);;
	Элементы.Абонент1.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыДляВыбора);;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзШаблонаЗавершение(ШаблонТекста, ПараметрыОповещения) Экспорт
	
	Если ШаблонТекста <> Неопределено Тогда
    	ЗакладкаНачала = Неопределено;
    	ЗакладкаОкончания = Неопределено;
    	Элементы.Описание.ПолучитьГраницыВыделения(ЗакладкаНачала, ЗакладкаОкончания);
  		ПозицияНачала = Описание.ПолучитьПозициюПоЗакладке(ЗакладкаНачала);
   		ПозицияОкончания = Описание.ПолучитьПозициюПоЗакладке(ЗакладкаОкончания);
        ВставитьИзШаблонаЗавершениеНаСервере(ШаблонТекста, ПозицияНачала, ПозицияОкончания);
        ЗакладкаНачала = Описание.ПолучитьЗакладкуПоПозиции(ПозицияНачала);
        ЗакладкаОкончания = Описание.ПолучитьЗакладкуПоПозиции(ПозицияОкончания);
        Элементы.Описание.УстановитьГраницыВыделения(ЗакладкаНачала, ЗакладкаОкончания); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьИзШаблонаЗавершениеНаСервере(ШаблонТекста, ПозицияНачала, ПозицияОкончания)
	
	ТекстШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонТекста, "ТекстХранилище").Получить();
	
	Если ТекстШаблона = Неопределено Тогда
		Возврат;
	КонецЕсли; 
		
	СтруктураВложений = Новый Структура;
	ТекстHTML = "";
	ТекстШаблона.ПолучитьHTML(ТекстHTML, СтруктураВложений);
	ВзаимодействияУСП.ЗаменитьПараметрыНаЗначения(ТекстHTML, Объект, СтруктураВложений);
	ТекстШаблона.УстановитьHTML(ТекстHTML, СтруктураВложений);
	ВзаимодействияУСП.ВставитьФорматированныйДокументВФорматированныйДокумент(Описание, ТекстШаблона, ПозицияНачала, ПозицияОкончания);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункцииФайлы

&НаСервере
Процедура ОбновитьЗаголовокСпискаФайлов()
	
	Если Объект.Ссылка.Пустая() Тогда
	    Элементы.СтраницаФайлы.Заголовок = НСтр("ru='Файлы'"); 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
        |   КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Файлы.Ссылка) КАК Количество
        |ИЗ
        |   Справочник.ОбращениеПрисоединенныеФайлы КАК Файлы
        |ГДЕ
        |   Файлы.ВладелецФайла = &СсылкаНаОбъект
        |   И НЕ Файлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СсылкаНаОбъект", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() И Выборка.Количество > 0 Тогда
		Элементы.СтраницаФайлы.Заголовок = СтрШаблон(НСтр("ru='Файлы (%1)'"), Выборка.Количество); 
	Иначе
		Элементы.СтраницаФайлы.Заголовок = НСтр("ru='Файлы'"); 
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьФайл()
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	ФайлРедактируется = ТекущиеДанные.ФайлРедактируется И ТекущиеДанные.ФайлРедактируетТекущийПользователь;
	
	ДанныеФайла = ПолучитьДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	Если ДанныеФайла.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДействиеРазрешено(Знач ТекущееДействие = "")
	
	Если Элементы.ФайлыСписок.ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	Если ТекущееДействие = "ПометкаУдаления" И ТекущиеДанные.ФайлРедактируется Тогда
		
		Если ТекущиеДанные.ФайлРедактируетТекущийПользователь Тогда
			ТекстПредупреждения = НСтр("ru = 'Действие недоступно, так как файл занят для редактирования.'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Действие недоступно, так как файл занят для редактирования
			                                 |другим пользователем.'");
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.ФайлыСписок.ТекущаяСтрока) = ТипСправочникаСФайлами Тогда
		Возврат Истина;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Действие недоступно для строки группировки списка.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Элементы.ФормаСкопировать.Видимость
	 ИЛИ НЕ Элементы.ФормаСкопировать.Доступность Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СкрытьКнопкиДобавления()
	
	Элементы.ФормаСоздать.Видимость = Ложь;
	Элементы.СписокКонтекстноеМенюСоздать.Видимость = Ложь;
	
	Элементы.ФормаСкопировать.Видимость = Ложь;
	Элементы.СписокКонтекстноеМенюСкопировать.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьКнопкиИзменения()
	
	ИменаКоманд = ПолучитьИменаКомандИзмененияОбъектов();
	
	Для каждого ЭлементФормы Из Элементы Цикл
		
		Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопок()
	
#Если ВебКлиент Тогда
	Возврат;
#КонецЕсли
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ИменаКоманд = Новый Массив;
		ИменаКоманд.Добавить("Создать");
		
	ИначеЕсли ТипЗнч(Элементы.ФайлыСписок.ТекущаяСтрока) <> ТипСправочникаСФайлами Тогда
		ИменаКоманд = Новый Массив;
	Иначе
		ИменаКоманд = ПолучитьДоступныеКоманды(
			ТекущиеДанные.ФайлРедактируется,
			ТекущиеДанные.ФайлРедактируетТекущийПользователь,
			ТекущиеДанные.ПодписанЭП,
			ТекущиеДанные.Зашифрован);
	КонецЕсли;
	
	Для каждого ИмяЭлементаФормы Из ИменаЭлементовКнопокФормы Цикл
		
		ЭлементФормы = Элементы.Найти(ИмяЭлементаФормы);
		
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено Тогда
			Если НЕ ЭлементФормы.Доступность Тогда
				ЭлементФормы.Доступность = Истина;
			КонецЕсли;
			
		ИначеЕсли ЭлементФормы.Доступность Тогда
			ЭлементФормы.Доступность = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Лобашова 01.08.2019 89291 +
&НаСервере
Функция ПолучитьДоступныеДействия()
	Возврат РегистрыСведений.РолиСотрудниковЛК.ПолучитьДоступныеДействия(ТекущийПользователь);
КонецФункции
//Лобашова 01.08.2019 89291 -

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат РаботаСФайлами.ДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗанятьФайлДляРедактированияСервер(Знач ПрисоединенныйФайл)
	
	РаботаСФайламиСлужебный.ЗанятьФайлДляРедактированияСервер(ПрисоединенныйФайл);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОсвободитьФайл(Знач ПрисоединенныйФайл)
	
	РаботаСФайламиСлужебный.ОсвободитьФайл(ПрисоединенныйФайл);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеПометкиУдаления(Знач ПрисоединенныйФайл, Знач ПометкаУдаления)
	
	ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	ПрисоединенныйФайлОбъект.ПометкаУдаления = ПометкаУдаления;
	ПрисоединенныйФайлОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДинамическийСписок(ИмяСправочникаХранилищаФайлов)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |   Файлы.Ссылка КАК Ссылка,
    |   Файлы.ПометкаУдаления,
    |   ВЫБОР
    |       КОГДА Файлы.ПометкаУдаления = ИСТИНА
    |           ТОГДА Файлы.ИндексКартинки + 1
    |       ИНАЧЕ Файлы.ИндексКартинки
    |   КОНЕЦ КАК ИндексКартинки,
    |   Файлы.Наименование КАК Наименование,
    |   ВЫРАЗИТЬ(Файлы.Описание КАК СТРОКА(500)) КАК Описание,
    |   Файлы.Автор,
    |   Файлы.ДатаСоздания,
    |   Файлы.Изменил КАК Отредактировал,
    |   ДОБАВИТЬКДАТЕ(Файлы.ДатаМодификацииУниверсальная, СЕКУНДА, &СекундДоМестногоВремени) КАК ДатаИзменения,
    |   ВЫРАЗИТЬ(Файлы.Размер / 1024 КАК ЧИСЛО(10, 0)) КАК Размер,
    |   Файлы.ПодписанЭП,
    |   Файлы.Зашифрован,
    |   ВЫБОР
    |       КОГДА Файлы.ПодписанЭП
    |               И Файлы.Зашифрован
    |           ТОГДА 2
    |       КОГДА Файлы.Зашифрован
    |           ТОГДА 1
    |       КОГДА Файлы.ПодписанЭП
    |           ТОГДА 0
    |       ИНАЧЕ -1
    |   КОНЕЦ КАК НомерКартинкиПодписанЗашифрован,
    |   ВЫБОР
    |       КОГДА НЕ Файлы.Редактирует В (&ПустыеПользователи)
    |           ТОГДА ИСТИНА
    |       ИНАЧЕ ЛОЖЬ
    |   КОНЕЦ КАК ФайлРедактируется,
    |   ВЫБОР
    |       КОГДА Файлы.Редактирует = &ТекущийПользователь
    |           ТОГДА ИСТИНА
    |       ИНАЧЕ ЛОЖЬ
    |   КОНЕЦ КАК ФайлРедактируетТекущийПользователь,
    |   ВЫБОР
    |       КОГДА НЕ Файлы.Редактирует В (&ПустыеПользователи)
    |               И Файлы.Редактирует <> &ТекущийПользователь
    |           ТОГДА ИСТИНА
    |       ИНАЧЕ ЛОЖЬ
    |   КОНЕЦ КАК ФайлРедактируетДругойПользователь,
    |   Файлы.Редактирует КАК Редактирует
    |ИЗ
    |   &ИмяСправочника КАК Файлы
    |ГДЕ
    |   Файлы.ВладелецФайла = &ВладелецФайлов
    |   И НЕ Файлы.ПометкаУдаления";
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при настройке динамического списка присоединенных файлов.'");
	ОкончаниеОшибки = НСтр("ru = 'В этом случае настройка динамического списка невозможна.'");
	
	ИмяСправочникаХранилищаФайлов = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
		Объект.Ссылка, "", ЗаголовокОшибки, ОкончаниеОшибки);
	
	ПолноеИмяСправочника = "Справочник." + ИмяСправочникаХранилищаФайлов;
	ФайлыСписок.ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", ПолноеИмяСправочника);

	ПустыеПользователи = Новый Массив;
	ПустыеПользователи.Добавить(Неопределено);
	ПустыеПользователи.Добавить(Справочники.Пользователи.ПустаяСсылка());
	ПустыеПользователи.Добавить(Справочники.ВнешниеПользователи.ПустаяСсылка());
	
	ФайлыСписок.Параметры.УстановитьЗначениеПараметра("ВладелецФайлов",      Объект.Ссылка);
	ФайлыСписок.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	ФайлыСписок.Параметры.УстановитьЗначениеПараметра("ПустыеПользователи",  ПустыеПользователи);
	ФайлыСписок.Параметры.УстановитьЗначениеПараметра("СекундДоМестногоВремени", 0);
	ФайлыСписок.ОсновнаяТаблица = ПолноеИмяСправочника;
	ФайлыСписок.ДинамическоеСчитываниеДанных = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаКомандФормы()
	
	ИменаКоманд = ПолучитьИменаКомандИзмененияОбъектов();
	Для Каждого ИмяКоманды Из ПолучитьИменаПростыхКомандОбъектов() Цикл
		ИменаКоманд.Добавить(ИмяКоманды);
	КонецЦикла;
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаКомандИзмененияОбъектов()
	
	ИменаКоманд = Новый Массив;
	
	// Команды зависимые от состояния объектов.
	ИменаКоманд.Добавить("ЗакончитьРедактирование");
	ИменаКоманд.Добавить("Освободить");
	ИменаКоманд.Добавить("Редактировать");
	ИменаКоманд.Добавить("УстановитьПометкуУдаления");
	
	ИменаКоманд.Добавить("ЭППодписать");
	ИменаКоманд.Добавить("ДобавитьЭПИзФайла");
	ИменаКоманд.Добавить("СохранитьВместеСЭП");
	
	ИменаКоманд.Добавить("Зашифровать");
	ИменаКоманд.Добавить("Расшифровать");
	
	ИменаКоманд.Добавить("ОбновитьИзФайлаНаДиске");
	
	// Команды независимые от состояния объектов.
	ИменаКоманд.Добавить("Создать");
	ИменаКоманд.Добавить("ОткрытьСвойстваФайла");
	ИменаКоманд.Добавить("Скопировать");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИменаПростыхКомандОбъектов()
	
	ИменаКоманд = Новый Массив;
	
	// Простые команды доступные любому пользователю, читающему файлы.
	ИменаКоманд.Добавить("ОткрытьКаталогФайла");
	ИменаКоманд.Добавить("ОткрытьФайлДляПросмотра");
	ИменаКоманд.Добавить("СохранитьКак");
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДоступныеКоманды(ФайлРедактируется,
                                 ФайлРедактируетТекущийПользователь,
                                 ФайлПодписан,
                                 ФайлЗашифрован)
	
	ИменаКоманд = ПолучитьИменаКомандФормы();
	
	Если ФайлРедактируется Тогда
		Если ФайлРедактируетТекущийПользователь Тогда
			УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		Иначе
			УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
			УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
			УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		КонецЕсли;
		УдалитьКомандуИзМассива(ИменаКоманд, "УстановитьПометкуУдаления");
		
		УдалитьКомандыЭП(ИменаКоманд);
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьКак");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "Зашифровать");
		УдалитьКомандуИзМассива(ИменаКоманд, "Расшифровать");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
	КонецЕсли;
	
	Если ФайлПодписан Тогда
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
		УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
	КонецЕсли;
	
	Если ФайлЗашифрован Тогда
		УдалитьКомандыЭП(ИменаКоманд);
		УдалитьКомандуИзМассива(ИменаКоманд, "ЗакончитьРедактирование");
		УдалитьКомандуИзМассива(ИменаКоманд, "Освободить");
		УдалитьКомандуИзМассива(ИменаКоманд, "Редактировать");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОбновитьИзФайлаНаДиске");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "Зашифровать");
		
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьКаталогФайла");
		УдалитьКомандуИзМассива(ИменаКоманд, "ОткрытьФайлДляПросмотра");
		УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьКак");
	Иначе
		УдалитьКомандуИзМассива(ИменаКоманд, "Расшифровать");
	КонецЕсли;
	
	Возврат ИменаКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьКомандыЭП(ИменаКоманд)
	
	УдалитьКомандуИзМассива(ИменаКоманд, "ЭППодписать");
	УдалитьКомандуИзМассива(ИменаКоманд, "ДобавитьЭПИзФайла");
	УдалитьКомандуИзМассива(ИменаКоманд, "СохранитьВместеСЭП");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьКомандуИзМассива(Массив, ИмяКоманды)
	
	Позиция = Массив.Найти(ИмяКоманды);
	
	Если Позиция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Массив.Удалить(Позиция);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьФайловыхКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ТекущиеДанные = Элементы.ФайлыСписок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ИменаКоманд = Новый Массив;
		ИменаКоманд.Добавить("Создать");
		
	ИначеЕсли ТипЗнч(Элементы.ФайлыСписок.ТекущаяСтрока) <> ТипСправочникаСФайлами Тогда
		ИменаКоманд = Новый Массив;
	Иначе
		ВозможностьОсвободитьФайл = РаботаСФайламиСлужебныйКлиент.ВозможностьОсвободитьФайл(
			ТекущиеДанные.Ссылка,
			ТекущиеДанные.ФайлРедактируетТекущийПользователь,
			ТекущиеДанные.Редактирует);
			
		ИменаКоманд = ПолучитьДоступныеКоманды(ТекущиеДанные.ФайлРедактируется, ТекущиеДанные.ФайлРедактируетТекущийПользователь, ТекущиеДанные.ПодписанЭП, ТекущиеДанные.Зашифрован);
	КонецЕсли;
		
	Для каждого ИмяЭлементаФормы Из ИменаЭлементовКнопокФормы Цикл
		
		ЭлементФормы = Элементы.Найти(ИмяЭлементаФормы);
		
		Если ИменаКоманд.Найти(ЭлементФормы.ИмяКоманды) <> Неопределено
			Или ИменаКоманд.Найти(ЭлементФормы.Имя) <> Неопределено Тогда
			
			Если НЕ ЭлементФормы.Доступность Тогда
				ЭлементФормы.Доступность = Истина;
			КонецЕсли;
			
		ИначеЕсли ЭлементФормы.Доступность Тогда
			ЭлементФормы.Доступность = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииВзаимодействия

&НаСервере
Процедура ОбновитьСостоянияДоступностиВзаимодействий()
    
    КоличествоНеРасмотрено = ВзаимодействияУСП.КоличествоНеРассмотренныхВзаимодействий(Объект.Ссылка);
	
	Если ИспользоватьПризнакРассмотрено И КоличествоНеРасмотрено > 0 Тогда
		Элементы.СтраницаВзаимодействия.Картинка = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
	Иначе
		Элементы.СтраницаВзаимодействия.Картинка = Новый Картинка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмо(Элемент)
    
    Если ШаблоныТекстовПоБазеЗнаний.Количество() = 0 Тогда
        Оповещение = Новый ОписаниеОповещения("ОтправитьПисьмоЗавершение", ЭтотОбъект, Неопределено);
        Если Модифицированность Тогда
            ПоказатьВопросЗаписиИзменений(Неопределено);
        Иначе
            ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.ОК);
        КонецЕсли; 
    ИначеЕсли ШаблоныТекстовПоБазеЗнаний.Количество() = 1 Тогда
        Оповещение = Новый ОписаниеОповещения("ОтправитьПисьмоЗавершение", ЭтотОбъект, ШаблоныТекстовПоБазеЗнаний[0].Значение);
        Если Модифицированность Тогда
            ПоказатьВопросЗаписиИзменений(ШаблоныТекстовПоБазеЗнаний[0].Значение);
        Иначе
            ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.ОК);
        КонецЕсли; 
    Иначе
        Оповещение = Новый ОписаниеОповещения("ОтправитьПисьмоОтветНаВопрос", ЭтотОбъект);
        ПоказатьВыборИзМеню(Оповещение, ШаблоныТекстовПоБазеЗнаний, Элементы.ОтправитьПисьмо);
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмоОтветНаВопрос(Результат, ПараметрыОповещения) Экспорт
    
    Если Результат <> Неопределено Тогда
        Оповещение = Новый ОписаниеОповещения("ОтправитьПисьмоЗавершение", ЭтотОбъект, Результат.Значение);
        Если Модифицированность Тогда
            ПоказатьВопросЗаписиИзменений(Результат.Значение);
        Иначе
            ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.ОК);
        КонецЕсли; 
    КонецЕсли;             
    
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмоЗавершение(Результат, Шаблон) Экспорт
    
    Если Результат = КодВозвратаДиалога.ОК Тогда
        Если Модифицированность Тогда
            Записать();
            Модифицированность = Ложь;
        КонецЕсли; 
        ПараметрыФормы = ПараметрыПисьмаПоКарточкеБазыЗнаний(Шаблон);
        ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЗаписиИзменений(ПараметрыОповещения)
    
    Оповещение = Новый ОписаниеОповещения("ОтправитьПисьмоЗавершение", ЭтотОбъект, ПараметрыОповещения);
    ТекстВопроса = НСтр("ru='Изменения не записаны. Записать?'");
    ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК);         
	
КонецПроцедуры

&НаСервере
Функция ПараметрыПисьмаПоКарточкеБазыЗнаний(ШаблонТекста = Неопределено)
    
    ПараметрыСообщения = БазовыеПараметрыСообщения();
    Тема = "[Предмет.Тема] [КлючОбращения]";
    ВзаимодействияУСП.ЗаменитьПараметрыНаЗначения(Тема, Объект.Ссылка);
	ПараметрыСообщения.Вставить("Тема", Тема);
    
    Если ЗначениеЗаполнено(Объект.КарточкаБазыЗнаний) Тогда
        МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.КарточкаБазыЗнаний);
        ФорматированноеОписание = МенеджерОбъекта.ФорматированноеОписание(Объект.КарточкаБазыЗнаний);
    Иначе
        ФорматированноеОписание = Новый ФорматированныйДокумент;
    КонецЕсли;
        
    Тело = Новый Структура("ТекстHTML, СтруктураВложений","", Новый Структура);
    
    Если ШаблонТекста = Неопределено Тогда
    	ФорматированноеОписание.ПолучитьHTML(Тело.ТекстHTML, Тело.СтруктураВложений);
    Иначе
    	ТекстШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонТекста, "ТекстХранилище").Получить();
    	Если ТекстШаблона = Неопределено Тогда
    		ФорматированноеОписание.ПолучитьHTML(Тело.ТекстHTML, Тело.СтруктураВложений);
        Иначе
    		ТекстШаблона.ПолучитьHTML(Тело.ТекстHTML, Тело.СтруктураВложений);
    		ВзаимодействияУСП.ЗаменитьПараметрыНаЗначения(Тело.ТекстHTML, Объект.Ссылка, Тело.СтруктураВложений);
    	КонецЕсли; 
	КонецЕсли;
    
    ПараметрыСообщения.Вставить("Тело", Тело);
    ДобавитьВложенияДляПисьма(ПараметрыСообщения.Вложения, Объект.Ссылка);
    
    Возврат ПараметрыСообщения;
	
КонецФункции

&НаСервере
Функция ПараметрыПисьмаПоОбращению()
	
	ПараметрыСообщения = БазовыеПараметрыСообщения();
    Тема = "%1 [КлючОбращения]";
    ВзаимодействияУСП.ЗаменитьПараметрыНаЗначения(Тема, Объект.Ссылка);
	ПараметрыСообщения.Вставить("Тема", СтрШаблон(Тема, Объект.Тема));
    
    ДобавитьВложенияДляПисьма(ПараметрыСообщения.Вложения, Объект.Ссылка);
	
	Возврат ПараметрыСообщения;
	
КонецФункции

&НаКлиенте
Функция ВыборКорректен()
	
	Если Элементы.ВзаимодействияСписок.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы.ВзаимодействияСписок.ВыделенныеСтроки Цикл
		Если ТипЗнч(Элемент) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
// Установить флаг "Рассмотрено" в выбранных взаимодействиях - серверная часть.
//
Процедура УстановитьФлагРассмотрено(ВыполненаЗамена, ФлагРассмотрено)
	
	ВыполненаЗамена = Ложь;
	МассивВзаимодействий = Новый Массив;
	
	ВыделенныеСтроки = Элементы.ВзаимодействияСписок.ВыделенныеСтроки;
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
	
	Для Каждого Взаимодействие Из ВыделенныеСтроки Цикл
		Если ЗначениеЗаполнено(Взаимодействие)
			И ТипЗнч(Взаимодействие) <> ТипГруппировка Тогда
				МассивВзаимодействий.Добавить(Взаимодействие);
		КонецЕсли;
	КонецЦикла;
	
	Взаимодействия.УстановитьПризнакРассмотрено(МассивВзаимодействий,ФлагРассмотрено, ВыполненаЗамена);
	
	ОбновитьСостоянияДоступностиВзаимодействий();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПредмету()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ВзаимодействияСписок, "Предмет",
			Объект.Ссылка,ВидСравненияКомпоновкиДанных.Равно,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПредметаПриЗавершении(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыбора = ДополнительныеПараметры.КонтекстВыбора;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму(ВыбранныйЭлемент.Значение + ".ФормаВыбора", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЧерновикиВзаимодействий(СсылкаНаОбращение)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПредметыПапкиВзаимодействий.Взаимодействие
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|ГДЕ
		|	ВЫРАЗИТЬ(ПредметыПапкиВзаимодействий.Взаимодействие КАК Документ.ЭлектронноеПисьмоИсходящее).СтатусПисьма = &СтатусПисьмаЧерновик
		|	И ПредметыПапкиВзаимодействий.Предмет = &СсылкаНаОбращение
		|	И ВЫРАЗИТЬ(ПредметыПапкиВзаимодействий.Взаимодействие КАК Документ.ЭлектронноеПисьмоИсходящее).ПометкаУдаления = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("СтатусПисьмаЧерновик", Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик);
	Запрос.УстановитьПараметр("СсылкаНаОбращение", СсылкаНаОбращение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииПоручения

&НаСервере
Процедура ОбновитьСостоянияДоступностиЗадач()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задачи.Ссылка) КАК КоличествоНеПринятыхЗадач
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.Предмет = &ПараметрОтбора
		|	И Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И НЕ Задачи.ПринятаКИсполнению";
	
	Запрос.УстановитьПараметр("ПараметрОтбора", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() И Выборка.КоличествоНеПринятыхЗадач > 0 Тогда
		Элементы.СтраницаЗадачи.Картинка = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		Элементы.СтраницаЗадачи.Заголовок = СтрШаблон(НСтр("ru='Поручения (%1)'"), Выборка.КоличествоНеПринятыхЗадач); 
	Иначе
		Элементы.СтраницаЗадачи.Картинка = Новый Картинка;
		Элементы.СтраницаЗадачи.Заголовок = НСтр("ru='Поручения'")
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор(ПараметрыОтбора)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(ЗадачиСписок, "Выполнена");
	Если НЕ ПараметрыОтбора["ПоказыватьВыполненные"] Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ЗадачиСписок, "Выполнена", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗадач()
	
	Дерево = РеквизитФормыВЗначение("ДеревоЗадач");
	Дерево.Строки.Очистить();
	ДобавитьЗадачиПоПредмету(Дерево, Объект.Ссылка);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоЗадач");
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСписокЗадач()
	
	ИспользоватьПодчиненныеБизнесПроцессы = ПолучитьФункциональнуюОпцию("ИспользоватьПодчиненныеБизнесПроцессы");
	Если ИспользоватьПодчиненныеБизнесПроцессы Тогда 
		ЗаполнитьДеревоЗадач();
	Иначе
		БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(ЗадачиСписок);
		Элементы.ЗадачиСписок.Обновить();
	КонецЕсли;
	
	ОбновитьСостоянияДоступностиЗадач();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадачиПоПредмету(Дерево, Предмет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Ссылка,
		|	Задачи.Наименование,
		|	Задачи.Исполнитель,
		|	Задачи.РольИсполнителя,
		|	Задачи.СрокИсполнения,
		|	Задачи.Выполнена,
		|	ВЫБОР
		|		КОГДА Задачи.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|			ТОГДА 0
		|		КОГДА Задачи.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА Истина
		|		ИНАЧЕ Ложь
		|	КОНЕЦ КАК Остановлен
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|   Задачи.Предмет = &Предмет
		|   И Задачи.ПометкаУдаления = Ложь";
		
	Запрос.УстановитьПараметр("Предмет", Предмет);

	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Ветвь = Дерево.Строки.Найти(ВыборкаДетальныеЗаписи.Ссылка, "Ссылка", Истина);
		Если Ветвь = Неопределено Тогда
			Строка = Дерево.Строки.Добавить();
			
			Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
			Строка.Важность = ВыборкаДетальныеЗаписи.Важность;
			Строка.Тип = 1;
			Строка.Остановлен = ВыборкаДетальныеЗаписи.Остановлен;
			Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
			Строка.СрокИсполнения = ВыборкаДетальныеЗаписи.СрокИсполнения;
			Строка.Выполнена = ВыборкаДетальныеЗаписи.Выполнена;
			Если ВыборкаДетальныеЗаписи.СрокИсполнения <> "00010101" 
				И ВыборкаДетальныеЗаписи.СрокИсполнения < ТекущаяДатаСеанса() Тогда
				Строка.Просрочена = Истина;
			КонецЕсли;				
			Если ВыборкаДетальныеЗаписи.Исполнитель.Пустая() Тогда
				Строка.Исполнитель = ВыборкаДетальныеЗаписи.РольИсполнителя;
			Иначе	
				Строка.Исполнитель = ВыборкаДетальныеЗаписи.Исполнитель;
			КонецЕсли;	
			
			ДобавитьПодчиненныеБизнесПроцессы(Дерево, ВыборкаДетальныеЗаписи.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьПодчиненныеБизнесПроцессы(Дерево, ЗадачаСсылка)
	
	Ветвь = Дерево.Строки.Найти(ЗадачаСсылка, "Ссылка", Истина);
	
	Для каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		// У бизнес-процесса может и не быть главной задачи
		РеквизитГлавнаяЗадача = МетаданныеБизнесПроцесса.Реквизиты.Найти("ГлавнаяЗадача");
		Если РеквизитГлавнаяЗадача = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БизнесПроцессы.Ссылка,
			|	БизнесПроцессы.Наименование,
			|	БизнесПроцессы.Завершен,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
			|			ТОГДА 0
			|		КОГДА БизнесПроцессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Важность,
			|	ВЫБОР
			|		КОГДА БизнесПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
			|			ТОГДА Истина
			|		ИНАЧЕ Ложь
			|	КОНЕЦ КАК Остановлен
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцессы
			|ГДЕ
			|   БизнесПроцессы.ГлавнаяЗадача = &ГлавнаяЗадача
			|   И БизнесПроцессы.ПометкаУдаления = Ложь";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос.УстановитьПараметр("ГлавнаяЗадача", ЗадачаСсылка);

		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, ВыборкаДетальныеЗаписи.Ссылка, ЗадачаСсылка);
			
		КонецЦикла;
		
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадачиПодчиненногоБизнесПроцесса(Дерево, БизнесПроцессСсылка, ЗадачаСсылка)
	
	Ветвь = Дерево.Строки.Найти(ЗадачаСсылка, "Ссылка", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Ссылка,
		|	Задачи.Наименование,
		|	Задачи.Исполнитель,
		|	Задачи.РольИсполнителя,
		|	Задачи.СрокИсполнения,
		|	Задачи.Выполнена,
		|	ВЫБОР
		|		КОГДА Задачи.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|			ТОГДА 0
		|		КОГДА Задачи.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА Задачи.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА Истина
		|		ИНАЧЕ Ложь
		|	КОНЕЦ КАК Остановлен
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|   Задачи.БизнесПроцесс = &БизнесПроцесс
		|   И Задачи.ПометкаУдаления = Ложь";
		
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);

	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НайденнаяВетвь = Дерево.Строки.Найти(ВыборкаДетальныеЗаписи.Ссылка, "Ссылка", Истина);
		Если НайденнаяВетвь <> Неопределено Тогда
			Дерево.Строки.Удалить(НайденнаяВетвь);
		КонецЕсли;	
			
		Строка = Неопределено;
		Если Ветвь = Неопределено Тогда
			Строка = Дерево.Строки.Добавить();
		Иначе	
			Строка = Ветвь.Строки.Добавить();
		КонецЕсли;
		
		Строка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		Строка.Важность = ВыборкаДетальныеЗаписи.Важность;
		Строка.Тип = 1;
		Строка.Остановлен = ВыборкаДетальныеЗаписи.Остановлен;
		Строка.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		Строка.СрокИсполнения = ВыборкаДетальныеЗаписи.СрокИсполнения;
		Строка.Выполнена = ВыборкаДетальныеЗаписи.Выполнена;
		Если ВыборкаДетальныеЗаписи.СрокИсполнения <> '00010101000000' 
			И ВыборкаДетальныеЗаписи.СрокИсполнения < ТекущаяДатаСеанса() Тогда
			Строка.Просрочена = Истина;
		КонецЕсли;				
		Если ВыборкаДетальныеЗаписи.Исполнитель.Пустая() Тогда
			Строка.Исполнитель = ВыборкаДетальныеЗаписи.РольИсполнителя;
		Иначе	
			Строка.Исполнитель = ВыборкаДетальныеЗаписи.Исполнитель;
		КонецЕсли;	
		
		ДобавитьПодчиненныеБизнесПроцессы(Дерево, ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСвойства

&НаСервереБезКонтекста
Функция ПрочитатьЗначенияСвойствИзРегистраСведений(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеСведения.Свойство,
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуЗначенийСвойств(ИзОбработчикаПриСоздании) // Исправлено УНФ
	
	// Заполнение дерева значениями свойств.
	Если ИзОбработчикаПриСоздании Тогда
		ЗначенияСвойств = ПрочитатьЗначенияСвойствИзРегистраСведений(Объект.Ссылка);
	Иначе
		ЗначенияСвойств = ПолучитьТекущиеЗначенияСвойств();
		ТаблицаЗначенийСвойств.Очистить();
	КонецЕсли;
	
	ПроверяемаяТаблица = "РегистрСведений.ДополнительныеСведения";
	ЗначениеДоступа = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения");
	
	Таблица = УправлениеСвойствамиСлужебный.ЗначенияСвойств(
		ЗначенияСвойств, ДоступныеНаборыСвойств, Истина);
	
	МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
	ПроверятьПрава = Не Пользователи.ЭтоПолноправныйПользователь() И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом");
	Если ПроверятьПрава Тогда
		ПроверяемыеСвойства = Таблица.ВыгрузитьКолонку("Свойство");
		РазрешенныеСвойства = МодульУправлениеДоступомСлужебный.РазрешенныеЗначенияДляДинамическогоСписка(
			ПроверяемаяТаблица,
			ЗначениеДоступа,
			ПроверяемыеСвойства);
	КонецЕсли;
	
	Для Каждого Строка Из Таблица Цикл
		ДоступноДляИзменения = Истина;
		Если ПроверятьПрава Тогда
			// Проверка на чтение свойства.
			Если РазрешенныеСвойства.Найти(Строка.Свойство) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверка на запись свойства.
			НачатьТранзакцию();
			Попытка
				Набор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
				Набор.Отбор.Объект.Установить(Параметры.Ссылка);
				Набор.Отбор.Свойство.Установить(Строка.Свойство);
				
				Запись = Набор.Добавить();
				Запись.Свойство = Строка.Свойство;
				Запись.Объект = Параметры.Ссылка;
				Набор.ОбменДанными.Загрузка = Истина;
				Набор.Записать(Истина);
				
				ОтменитьТранзакцию();
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ОтменитьТранзакцию();
				ДоступноДляИзменения = Ложь;
			КонецПопытки;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗначенийСвойств.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.НомерКартинки = ?(Строка.Удалено, 0, -1);
		НоваяСтрока.ДоступноДляИзменения = ДоступноДляИзменения;
		
		Если Строка.Значение = Неопределено
			И ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(Строка.ТипЗначения, Тип("Булево")) Тогда
			НоваяСтрока.Значение = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьНаборСвойствВРегистр(Знач Ссылка, Знач ЗначенияСвойств)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого Строка Из ЗначенияСвойств Цикл
		Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		Запись.Свойство = Строка.Свойство;
		Запись.Значение = Строка.Значение;
		Запись.Объект   = Ссылка;
		Запись.Записать();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущиеЗначенияСвойств()
	
	ЗначенияСвойств = Новый ТаблицаЗначений;
	ЗначенияСвойств.Колонки.Добавить("Свойство");
	ЗначенияСвойств.Колонки.Добавить("Значение");
	
	Для каждого Строка Из ТаблицаЗначенийСвойств Цикл
		
		Если ЗначениеЗаполнено(Строка.Значение) И (Строка.Значение <> Ложь) Тогда
			НоваяСтрока = ЗначенияСвойств.Добавить();
			НоваяСтрока.Свойство = Строка.Свойство;
			НоваяСтрока.Значение = Строка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияСвойств;
	
КонецФункции

&НаСервере
Процедура ЗаписатьЗначенияСвойств()
	
	// Запись значений свойств в регистр сведений.
	ЗначенияСвойств = Новый Массив;
	
	Для каждого Строка Из ТаблицаЗначенийСвойств Цикл
		
		Если ЗначениеЗаполнено(Строка.Значение)
		  И (Строка.Значение <> Ложь) Тогда
			
			Значение = Новый Структура("Свойство, Значение", Строка.Свойство, Строка.Значение);
			ЗначенияСвойств.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписатьНаборСвойствВРегистр(Объект.Ссылка, ЗначенияСвойств);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОжиданияОценки(Элемент)
	
	Объект.ОжиданиеОценки = Ложь;
	Элементы.ГруппаЗвезды.Видимость = Истина;
	Элементы.КомментарийОценки.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкаПриИзменении(Элемент)
	
	ПриИзмененииОценки();
	УстановитьКартинкиДекорацийОценок();
	
КонецПроцедуры

&НаКлиенте
Процедура МестнаяДатаОценкиПриИзменении(Элемент)
	
	Объект.ДатаОценки = ТекущаяДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОценки()
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОценки) Тогда
		Объект.ДатаОценки = ТекущаяДата();
		МестнаяДатаОценки = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаОписаниеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    Если ЗначениеЗаполнено(Объект.Абонент) Тогда
        ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Абонент", Объект.Абонент));
        ОткрытьФорму("Документ.Подписка.ФормаСписка", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйСтрокойНажатиеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПоказатьЗначение(, Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти  

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ДанныеВыбораДляРаздела(Текст, Сервис, Компонент)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Разделы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Разделы КАК Разделы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Разделы.Сервисы КАК РазделыСервисы
	|		ПО Разделы.Ссылка = РазделыСервисы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Разделы.Компоненты КАК РазделыКомпоненты
	|		ПО Разделы.Ссылка = РазделыКомпоненты.Ссылка
	|ГДЕ
	|	РазделыКомпоненты.Компонент = &Компонент
	|	И РазделыСервисы.Сервис = &Сервис
	|	И Разделы.Наименование ПОДОБНО &Шаблон";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Сервис", Сервис);
	Запрос.УстановитьПараметр("Компонент", Компонент);
	Запрос.УстановитьПараметр("Шаблон", Текст+"%");
	РезультатЗапроса = Запрос.Выполнить();
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьШаблоныТекстов()
    
    ШаблоныТекстовПоБазеЗнаний.Очистить();
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = 
    	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |	ШаблоныТекстов.Ссылка
        |ИЗ
        |	Справочник.ШаблоныТекстов КАК ШаблоныТекстов
        |ГДЕ
        |	НЕ ШаблоныТекстов.ПометкаУдаления
        |	И ШаблоныТекстов.Витрина = &Витрина
        |	И (ШаблоныТекстов.Наименование ПОДОБНО &КарточкаБазыЗнаний
        |	ИЛИ ШаблоныТекстов.Текст ПОДОБНО &КарточкаБазыЗнаний)";
        
    Запрос.УстановитьПараметр("КарточкаБазыЗнаний", "%КарточкаБазыЗнаний%");
    Запрос.УстановитьПараметр("Витрина", Объект.Витрина);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        НоваяСтрока = ШаблоныТекстовПоБазеЗнаний.Добавить();
        НоваяСтрока.Значение = Выборка.Ссылка;
    КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложенияДляПисьма(ВложенияДляПисьма, ИсточникФалов)
    
    Вложения = Новый Массив;
    РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ИсточникФалов, Вложения);
    
    Для каждого Вложение Из Вложения Цикл
        ДанныеФайла = РаботаСФайлами.ДанныеФайла(Вложение, УникальныйИдентификатор);
        ВложенияДляПисьма.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Функция БазовыеПараметрыСообщения()
    
	ПараметрыСообщения = Новый Структура;
	
	ПараметрыСообщения.Вставить("Основание", Объект.Ссылка);
    Если Не ЗначениеЗаполнено(Объект.АдресДляПереписки) Тогда
        Кому = КонтактнаяИнформацияУСП.АктуальныеАдресаОтправкиПользователяСервиса(Объект.Инициатор);
    Иначе
        Кому = Объект.АдресДляПереписки;
    КонецЕсли;
	ПараметрыСообщения.Вставить("Кому", Кому);
    
    УчетныеЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, 
        Новый Структура("УчетнаяЗаписьПоУмолчанию, УчетнаяЗаписьВитрины, УчетнаяЗаписьВитриныПоУмолчанию, УчетныеЗаписи", 
                        "Сервис.УчетнаяЗаписьСлужбыПоддержкиПоУмолчанию", 
                        "Витрина.УчетнаяЗапись",
                        "Сервис.ОсновнаяВитрина.УчетнаяЗапись",
                        "Сервис.УчетныеЗаписиСлужбыПоддержки"));
    
    Если ЗначениеЗаполнено(УчетныеЗаписи.УчетнаяЗаписьВитрины) Тогда
        ПараметрыСообщения.Вставить("УчетнаяЗапись", УчетныеЗаписи.УчетнаяЗаписьВитрины);
    ИначеЕсли ЗначениеЗаполнено(УчетныеЗаписи.УчетнаяЗаписьВитриныПоУмолчанию) Тогда
        ПараметрыСообщения.Вставить("УчетнаяЗапись", УчетныеЗаписи.УчетнаяЗаписьВитриныПоУмолчанию);
    ИначеЕсли ЗначениеЗаполнено(УчетныеЗаписи.УчетнаяЗаписьПоУмолчанию) Тогда
        ПараметрыСообщения.Вставить("УчетнаяЗапись", УчетныеЗаписи.УчетнаяЗаписьПоУмолчанию);
    Иначе
        ВыборкаЗаписи = УчетныеЗаписи.УчетныеЗаписи.Выбрать();
        Если ВыборкаЗаписи.Следующий() Тогда
            ПараметрыСообщения.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись = ВыборкаЗаписи.УчетнаяЗапись);
        КонецЕсли; 
    КонецЕсли;
	
    Вложения = Новый СписокЗначений;
    Если ТипЗнч(Объект.КарточкаБазыЗнаний) <> Тип("СправочникСсылка.Ошибки") Тогда
        ДобавитьВложенияДляПисьма(Вложения, Объект.КарточкаБазыЗнаний);
    КонецЕсли;
    ПараметрыСообщения.Вставить("Вложения", Вложения);
    
    Возврат ПараметрыСообщения;
    
КонецФункции

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
    
    #Если ВебКлиент Тогда
        Если ТекущаяСтраница = Элементы.СтраницаВзаимодействия Тогда
        	ВзаимодействияСписок.Параметры.УстановитьЗначениеПараметра("СекундДоМестногоВремени", СекундДоМестногоВремени);
        ИначеЕсли ТекущаяСтраница = Элементы.СтраницаФайлы Тогда	
        	ФайлыСписок.Параметры.УстановитьЗначениеПараметра("СекундДоМестногоВремени", СекундДоМестногоВремени);
        КонецЕсли; 
    #КонецЕсли 
    
КонецПроцедуры

&НаСервере
Процедура ВитринаПриИзмененииНаСервере()
	
    Объект.Инициатор = Неопределено;
    Объект.Абонент = Неопределено;
    Объект.Сервис = БазаЗнанийПовтИсп.СервисВитрины(Объект.Витрина);
    СервисПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОбращение(Команда)
    
    Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбращений.Закрыто");
	//{Рарус kruser 2019.02.12 81210
	//Если Записать() Тогда
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",РежимЗаписиДокумента.Проведение); 
	Если Записать(ПараметрыЗаписи) Тогда
	//}Рарус kruser 2019.02.12 81210
        //Лобашова 30.04.2019 81724 +
        СтруктураВозВрата = Новый Структура;
		СтруктураВозВрата.Вставить("РезультатОткрытия"			, Истина);
		Закрыть(СтруктураВозВрата);
		//Закрыть();
		//Лобашова 30.04.2019 81724 -
    КонецЕсли;
	
	//Лобашова 30.07.2019 89291 +
	ЗаписьНаЛК = ПолучитьДанныеЗаписи();
	Если ЗаписьНаЛК <> Неопределено Тогда 
		Если НеОказанаКонсультация Тогда
			ОказанаКонсультация = Ложь;
			Если не ЗначениеЗаполнено(ПричиныНеоказанияКонсультацииЛК) Тогда
				Сообщить("Необходимо указать причину");
				Возврат;
			КонецЕсли;
			Причина = ПричиныНеоказанияКонсультацииЛК;
			СоздатьДокументВыполнениеЛК(ОказанаКонсультация, Причина);
		Иначе
			ОказанаКонсультация = Истина;
			СоздатьДокументВыполнениеЛК(ОказанаКонсультация);
		КонецЕсли;	
	КонецЕсли;
	ПроверитьСвязьСРасписаниемЛК();
	//Лобашова 30.07.2019 89291 -
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Подписки_И_Договора_ОБД

&НаСервере
Процедура СформироватьДанныеОПодпискахИДоговорахОБД()
	
	Если НЕ ЗначениеЗаполнено(Объект.Абонент) Тогда
		Элементы.ГруппаПодпискаИТС.Видимость = Ложь;
		Возврат
	Иначе
		Элементы.ГруппаПодпискаИТС.Видимость = Истина;
	КонецЕсли;	
	
	Попытка
		Прокси = URMExchangeСервер.УстановитьПодключениеКВебСервису();
	Исключение
		Элементы.Декорация1.Заголовок   = "Не установлено подключение с ОБД.";
		Элементы.Декорация1.Доступность = Ложь;
		Возврат;
	КонецПопытки;
	
	ДанныеОБД = Прокси.CetSubscription(СокрЛП(Объект.Абонент.GUIDОБД));
	
 	Если НЕ ДанныеОБД.Result Тогда
		Элементы.Декорация1.Заголовок           = ДанныеОБД.Message;
		Элементы.Декорация1.Доступность         = Ложь;
		Элементы.ДекорацияИнформация.Видимость  = Ложь;
		Элементы.ДекорацияИнформация1.Видимость = Истина;
		Элементы.Декорация1.ЦветТекста          = Новый Цвет(255,0,0);
		Возврат
	КонецЕсли;
	
	Для Каждого строкаПодпискиXDTO Из ДанныеОБД.Subscriptions Цикл
		строкаПодписка                     = Подписки.Добавить();
		строкаПодписка.ВидПодписки         = строкаПодпискиXDTO.Type;
		строкаПодписка.ПрограммныйПродукт  = строкаПодпискиXDTO.Product;
		строкаПодписка.Серия               = строкаПодпискиXDTO.Series;
		строкаПодписка.Срок                = строкаПодпискиXDTO.Period;
		строкаПодписка.ДатаНачала          = строкаПодпискиXDTO.StartDate;
		строкаПодписка.ДатаОкончания       = строкаПодпискиXDTO.EndDate;
	КонецЦикла;
	Подписки.Сортировать("ДатаОкончания убыв");
	
	Для Каждого строкаДоговораXDTO Из ДанныеОБД.Сontracts Цикл
		строкаДоговор               = Договора.Добавить();
		строкаДоговор.Номер         = строкаДоговораXDTO.Number;
		строкаДоговор.Дата          = строкаДоговораXDTO.Date;
		строкаДоговор.ВидОперации   = строкаДоговораXDTO.OperationType;
		строкаДоговор.ДатаНачала    = строкаДоговораXDTO.StartDate;
		строкаДоговор.ДатаОкончания = строкаДоговораXDTO.EndDate;
	КонецЦикла;
	Договора.Сортировать("ДатаОкончания убыв");
	
	ЛатинскоеНаименование = ДанныеОБД.LatinName;
	Регион                = ДанныеОБД.Region;
	Группа                = ДанныеОБД.Group;
	
	ЗапросОсновнойМенеджер = Новый Запрос("ВЫБРАТЬ
	                                      |	Пользователи.Ссылка КАК Ссылка
	                                      |ИЗ
	                                      |	Справочник.Пользователи КАК Пользователи
	                                      |ГДЕ
	                                      |	Пользователи.GUIDОБД = &GUIDОБД");
	ЗапросОсновнойМенеджер.УстановитьПараметр("GUIDОБД", Новый УникальныйИдентификатор(ДанныеОБД.ManagerGUID));
	Результат = ЗапросОсновнойМенеджер.Выполнить();
	Если Результат.Пустой() ИЛИ ДанныеОБД.ManagerGUID = "00000000-0000-0000-0000-000000000000" Тогда
		ОсновнойМенеджер = ДанныеОБД.ManagerName;
	Иначе
		тзРезультат = Результат.Выгрузить();
		ОсновнойМенеджер = тзРезультат[0].Ссылка;
	КонецЕсли;
	
	Для Каждого СтрокаПродуктXDTO Из ДанныеОБД.SoftwareProducts Цикл
		СтрокаПродукт = ПрограммныеПродукты.Добавить();
		СтрокаПродукт.Продукт = СтрокаПродуктXDTO.Product;
		СтрокаПродукт.Серия   = СтрокаПродуктXDTO.Series;
	КонецЦикла;	
	
	НетДействующейПодписки = ?(Подписки.Количество() = 0 И Договора.Количество() = 0, Истина, Ложь);
	
	Если НетДействующейПодписки Тогда
		УстановитьНадписьОПодписке();
	Иначе
		ВыбиратьДействующийДоговор = Ложь;
		Если НЕ Подписки.Количество() = 0 Тогда
			Если Подписки[0].ДатаОкончания > ТекущаяДата() ИЛИ Подписки[0].ДатаОкончания = Дата(1,1,1) Тогда 
				Элементы.Декорация1.Заголовок = СокрЛП(Подписки[0].ВидПодписки) + " до " + Формат(Подписки[0].ДатаОкончания, "ДЛФ=Д");
			Иначе
				ВыбиратьДействующийДоговор = Истина;
			КонецЕсли;
		Иначе
			ВыбиратьДействующийДоговор = Истина;
		КонецЕсли;
		
		Если ВыбиратьДействующийДоговор Тогда
			Если НЕ Договора.Количество() = 0 Тогда
				Если Договора[0].ДатаОкончания >= ТекущаяДата() ИЛИ Договора[0].ДатаОкончания = Дата(1,1,1) Тогда
					Элементы.Декорация1.Заголовок = СокрЛП(Договора[0].ВидОперации) + " до " + Формат(Договора[0].ДатаОкончания, "ДЛФ=Д");
				Иначе
					УстановитьНадписьОПодписке();
				КонецЕсли;	
			Иначе
				УстановитьНадписьОПодписке();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНадписьОПодписке()
	Элементы.Декорация1.Заголовок = "Нет действующей подписки.";
	Элементы.ДекорацияИнформация.Видимость = Ложь;
	Элементы.ДекорацияИнформация1.Видимость = Истина;
	Элементы.Декорация1.ЦветТекста          = Новый Цвет(255,0,0);
КонецПроцедуры

&НаСервере
Процедура СформироватьМассивИзТаблицы(НаименованиеТаблицы,МассивДанных)
	тз = ЭтотОбъект[НаименованиеТаблицы].Выгрузить(); 
	Для Каждого СтрокаДанных Из тз Цикл
		СтруктураДанных = Новый Структура;
		Для Каждого Колонка Из тз.Колонки Цикл
			СтруктураДанных.Вставить(Колонка.Имя,СтрокаДанных[Колонка.Имя]);
		КонецЦикла;
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла;	
КонецПроцедуры	

&НаКлиенте
Процедура Декорация1Нажатие(Элемент)
	МассивПодписки = Новый Массив;
	СформироватьМассивИзТаблицы("Подписки", МассивПодписки);
	
	МассивДоговор = Новый Массив;
	СформироватьМассивИзТаблицы("Договора", МассивДоговор);
	
	МассивПродукты = Новый Массив;
	СформироватьМассивИзТаблицы("ПрограммныеПродукты", МассивПродукты);
	
	СтруктураОбщиеДанные = Новый Структура("ЛатинскоеНаименование, Группа, ОсновнойМенеджер, Регион", ЛатинскоеНаименование, Группа, ОсновнойМенеджер, Регион);
	
    ОткрытьФорму("Справочник.Абоненты.Форма.ФормаПодпискиОБД",Новый Структура("Контрагент, МассивПодписки, МассивДоговор, МассивПродукты, СтруктураОбщиеДанные",Объект.Ссылка,МассивПодписки,МассивДоговор, МассивПродукты, СтруктураОбщиеДанные));
КонецПроцедуры

&НаСервере
Процедура СостояниеПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры
#КонецОбласти

#Область РаботаСРасписаниемЛК
//Лобашова 29.07.2019 89291 +
&НаКлиенте
Процедура ПеренестиОбращение(Команда)
	ЗаписьНаЛК = ПолучитьДанныеЗаписи();
	
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Сотрудник"				, ЗаписьНаЛК.Сотрудник);
	СтруктураЭлемента.Вставить("ДатаВремяНачала"		, ЗаписьНаЛК.ДатаВремяНачала);
	СтруктураЭлемента.Вставить("ИсходнаяСтруктура"		, ЗаписьНаЛК.ИсходнаяСтруктура);
	СтруктураЭлемента.Вставить("ДатаВремяОкончания"		, ЗаписьНаЛК.ДатаВремяОкончания);
	СтруктураЭлемента.Вставить("Продолжительность"		, ЗаписьНаЛК.Продолжительность);
	СтруктураЭлемента.Вставить("Работа"					, ЗаписьНаЛК.Работа);
	СтруктураЭлемента.Вставить("Проект"					, ЗаписьНаЛК.Проект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки", "Обработка.РасписаниеЛК");
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, СтруктураЭлемента);
	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = "Обработка.РасписаниеЛК.Форма.ФормаПереносаЗаписи";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ПеренестиЗапись_Завершение", ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗапись_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	Закрыть(СтруктураВозВрата);

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеЗаписи()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасписаниеКонсультацийСрезПоследних.Период КАК Период,
		|	РасписаниеКонсультацийСрезПоследних.Регистратор КАК Регистратор,
		|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
		|	РасписаниеКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
		|	РасписаниеКонсультацийСрезПоследних.Контрагент КАК Контрагент,
		|	РасписаниеКонсультацийСрезПоследних.КонтактноеЛицо КАК КонтактноеЛицо,
		|	РасписаниеКонсультацийСрезПоследних.НеДействует КАК НеДействует,
		|	РасписаниеКонсультацийСрезПоследних.Состояние КАК Состояние,
		|	РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания КАК ДатаВремяОкончания,
		|	РасписаниеКонсультацийСрезПоследних.Продолжительность КАК Продолжительность,
		|	РасписаниеКонсультацийСрезПоследних.ВидУслуги КАК ВидУслуги,
		|	РасписаниеКонсультацийСрезПоследних.ТемаВопроса КАК ТемаВопроса,
		|	РасписаниеКонсультацийСрезПоследних.КомментарийЗаписи КАК КомментарийЗаписи,
		|	РасписаниеКонсультацийСрезПоследних.СрочнаяЗапись КАК СрочнаяЗапись,
		|	РасписаниеКонсультацийСрезПоследних.ТипЗаписи КАК ТипЗаписи,
		|	РасписаниеКонсультацийСрезПоследних.Работа КАК Работа,
		|	РасписаниеКонсультацийСрезПоследних.Проект КАК Проект,
		|	РасписаниеКонсультацийСрезПоследних.КрайнийСрок КАК КрайнийСрок,
		|	РасписаниеКонсультацийСрезПоследних.ЗапретитьЗамещение КАК ЗапретитьЗамещение,
		|	РасписаниеКонсультацийСрезПоследних.КонтактныеТелефоны КАК КонтактныеТелефоны,
		|	РасписаниеКонсультацийСрезПоследних.Событие КАК Событие,
		|	РасписаниеКонсультацийСрезПоследних.Событие.Автор КАК Автор
		|ИЗ
		|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних КАК РасписаниеКонсультацийСрезПоследних
		|ГДЕ
		|	РасписаниеКонсультацийСрезПоследних.Событие = &Событие";
	
	Запрос.УстановитьПараметр("Событие", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество() = 0 Или Объект.Ссылка = Документы.Обращение.ПустаяСсылка() Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураЭлемента = новый Структура;	
	Исходнаяструктура = Новый Структура;

	Пока РезультатЗапроса.Следующий() Цикл
		СтруктураЭлемента.Вставить("Сотрудник"				, РезультатЗапроса.сотрудник);
		СтруктураЭлемента.Вставить("ДатаВремяНачала"		, РезультатЗапроса.ДатаВремяНачала);
		СтруктураЭлемента.Вставить("ДатаВремяОкончания"		, РезультатЗапроса.ДатаВремяОкончания);
		СтруктураЭлемента.Вставить("Продолжительность"		, РезультатЗапроса.Продолжительность);
		СтруктураЭлемента.Вставить("Работа"					, РезультатЗапроса.Работа);
		СтруктураЭлемента.Вставить("Проект"					, РезультатЗапроса.Проект);
		СтруктураЭлемента.Вставить("Контрагент"				, РезультатЗапроса.Контрагент);
		СтруктураЭлемента.Вставить("КомментарийЗаписи"		, РезультатЗапроса.КомментарийЗаписи);
		СтруктураЭлемента.Вставить("КонтактноеЛицо"			, РезультатЗапроса.КонтактноеЛицо);
		СтруктураЭлемента.Вставить("ВидУслуги"				, РезультатЗапроса.ВидУслуги);
		СтруктураЭлемента.Вставить("КонтактныеТелефоны"		, РезультатЗапроса.КонтактныеТелефоны);
		СтруктураЭлемента.Вставить("ТемаВопроса"            , РезультатЗапроса.ТемаВопроса);
		СтруктураЭлемента.Вставить("ДатаВремяНачалаФакт"	, Дата(1, 1, 1, 0, 0, 0));
		СтруктураЭлемента.Вставить("ДатаВремяОкончанияФакт"	, Дата(1, 1, 1, 0, 0, 0));
		СтруктураЭлемента.Вставить("ПродолжительностьФакт"	, "");
		
		Исходнаяструктура.Вставить("Сотрудник"			, РезультатЗапроса.Автор);
		Исходнаяструктура.Вставить("ВидУслуги"			, РезультатЗапроса.ВидУслуги);
		Исходнаяструктура.Вставить("ДатаВремяНачала"	, РезультатЗапроса.ДатаВремяНачала);
		Исходнаяструктура.Вставить("ДатаВремяОкончания" , РезультатЗапроса.ДатаВремяОкончания);
		Исходнаяструктура.Вставить("КонтактноеЛицо"		, РезультатЗапроса.КонтактноеЛицо);
		Исходнаяструктура.Вставить("КомментарийЗаписи"	, РезультатЗапроса.КомментарийЗаписи);
		Исходнаяструктура.Вставить("ИтоговыйСтатус"		, РезультатЗапроса.Состояние);
		Исходнаяструктура.Вставить("Контрагент"			, РезультатЗапроса.Контрагент);
		Исходнаяструктура.Вставить("Продолжительность"	, РезультатЗапроса.Продолжительность);
		Исходнаяструктура.Вставить("Проект"				, РезультатЗапроса.Проект);
		Исходнаяструктура.Вставить("Работа"				, РезультатЗапроса.Работа);
		Исходнаяструктура.Вставить("Событие"			, РезультатЗапроса.Событие);
		Исходнаяструктура.Вставить("РегистраторЗаписи"	, РезультатЗапроса.Регистратор);
		Исходнаяструктура.Вставить("ТемаВопроса"		, РезультатЗапроса.ТемаВопроса);
		Исходнаяструктура.Вставить("Сотрудник"			, РезультатЗапроса.Сотрудник);
		Исходнаяструктура.Вставить("Состояние"			, РезультатЗапроса.Состояние);
		Исходнаяструктура.Вставить("ТипЗаписи"			, РезультатЗапроса.ТипЗаписи);
		Исходнаяструктура.Вставить("КонтактныеТелефоны" , РезультатЗапроса.КонтактныеТелефоны);
		
		СтруктураЭлемента.Вставить("ИсходнаяСтруктура"	, Исходнаяструктура);
		
	КонецЦикла;
	
	Возврат СтруктураЭлемента;	
КонецФункции

&НаКлиенте
Процедура ЗаписатьЕщеРаз(Команда)
	ЗаписьНаЛК = ПолучитьДанныеЗаписи();
	
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Сотрудник"				, ЗаписьНаЛК.Сотрудник);
	СтруктураЭлемента.Вставить("ДатаВремяНачала"		, ЗаписьНаЛК.ДатаВремяНачала);
	СтруктураЭлемента.Вставить("Контрагент"				, ЗаписьНаЛК.Контрагент);
	СтруктураЭлемента.Вставить("КонтактноеЛицо"			, ЗаписьНаЛК.КонтактноеЛицо);
	СтруктураЭлемента.Вставить("ИсходнаяСтруктура"		, ЗаписьНаЛК.ИсходнаяСтруктура);
	СтруктураЭлемента.Вставить("Работа"					, ЗаписьНаЛК.Работа);
	СтруктураЭлемента.Вставить("Проект"					, ЗаписьНаЛК.Проект);
	СтруктураЭлемента.Вставить("КомментарийЗаписи"		, ЗаписьНаЛК.КомментарийЗаписи);
	СтруктураЭлемента.Вставить("КонтактныеТелефоны"		, ЗаписьНаЛК.КонтактныеТелефоны);
	СтруктураЭлемента.Вставить("ВидУслуги"				, ЗаписьНаЛК.ВидУслуги);
	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки", "Обработка.РасписаниеЛК");
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, СтруктураЭлемента);
	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = "Обработка.РасписаниеЛК.Форма.ФормаПовторнойЗаписи";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ЗаписатьЕщеРазЗавершение", ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЕщеРазЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	
	Оповестить("Обработка_РасписаниеЛК_Форма_Обновить");

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗапись(Команда)
	ЗаписьНаЛК = ПолучитьДанныеЗаписи();
	
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("Сотрудник"				, ЗаписьНаЛК.Сотрудник);
	СтруктураЭлемента.Вставить("ДатаВремяНачала"		, ЗаписьНаЛК.ДатаВремяНачала);
	СтруктураЭлемента.Вставить("ИсходнаяСтруктура"		, ЗаписьНаЛК.ИсходнаяСтруктура);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки", "Обработка.РасписаниеЛК");
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, СтруктураЭлемента);
	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = "Обработка.РасписаниеЛК.Форма.ФормаОтменыЗаписиКлиента";//ФормаВводаПараметровОтменыЗаписи
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ОтменитьЗапись_Завершение", ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗапись_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	Закрыть(СтруктураВозВрата);
	
КонецПроцедуры

&НаКлиенте
Процедура НеОказанаКонсультацияПриИзменении(Элемент)
	Если НеОказанаКонсультация = Истина Тогда
		Элементы.ПричиныНеоказанияКонсультацииЛК.Видимость = Истина;
	Иначе
		Элементы.ПричиныНеоказанияКонсультацииЛК.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСвязьСРасписаниемЛК()
	ДоступноСотруднику = ПолучитьДоступныеДействия();
	ЗаписьНаЛК = ПолучитьДанныеЗаписи();
	ЗакрытоОбращение = ЗакрытоОбращение();
	Если ЗаписьНаЛК = Неопределено Тогда
		Элементы.ГруппаРаботаСРасписанием.Видимость = Ложь;
		Элементы.ПеревестиНаЛинию.Доступность 		= Истина;
		Элементы.Перенаправить.Доступность 			= Истина;	
	ИначеЕсли ЗакрытоОбращение Тогда
		Если ДоступноСотруднику.ДоступноСоздание или ДоступноСотруднику.ДоступноИзменение Тогда
			Элементы.ЗаписатьЕщеРаз.Видимость 			= Истина;
		КонецЕсли;
		Элементы.ПеревестиНаЛинию.Доступность		= Ложь;
		Элементы.НачалоРазговора.Доступность		= Ложь;
		Элементы.ОкончаниеРазговора.Доступность		= Ложь;
		Элементы.ОтменитьЗапись.Доступность			= Ложь;
		Элементы.НеОказанаКонсультация.Доступность 	= Ложь;
		Элементы.ПеренестиОбращение.Доступность 	= Ложь;
		Элементы.Перенаправить.Доступность 			= Ложь;
		Элементы.ПринятьВРаботу.Доступность 		= Ложь;
	Иначе
		Если ДоступноСотруднику.ДоступныВсеДействия Тогда
			Элементы.ГруппаРаботаСРасписанием.Видимость = Истина;
			Элементы.ПеревестиНаЛинию.Доступность 		= Ложь;
			Элементы.Перенаправить.Доступность 			= Ложь;
		КонецЕсли;
		Если НЕ	ДоступноСотруднику.ДоступноПерепланирование Тогда
			Элементы.ПеренестиОбращение.Видимость = Ложь;
		КонецЕсли;	
		Если НЕ	ДоступноСотруднику.ДоступноСоздание или не ДоступноСотруднику.ДоступноИзменение Тогда
			Элементы.ЗаписатьЕщеРаз.Видимость = Ложь;
		КонецЕсли;
		Если не ДоступноСотруднику.ДоступноИзменение тогда
			Элементы.ОтменитьЗапись.Видимость = Ложь;
		КонецЕсли;
		Если ДоступноСотруднику.ДоступноСоздание Тогда
			Элементы.ЗаписатьЕщеРаз.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция  ЗакрытоОбращение()
	Возврат Объект.Состояние = Перечисления.СостоянияОбращений.Закрыто ;
КонецФункции

&НаСервере
Функция СоздатьДокументВыполнениеЛК(ОказанаКонсультация, Причина = Неопределено)
	ТекущаяДата = ТекущаяДата();
	ЗаписьНаЛК = ПолучитьДанныеЗаписи();
	МассивДокументов = Новый Массив;
	
	ДокументОбъект = Документы.ВыполнениеКонсультацииЛК.СоздатьДокумент();
	ДокументОбъект.Дата						= ТекущаяДата;
	ДокументОбъект.ИсточникСоздания			= "РасписаниеЛК";
	ДокументОбъект.Сотрудник				= ЗаписьНаЛК.Сотрудник;
	ДокументОбъект.ДатаВремяНачала			= ЗаписьНаЛК.ДатаВремяНачала;
	ДокументОбъект.Контрагент				= ЗаписьНаЛК.Контрагент;
	ДокументОбъект.КонтактноеЛицо			= ЗаписьНаЛК.КонтактноеЛицо;
	ДокументОбъект.ВидУслуги				= ЗаписьНаЛК.ВидУслуги;
	ДокументОбъект.ТемаВопроса				= ЗаписьНаЛК.ТемаВопроса;
	ДокументОбъект.ДатаВремяНачалаФакт		= ДатаВремяНачалаФакт;
	ДокументОбъект.ДатаВремяОкончанияФакт	= ДатаВремяОкончанияФакт;
	ДокументОбъект.ПродолжительностьФакт	= ПродолжительностьФакт;
	Если  ОказанаКонсультация ТОгда
		ДокументОбъект.Результат			= ПредопределенноеЗначение("Перечисление.РезультатыКонсультации.ОказанаКонсультация");
	Иначе 
		ДокументОбъект.Результат			= ПредопределенноеЗначение("Перечисление.РезультатыКонсультации.НеОказанаКонсультация");
		ДокументОбъект.ПричинаНеоказания    = Причина;
	КонецЕсли;
	
	МассивДокументов.Добавить(ДокументОбъект);
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			ОтменитьТранзакцию();
			#Область Вывод_сообщений
			СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
			Если СообщенияПользователю.Количество() > 0 Тогда // есть что сказать
				ТекстОшибки = "";
				Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
					ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + СообщениеПользователю.Текст;
				КонецЦикла;
				Сообщить(ТекстОшибки);
			Иначе
				ТекстОшибки = "Ошибка при создании документа " + ДокументОбъект.Метаданные().Синоним + "" + Символы.ПС;
				Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			#КонецОбласти
			ВозВрат Ложь;
		КонецПопытки;
	КонецЦикла;
	ЗафиксироватьТранзакцию();	
КонецФункции

&НаКлиенте
Процедура НачалоРазговора(Команда)
	ДатаВремяНачалаФакт = ТекущаяДата();
	
	Элементы.НачалоРазговора		.Доступность = Ложь;
	Элементы.ОкончаниеРазговора		.Доступность = Истина;
	//Элементы.ОтменитьЗапись		.Доступность = Ложь;
	//Элементы.ПеренестиЗапись		.Доступность = Ложь;
	Элементы.ДекорацияКружок		.Видимость = Истина;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ОкончаниеРазговора;
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРазговора(Команда)
	ДатаВремяОкончанияФакт	= ТекущаяДата();
	БоР_ОбщийМодульКлиентСервер.УРВ_ДатаВремяОкончанияПриИзменении(ДатаВремяНачалаФакт, ДатаВремяОкончанияФакт, ПродолжительностьФакт, "ДатаВремяОкончанияФакт", "", , Ложь);
	
	Элементы.ОкончаниеРазговора		.Доступность = Ложь;
	Элементы.ДекорацияКружок		.Видимость = Ложь;
	
	Если ПродолжительностьФакт*60 >= 36 Тогда

		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);	
	 
	    ПоказатьВопрос(Оповещение, "Записать трудозатраты?", РежимДиалогаВопрос.ДаНет,0,,"Трудозатраты");	
	Иначе
		Сообщить("Трудозатраты по таймеру составили менее 0.01 часа (36 секунд) и не будут записаны.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
 
    Если Результат = КодВозвратаДиалога.Да Тогда
        Попытка
			Источник = Объект.Ссылка;
			ОписаниеРаботы = СтрШаблон(НСтр("ru = 'Работа над ""%1""'"), Источник);
			ДлительностьРаботы = ПродолжительностьФакт*60;
			ПараметрыОтчета = Новый Структура();
			
			ПараметрыОтчета.Вставить("ДатаРаботы", ТекущаяДата());
			ПараметрыОтчета.Вставить("ОписаниеРаботы", ОписаниеРаботы);
			ПараметрыОтчета.Вставить("Длительность", ДлительностьРаботы);
			ПараметрыОтчета.Вставить("Источник", Источник);	
			ПараметрыОтчета.Вставить("ВремяНачала", 	ДатаВремяНачалаФакт);
			ПараметрыОтчета.Вставить("ВремяОкончания",	ДатаВремяОкончанияФакт);		
			ПараметрыОтчета.Вставить("Работа", ПолучитьРаботу());
			ПараметрыОтчета.Вставить("Проект", Объект.Проект);

			ПараметрыОповещения = Неопределено;
			
			УчетВремениВызовСервера.ДобавитьВОтчет(ПараметрыОтчета, ПараметрыОповещения);
		Исключение
			Сообщить("Документ не записан, трудозатраты необходимо заполнить вручную!");
		КонецПопытки;
    Иначе
		ДатаВремяНачалаФакт 	= 0;
		ДатаВремяОкончанияФакт 	= 0;
		ПродолжительностьФакт 	= 0;
	КонецЕсли;	
 
КонецПроцедуры

Функция ПолучитьРаботу()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасписаниеКонсультацийСрезПоследних.Работа КАК Работа
		|ИЗ
		|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних КАК РасписаниеКонсультацийСрезПоследних
		|ГДЕ
		|	РасписаниеКонсультацийСрезПоследних.Событие = &Событие";
	
	Запрос.УстановитьПараметр("Событие", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Работа;
	КонецЦикла;
	Возврат Справочники.Работы.ПустаяСсылка();
КонецФункции
//Лобашова 29.07.2019 89291 -
#КонецОбласти
