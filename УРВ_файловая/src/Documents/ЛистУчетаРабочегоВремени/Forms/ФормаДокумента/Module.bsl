#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Или (Объект.ДатаНачалаПериода = Дата(1,1,1) И Объект.ДатаОкончанияПериода = Дата(1,1,1)) Тогда
		//Объект.Месяц = НачалоМесяца(ТекущаяДата());
		Объект.ДатаНачалаПериода    = НачалоМесяца(Текущаядата());
		Объект.ДатаОкончанияПериода = КонецМесяца(Текущаядата());
	КонецЕсли;	
	//ЭтотОбъект.МесяцСтрокой = Формат(Объект.Месяц, "ДФ = ""гггг ММММ""");
	Период.ДатаНачала    = НачалоМесяца(Текущаядата());
	Период.ДатаОкончания = КонецМесяца(Текущаядата());
	
	Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	РассчитьИтоговыеЗначения();
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Объект.ДатаНачалаПериода = Дата(1,1,1) И Объект.ДатаОкончанияПериода = Дата(1,1,1) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен период!";
		Сообщение.Поле = "Период";
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РаботыКоличествоЧасовПриИзменении(Элемент)
	РассчитьИтоговыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаПриИзменении(Элемент)
	РассчитьИтоговыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура РаботыЗаданиеПриИзменении(Элемент)
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	ЗаполнитьДанныеПоЗаданию(ТекДанные.НомерСтроки - 1);
КонецПроцедуры

&НаКлиенте
Процедура РаботыЗаданиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь; 
	ОткрытьФорму("Документ.Задание.Форма.ФормаВыбораЗадания", Новый Структура("Сотрудник", Объект.Сотрудник),,,,, Новый ОписаниеОповещения("РаботыЗаданиеНачалоВыбораЗавершение", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Не Копирование И НоваяСтрока Тогда
		ТекДанные = Элементы.Работы.ТекущиеДанные;
		ТекДанные.Дата = ТекущаяДата();
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

&НаСервере
Процедура РассчитьИтоговыеЗначения()
	ЭтотОбъект.СуммаВсего = Объект.Работы.Итог("Сумма");
	ЭтотОбъект.ЧасыСумма  = Объект.Работы.Итог("КоличествоЧасов");
КонецПроцедуры	

&НаСервере
Процедура УстановитьВидимостьДоступность()
	ДоступноЗакрытиеЛУРВа          = РольДоступна("Координатор") или РольДоступна("ПолныеПрава");
	Элементы.Ответственный.Доступность = РольДоступна("ПолныеПрава");
	Элементы.Сдан.Доступность      = ДоступноЗакрытиеЛУРВа;
	Элементы.Закрыт.Доступность    = ДоступноЗакрытиеЛУРВа;
	Элементы.ДатаСдачи.Доступность = ДоступноЗакрытиеЛУРВа;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоЗаданию(Индекс)
	 Объект.Работы[Индекс].Проект =  Объект.Работы[Индекс].Задание.Проект;
	 Объект.Контрагент            =  Объект.Работы[Индекс].Задание.Контрагент;
КонецПроцедуры	

&НаКлиенте
Процедура РаботыЗаданиеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    ТекДанные = Элементы.Работы.ТекущиеДанные;
    ТекДанные.Задание = Результат;
	ЗаполнитьДанныеПоЗаданию(ТекДанные.НомерСтроки - 1);
КонецПроцедуры

&НаКлиенте
Процедура РаботыПроектПриИзменении(Элемент)
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Проект) Тогда
		ТекДанные.ЭтапПроекта = УРВСервер.НайтиОсновнойЭтапДляПодстановкиВДокументы(ТекДанные.Проект);
	Иначе
		ТекДанные.ЭтапПроекта = ПредопределенноеЗначение("Справочник.ЭтапыПроектов.ПустаяСсылка");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПринятымЧасам(Команда)
	
	Если Объект.Проведен Тогда
		Предупреждение("Невозможно заполнение в проведенном документе!");
		Возврат;
	КонецЕсли;
	
	Если Объект.ДатаНачалаПериода = Дата(1,1,1) ИЛИ Объект.ДатаОкончанияПериода = Дата(1,1,1) Тогда
		Предупреждение("Невозможно заполнение без указания периода");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоПринятымЧасамНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПринятымЧасамНаСервере()
	
	Запрос = Новый Запрос;
	//Лобашова 17.06.2019 87675 +
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПринятыеЧасыОстатки.Сотрудник КАК Сотрудник,
		|	ПринятыеЧасыОстатки.ЧасыОстаток КАК КоличествоЧасов,
		|	ПринятыеЧасыОстатки.ЭтапПроекта КАК ЭтапПроекта,
		|	ОбращениеВнешниеОбращения.Обращение КАК ОбращениеРодитель,
		|	УчетФактическихДанныхВремя.Описание КАК Описание,
		|	ПринятыеЧасыОстатки.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПринятыеЧасыОстатки.Дата КАК Дата
		|ПОМЕСТИТЬ ВнутренниеОбращения
		|ИЗ
		|	РегистрНакопления.ПринятыеЧасы.Остатки(
		|			,
		|			Проект = &Проект
		|				И (Сотрудник = &Сотрудник
		|					ИЛИ &Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|				И (Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)) КАК ПринятыеЧасыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УчетФактическихДанных.Время КАК УчетФактическихДанныхВремя
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Обращение.ВнешниеОбращения КАК ОбращениеВнешниеОбращения
		|			ПО УчетФактическихДанныхВремя.Обращение = ОбращениеВнешниеОбращения.Ссылка
		|		ПО ПринятыеЧасыОстатки.ИдентификаторСтроки = УчетФактическихДанныхВремя.ИдентификаторСтроки
		|			И (УчетФактическихДанныхВремя.Ссылка.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЛистУчетаРабочегоВремени.Работы КАК ЛУРВРаботы
		|		ПО ПринятыеЧасыОстатки.ИдентификаторСтроки = ЛУРВРаботы.ИдентификаторСтроки
		|			И (ЛУРВРаботы.Ссылка.Проведен)
		|ГДЕ
		|	ЛУРВРаботы.Ссылка ЕСТЬ NULL
		|	И УчетФактическихДанныхВремя.Обращение.ВнутреннееОбращение
		|	И УчетФактическихДанныхВремя.Обращение.ИмеетСвязьСВнешними
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПринятыеЧасыОстатки.Сотрудник КАК Сотрудник,
		|	ПринятыеЧасыОстатки.Дата КАК Дата,
		|	ПринятыеЧасыОстатки.ЧасыОстаток КАК КоличествоЧасов,
		|	ПринятыеЧасыОстатки.ЭтапПроекта КАК ЭтапПроекта,
		|	ПринятыеЧасыОстатки.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	УчетФактическихДанныхВремя.Описание КАК Описание,
		|	УчетФактическихДанныхВремя.Задача КАК Задача,
		|	УчетФактическихДанныхВремя.Обращение КАК Обращение
		|ПОМЕСТИТЬ КлиентскиеОбращения
		|ИЗ
		|	РегистрНакопления.ПринятыеЧасы.Остатки(
		|			,
		|			Проект = &Проект
		|				И (Сотрудник = &Сотрудник
		|					ИЛИ &Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|				И (Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)) КАК ПринятыеЧасыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УчетФактическихДанных.Время КАК УчетФактическихДанныхВремя
		|		ПО ПринятыеЧасыОстатки.ИдентификаторСтроки = УчетФактическихДанныхВремя.ИдентификаторСтроки
		|			И (УчетФактическихДанныхВремя.Ссылка.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЛистУчетаРабочегоВремени.Работы КАК ЛУРВРаботы
		|		ПО ПринятыеЧасыОстатки.ИдентификаторСтроки = ЛУРВРаботы.ИдентификаторСтроки
		|			И (ЛУРВРаботы.Ссылка.Проведен)
		|ГДЕ
		|	ЛУРВРаботы.Ссылка ЕСТЬ NULL
		|	И (НЕ УчетФактическихДанныхВремя.Обращение.ВнутреннееОбращение
		|			ИЛИ УчетФактическихДанныхВремя.Задача <> ЗНАЧЕНИЕ(справочник.задачи.пустаяссылка)
		|			ИЛИ УчетФактическихДанныхВремя.Задача = ЗНАЧЕНИЕ(справочник.задачи.пустаяссылка)
		|				И УчетФактическихДанныхВремя.Обращение = ЗНАЧЕНИЕ(Документ.Обращение.пустаяссылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнутренниеОбращения.Сотрудник КАК Сотрудник,
		|	ВнутренниеОбращения.КоличествоЧасов КАК КоличествоЧасов,
		|	ВнутренниеОбращения.ЭтапПроекта КАК ЭтапПроекта,
		|	ВнутренниеОбращения.Дата КАК Дата,
		|	ВнутренниеОбращения.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВнутренниеОбращения.Описание КАК Описание,
		|	NULL КАК Задача,
		|	ВнутренниеОбращения.ОбращениеРодитель КАК Обращение
		|ИЗ
		|	ВнутренниеОбращения КАК ВнутренниеОбращения
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КлиентскиеОбращения.Сотрудник,
		|	КлиентскиеОбращения.КоличествоЧасов,
		|	КлиентскиеОбращения.ЭтапПроекта,
		|	КлиентскиеОбращения.Дата,
		|	КлиентскиеОбращения.ИдентификаторСтроки,
		|	КлиентскиеОбращения.Описание,
		|	КлиентскиеОбращения.Задача,
		|	КлиентскиеОбращения.Обращение
		|ИЗ
		|	КлиентскиеОбращения КАК КлиентскиеОбращения" ;
		
		//Запрос.Текст =
		//"ВЫБРАТЬ
		//|	ПринятыеЧасыОстатки.Сотрудник КАК Сотрудник,
		//|	ПринятыеЧасыОстатки.Дата КАК Дата,
		//|	ПринятыеЧасыОстатки.ЧасыОстаток КАК КоличествоЧасов,
		//|	ПринятыеЧасыОстатки.ЭтапПроекта КАК ЭтапПроекта,
		//|	ПринятыеЧасыОстатки.ИдентификаторСтроки КАК ИдентификаторСтроки,
		//|	УчетФактическихДанныхВремя.Описание КАК Описание,
		//|	УчетФактическихДанныхВремя.Задача КАК Задача
		////Лобашова 31.05.2019 87589 +
		//|	,
		//|	УчетФактическихДанныхВремя.Обращение КАК Обращение
		////Лобашова 31.05.2019 87589 -
		//|ИЗ
		//|	РегистрНакопления.ПринятыеЧасы.Остатки(
		//|			,
		//|			Проект = &Проект
		//|				И (Сотрудник = &Сотрудник
		//|					ИЛИ &Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		//|				И (Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)) КАК ПринятыеЧасыОстатки
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УчетФактическихДанных.Время КАК УчетФактическихДанныхВремя
		//|		ПО ПринятыеЧасыОстатки.ИдентификаторСтроки = УчетФактическихДанныхВремя.ИдентификаторСтроки
		//|			И (УчетФактическихДанныхВремя.Ссылка.Проведен)
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЛистУчетаРабочегоВремени.Работы КАК ЛУРВРаботы
		//|		ПО ПринятыеЧасыОстатки.ИдентификаторСтроки = ЛУРВРаботы.ИдентификаторСтроки
		//|			И (ЛУРВРаботы.Ссылка.Проведен)
		//|ГДЕ
		//|	ЛУРВРаботы.Ссылка ЕСТЬ NULL
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Дата";
		
	//Лобашова 17.06.2019 87675 -

	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Объект.ДатаНачалаПериода));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Объект.ДатаОкончанияПериода));
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Объект.Работы.Очистить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = Объект.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);

		НоваяСтрока.ВремяНачала = ВыборкаДетальныеЗаписи.Дата;
		НоваяСтрока.ВремяОкончания = ЧасыВоВремя(ВыборкаДетальныеЗаписи.КоличествоЧасов, НоваяСтрока.ВремяНачала);
		НоваяСтрока.Время = ЧасыВоВремя(ВыборкаДетальныеЗаписи.КоличествоЧасов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Направление = 1 Тогда
		Объект.Месяц = КонецМесяца(Объект.Месяц) + 1;
	Иначе
		Объект.Месяц = НачалоМесяца(НачалоМесяца(Объект.Месяц) - 1);
	КонецЕсли;
	
	ЭтотОбъект.МесяцСтрокой = Формат(Объект.Месяц, "ДФ = ""гггг ММММ""");
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	Объект.ДатаНачалаПериода    = Период.ДатаНачала;
	Объект.ДатаОкончанияПериода = Период.ДатаОкончания;
КонецПроцедуры

&НаСервере
Функция ЧасыВоВремя(Часы, ДатаВремя = '00010101')
	Время = ДатаВремя + Часы * 3600;
	Возврат ?(Секунда(Время) < 30, НачалоМинуты(Время), КонецМинуты(Время) + 1);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЛУРВ(Команда)
	
	Объект.ДанныеЛУРВ.Очистить();
	Для Каждого СтрокаРабот Из Объект.Работы Цикл
		НоваяСтрока = Объект.ДанныеЛУРВ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРабот);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВремяНачалаПриИзменении(Элемент)
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекДанные.ВремяНачала = Дата(1,1,1) ИЛИ ТекДанные.ВремяОкончания = Дата(1,1,1) тогда
		Возврат
	КонецЕсли;
	ТекДанные.КоличествоЧасов = РассчитатьКоличествоЧасов(ТекДанные.ВремяНачала, ТекДанные.ВремяОкончания);
	ТекДанные.Время = ЧасыВоВремя(ТекДанные.КоличествоЧасов);
	ОбновитьЗатраченноеВремяЗаДень("Работы");
КонецПроцедуры

&НаКлиенте
Процедура РаботыВремяОкончанияПриИзменении(Элемент)
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекДанные.ВремяНачала = Дата(1,1,1) ИЛИ ТекДанные.ВремяОкончания = Дата(1,1,1) тогда
		Возврат
	КонецЕсли;
	Если ТекДанные.ВремяНачала > ТекДанные.ВремяОкончания Тогда
		Сообщение       = Новый СообщениеПользователю;
		Сообщение.Текст = "Время окончания не может быть меньше времени начала.";
		Сообщение.Поле  = "Объект.Работы[" + (ТекДанные.НомерСтроки - 1) + "].ВремяОкончания";
		Сообщение.Сообщить();
	КонецЕсли;
	ТекДанные.КоличествоЧасов = РассчитатьКоличествоЧасов(ТекДанные.ВремяНачала, ТекДанные.ВремяОкончания);
	ТекДанные.Время = ЧасыВоВремя(ТекДанные.КоличествоЧасов);
	ОбновитьЗатраченноеВремяЗаДень("Работы");
КонецПроцедуры

&НаКлиенте
Процедура РаботыВремяПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрока.ВремяНачала = Дата(1,1,1) ИЛИ ТекущаяСтрока.ВремяОкончания = Дата(1,1,1) ИЛИ ТекущаяСтрока.Часов = 0 тогда
		Возврат
	КонецЕсли;
	Часов = РассчитатьКоличествоЧасов(ТекущаяСтрока.ВремяНачала, ТекущаяСтрока.ВремяОкончания);
	Если Часов <> ТекущаяСтрока.КоличествоЧасов Тогда
		Сообщение       = Новый СообщениеПользователю;
		Сообщение.Текст = "Временной интервал не соответствует количеству указанных часов.";
		Сообщение.Поле  = "Объект.Работы[" + (ТекущаяСтрока.НомерСтроки - 1) + "].ВремяНачала";
		Сообщение.Сообщить();
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Функция РассчитатьКоличествоЧасов(ДатаНачала,ДатаОкончания)
	Запрос = Новый Запрос("ВЫБРАТЬ
  	                      |	ЕСТЬNULL(РАЗНОСТЬДАТ(&ДатаНачала, &ДатаОкончания, МИНУТА), 0) КАК Минут");
	Запрос.УстановитьПараметр("ДатаНачала"    , ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания" , ДатаОкончания);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат 0
	КонецЕсли;
	Возврат Результат[0].Минут / 60
КонецФункции	

&НаКлиенте
Процедура ОбновитьЗатраченноеВремяЗаДень(ТЧ)
	СуммаЗатрачено = 0;
	Для Каждого СтрокаВремя из Объект[ТЧ] Цикл
		Если НачалоДня(СтрокаВремя.Дата) = НачалоДня(Текущаядата()) Тогда
			СуммаЗатрачено = СуммаЗатрачено + СтрокаВремя.КоличествоЧасов;
		КонецЕсли;
	КонецЦикла;
	ЗатраченоВремениЗаДень = СуммаЗатрачено;
КонецПроцедуры	


&НаКлиенте
Процедура ДанныеЛУРВВремяНачалаПриИзменении(Элемент)
	ТекДанные = Элементы.ДанныеЛУРВ.ТекущиеДанные;
	Если ТекДанные.ВремяНачала = Дата(1,1,1) ИЛИ ТекДанные.ВремяОкончания = Дата(1,1,1) тогда
		Возврат
	КонецЕсли;
	ТекДанные.КоличествоЧасов = РассчитатьКоличествоЧасов(ТекДанные.ВремяНачала, ТекДанные.ВремяОкончания);
	ТекДанные.Время = ЧасыВоВремя(ТекДанные.КоличествоЧасов);
	ОбновитьЗатраченноеВремяЗаДень("ДанныеЛУРВ");
КонецПроцедуры


&НаКлиенте
Процедура ДанныеЛУРВВремяОкончанияПриИзменении(Элемент)
	ТекДанные = Элементы.ДанныеЛУРВ.ТекущиеДанные;
	Если ТекДанные.ВремяНачала = Дата(1,1,1) ИЛИ ТекДанные.ВремяОкончания = Дата(1,1,1) тогда
		Возврат
	КонецЕсли;
	Если ТекДанные.ВремяНачала > ТекДанные.ВремяОкончания Тогда
		Сообщение       = Новый СообщениеПользователю;
		Сообщение.Текст = "Время окончания не может быть меньше времени начала.";
		Сообщение.Поле  = "Объект.ДанныеЛУРВ[" + (ТекДанные.НомерСтроки - 1) + "].ВремяОкончания";
		Сообщение.Сообщить();
	КонецЕсли;
	ТекДанные.КоличествоЧасов = РассчитатьКоличествоЧасов(ТекДанные.ВремяНачала, ТекДанные.ВремяОкончания);
	ТекДанные.Время = ЧасыВоВремя(ТекДанные.КоличествоЧасов);
	ОбновитьЗатраченноеВремяЗаДень("ДанныеЛУРВ");
КонецПроцедуры


&НаКлиенте
Процедура ДанныеЛУРВВремяПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрока.ВремяНачала = Дата(1,1,1) ИЛИ ТекущаяСтрока.ВремяОкончания = Дата(1,1,1) ИЛИ ТекущаяСтрока.Часов = 0 тогда
		Возврат
	КонецЕсли;
	Часов = РассчитатьКоличествоЧасов(ТекущаяСтрока.ВремяНачала, ТекущаяСтрока.ВремяОкончания);
	Если Часов <> ТекущаяСтрока.КоличествоЧасов Тогда
		Сообщение       = Новый СообщениеПользователю;
		Сообщение.Текст = "Временной интервал не соответствует количеству указанных часов.";
		Сообщение.Поле  = "Объект.ДанныеЛУРВ[" + (ТекущаяСтрока.НомерСтроки - 1) + "].ВремяНачала";
		Сообщение.Сообщить();
	КонецЕсли;	
КонецПроцедуры


#КонецОбласти