
&НаКлиенте
Процедура ДетальноеРасписаниеПриИзменении(Элемент)
	УстановитьВидимостьДоступность(Элементы, Объект);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ОтборПоСотруднику = Новый Структура;
		ОтборПоСотруднику.Вставить("Сотрудник", Сотрудник);
		Элементы.РасписаниеДетально.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборПоСотруднику);
		Элементы.Расписание.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборПоСотруднику);
	Иначе
		Элементы.РасписаниеДетально.ОтборСтрок = Неопределено;
		Элементы.Расписание.ОтборСтрок = Неопределено;
	КонецЕсли;
КонецПроцедуры

#Область Механизм_свертки_детального_расписания

&НаКлиенте
Процедура ПопытатьсяСвернутьДетальноеРасписание(Команда)
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = НачалоДня(Объект.Дата);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = НачалоДня(ТекущаяДата());
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;
	АдресТекущейТаблицы = ПоместитьДетальноеРасписаниеВХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасписания"		, Объект.ДатаНачала);
	ПараметрыФормы.Вставить("АдресТекущейТаблицы"	, АдресТекущейТаблицы);
	
	//ОписаниеОповещения = Новый ОписаниеОповещения("ПопытатьсяСвернутьДетальноеРасписаниеЗавершение", ЭтаФорма);
	//ОткрытьФорму("Документ.УстановкаРасписанияЛК.Форма.ФормаЗаполнения", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = "Документ.УстановкаРасписанияЛК.Форма.ФормаЗаполнения";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ПопытатьсяСвернутьДетальноеРасписаниеЗавершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПопытатьсяСвернутьДетальноеРасписаниеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресТаблицы = Результат;
	Если Не ЭтоАдресВременногоХранилища(АдресТаблицы) Тогда
		ВозВрат;
	КонецЕсли;
	
	ЗаполнитьРасписаниеИзХранилища(АдресТаблицы);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасписаниеИзХранилища(АдресТаблицы)
	ТаблицаПериодов = ПолучитьИзВременногоХранилища(АдресТаблицы);
	Если ТипЗнч(ТаблицаПериодов) = Тип("ТаблицаЗначений") Тогда
		Объект.Расписание.Загрузить(ТаблицаПериодов);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПоместитьДетальноеРасписаниеВХранилище()
	ТаблицаПериодов = Объект.РасписаниеДетально.Выгрузить();
	ВозВрат ПоместитьВоВременноеХранилище(ТаблицаПериодов, ЭтаФорма.УникальныйИдентификатор);
КонецФункции

#КонецОбласти

#Область Пересчеты_в_ТЧ

&НаКлиенте
Процедура РасписаниеДетальноДатаВремяОкончанияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.РасписаниеДетально.ТекущиеДанные;
	Продолжительность = ТекущиеДанные.ДатаВремяОкончания - НачалоДня(ТекущиеДанные.ДатаВремяОкончания);
	ШагСеткиМин = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания();
	ШагСеткиСек = ШагСеткиМин * 60;
	ОстатокОтДеления = Продолжительность % ШагСеткиСек;
	Если ОстатокОтДеления <> 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Время должно быть кратно " + ШагСеткиМин + " минутам!";
		Сообщение.Поле = "РасписаниеДетально[" + (ТекущиеДанные.НомерСтроки - 1) + "].ДатаВремяОкончания";
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.Сообщить();
		Продолжительность = Макс(Окр(Продолжительность/ШагСеткиСек)*ШагСеткиСек, ШагСеткиСек);
		ТекущиеДанные.ДатаВремяОкончания = НачалоДня(ТекущиеДанные.ДатаВремяОкончания) + Продолжительность;
	КонецЕсли;
	ТекущиеДанные.Продолжительность = (ТекущиеДанные.ДатаВремяОкончания - ТекущиеДанные.ДатаВремяНачала)/60;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеДетальноПродолжительностьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.РасписаниеДетально.ТекущиеДанные;
	Продолжительность = ТекущиеДанные.Продолжительность;
	ШагСеткиМин = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания();
	ОстатокОтДеления = Продолжительность % ШагСеткиМин;
	Если ОстатокОтДеления <> 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Продолжительность должна быть кратна " + ШагСеткиМин + " минутам!";
		Сообщение.Поле = "РасписаниеДетально[" + (ТекущиеДанные.НомерСтроки - 1) + "].Продолжительность";
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.Сообщить();
		ТекущиеДанные.Продолжительность = Макс(Окр(Продолжительность/ШагСеткиМин)*ШагСеткиМин, ШагСеткиМин);
	КонецЕсли;
	ТекущиеДанные.ДатаВремяОкончания = ТекущиеДанные.ДатаВремяНачала + ТекущиеДанные.Продолжительность * 60;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеДетальноДатаВремяНачалаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.РасписаниеДетально.ТекущиеДанные;
	Продолжительность = ТекущиеДанные.ДатаВремяНачала - НачалоДня(ТекущиеДанные.ДатаВремяНачала);
	ШагСеткиМин = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания();
	ШагСеткиСек = ШагСеткиМин * 60;
	ОстатокОтДеления = Продолжительность % ШагСеткиСек;
	Если ОстатокОтДеления <> 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Время должно быть кратно " + ШагСеткиМин + " минутам!";
		Сообщение.Поле = "РасписаниеДетально[" + (ТекущиеДанные.НомерСтроки - 1) + "].ДатаВремяНачала";
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.Сообщить();
		Продолжительность = Макс(Окр(Продолжительность/ШагСеткиСек)*ШагСеткиСек, ШагСеткиСек);
		ТекущиеДанные.ДатаВремяНачала = НачалоДня(ТекущиеДанные.ДатаВремяНачала) + Продолжительность;
	КонецЕсли;
	ТекущиеДанные.ДатаВремяОкончания = ТекущиеДанные.ДатаВремяНачала + ТекущиеДанные.Продолжительность * 60;
КонецПроцедуры
#КонецОбласти

#Область Обработка_изменений_в_шапке
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = НачалоДня(Объект.Дата);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаНачала = Объект.ДатаОкончания;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьВидимостьДоступность(Элементы, Объект);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Работы.Ссылка КАК Работа,
	|	Работы.Отсутствие
	|ИЗ
	|	Справочник.Работы КАК Работы";
	спрРаботы.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// БоР :  21.01.2017 2:21:11
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Элементы, Объект) Экспорт
	Элементы.Расписание			.Видимость = Не Объект.ДетальноеРасписание;
	Элементы.ДатаНачала			.Видимость = Не Объект.ДетальноеРасписание;
	Элементы.ДатаОкончания		.Видимость = Не Объект.ДетальноеРасписание;
	Элементы.РасписаниеДетально	.Видимость = Объект.ДетальноеРасписание;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПродолжительностьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Расписание.ТекущиеДанные;
	Продолжительность = ТекущиеДанные.Продолжительность;
	ШагСеткиМин = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания();
	ОстатокОтДеления = Продолжительность % ШагСеткиМин;
	Если ОстатокОтДеления <> 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Продолжительность должна быть кратна " + ШагСеткиМин + " минутам!";
		Сообщение.Поле = "Расписание[" + (ТекущиеДанные.НомерСтроки - 1) + "].Продолжительность";
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.Сообщить();
		ТекущиеДанные.Продолжительность = Макс(Окр(Продолжительность/ШагСеткиМин)*ШагСеткиМин, ШагСеткиМин);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеВремяНачалаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Расписание.ТекущиеДанные;
	Продолжительность = ТекущиеДанные.ВремяНачала - НачалоДня(ТекущиеДанные.ВремяНачала);
	ШагСеткиМин = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания();
	ШагСеткиСек = ШагСеткиМин * 60;
	ОстатокОтДеления = Продолжительность % ШагСеткиСек;
	Если ОстатокОтДеления <> 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Время должно быть кратно " + ШагСеткиМин + " минутам!";
		Сообщение.Поле = "Расписание[" + (ТекущиеДанные.НомерСтроки - 1) + "].ВремяНачала";
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.Сообщить();
		Продолжительность = Макс(Окр(Продолжительность/ШагСеткиСек)*ШагСеткиСек, ШагСеткиСек);
		ТекущиеДанные.ВремяНачала = НачалоДня(ТекущиеДанные.ВремяНачала) + Продолжительность;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеВремяОкончанияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Расписание.ТекущиеДанные;
	Продолжительность = ТекущиеДанные.ВремяОкончания - НачалоДня(ТекущиеДанные.ВремяОкончания);
	ШагСеткиМин = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания();
	ШагСеткиСек = ШагСеткиМин * 60;
	ОстатокОтДеления = Продолжительность % ШагСеткиСек;
	Если ОстатокОтДеления <> 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Время должно быть кратно " + ШагСеткиМин + " минутам!";
		Сообщение.Поле = "Расписание[" + (ТекущиеДанные.НомерСтроки - 1) + "].ВремяОкончания";
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.Сообщить();
		Продолжительность = Макс(Окр(Продолжительность/ШагСеткиСек)*ШагСеткиСек, ШагСеткиСек);
		ТекущиеДанные.ВремяОкончания = НачалоДня(ТекущиеДанные.ВремяОкончания) + Продолжительность;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеВремяНачалаОбедаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Расписание.ТекущиеДанные;
	Продолжительность = ТекущиеДанные.ВремяНачалаОбеда - НачалоДня(ТекущиеДанные.ВремяНачалаОбеда);
	ШагСеткиМин = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания();
	ШагСеткиСек = ШагСеткиМин * 60;
	ОстатокОтДеления = Продолжительность % ШагСеткиСек;
	Если ОстатокОтДеления <> 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Время должно быть кратно " + ШагСеткиМин + " минутам!";
		Сообщение.Поле = "Расписание[" + (ТекущиеДанные.НомерСтроки - 1) + "].ВремяНачалаОбеда";
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.Сообщить();
		Продолжительность = Макс(Окр(Продолжительность/ШагСеткиСек)*ШагСеткиСек, ШагСеткиСек);
		ТекущиеДанные.ВремяНачалаОбеда = НачалоДня(ТекущиеДанные.ВремяНачалаОбеда) + Продолжительность;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеВремяОкончанияОбедаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Расписание.ТекущиеДанные;
	Продолжительность = ТекущиеДанные.ВремяОкончанияОбеда - НачалоДня(ТекущиеДанные.ВремяОкончанияОбеда);
	ШагСеткиМин = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания();
	ШагСеткиСек = ШагСеткиМин * 60;
	ОстатокОтДеления = Продолжительность % ШагСеткиСек;
	Если ОстатокОтДеления <> 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Время должно быть кратно " + ШагСеткиМин + " минутам!";
		Сообщение.Поле = "Расписание[" + (ТекущиеДанные.НомерСтроки - 1) + "].ВремяОкончанияОбеда";
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.Сообщить();
		Продолжительность = Макс(Окр(Продолжительность/ШагСеткиСек)*ШагСеткиСек, ШагСеткиСек);
		ТекущиеДанные.ВремяОкончанияОбеда = НачалоДня(ТекущиеДанные.ВремяОкончанияОбеда) + Продолжительность;
	КонецЕсли;
КонецПроцедуры

//--------------------------------------------------------------------------------------------------
#Область ПроверкаОбязательностиПроекта

&НаКлиенте
Функция ПроектОбязателенДляРаботы(Работа)

	Если НЕ ЗначениеЗаполнено(Работа) Тогда
		Возврат Ложь;
	Иначе
		строкиСпрРаботы	= спрРаботы.НайтиСтроки(Новый Структура("Работа, Отсутствие", Работа, Ложь));
		Возврат (строкиСпрРаботы.Количество() > 0);
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура РасписаниеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные			= Элементы.Расписание.ТекущиеДанные;
	
	Если ПроектОбязателенДляРаботы(ТекущиеДанные.Работа) И Не ЗначениеЗаполнено(ТекущиеДанные.Проект) Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст			= "Необходимо указать проект!";
		Сообщение.Поле			= "Расписание[" + (ТекущиеДанные.НомерСтроки - 1) + "].Проект";
		Сообщение.ПутьКДанным	= "Объект";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеДетальноПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные			= Элементы.РасписаниеДетально.ТекущиеДанные;
	
	Если ПроектОбязателенДляРаботы(ТекущиеДанные.Работа) И Не ЗначениеЗаполнено(ТекущиеДанные.Проект) Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст			= "Необходимо указать проект!";
		Сообщение.Поле			= "РасписаниеДетально[" + (ТекущиеДанные.НомерСтроки - 1) + "].Проект";
		Сообщение.ПутьКДанным	= "Объект";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

