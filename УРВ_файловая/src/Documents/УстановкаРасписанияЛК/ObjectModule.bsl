
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ДополнительныеСвойства.Свойство("Отказ") И ДополнительныеСвойства.Отказ = Истина Тогда
		Отказ = ДополнительныеСвойства.Отказ;
		ВозВрат;
	КонецЕсли;
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		ВозВрат;
	КонецЕсли;

	Движения.РасписаниеКонсультаций.Очистить();
	Движения.РасписаниеКонсультаций.Записать();
	ДвиженияРасписаниеКонсультаций = ПолучитьДвиженияРасписаниеКонсультаций(РежимПроведения, Отказ);
	Если ДвиженияРасписаниеКонсультаций = Неопределено Тогда
		Отказ = Истина;
		ВозВрат;
	КонецЕсли;
	Движения.РасписаниеКонсультаций.Загрузить(ДвиженияРасписаниеКонсультаций);
	Движения.РасписаниеКонсультаций.Записывать = Истина;
	
	//КонтрольПовторногоРасписания(Отказ); // да, название так себе...
	
	Движения.Записать();
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		ВозВрат;
	КонецЕсли;
	
	БоР_ОбщийМодуль.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если Не ДетальноеРасписание Тогда
		Если Не ЗаполнитьРасписаниеДетально() Тогда
			Отказ = Истина;
		КонецЕсли;
	Иначе//тупо, но как-то не придумаю, как быстее
		Для каждого СтрокаРасписаниеДетально Из РасписаниеДетально Цикл
			СтрокаРасписаниеДетально.НомерСтрокиСводногоРасписания = 0;
			Если ДатаНачала > НачалоДня(СтрокаРасписаниеДетально.ДатаВремяНачала) ИЛИ Не ЗначениеЗаполнено(ДатаНачала) Тогда
				ДатаНачала = НачалоДня(СтрокаРасписаниеДетально.ДатаВремяНачала);
			КонецЕсли;
			Если ДатаОкончания < НачалоДня(СтрокаРасписаниеДетально.ДатаВремяОкончания) ИЛИ Не ЗначениеЗаполнено(ДатаОкончания) Тогда
				ДатаОкончания = НачалоДня(СтрокаРасписаниеДетально.ДатаВремяОкончания);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Автор) Тогда
		Автор = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = ТекущаяДата();
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьДвиженияРасписаниеКонсультаций(РежимПроведения, Отказ) Экспорт
	
	#Область ПараметрыСообщения
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Сообщение_УстановитьДанные"	, ЭтотОбъект);
	#КонецОбласти	

	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.НомерСтрокиСводногоРасписания КАК НомерСтрокиСводногоРасписания,
	|	ТабличнаяЧасть.Сотрудник,
	|	ТабличнаяЧасть.ДатаВремяНачала,
	|	ТабличнаяЧасть.ДатаВремяОкончания,
	|	ТабличнаяЧасть.Продолжительность,
	|	ТабличнаяЧасть.Работа,
	|	ТабличнаяЧасть.Проект
	|ПОМЕСТИТЬ ВТ_ТабличнаяЧасть
	|ИЗ
	|	Документ.УстановкаРасписанияЛК.РасписаниеДетально КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТабличнаяЧасть.Сотрудник,
	|	ТабличнаяЧасть.ДатаВремяНачала,
	|	ТабличнаяЧасть.ДатаВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасписаниеКонсультацийСрезПоследних.Сотрудник,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РасписаниеКонсультацийСрезПоследних.Продолжительность,
	|	РасписаниеКонсультацийСрезПоследних.Состояние,
	|	РасписаниеКонсультацийСрезПоследних.Контрагент,
	|	РасписаниеКонсультацийСрезПоследних.КонтактноеЛицо
	|ПОМЕСТИТЬ ВТРасписаниеЗаПериод
	|ИЗ
	|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних(
	|			&МоментВремени,
	|			Сотрудник В (&МассивСотрудников)
	|				И ДатаВремяНачала >= &НачалоПериода
	|				И ДатаВремяНачала <= &КонецПериода) КАК РасписаниеКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
	|	И РасписаниеКонсультацийСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Свободно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасписаниеКонсультацийСрезПоследних.Сотрудник,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТабличнаяЧасть.НомерСтрокиСводногоРасписания КАК НомерСтрокиСводногоРасписания,
	|	ВТ_ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ВТ_ТабличнаяЧасть.Сотрудник КАК Сотрудник,
	|	ВТ_ТабличнаяЧасть.ДатаВремяНачала КАК ДатаВремяНачала,
	|	ВТ_ТабличнаяЧасть.ДатаВремяОкончания,
	|	ВТ_ТабличнаяЧасть.Продолжительность,
	|	ВТРасписаниеЗаПериод.ДатаВремяНачала КАК П_ДатаВремяНачала,
	|	ВТРасписаниеЗаПериод.ДатаВремяОкончания КАК П_ДатаВремяОкончания,
	|	ВТРасписаниеЗаПериод.Состояние КАК П_Состояние,
	|	ВТРасписаниеЗаПериод.Контрагент КАК П_Контрагент,
	|	ВТРасписаниеЗаПериод.КонтактноеЛицо КАК П_КонтактноеЛицо
	|ПОМЕСТИТЬ ВТПересечения
	|ИЗ
	|	ВТРасписаниеЗаПериод КАК ВТРасписаниеЗаПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТабличнаяЧасть КАК ВТ_ТабличнаяЧасть
	|		ПО ВТРасписаниеЗаПериод.Сотрудник = ВТ_ТабличнаяЧасть.Сотрудник
	|			И ВТРасписаниеЗаПериод.ДатаВремяНачала < ВТ_ТабличнаяЧасть.ДатаВремяОкончания
	|			И ВТРасписаниеЗаПериод.ДатаВремяОкончания > ВТ_ТабличнаяЧасть.ДатаВремяНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТабличнаяЧасть.НомерСтрокиСводногоРасписания КАК НомерСтрокиСводногоРасписания,
	|	ВТ_ТабличнаяЧасть.НомерСтроки КАК НомерСтроки1,
	|	ВТ_ТабличнаяЧасть.Сотрудник КАК Сотрудник,
	|	ВТ_ТабличнаяЧасть.ДатаВремяНачала КАК ДатаВремяНачала,
	|	ВТ_ТабличнаяЧасть.ДатаВремяОкончания КАК ДатаВремяОкончания,
	|	ВТ_ТабличнаяЧасть.Продолжительность КАК Продолжительность,
	|	ВТ_ТабличнаяЧасть2.НомерСтроки КАК НомерСтроки2,
	|	ВТ_ТабличнаяЧасть2.ДатаВремяНачала КАК П_ДатаВремяНачала,
	|	ВТ_ТабличнаяЧасть2.ДатаВремяОкончания КАК П_ДатаВремяОкончания
	|ИЗ
	|	ВТ_ТабличнаяЧасть КАК ВТ_ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТабличнаяЧасть КАК ВТ_ТабличнаяЧасть2
	|		ПО ВТ_ТабличнаяЧасть.Сотрудник = ВТ_ТабличнаяЧасть2.Сотрудник
	|			И ВТ_ТабличнаяЧасть.ДатаВремяНачала < ВТ_ТабличнаяЧасть2.ДатаВремяОкончания
	|			И ВТ_ТабличнаяЧасть.ДатаВремяОкончания > ВТ_ТабличнаяЧасть2.ДатаВремяНачала
	|			И ВТ_ТабличнаяЧасть.НомерСтроки < ВТ_ТабличнаяЧасть2.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки1,
	|	НомерСтроки2
	|ИТОГИ
	|	МАКСИМУМ(Сотрудник),
	|	МАКСИМУМ(ДатаВремяНачала),
	|	МАКСИМУМ(ДатаВремяОкончания)
	|ПО
	|	НомерСтроки1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПересечения.НомерСтрокиСводногоРасписания КАК НомерСтрокиСводногоРасписания,
	|	ВТПересечения.НомерСтроки КАК НомерСтроки,
	|	ВТПересечения.ДатаВремяНачала КАК ДатаВремяНачала,
	|	ВТПересечения.Сотрудник КАК Сотрудник,
	|	ВТПересечения.ДатаВремяОкончания КАК ДатаВремяОкончания,
	|	ВТПересечения.Продолжительность,
	|	ВТПересечения.П_ДатаВремяНачала,
	|	ВТПересечения.П_ДатаВремяОкончания,
	|	ВТПересечения.П_Состояние,
	|	ВТПересечения.П_Контрагент,
	|	ВТПересечения.П_КонтактноеЛицо
	|ИЗ
	|	ВТПересечения КАК ВТПересечения
	|ИТОГИ
	|	МАКСИМУМ(ДатаВремяНачала),
	|	МАКСИМУМ(Сотрудник),
	|	МАКСИМУМ(ДатаВремяОкончания)
	|ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ВТ_ТабличнаяЧасть.Сотрудник КАК Сотрудник,
	|	ВТ_ТабличнаяЧасть.ДатаВремяНачала КАК ДатаВремяНачала,
	|	ВТ_ТабличнаяЧасть.ДатаВремяОкончания КАК ДатаВремяОкончания,
	|	ВТ_ТабличнаяЧасть.Продолжительность КАК Продолжительность,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Запланировано) КАК Состояние,
	|	ЗНАЧЕНИЕ(Справочник.Абоненты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ПользователиСервисов.ПустаяСсылка) КАК КонтактноеЛицо,
	|	ВТ_ТабличнаяЧасть.Проект КАК Проект,
	|	ВТ_ТабличнаяЧасть.Работа КАК Работа
	|ИЗ
	|	ВТ_ТабличнаяЧасть КАК ВТ_ТабличнаяЧасть
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ТабличнаяЧасть.НомерСтроки";
	#КонецОбласти
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		МоментВремени = Неопределено;
	Иначе
		МоментВремени = МоментВремени();
	КонецЕсли;

	Границы = ПолучитьГраницыПериода();
	МассивСотрудников = РасписаниеДетально.Выгрузить(,"Сотрудник");
	МассивСотрудников.Свернуть("Сотрудник");
	МассивСотрудников = МассивСотрудников.ВыгрузитьКолонку("Сотрудник");
	
	Запрос.УстановитьПараметр("Период"				, Дата);
	Запрос.УстановитьПараметр("МоментВремени"		, МоментВремени);
	Запрос.УстановитьПараметр("Ссылка"				, Ссылка);
	Запрос.УстановитьПараметр("НачалоПериода"		, НачалоДня(Границы.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода"		, КонецДня(Границы.КонецПериода));
	Запрос.УстановитьПараметр("МассивСотрудников"	, МассивСотрудников);

	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// БоР : Надо бы здесь выводить данные о строках сводной ТЧ, если не включен детальный ввод 21.07.2017 13:18:59
	// БоР : Для этого надо подправить запрос - пока не будем 21.07.2017 13:18:59
	
	РезультатСамоПересечения = РезультатыЗапроса[РезультатыЗапроса.Количество() - 3];
	ВыборкаСтрок = РезультатСамоПересечения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтрок.Следующий() Цикл
		ПараметрыСообщения.Вставить("Сообщение_Поле"		, "Работы[" + (ВыборкаСтрок.НомерСтроки1 - 1) + "].ДатаВремяНачала");
		ПараметрыСообщения.Вставить("ДатаВремяНачала"		, ВыборкаСтрок.ДатаВремяНачала);
		ПараметрыСообщения.Вставить("ДатаВремяОкончания"	, ВыборкаСтрок.ДатаВремяОкончания);
		ПараметрыСообщения.Вставить("Сотрудник"				, ВыборкаСтрок.Сотрудник);
		ПараметрыСообщения.Вставить("НомерСтроки1"			, ВыборкаСтрок.НомерСтроки1);
		ШаблонСообщения = "Строка &НомерСтроки1 (детальное) [&Сотрудник, &ДатаВремяНачала - &ДатаВремяОкончания] конфликтует с другими строками:";
		БоР_ОбщийМодуль.Сообщить_С(ШаблонСообщения, ПараметрыСообщения);
		
		ВыборкаДетали = ВыборкаСтрок.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			ПараметрыСообщения.Вставить("Сообщение_Поле"		, "Работы[" + (ВыборкаДетали.НомерСтроки2 - 1) + "].ДатаВремяНачала");
			ПараметрыСообщения.Вставить("П_ДатаВремяНачала"		, ВыборкаДетали.П_ДатаВремяНачала);
			ПараметрыСообщения.Вставить("П_ДатаВремяОкончания"	, ВыборкаДетали.П_ДатаВремяОкончания);
			ПараметрыСообщения.Вставить("НомерСтроки2"			, ВыборкаДетали.НомерСтроки2);
			ШаблонСообщения = "	Строка &НомерСтроки2 (детальное) [&Сотрудник, &П_ДатаВремяНачала - &П_ДатаВремяОкончания]";
			БоР_ОбщийМодуль.Сообщить_С(ШаблонСообщения, ПараметрыСообщения);
			Отказ = Истина;
		КонецЦикла;
	КонецЦикла;
	
	РезультатПересечения = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2];
	ВыборкаСтрок = РезультатПересечения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтрок.Следующий() Цикл
		ПараметрыСообщения.Вставить("Сообщение_Поле"		, "Работы[" + (ВыборкаСтрок.НомерСтроки - 1) + "].ДатаВремяНачала");
		ПараметрыСообщения.Вставить("ДатаВремяНачала"		, ВыборкаСтрок.ДатаВремяНачала);
		ПараметрыСообщения.Вставить("ДатаВремяОкончания"	, ВыборкаСтрок.ДатаВремяОкончания);
		ПараметрыСообщения.Вставить("Сотрудник"				, ВыборкаСтрок.Сотрудник);
		ПараметрыСообщения.Вставить("НомерСтроки"			, ВыборкаСтрок.НомерСтроки);
		ШаблонСообщения = "Строка &НомерСтроки (детальное) [&Сотрудник, &ДатаВремяНачала - &ДатаВремяОкончания] конфликтует с существующими записями:";
		
		ВыборкаДетали = ВыборкаСтрок.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Если ВыборкаДетали.П_Состояние = Перечисления.СостоянияЭлементаРасписанияЛК.ЗаписанКлиент Тогда
				ПараметрыСообщения.Вставить("П_ДатаВремяНачала"		, ВыборкаДетали.П_ДатаВремяНачала);
				ПараметрыСообщения.Вставить("П_ДатаВремяОкончания"	, ВыборкаДетали.П_ДатаВремяОкончания);
				ПараметрыСообщения.Вставить("П_Контрагент"			, ВыборкаДетали.П_Контрагент);
				ШаблонСообщения = ШаблонСообщения + " &ПС " + 
				БоР_ОбщийМодуль.СформироватьТекстСообщения("	Запись [&Сотрудник, &П_ДатаВремяНачала - &П_ДатаВремяОкончания]. Уже записан контрагент &П_Контрагент", ПараметрыСообщения);
				Отказ = Истина;
			Иначе
				ПараметрыСообщения.Вставить("П_ДатаВремяНачала"		, ВыборкаДетали.П_ДатаВремяНачала);
				ПараметрыСообщения.Вставить("П_ДатаВремяОкончания"	, ВыборкаДетали.П_ДатаВремяОкончания);
				ПараметрыСообщения.Вставить("П_Состояние"			, ВыборкаДетали.П_Состояние);
				ШаблонСообщения = ШаблонСообщения + " &ПС " + 
				БоР_ОбщийМодуль.СформироватьТекстСообщения("	Запись [&Сотрудник, &П_ДатаВремяНачала - &П_ДатаВремяОкончания]. Установлено состояние &П_Состояние", ПараметрыСообщения);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		БоР_ОбщийМодуль.Сообщить_С(ШаблонСообщения, ПараметрыСообщения);
	КонецЦикла;
	
	Если Отказ Тогда
		ВозВрат Неопределено
	КонецЕсли;
	
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	ВозВрат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = Дата;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ТекущаяДата();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = ДатаНачала;
	КонецЕсли;
КонецПроцедуры

Функция КонтрольПовторногоРасписания(Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ
	|	РасписаниеДетально.НомерСтроки,
	|	РасписаниеДетально.Сотрудник,
	|	РасписаниеДетально.ДатаВремяНачала,
	|	РасписаниеДетально.ДатаВремяОкончания,
	|	РасписаниеДетально.Продолжительность
	|ПОМЕСТИТЬ ВТРасписаниеДетально
	|ИЗ
	|	&РасписаниеДетально КАК РасписаниеДетально
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписаниеДетально.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ВТРасписаниеДетально.ДатаВремяНачала, ДЕНЬ) КАК Дата,
	|	МИНИМУМ(ВТРасписаниеДетально.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТДатыНовогоРасписания
	|ИЗ
	|	ВТРасписаниеДетально КАК ВТРасписаниеДетально
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРасписаниеДетально.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ВТРасписаниеДетально.ДатаВремяНачала, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасписаниеКонсультацийСрезПоследних.Сотрудник,
	|	НАЧАЛОПЕРИОДА(РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ ВТУстановленноеРаписание
	|ИЗ
	|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних(
	|			&МоментВремени,
	|			ДатаВремяНачала >= &ДатаНачала
	|				И ДатаВремяНачала <= &ДатаОкончания
	|				И Сотрудник В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТРасписаниеДетально.Сотрудник
	|					ИЗ
	|						ВТРасписаниеДетально)) КАК РасписаниеКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДатыНовогоРасписания.Сотрудник,
	|	ВТДатыНовогоРасписания.Дата,
	|	ВТДатыНовогоРасписания.НомерСтроки
	|ИЗ
	|	ВТУстановленноеРаписание КАК ВТУстановленноеРаписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыНовогоРасписания КАК ВТДатыНовогоРасписания
	|		ПО ВТУстановленноеРаписание.Сотрудник = ВТДатыНовогоРасписания.Сотрудник
	|			И ВТУстановленноеРаписание.Дата = ВТДатыНовогоРасписания.Дата";
	#КонецОбласти
	
	
	Если ДополнительныеСвойства.РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		МоментВремени = Неопределено;
	Иначе
		МоментВремени = МоментВремени();
	КонецЕсли;
	Запрос.УстановитьПараметр("МоментВремени"		, МоментВремени);
	Запрос.УстановитьПараметр("ДатаНачала"			, ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"		, КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("РасписаниеДетально"	, РасписаниеДетально);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатОшибок = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	
	ВыборкаДетальныеЗаписи = РезультатОшибок.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сотрудник """ + ВыборкаДетальныеЗаписи.Сотрудник + """, дата """ + Формат(ВыборкаДетальныеЗаписи.Дата, "ДФ=dd.MM.yyyy") + """ - расписание или записи уже зарегистрированы.";
		Сообщение.Поле = "РасписаниеДетально[" + (ВыборкаДетальныеЗаписи.НомерСтроки - 1) + "].Сотрудник";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЦикла;
	
КонецФункции

Функция ЗаполнитьРасписаниеДетально()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ
	|	Расписание.НомерСтроки,
	|	Расписание.Сотрудник,
	|	Расписание.Работа,
	|	Расписание.Проект,
	|	Расписание.ВремяНачала,
	|	Расписание.ВремяОкончания,
	|	Расписание.Продолжительность,
	|	Расписание.ВремяНачалаОбеда,
	|	Расписание.ВремяОкончанияОбеда
	|ПОМЕСТИТЬ ВТРасписание
	|ИЗ
	|	&Расписание КАК Расписание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписание.НомерСтроки,
	|	ВТРасписание.Сотрудник,
	|	ВТРасписание.Работа,
	|	ВТРасписание.Проект,
	|	ВТРасписание.ВремяНачала,
	|	ВТРасписание.ВремяОкончания,
	|	ВТРасписание.Продолжительность,
	|	ВТРасписание.ВремяНачалаОбеда,
	|	ВТРасписание.ВремяОкончанияОбеда
	|ИЗ
	|	ВТРасписание КАК ВТРасписание
	|ГДЕ
	|	(ВТРасписание.ВремяНачалаОбеда <> ДАТАВРЕМЯ(1, 1, 1)
	|				И НЕ(ВТРасписание.ВремяНачала < ВТРасписание.ВремяНачалаОбеда
	|						И ВТРасписание.ВремяНачалаОбеда < ВТРасписание.ВремяОкончанияОбеда
	|						И ВТРасписание.ВремяОкончанияОбеда < ВТРасписание.ВремяОкончания)
	|			ИЛИ ВТРасписание.ВремяНачалаОбеда = ДАТАВРЕМЯ(1, 1, 1)
	|				И ВТРасписание.ВремяНачала >= ВТРасписание.ВремяОкончания
	|			ИЛИ ВТРасписание.ВремяНачалаОбеда = ДАТАВРЕМЯ(1, 1, 1)
	|				И ВТРасписание.ВремяОкончанияОбеда <> ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ВТРасписание.ВремяОкончанияОбеда = ДАТАВРЕМЯ(1, 1, 1)
	|				И ВТРасписание.ВремяНачалаОбеда <> ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписание2.Сотрудник,
	|	ВТРасписание2.НомерСтроки КАК НомерСтроки2,
	|	ВТРасписание2.ВремяНачала КАК ВремяНачала2,
	|	ВТРасписание2.ВремяОкончания КАК ВремяОкончания2,
	|	ВТРасписание1.НомерСтроки КАК НомерСтроки1,
	|	ВТРасписание1.ВремяНачала КАК ВремяНачала1,
	|	ВТРасписание1.ВремяОкончания КАК ВремяОкончания1
	|ИЗ
	|	ВТРасписание КАК ВТРасписание1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасписание КАК ВТРасписание2
	|		ПО ВТРасписание1.Сотрудник = ВТРасписание2.Сотрудник
	|			И ВТРасписание1.ВремяОкончания > ВТРасписание2.ВремяНачала
	|			И ВТРасписание1.ВремяНачала < ВТРасписание2.ВремяОкончания
	|			И ВТРасписание1.НомерСтроки < ВТРасписание2.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписание.НомерСтроки КАК НомерСтрокиСводногоРасписания,
	|	ВТРасписание.Сотрудник КАК Сотрудник,
	|	ВТРасписание.Работа КАК Работа,
	|	ВТРасписание.Проект КАК Проект,
	|	ВТРасписание.ВремяНачала КАК ВремяНачала,
	|	ВТРасписание.ВремяОкончания,
	|	ВТРасписание.Продолжительность,
	|	ВТРасписание.ВремяНачалаОбеда,
	|	ВТРасписание.ВремяОкончанияОбеда
	|ИЗ
	|	ВТРасписание КАК ВТРасписание
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ВремяНачала,
	|	Работа,
	|	Проект";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Расписание", Расписание);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатОшибок = РезультатыЗапроса[РезультатыЗапроса.Количество() - 3];
	
	ЕстьОшибки = Ложь;
		
	ВыборкаДетальныеЗаписи = РезультатОшибок.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В строке """ + ВыборкаДетальныеЗаписи.НомерСтроки + """ непорядок с указанными данными по времени.";
		Сообщение.Поле = "Расписание[" + (ВыборкаДетальныеЗаписи.НомерСтроки - 1) + "].ВремяНачала";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЦикла;
	
	РезультатОшибок = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2];
	
	ВыборкаДетальныеЗаписи = РезультатОшибок.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В строке """ + ВыборкаДетальныеЗаписи.НомерСтроки1 + """ период пересекается с периодом в строке """ + ВыборкаДетальныеЗаписи.НомерСтроки2 + """";
		Сообщение.Поле = "Расписание[" + (ВыборкаДетальныеЗаписи.НомерСтроки1 - 1) + "].ВремяНачала";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ВозВрат Ложь;
	КонецЕсли;
	
	//ПараметрыСтрокиПериода = Новый Структура;
	//ПараметрыСтрокиПериода.Вставить("Сотрудник");
	//ПараметрыСтрокиПериода.Вставить("Работа");
	//ПараметрыСтрокиПериода.Вставить("Проект");
	//ПараметрыСтрокиПериода.Вставить("НомерСтрокиСводногоРасписания");
	
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	
	РасписаниеДетально.Очистить();
	ТаблицаСотрудников = РезультатЗапроса.Выгрузить();
	Для каждого СтрокаТаблицаСотрудников Из ТаблицаСотрудников Цикл
		ОчереднаяДата = ДатаНачала;
		Пока ОчереднаяДата <= ДатаОкончания Цикл
			//ЗаполнитьЗначенияСвойств(ПараметрыСтрокиПериода, СтрокаТаблицаСотрудников);
			
			Если ЗначениеЗаполнено(СтрокаТаблицаСотрудников.ВремяНачалаОбеда) Тогда
				ОчереднаяДатаНачала = НачалоДня(ОчереднаяДата) + (СтрокаТаблицаСотрудников.ВремяНачала - '00010101');
				ОчереднаяДатаОкончания = НачалоДня(ОчереднаяДата) + (СтрокаТаблицаСотрудников.ВремяНачалаОбеда - '00010101');
				ДобавитьПериодыВТаблицу(РасписаниеДетально, ОчереднаяДатаНачала, ОчереднаяДатаОкончания, СтрокаТаблицаСотрудников.Продолжительность, СтрокаТаблицаСотрудников);
				
				ОчереднаяДатаНачала = НачалоДня(ОчереднаяДата) + (СтрокаТаблицаСотрудников.ВремяОкончанияОбеда - '00010101');
				ОчереднаяДатаОкончания = НачалоДня(ОчереднаяДата) + (СтрокаТаблицаСотрудников.ВремяОкончания - '00010101');
				ДобавитьПериодыВТаблицу(РасписаниеДетально, ОчереднаяДатаНачала, ОчереднаяДатаОкончания, СтрокаТаблицаСотрудников.Продолжительность, СтрокаТаблицаСотрудников);
			Иначе
				ОчереднаяДатаНачала = НачалоДня(ОчереднаяДата) + (СтрокаТаблицаСотрудников.ВремяНачала - '00010101');
				ОчереднаяДатаОкончания = НачалоДня(ОчереднаяДата) + (СтрокаТаблицаСотрудников.ВремяОкончания - '00010101');
				ДобавитьПериодыВТаблицу(РасписаниеДетально, ОчереднаяДатаНачала, ОчереднаяДатаОкончания, СтрокаТаблицаСотрудников.Продолжительность, СтрокаТаблицаСотрудников);
			КонецЕсли;
			ОчереднаяДата = ОчереднаяДата + 86400;
		КонецЦикла;
	КонецЦикла;
	//РасписаниеДетально.Сортировать("Сотрудник,ВремяНачала");
	ВозВрат Истина;
	
КонецФункции

Процедура ДобавитьПериодыВТаблицу(ТаблицаПериодов, ДатаНачалаПериода, ДатаОкончанияПериода, Продолжительность, СтрокаТаблицаСотрудников) Экспорт
	
	ОчередноеВремя = ДатаНачалаПериода;
	Пока ОчередноеВремя < ДатаОкончанияПериода И ОчередноеВремя + Продолжительность * 60 <= ДатаОкончанияПериода Цикл
		СтрокаПериода = ТаблицаПериодов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПериода, СтрокаТаблицаСотрудников);
		СтрокаПериода.ДатаВремяНачала		= ОчередноеВремя;
		СтрокаПериода.ДатаВремяОкончания	= ОчередноеВремя + Продолжительность * 60;
		СтрокаПериода.Продолжительность		= Продолжительность;
		
		ОчередноеВремя = СтрокаПериода.ДатаВремяОкончания;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	БоР_ОбщийМодуль.УстановитьПроверкуЗаполненияРеквизита(ПроверяемыеРеквизиты, "ДатаНачала"	, Не ДетальноеРасписание);
	БоР_ОбщийМодуль.УстановитьПроверкуЗаполненияРеквизита(ПроверяемыеРеквизиты, "ДатаОкончания"	, Не ДетальноеРасписание);
	БоР_ОбщийМодуль.УстановитьПроверкуЗаполненияРеквизита(ПроверяемыеРеквизиты, "РасписаниеДетально.Сотрудник"			, ДетальноеРасписание);
	БоР_ОбщийМодуль.УстановитьПроверкуЗаполненияРеквизита(ПроверяемыеРеквизиты, "РасписаниеДетально.Работа"				, ДетальноеРасписание);
	//БоР_ОбщийМодуль.УстановитьПроверкуЗаполненияРеквизита(ПроверяемыеРеквизиты, "РасписаниеДетально.Проект"				, ДетальноеРасписание);
	БоР_ОбщийМодуль.УстановитьПроверкуЗаполненияРеквизита(ПроверяемыеРеквизиты, "РасписаниеДетально.ДатаВремяНачала"	, ДетальноеРасписание);
	БоР_ОбщийМодуль.УстановитьПроверкуЗаполненияРеквизита(ПроверяемыеРеквизиты, "РасписаниеДетально.ДатаВремяОкончания"	, ДетальноеРасписание);
	БоР_ОбщийМодуль.УстановитьПроверкуЗаполненияРеквизита(ПроверяемыеРеквизиты, "РасписаниеДетально.Продолжительность"	, ДетальноеРасписание);
	
	Для каждого строкаТЧ Из Расписание Цикл
		Если НЕ ЗначениеЗаполнено(строкаТЧ.Проект) И НЕ строкаТЧ.Работа.Отсутствие Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Расписание. Строка "+ строкаТЧ.НомерСтроки + ": Необходимо указать проект!";
			Сообщение.Поле = "Расписание[" + (строкаТЧ.НомерСтроки - 1) + "].Проект";
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого строкаТЧ Из РасписаниеДетально Цикл
		Если НЕ ЗначениеЗаполнено(строкаТЧ.Проект) И НЕ строкаТЧ.Работа.Отсутствие Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Расписание детально. Строка "+ строкаТЧ.НомерСтроки + ": Необходимо указать проект!";
			Сообщение.Поле = "РасписаниеДетально[" + (строкаТЧ.НомерСтроки - 1) + "].Проект";
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// БоР : Вычисляет минимум и максимум дат по ТЧ 17.07.2017 22:11:12
Функция ПолучитьГраницыПериода() Экспорт
	НачалоПериода = '39991101';
	КонецПериода = '00010101';
	Для каждого СтрокаРаботы Из РасписаниеДетально Цикл
		НачалоПериода = Мин(НачалоПериода, СтрокаРаботы.ДатаВремяНачала);
		КонецПериода = Макс(КонецПериода, СтрокаРаботы.ДатаВремяНачала);
	КонецЦикла;
	
	Границы = Новый Структура;
	Границы.Вставить("НачалоПериода", 	НачалоПериода);
	Границы.Вставить("КонецПериода", 	КонецПериода);
	ВозВрат Границы;
	
КонецФункции
