#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
////////////////////////////////////////////////////////////////////////////////////////
// БоР : Для работы в толстом клиенте необходимо модуль выполнять на сервере. Ну, почти необходимо. 01.04.2015 16:37:54
Процедура СчитатьПользователейНаСервере() Экспорт
	ТаблицаГруппИПользователей.Очистить();
	ТабЗнач.Очистить();
	
	ИмяДомена = Константы.ИмяДомена.Получить();
	
	Если Не ЗначениеЗаполнено(Фильтр) Тогда
		Фильтр = Константы.ФильтрAD.Получить();
		Если Не ЗначениеЗаполнено(Фильтр) Тогда
			Фильтр = "(&(objectClass=user)(!(useraccountcontrol:1.2.840.113556.1.4.803:=2)"; 
		КонецЕсли;	
	КонецЕсли;
	
	ПрочитатьПользователей();
КонецПроцедуры	

Процедура ПрочитатьПользователей()
	
	
	Для Каждого СписокГрупп Из ЭтотОбъект.СписокГруппДоступа Цикл
		
		ГруппаПолныйПуть = СписокГрупп.ГруппаПолныйПуть; 
		ИмяГруппы = СписокГрупп.ГруппаДоступа;
		
		КомандаАДО = Новый COMОбъект("ADODB.Command");
		СоединениеАДО = Новый COMОбъект("ADODB.Connection");
		СоединениеАДО.Provider = "ADsDSOObject";
		СоединениеАДО.Open("Active Directory Provider");
		КомандаАДО.ActiveConnection = СоединениеАДО;
		
		Попытка
			База = "<LDAP://" + Домен + ">";
		Исключение
			Сообщить("Не удалось подключиться к домену (IMG:style_emoticons/default/sad.gif) ");
		КонецПопытки;
		
		ФИОAD = Константы.ФИОAD.Получить();
		ЛогинAD = Константы.ЛогинAD.Получить();
		Если Не (ЗначениеЗаполнено(ФИОAD) И ЗначениеЗаполнено(ЛогинAD)) Тогда
			Сообщить("Необходимо в форме констант заполнить настройки Active Directory");
			Возврат;
		КонецЕсли;	
		
		Реквизиты = "sn, givenName, Mail,department,company, telephoneNumber, title, objectsid" + ", " + Строка(ФИОAD) + ", " + Строка(ЛогинAD);
		//Реквизиты = "name";
		ТекстЗапроса = База + ";" + Фильтр + ГруппаПолныйПуть + "));" + Реквизиты + ";subtree";
		КомандаАДО.CommandText = ТекстЗапроса;
		КомандаАДО.Properties("Page Size").Value = 100;
		КомандаАДО.Properties("Timeout").Value = 30;
		КомандаАДО.Properties("Cache Results").Value = Ложь;
		ВыборкаАДО = КомандаАДО.Execute();
		Пока НЕ ВыборкаАДО.EOF  Цикл
			НоваяСтрока = ТаблицаГруппИПользователей.Добавить();
			НоваяСтрока.Группа = ИмяГруппы;
			НоваяСтрока.Пользователь = СокрЛП(Строка(ВыборкаАДО.Fields(Строка(ЛогинAD)).Value));
			
			Фамилия		= СокрЛП(Строка(ВыборкаАДО.Fields("sn").Value));
			Имя			= СокрЛП(Строка(ВыборкаАДО.Fields("givenName").Value));
			Майл 		= Нрег(СокрЛП(Строка(ВыборкаАДО.Fields("Mail").Value)));
			Департам	= СокрЛП(Строка(ВыборкаАДО.Fields("department").Value));
			Компания	= СокрЛП(Строка(ВыборкаАДО.Fields("company").Value));
			Телефон		= СокрЛП(Строка(ВыборкаАДО.Fields("telephoneNumber").Value));
			Должность	= СокрЛП(Строка(ВыборкаАДО.Fields("title").Value));
	        СИД			= ПреобразоватьSID(ВыборкаАДО.Fields("objectsid").Value);
			ФИО			= СокрЛП(Строка(ВыборкаАДО.Fields(Строка(ФИОAD)).Value));
	        Логин		= СокрЛП(Строка(ВыборкаАДО.Fields(Строка(ЛогинAD)).Value));
		
				//выгрузим данные в ТЗ
				Если НЕ ПустаяСтрока(ФИО) И НЕ ПустаяСтрока(Логин) Тогда//И НЕ ПустаяСтрока(СНИЛС) Тогда
					НоваяСтрока 				= ТабЗнач.Добавить();
					НоваяСтрока.Фамилия 		= Фамилия;
					НоваяСтрока.Имя 			= Имя;
					НоваяСтрока.Майл 			= Майл;
					НоваяСтрока.Департам 		= Департам;
					НоваяСтрока.Компания 		= Компания;
					НоваяСтрока.Телефон 		= Телефон;
					НоваяСтрока.Должность 		= Должность;
					НоваяСтрока.ГруппаДомена 	= ИмяГруппы;
					НоваяСтрока.ФИО 			= ФИО;
		            НоваяСтрока.Логин 			= Логин;
					НоваяСтрока.Сид 			= СИД;
				КонецЕсли;
			//КонецЦикла;	
			
			
			ВыборкаАДО.MoveNext();            
		КонецЦикла;
		ВыборкаАДО.Close();
		СоединениеАДО.Close();

	КонецЦикла;	


КонецПроцедуры

Функция ПреобразоватьSID(objectSid)
    SID    = "S-";
    
    МассивSID    = Новый Массив;
    Для Каждого ЭлементSID Из objectSid Цикл
        МассивSID.Добавить(ЭлементSID);
    КонецЦикла;
    //SID_REVISION
    SID    = SID + Строка(МассивSID[0]) + "-";
    
    КоличествоДашей    = МассивSID[1];
    
    SECURITY_NT_AUTHORITY    = 0;
    Для Инд = 0 По 5 Цикл
        SECURITY_NT_AUTHORITY    = SECURITY_NT_AUTHORITY + МассивSID[2 + Инд] * Pow(2, (5 - Инд) * 8);
    КонецЦикла;
    SID    = SID + Строка(SECURITY_NT_AUTHORITY);
    
    Для Инд = 0 По КоличествоДашей - 1 Цикл
        SID    = SID + "-";
        Даш    = 0;
        Для ИндДаш = 0 По 3 Цикл
            Даш    = Даш + МассивSID[8 + 4 * Инд + ИндДаш] * Pow(2, (ИндДаш) * 8);
        КонецЦикла;
        SID    = SID + Строка(Даш);
    КонецЦикла;
    
    Возврат SID;    
КонецФункции

Процедура ПолучитьСписокПользователейВГруппеДомена (ИмяДомена, ИмяГруппы, Таблица) 
	objNameSpace = "";  
	Попытка  
		objNameSpace = ПолучитьCOMОбъект("WinNT://" + СокрЛП(ИмяДомена) + "/" + СокрЛП(ИмяГруппы) ); 
		
		Для каждого item Из objNameSpace.Members() Цикл                    
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Группа = ИмяГруппы;
			НоваяСтрока.Пользователь = item.Name;
		КонецЦикла; 
	Исключение  
		Сообщить(ОписаниеОшибки()); 
	КонецПопытки;  
	
КонецПроцедуры

Процедура СоздатьПользователей() Экспорт
	ТаблицаПользователейБезГрупп = ТабЗнач.Выгрузить(, "Фамилия, Имя, Департам, Компания, Телефон, Должность, Майл, ФИО, Логин, СИД");
	ТаблицаПользователейБезГрупп.Свернуть("Фамилия, Имя, Департам, Компания, Телефон, Должность, Майл, ФИО, Логин, СИД");
	
	Для каждого СтрПользовательАД Из ТаблицаПользователейБезГрупп Цикл
		ИмяИБ = СтрПользовательАД.Логин;
		НовыйПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяИБ);
		Если НовыйПользователь = Неопределено Тогда
			НовыйПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
			НовыйПользователь.Имя = ИмяИБ;
			НовыйПользователь.ПолноеИмя = СтрПользовательАД.ФИО;
			НовыйПользователь.АутентификацияОС = Истина;
			НовыйПользователь.АутентификацияСтандартная = Ложь;
			НовыйПользователь.ПользовательОС = "\\" + ИмяДомена + "\" + СтрПользовательАД.Логин;
			НовыйПользователь.ПоказыватьВСпискеВыбора = Истина;
			НовыйПользователь.Язык = Метаданные.Языки.Русский;
		Иначе
			НовыйПользователь.АутентификацияСтандартная = Ложь;
			НовыйПользователь.ПолноеИмя = СтрПользовательАД.ФИО;
			НовыйПользователь.Имя = ИмяИБ;
			НовыйПользователь.ПользовательОС = "\\" + ИмяДомена + "\" + СтрПользовательАД.Логин;
			НовыйПользователь.АутентификацияОС = Истина;
			НовыйПользователь.ПоказыватьВСпискеВыбора = Истина;
			НовыйПользователь.Язык = Метаданные.Языки.Русский;
		КонецЕсли;   
				
		ПараметрыОтбора = Новый Структура("Логин", СтрПользовательАД.Логин);
		ГруппыПользователя = ТабЗнач.НайтиСтроки(ПараметрыОтбора);
		
		РольСотрудник = Метаданные.Роли[Константы.Роль.Получить()];
		ГруппаДоступа = Константы.ГруппаДоступа.Получить();
		
		Для Каждого СтрГруппа Из ГруппыПользователя Цикл
			Если СтрГруппа.ГруппаДомена = ГруппаДоступа и НЕ НовыйПользователь.Роли.Содержит(РольСотрудник) Тогда
				НовыйПользователь.Роли.Добавить(РольСотрудник);
			ИначеЕсли  СтрГруппа.ГруппаДомена <> ГруппаДоступа и НовыйПользователь.Роли.Содержит(РольСотрудник) Тогда 
				НовыйПользователь.Роли.Удалить(РольСотрудник);
			КонецЕсли;		
		КонецЦикла;
		
		Попытка
			НовыйПользователь.Записать();
			ЗаписатьНовогоПользователя(НовыйПользователь, СтрПользовательАД);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
	КонецЦикла;	
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.ПометкаУдаления
		|	И НЕ Пользователи.Ссылка В (&МассивПользователей)
		|	И НЕ Пользователи.Недействителен";
	
	Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
	
	РезультатЗапроса = Запрос.Выполнить();
	ПользователиДляУдаления.Загрузить(РезультатЗапроса.Выгрузить());
	

КонецПроцедуры

//Процедура отключает неактивных пользователей
Процедура ОтключитьПользователей() Экспорт	
	
	//Отключение пользователей, которых не было при загрузке Задача №32066
	
	Для Каждого ПользовательДляУдаления из ПользователиДляУдаления Цикл
		
		ОтключаемыйПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательДляУдаления.Пользователь.ИдентификаторПользователяИБ);
		Если ОтключаемыйПользователь <> Неопределено Тогда
			Если ОтключаемыйПользователь.АутентификацияОС ИЛИ ОтключаемыйПользователь.АутентификацияСтандартная Тогда 	
				ОтключаемыйПользователь.АутентификацияОС = Ложь;
				ОтключаемыйПользователь.АутентификацияСтандартная = Ложь;
				ОтключаемыйПользователь.ПоказыватьВСпискеВыбора = Ложь;
				ОтключаемыйПользователь.Записать();
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла;
КонецПроцедуры		

Процедура ЗаписатьНовогоПользователя(ПользовательИБ, СтрПользовательАД)
	SID = СтрПользовательАД.СИД;	
	
	ИмяПользователя			= ПользовательИБ.Имя;
	ПолноеИмяПользователя	= ПользовательИБ.ПолноеИмя;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Пользователи.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ
	               |	И НЕ Пользователи.ПометкаУдаления";

	Запрос.Параметры.Вставить("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		СоздатьПользователя = Истина;
		ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
	Иначе
		СоздатьПользователя = Ложь;
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Ссылка.Недействителен Тогда
			ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПользовательОбъект.Недействителен = Ложь;
			Попытка
				ПользовательОбъект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());	
			КонецПопытки;	
		КонецЕсли;
		
		Если  Выборка.Ссылка.Наименование <> ПолноеИмяПользователя ИЛИ Выборка.Ссылка.SID <> SID Тогда 
			ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПользовательОбъект.ЛогинAD 		= СтрПользовательАД.Логин;
			ПользовательОбъект.Наименование	= ПолноеИмяПользователя;
			ПользовательОбъект.SID			= SID;
			Попытка
				ПользовательОбъект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());	
			КонецПопытки;	
		КонецЕсли;

	КонецЕсли;
	
	Если СоздатьПользователя Тогда
		
		СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
		НовыйПользователь 				= Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Наименование	= ПолноеИмяПользователя;
		НовыйПользователь.ЛогинAD  		= СтрПользовательАД.Логин; 
		НовыйПользователь.SID	   		= SID;
		НовыйПользователь.УстановитьСсылкуНового(СсылкаНового);
		
		Если ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
			НовыйПользователь.ИдентификаторПользователяИБ = ИдентификаторПользователяИБ;	
		КонецЕсли;
		Попытка
			НовыйПользователь.Записать();
			МассивПользователей.Добавить(НовыйПользователь.Ссылка);
		Исключение
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Пользователь: %1 не был найден в справочнике пользователей. Возникла ошибка при добавлении пользователя в справочник.
													|%2'"),
													ИмяПользователя, ОписаниеОшибки() );
			ВызватьИсключение ТекстСообщенияОбОшибке;
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

#КонецЕсли