&НаКлиенте
Процедура ПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДР = УРВПовтИспКлиентСервер.ПолучитьДоступностьРолей();
	ДоступныВсеПроекты = ДР.ПолныеПрава  ИЛИ ДР.Экономист; 
	Если НЕ ДоступныВсеПроекты Тогда
		СписокВыбора = ПолучитьСписокПроектовСервер();
		ДополнительныеПараметры = Новый Структура();
		
		ПоказатьВыборИзСписка(
			Новый ОписаниеОповещения("ПроектНачалоВыбора_Завершение", ЭтотОбъект, ДополнительныеПараметры), 
			СписокВыбора, Элементы.Проект);		
			
		СтандартнаяОбработка = Ложь; 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)

	Если Объект.Работы.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОстаткамЗавершение", ЭтотОбъект), "При заполнении табличная часть ""Работы"" будет очищена! Продолжить?", РежимДиалогаВопрос.ДаНет);
        Возврат;
	Иначе
		ЗаполнитьПоОстаткамНаСервере();
	КонецЕсли;
	
	Свернута = Истина;
	РазвернутьТаблицуВДеревоЗначений();
КонецПроцедуры
 
&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Работы.Очистить();
	ЗаполнитьПоОстаткамНаСервере();
	Свернута = Истина;
	РазвернутьТаблицуВДеревоЗначений();
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПроектовСервер()
	Возврат ОбщегоНазначения.ПолучитьСписокДоступныхПроектов();
КонецФункции

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПринятыеЧасыВСчетБудущихАктовОстатки.Проект КАК Проект,
	|	ПринятыеЧасыВСчетБудущихАктовОстатки.ЭтапПроекта КАК ЭтапПроекта,
	|	ПринятыеЧасыВСчетБудущихАктовОстатки.Дата КАК Дата,
	|	ПринятыеЧасыВСчетБудущихАктовОстатки.Сотрудник КАК Сотрудник,
	|	ПринятыеЧасыВСчетБудущихАктовОстатки.Подразделение КАК Подразделение,
	|	ПринятыеЧасыВСчетБудущихАктовОстатки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПринятыеЧасыВСчетБудущихАктовОстатки.КомментарийДляБудущегоАкта КАК КомментарийДляБудущегоАкта,
	|	ПринятыеЧасыВСчетБудущихАктовОстатки.ЧасыОстаток КАК Часы,
	|	ПринятыеЧасыВСчетБудущихАктовОстатки.СуммаОстаток КАК Сумма,
	|	УчетФактическихДанныхВремя.КонтрагентАбонент КАК Контрагент,
	|	УчетФактическихДанныхВремя.Работа КАК Работа,
	|	УчетФактическихДанныхВремя.Описание КАК ОписаниеРабот
	|ИЗ
	|	РегистрНакопления.ПринятыеЧасыВСчетБудущихАктов.Остатки(
	|			&Дата,
	|			(Сотрудник = &Сотрудник
	|				ИЛИ &Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|				И (Подразделение = &Подразделение
	|					ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	|				И (Проект = &Проект
	|					ИЛИ &Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка))) КАК ПринятыеЧасыВСчетБудущихАктовОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УчетФактическихДанных.Время КАК УчетФактическихДанныхВремя
	|		ПО ПринятыеЧасыВСчетБудущихАктовОстатки.Проект = УчетФактическихДанныхВремя.Проект
	|			И ПринятыеЧасыВСчетБудущихАктовОстатки.ЭтапПроекта = УчетФактическихДанныхВремя.ЭтапПроекта
	|			И ПринятыеЧасыВСчетБудущихАктовОстатки.Сотрудник = УчетФактическихДанныхВремя.Ссылка.Сотрудник
	|			И ПринятыеЧасыВСчетБудущихАктовОстатки.ИдентификаторСтроки = УчетФактическихДанныхВремя.ИдентификаторСтроки";
	
	Запрос.УстановитьПараметр("Дата", 				Конецдня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Проект", 			Объект.Проект);
	Запрос.УстановитьПараметр("Сотрудник", 			Объект.Сотрудник);
	Запрос.УстановитьПараметр("Подразделение", 		Объект.Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрокаТЧ = Объект.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьТаблицуВДеревоЗначений()
	
	ДФД = ДеревоРабот.ПолучитьЭлементы();
	ДФД.Очистить();

	Проекты = Объект.Работы.Выгрузить();
	Проекты.Свернуть("Проект", "Часы, Сумма");
	
	Сотрудники = Объект.Работы.Выгрузить();
	Сотрудники.Свернуть("Проект, Сотрудник", "Часы, Сумма");
	
	//РаботыВ = Объект.Работы.Выгрузить();
	//РаботыВ.Свернуть("Проект, Сотрудник, Работа", "ЭффективныеЧасы");
	//
	Для Каждого СтрПроект Из Проекты Цикл
		СтрокаПроекта = ДФД.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПроекта, СтрПроект);
		СтрокаПроекта.Уровень = 1;
		             
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Проект", СтрокаПроекта.Проект);
		
		МассивСотрудников = Сотрудники.НайтиСтроки(СтруктураПоиска);
		
		СтрокаПроекта = СтрокаПроекта.ПолучитьЭлементы();
		Для Каждого СтрСотр Из МассивСотрудников Цикл
			СтрокаСотрудника = СтрокаПроекта.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСотрудника, СтрСотр);
			СтрокаСотрудника.Уровень = 2;
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Проект", СтрПроект.Проект);
			СтруктураПоиска.Вставить("Сотрудник", СтрСотр.Сотрудник);
			
			МассивВидовРабот = Объект.Работы.НайтиСтроки(СтруктураПоиска);
			СтрокаСотрудника = СтрокаСотрудника.ПолучитьЭлементы();
			Для Каждого СтрокаВР Из МассивВидовРабот Цикл
				СтрокаВидовРабот = СтрокаСотрудника.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВидовРабот, СтрокаВР);
				СтрокаВидовРабот.Уровень = 3;
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАкт(Команда)
	ОткрытьФорму("Документ.ПриемЧасов.Форма.ФормаВыбораАкта", , ЭтаФорма,,,, Новый ОписаниеОповещения("УстановитьАктЗавершение",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("Структура") Тогда
	    ВозВрат;
	КонецЕсли;
	Акт 						= Значение.Акт;

	Для Каждого ИдентификаторСтроки Из Элементы.ДеревоРабот.ВыделенныеСтроки Цикл
		СтрокаТЧ = ДеревоРабот.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаТЧ.Уровень < 3 Тогда 
			Продолжить;
		КонецЕсли;	
		СтрокаТЧ.Акт = Акт;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьСтроки(Команда)
	Если Свернута Тогда
		РазвернутьСтроки();
		Свернута = Ложь;
	Иначе
		СвернутьСтроки();
		Свернута = Истина;
	КонецЕсли;	
КонецПроцедуры
 
&НаКлиенте
Процедура РазвернутьСтроки()
	Для Каждого Строка Из ДеревоРабот.ПолучитьЭлементы() Цикл
		Элементы.ДеревоРабот.Развернуть(Строка.ПолучитьИдентификатор());
		Для Каждого Строка2 Из Строка.ПолучитьЭлементы() Цикл
			Элементы.ДеревоРабот.Развернуть(Строка2.ПолучитьИдентификатор());
			Для Каждого Строка3 Из Строка2.ПолучитьЭлементы() Цикл
				Элементы.ДеревоРабот.Развернуть(Строка3.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
 
&НаКлиенте
Процедура СвернутьСтроки()
	Для Каждого Строка Из ДеревоРабот.ПолучитьЭлементы() Цикл
		Элементы.ДеревоРабот.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьДокументыЗавершение", ЭтаФорма), "Будут созданы документы ""Отнесение актов на принятые часы"". Продолжить?", РежимДиалогаВопрос.ДаНет);	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СоздатьДокументыНаСервере();
		Сообщить("Создание документов завершено");
		
		Объект.Работы.Очистить();
		ЗаполнитьПоОстаткамНаСервере();
		РазвернутьТаблицуВДеревоЗначений();	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыНаСервере()
	
	ДатаКонцаПериода = ТекущаяДата();
	
	Для Каждого СтрокаДерева0 Из ДеревоРабот.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаДерева1 Из СтрокаДерева0.ПолучитьЭлементы() Цикл
			ДокументОАНаПЧ = Документы.ОтнесениеАктовНаПринятыеЧасы.СоздатьДокумент();
			ДокументОАНаПЧ.Дата = ДатаКонцаПериода;
			ДокументОАНаПЧ.Комментарий = "Создан автоматически обработкой ""Отнесение принятых часов на акт""";
			ДокументОАНаПЧ.Проект = СтрокаДерева1.Проект;
			ДокументОАНаПЧ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Для Каждого СтрокаДерева2 Из СтрокаДерева1.ПолучитьЭлементы() Цикл
				Если ЗначениеЗаполнено(СтрокаДерева2.Акт) Тогда
					СтрРабот = ДокументОАНаПЧ.Работы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрРабот, СтрокаДерева2);
				КонецЕсли;	
			КонецЦикла;	
			Попытка
				Если ДокументОАНаПЧ.Работы.Количество() <> 0 Тогда
					ДокументОАНаПЧ.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;	
			Исключение
				Сообщить("Не удалось создать документ по причине: " + ОписаниеОшибки());
			КонецПопытки;	
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры
#Область Удалить

//&НаСервере
//Функция ЧасыВоВремя(Часы, ДатаВремя = '00010101')
//	Время = ДатаВремя + Часы * 3600;
//	Возврат ?(Секунда(Время) < 30, НачалоМинуты(Время), КонецМинуты(Время) + 1);
//КонецФункции



//&НаКлиенте
//Функция ПроверитьКорректностьДанных()
//	ДанныеКорректны = Истина;
//	
//	Для Каждого СтрокаДерева0 Из ДеревоРабот.ПолучитьЭлементы() Цикл
//		Для Каждого СтрокаДерева1 Из СтрокаДерева0.ПолучитьЭлементы() Цикл
//			Для Каждого СтрокаДерева2 Из СтрокаДерева1.ПолучитьЭлементы() Цикл
//				Для Каждого СтрокаДерева3 Из СтрокаДерева2.ПолучитьЭлементы() Цикл
//					Если СтрокаДерева3.Коэффициент < 1 И Не ЗначениеЗаполнено(СтрокаДерева3.ВидДействияСНепринятымиЧасами) Тогда 
//						ДанныеКорректны = Ложь;
//						Сообщение = Новый СообщениеПользователю;
//						Сообщение.Текст = "Не заполнено поле ""Непринятые часы"" " + Символы.ПС + 
//										"Проект: " + СтрокаДерева3.Проект + Символы.ПС + 
//										"Сотрудник: " + СтрокаДерева3.Сотрудник + Символы.ПС +
//										"Работа: " + СтрокаДерева3.Работа + Символы.ПС +
//										"Дата: " + СтрокаДерева3.Дата + Символы.ПС +
//										"Коэффициент: " + СтрокаДерева3.Коэффициент + Символы.ПС + Символы.ПС;
//						Сообщение.Сообщить();
//					КонецЕсли;	
//				КонецЦикла;	
//			КонецЦикла;	
//		КонецЦикла;	
//	КонецЦикла;	
//	Возврат ДанныеКорректны;
//КонецФункции // ПроверитьКорректностьДанных()

//	
//	



//&НаКлиенте
//Процедура ПроектНачалоВыбора_Завершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
//	Если ВыбранныйЭлемент = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	Объект.Проект = ВыбранныйЭлемент.Значение;
//КонецПроцедуры

//&НаКлиенте
//Процедура РазбитьСтроку(Команда)
//	
//	Если Элементы.ДеревоРабот.ТекущаяСтрока = Неопределено Тогда 
//		Сообщить("Выберите строку, которую необходимо разбить");
//		Возврат;
//	КонецЕсли;
//	
//	ОткрытьФорму("Документ.ПриемЧасов.Форма.ФормаВыбораВремени", , ЭтаФорма,,,, Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
//		
//КонецПроцедуры

//&НаКлиенте
//Процедура РазбитьСтрокуЗавершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	РезультатВыбора = Результат;
//	Если РезультатВыбора = КодВозвратаДиалога.Отмена Или РезультатВыбора = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	НовоеВремя = РезультатВыбора.НовоеВремя;
//	
//	НомерСтроки = Элементы.ДеревоРабот.ТекущаяСтрока;
//	ТекущаяСтрока = ДеревоРабот.НайтиПоИдентификатору(НомерСтроки);
//	Если ТекущаяСтрока.Уровень < 3 Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	РеквизитДерево = ЭтаФорма["ДеревоРабот"];
//	ИДРодителя = ТекущаяСтрока.ПолучитьРодителя().ПолучитьИдентификатор();
//	Приемник = РеквизитДерево.НайтиПоИдентификатору(ИДРодителя);
//	НоваяСтрока = СкопироватьСтрокуДерева(РеквизитДерево, Приемник, ТекущаяСтрока);
//	
//	//ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока, , "НомерСтроки");
//	НоваяСтрока.ИдентификаторСкорректированнойСтроки = Строка(Новый УникальныйИдентификатор);

//	ТекущаяСтрока.ВремяОкончания = '00010101' + (ТекущаяСтрока.ВремяОкончания - НовоеВремя);
//	ОбновитьПоляВремени(ТекущаяСтрока);
//	
//	НоваяСтрока.ВремяНачала = ТекущаяСтрока.ВремяОкончания;//ВремяНачала;
//	ОбновитьПоляВремени(НоваяСтрока);
//	ПересчитатьИтогиПоГруппировкам(НоваяСтрока);
//	
//	Модифицированность = Истина;
//КонецПроцедуры

//&НаКлиенте
//Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

//    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

//    // Источник может быть уже перенесен
//    // Это произходит если выделены несколько элементов
//    // одной и той же ветви дерева на разных уровнях иерархии
//    Если Источник = Неопределено Тогда
//        Возврат Неопределено;
//    КонецЕсли;

//    Если Приемник = Неопределено Тогда
//        // Добавляем в корень
//        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
//    Иначе
//        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
//    КонецЕсли;

//    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

//    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
//    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
//        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[КолПодчиненныхСтрок - ОбратныйИндекс];
//        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
//    КонецЦикла;

//	//Если Источник.ПолучитьРодителя() = Неопределено Тогда
//	//    РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
//	//Иначе
//	//    Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
//	//КонецЕсли;

//    Возврат НоваяСтрока;

//КонецФункции

//&НаКлиенте    
//Процедура ОбновитьПоляВремени(ТекущиеДанные)
//	
//	ТекущиеДанные.ВремяОкончания = НачалоМинуты(ТекущиеДанные.ВремяОкончания);
//	ТекущиеДанные.ВремяНачала = НачалоМинуты(ТекущиеДанные.ВремяНачала);

//	Если ЗначениеЗаполнено(ТекущиеДанные.ВремяОкончания) Тогда
//		Время = ТекущиеДанные.ВремяОкончания - ТекущиеДанные.ВремяНачала;
//		
//		ТекущиеДанные.Время = Дата(1,1,1) + Время;
//		ТекущиеДанные.Часы = Время / 3600;

//		Если ТекущиеДанные.Часы < ТекущиеДанные.ЭффективныеЧасы Тогда
//			ТекущиеДанные.ЭффективныеЧасы = ТекущиеДанные.Часы;
//			ТекущиеДанные.ЭффективноеВремя = ТекущиеДанные.Время;
//		    
//			Если ТекущиеДанные.Часы > 0 Тогда
//				ТекущиеДанные.Коэффициент = ТекущиеДанные.ЭффективныеЧасы / ТекущиеДанные.Часы;
//			Иначе
//			    ТекущиеДанные.Коэффициент = 0;
//			КонецЕсли;

//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура РаспределитьВремя(Команда)
//	
//	ОткрытьФорму("Документ.ПриемЧасов.Форма.ФормаВыбораВремени", , ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьВремяЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ВыбратьВремяЗавершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	РезультатВыбора = Результат;
//	Если РезультатВыбора = КодВозвратаДиалога.Отмена Или РезультатВыбора = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	РаспределитьЧасов = РезультатВыбора.НовыеЧасы;
//	
//	ЧасыПоСтрокам = 0;
//	Для Каждого Идентификатор Из Элементы.ДеревоРабот.ВыделенныеСтроки Цикл
//		Строка = ДеревоРабот.НайтиПоИдентификатору(Идентификатор);
//		Если Строка.Уровень < 3 Тогда 
//			Продолжить;
//		КонецЕсли;	
//		ЧасыПоСтрокам = ЧасыПоСтрокам + Строка.Часы;
//	КонецЦикла;
//	
//	Коэффициент = РаспределитьЧасов / ЧасыПоСтрокам;
//	Для Каждого Идентификатор Из Элементы.ДеревоРабот.ВыделенныеСтроки Цикл
//		Строка = ДеревоРабот.НайтиПоИдентификатору(Идентификатор);
//		Если Строка.Уровень < 3 Тогда 
//			Продолжить;
//		КонецЕсли;	
//		Строка.Коэффициент = Коэффициент; 
//		Строка.ЭффективныеЧасы = Строка.Часы * Коэффициент;
//		Строка.ЭффективноеВремя = ЧасыВоВремя(Строка.ЭффективныеЧасы);
//	КонецЦикла;
//КонецПроцедуры

//&НаКлиенте
//Процедура УстановитьКоэффициент(Команда)
//	
//	ОткрытьФорму("Обработка.ОтнесениеПринятыхЧасовНаАкт.Форма.ФормаВыбораКоэффициента", , ЭтаФорма,,,, Новый ОписаниеОповещения("УстановитьКоэффициентЗавершение",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
//КонецПроцедуры

//&НаКлиенте
//Процедура УстановитьКоэффициентЗавершение(Значение, ДополнительныеПараметры) Экспорт
//	
//	//Коэффициент = ?(Значение = Неопределено, ДополнительныеПараметры.Коэффициент, Значение);
//	//
//	//Если НЕ (Значение <> Неопределено) Тогда
//	//	Возврат;
//	//КонецЕсли;
//	//
//    Если ТипЗнч(Значение) <> Тип("Структура") Тогда
//        ВозВрат;
//    КонецЕсли;
//	Коэффициент 					= Значение.Коэффициент;
//	ВидДействияСНепринятымиЧасами 	= Значение.ВидДействияСНепринятымиЧасами;
//	ПричинаНепринятия 				= Значение.ПричинаНепринятия;
//	ОписаниеПричины 				= Значение.ОписаниеПричины;

//	Для Каждого ИдентификаторСтроки Из Элементы.ДеревоРабот.ВыделенныеСтроки Цикл
//		СтрокаТЧ = ДеревоРабот.НайтиПоИдентификатору(ИдентификаторСтроки);
//		Если СтрокаТЧ.Уровень < 3 Тогда 
//			Продолжить;
//		КонецЕсли;	
//		ЭффективныеЧасы = СтрокаТЧ.Часы * Коэффициент;
//		СтрокаТЧ.Коэффициент = Коэффициент;
//		СтрокаТЧ.ВидДействияСНепринятымиЧасами = ВидДействияСНепринятымиЧасами;
//		СтрокаТЧ.ПричинаНепринятия = ПричинаНепринятия;
//		СтрокаТЧ.ОписаниеПричины = ОписаниеПричины;
//		СтрокаТЧ.ЭффективныеЧасы = ЭффективныеЧасы;
//		СтрокаТЧ.ЭффективноеВремя = ЧасыВоВремя(ЭффективныеЧасы);
//	КонецЦикла;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура УстановитьНовыйЭтап(Команда)
//	
//	СтруктураПараметров = Новый Структура;
//	СтруктураПараметров.Вставить("Проект", Объект.Проект);
//	ОткрытьФорму("Документ.ПриемЧасов.Форма.ФормаВыбораНовогоЭтапа", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьНовыйЭтапЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура УстановитьНовыйЭтапЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
//	
//	ЭтапДляЗаполнения = ДополнительныеПараметры.ЭтапДляЗаполнения;
//	
//	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Для Каждого Идентификатор Из Элементы.ДеревоРабот.ВыделенныеСтроки Цикл
//		Строка = ДеревоРабот.НайтиПоИдентификатору(Идентификатор);
//		Если Строка.Уровень < 3 Тогда 
//			Продолжить;
//		КонецЕсли;	
//		Строка.НовыйЭтапПроекта = ЭтапДляЗаполнения;
//	КонецЦикла;

//КонецПроцедуры

//&НаКлиенте
//Процедура ВыбратьНовыйЭтапЗавершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	ЭтапДляЗаполнения = Результат;
//	Если НЕ ЗначениеЗаполнено(ЭтапДляЗаполнения) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьНовыйЭтапЗавершение", ЭтотОбъект, Новый Структура("ЭтапДляЗаполнения", ЭтапДляЗаполнения)), "Установить для выделенных строк новый этап: """ + ЭтапДляЗаполнения + """?", РежимДиалогаВопрос.ДаНет);
//КонецПроцедуры

//&НаКлиенте
//Процедура УстановитьНовоеПодразделение(Команда)
//	
//	ОткрытьФорму("Документ.ПриемЧасов.Форма.ФормаВыбораНовогоПодразделения", , ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьНовоеПодразделениеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ВыбратьНовоеПодразделениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	ПодразделениеДляЗаполнения = Результат;
//	Если НЕ ЗначениеЗаполнено(ПодразделениеДляЗаполнения) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьНовоеПодразделениеЗавершение", ЭтотОбъект, Новый Структура("ПодразделениеДляЗаполнения", ПодразделениеДляЗаполнения)), "Установить для выделенных строк новое подразделение: """ + ПодразделениеДляЗаполнения + """?", РежимДиалогаВопрос.ДаНет);
//КонецПроцедуры


//&НаКлиенте
//Процедура УстановитьНовоеПодразделениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
//	
//	ПодразделениеДляЗаполнения = ДополнительныеПараметры.ПодразделениеДляЗаполнения;
//	
//	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Для Каждого Идентификатор Из Элементы.ДеревоРабот.ВыделенныеСтроки Цикл
//		Строка = ДеревоРабот.НайтиПоИдентификатору(Идентификатор);
//		Если Строка.Уровень < 3 Тогда 
//			Продолжить;
//		КонецЕсли;	
//		Строка.НовоеПодразделение = ПодразделениеДляЗаполнения;
//	КонецЦикла;

//КонецПроцедуры

//&НаКлиенте
//Процедура ДеревоРаботКоэффициентПриИзменении(Элемент)
//	ЭффективныеЧасы = Элементы.ДеревоРабот.ТекущиеДанные.Часы * Элементы.ДеревоРабот.ТекущиеДанные.Коэффициент;
//	Элементы.ДеревоРабот.ТекущиеДанные.ЭффективныеЧасы = ЭффективныеЧасы;
//	Элементы.ДеревоРабот.ТекущиеДанные.ЭффективноеВремя = ЧасыВоВремя(ЭффективныеЧасы);
//	
//	ПересчитатьИтогиПоГруппировкам(Элементы.ДеревоРабот.ТекущиеДанные);
//КонецПроцедуры

//&НаКлиенте
//Процедура ПересчитатьИтогиПоГруппировкам(ТекущиеДанные)

//	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
//	Если ТекущийРодитель <> Неопределено Тогда
//		
//		ЭффективныеЧасы = 0;
//		Для Каждого ЭлементД Из ТекущийРодитель.ПолучитьЭлементы() Цикл
//			ЭффективныеЧасы = ЭффективныеЧасы + ЭлементД.ЭффективныеЧасы;	
//		КонецЦикла;	
//		ТекущийРодитель.ЭффективныеЧасы = ЭффективныеЧасы;
//		ПересчитатьИтогиПоГруппировкам(ТекущийРодитель);
//	КонецЕсли;	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПересчитатьВесьИтог(СтрокаДерева)

//	Для Каждого ЭлементД Из СтрокаДерева.ПолучитьЭлементы() Цикл
//		
//		Если ЭлементД.ПолучитьЭлементы().Количество() = 0 Тогда
//			ПересчитатьИтогиПоГруппировкам(ЭлементД);
//		Иначе
//			ПересчитатьВесьИтог(ЭлементД);
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры


//&НаКлиенте
//Процедура ДеревоРаботПослеУдаления(Элемент)
//	ПересчитатьВесьИтог(ДеревоРабот);	
//КонецПроцедуры


//&НаКлиенте
//Процедура ДеревоРаботАктПриИзменении(Элемент)
//	ТекСтрока = Элементы.ДеревоРабот.ТекущиеДанные;
//	Если ЗначениеЗаполнено(ТекСтрока.Акт) Тогда
//		ТекСтрока.ВСчетБудущегоАкта = Ложь;
//		ТекСтрока.КомментарийДляБудущегоАкта = "";
//	КонецЕсли;	
//		
//КонецПроцедуры

#КонецОбласти