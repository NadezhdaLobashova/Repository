
&НаКлиенте
//Выгрузка данных в НСИ
//
Процедура ВыгрузитьДанные(Команда)
	ВыгрузитьДанныеНаСервере();
	ЭтаФорма.ОбновитьОтображениеДанных();
	Элементы.СостоянияОбменовДанными.Обновить();
КонецПроцедуры

&НаСервере
//Выгрузка данных в НСИ на сервере
//
Процедура ВыгрузитьДанныеНаСервере()
	пОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураОбмена = пОбъект.ПолучитьСтруктуруОбмена();
	ВсеДанныеВыгружены = Ложь;
	Отказ = Ложь;
	пОбъект.ВыполнитьВыгрузкуДанных(СтруктураОбмена, ВсеДанныеВыгружены, Истина, Отказ);
	Если Не Отказ И Не ВсеДанныеВыгружены Тогда 
		Сообщить("Возможно, выгружены не все данные, а только один пакет. Повторите загрузку и выгрузку или используйте кнопку ""Произвести обмен""");
	КонецЕсли;
	ЗначениеВРеквизитФормы(пОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
//Сериализация зарегистрированных в плане обмена данных
//
Процедура Сериализовать(Команда)
	СериализоватьНаСервере();
	//ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры

&НаСервере
//Сериализация зарегистрированных в плане обмена данных на сервере
//
Процедура СериализоватьНаСервере()
	
	пОбъект = РеквизитФормыВЗначение("Объект");
	пОбъект.ПредставлениеПакетаОбмена = "";
	СтруктураОбмена = пОбъект.ПолучитьСтруктуруОбмена(Истина);	
	УстановитьПривилегированныйРежим(Истина); 
	ОбменДаннымиНСИ_20Сервер.ВыполнитьВыгрузкуДляУзлаИнформационнойБазыЧерезСтроку("НСИ_20", СтруктураОбмена.УзелНСИ.Код, пОбъект.ПредставлениеПакетаОбмена,Истина);
	ЗначениеВРеквизитФормы(пОбъект, "Объект");

КонецПроцедуры


&НаКлиенте
//Загрузить данные из НСИ
//
Процедура ЗагрузитьДанные(Команда)
	ЗагрузитьДанныеНаСервере();
	Элементы.СостоянияОбменовДанными.Обновить();
КонецПроцедуры


&НаСервере
//Загрузить данные из НСИ на сервере
//
Процедура ЗагрузитьДанныеНаСервере()
    
	пОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураОбмена = пОбъект.ПолучитьСтруктуруОбмена();
	ВсеДанныеПолучены = Ложь;
	Отказ = Ложь;
	пОбъект.ВыполнитьЗагрузкуДанных(СтруктураОбмена, ВсеДанныеПолучены, Истина, Отказ);
	Если Не Отказ И Не ВсеДанныеПолучены Тогда 
		Сообщить("Возможно, получены не все данные, а только один пакет. Повторите выгрузку и загрузку или используйте кнопку ""Произвести обмен""");
	КонецЕсли;
	ЗначениеВРеквизитФормы(пОбъект, "Объект");

КонецПроцедуры

&НаКлиенте
//Зарегистрировать изменения для узла в плане обмена
//
Процедура ЗарегистрироватьИзменения(Команда)
	ЗарегистрироватьИзмененияНаСервере1(ЭтаФорма.Узел,ЭтаФорма.ДанныеДляРегистрации);
КонецПроцедуры

&НаСервере
//Зарегистрировать изменения для узла в плане обмена на сервере
Процедура ЗарегистрироватьИзмененияНаСервере1(Узел,ДанныеДляРегистрации)
	
	Если Не ЗначениеЗаполнено(ДанныеДляРегистрации)Тогда
		Сообщить("Не выбраны данные для регистрации");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Сообщить("Не выбран узел");
		Возврат;
	КонецЕсли;
	//ПланыОбмена.УстановитьГлавныйУзел(Неопределено); 
	РегОбъект = ДанныеДляРегистрации.ПолучитьОбъект();
	ПланыОбмена.ЗарегистрироватьИзменения(Узел,РегОбъект);
	
КонецПроцедуры

&НаКлиенте
// Выполнить обмен данными с НСИ
//
Процедура ПроизвестиОбмен(Команда)
	ПроизвестиОбменНаСервере();
	Элементы.СостоянияОбменовДанными.Обновить();
КонецПроцедуры

&НаСервере
// Выполнить обмен данными с НСИ на сервере
//
Процедура ПроизвестиОбменНаСервере()
	пОбъект = РеквизитФормыВЗначение("Объект");
	пОбъект.ВыполнитьОбмен();
	ЗначениеВРеквизитФормы(пОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
//Удалить регистрацию изменений для узла
//
Процедура УдалитьРегистрациюИзменений(Команда)
	УдалитьРегистрациюИзмененийНаСервере(ЭтаФорма.ДанныеДляРегистрации,ЭтаФорма.Узел);
КонецПроцедуры

&НаСервере
//Удалить регистрацию изменений для узла на сервере
//
Процедура УдалитьРегистрациюИзмененийНаСервере(ДанныеДляРегистрации, Узел)
	Если ЗначениеЗаполнено(Узел) Тогда
		УзелОбмена = Узел;
	Иначе
		пОбъект = РеквизитФормыВЗначение("Объект");
		СтруктураОбмена = пОбъект.ПолучитьСтруктуруОбмена(Истина);
		УзелОбмена = СтруктураОбмена.УзелНСИ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДляРегистрации) Тогда
		ПараметрУдаления = ДанныеДляРегистрации.ПолучитьОбъект();
	Иначе
		ПараметрУдаления = УзелОбмена.НомерОтправленного+1;
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена);

КонецПроцедуры

&НаКлиенте
//Загрузить пакет обмена из строки
//
Процедура ЗагрузитьИзСтроки(Команда)
	ЗагрузитьИзСтрокиНаСервере();
КонецПроцедуры

&НаСервере
//Загрузить пакет обмена из строки на сервере
//
Процедура ЗагрузитьИзСтрокиНаСервере()
	пОбъект = РеквизитФормыВЗначение("Объект");
	сообщениеОбмена = пОбъект.ПредставлениеПакетаОбмена;
	Если Не ЗначениеЗаполнено(сообщениеОбмена) Тогда
		Сообщить("Не заполнено значение строки!");
		Возврат;
	КонецЕсли;
	СтруктураОбмена = пОбъект.ПолучитьСтруктуруОбмена(Истина);
	КодУзлаИнформационнойБазы = СтруктураОбмена.УзелНСИ.Код;
	ИмяПланаОбмена = "НСИ_20";
	УстановитьПривилегированныйРежим(Истина);
	ОбменДаннымиНСИ_20Сервер.ВыполнитьЗагрузкуДляУзлаИнформационнойБазыЧерезСтроку(ИмяПланаОбмена, КодУзлаИнформационнойБазы, СообщениеОбмена);
	ЗначениеВРеквизитФормы(пОбъект, "Объект");

КонецПроцедуры

&НаСервере
//Обработчик ПриСозданииНаСервере
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтаФорма.ИспользованиеОбменаДанными = Константы.ИспользоватьОбменДаннымиНСИ20.получить();
	ПроверитьНастройкуПланаОбмена();
	     	     		 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Если ЭтаФорма.ИспользованиеОбменаДанными Тогда
	//	ЭтаФорма.Элементы.Настройка.Видимость         = Ложь;
	//	ЭтаФорма.Элементы.Тестирование.Видимость      = Истина;
	//	ЭтаФорма.Элементы.Выгрузка_Загрузка.Видимость = Истина;
	//	ЭтаФорма.Элементы.Представление.Видимость     = Истина;
	//Иначе
	//	ЭтаФорма.Элементы.Настройка.Видимость         = Истина;
	//	ЭтаФорма.Элементы.Выгрузка_Загрузка.Видимость = Ложь;
	//	ЭтаФорма.Элементы.Тестирование.Видимость      = Ложь;
	//	ЭтаФорма.Элементы.Представление.Видимость     = Ложь;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//Производит настройку текущего узла плана обмена 
//
Процедура НастроитьТекущийУзелПланаОбмена(Команда)
	
	НастроитьТекущийУзелПланаОбменаНаСеревере(Узел);
	ПараметрыФормы = Новый Структура("Ключ",Узел);
	ОткрытьФорму("ПланОбмена.НСИ_20.ФормаОбъекта",ПараметрыФормы);
	ПроверитьНастройкуПланаОбмена();
	ЭтаФорма.ОбновитьОтображениеДанных();

КонецПроцедуры

&НаСервере
//Производит настройку текущего узла плана обмена на сервере 
//
Процедура НастроитьТекущийУзелПланаОбменаНаСеревере(Узел)
    
	Узел = ПланыОбмена.НСИ_20.ЭтотУзел();
	
КонецПроцедуры

 &НаКлиенте
//Производит настройку узла НСИ плана обмена 
//
Процедура НастроитьУзелНСИПланаОбмена(Команда)
	
	НастроитьУзелНСИПланаОбменаНаСеревере(Узел);
	ПараметрыФормы = Новый Структура("Ключ",Узел);
	ОткрытьФорму("ПланОбмена.НСИ_20.ФормаОбъекта",ПараметрыФормы);
	ПроверитьНастройкуПланаОбмена();
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры

&НаСервере
//Производит настройку узла НСИ плана обмена на сервере 
//
Процедура НастроитьУзелНСИПланаОбменаНаСеревере(УзелНСИ)
	
	УзелНСИ = ПланыОбмена.НСИ_20.НайтиПоКоду(0);
	Если УзелНСИ = Неопределено Тогда
		УзелНСИОбъект =  ПланыОбмена.НСИ_20.СоздатьУзел();
		УзелНСИОбъект.Код = 0;
		УзелНСИОбъект.Наименование = "НСИ 2.0";
		УзелНСИОбъект.Записать();
		УзелНСИ = УзелНСИОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНастройкуПланаОбмена()
	Результат = Истина;	
	УзелНСИ = ПланыОбмена.НСИ_20.НайтиПоКоду(0);
	Если УзелНСИ = Неопределено
		Или Не ЗначениеЗаполнено(УзелНСИ.Логин)
		Или Не ЗначениеЗаполнено(УзелНСИ.Пароль)
		Или Не ЗначениеЗаполнено(УзелНСИ.URLВебСервиса)Тогда
		Результат =  Ложь;
	КонецЕсли;
	
	ЭтотУзел = ПланыОбмена.НСИ_20.ЭтотУзел();
	Если Не ЗначениеЗаполнено(ЭтотУзел.Код) Тогда
		Результат =  Ложь;
	КонецЕсли;
		
	ЭтаФорма.НастройкаПланаОбмена = Результат;
	
КонецФункции

&НаКлиенте
//Процедура настройки расписания регламентного задания
//
Процедура НастроитьРегламентноеЗадание(Команда)
	Расписание = ПолучитьРасписаниеНаСервере();
	Если Расписание = Неопределено Тогда
		Сообщить("Не найдно регламентное задание!");
		Возврат;
	КонецЕсли;
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
    ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииРасписания", ЭтотОбъект, ЭтаФорма);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРасписания(Расписание, Форма) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
    ИзменитьРасписаниеНаСервере(Расписание);	
	
КонецПроцедуры

//&НаКлиенте
//функция ГлобальныеНастройкиОбновления()
//	
//	НастройкиОбновления = ИнтернетПоддержкаПользователейКлиент.ЗначениеПараметраПриложения(
//		"ПолучениеОбновленийПрограммы\НастройкиОбновления");
//	Если НастройкиОбновления = Неопределено Тогда
//		НастройкиОбновления = ПолучениеОбновленийПрограммыВызовСервера.НастройкиОбновления();
//		ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
//			"ПолучениеОбновленийПрограммы\НастройкиОбновления", НастройкиОбновления);
//	КонецЕсли;
//	
//	Возврат НастройкиОбновления;
//	
//КонецФункции

//&НаСервере
//Функция ЗначениеПараметраПриложения(ИмяПараметра, ЗначениеПоУмолчанию = Неопределено) Экспорт

//	ПараметрыБиблиотеки = ПараметрыПриложения.Получить("ИнтернетПоддержкаПользователей");
//	Если ПараметрыБиблиотеки = Неопределено Тогда
//		Возврат ЗначениеПоУмолчанию;
//	КонецЕсли;

//	ЗначениеПараметра = ПараметрыБиблиотеки.Получить(ИмяПараметра);
//	Возврат ?(ЗначениеПараметра = Неопределено, ЗначениеПоУмолчанию, ЗначениеПараметра);

//КонецФункции

&НаСервере
Функция ПолучитьРасписаниеНаСервере()
	
	ФоновоеЗадание = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Ключ","ОбменДанныиНСИ_20"));
	Если ФоновоеЗадание.Количество() > 0 Тогда
		Возврат ФоновоеЗадание[0].Расписание;
	КонецЕсли;
	Возврат Неопределено;
	
КОнецФункции

&НаСервере
Процедура ИзменитьРасписаниеНаСервере(Расписание)
	
	ФоновоеЗадание = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Наименование","ОбменДанныиНСИ_20"));
	Если ФоновоеЗадание.Количество() > 0 Тогда
		ФоновоеЗадание[0].Расписание = Расписание;
		ФоновоеЗадание[0].Использование = Истина;
		ФоновоеЗадание[0].Записать();;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
//Установить значение константы ИспользоватьОбменДаннымиНСИ20
//
Процедура ИспользованиеОбменаДаннымиПриИзменении(Элемент)
	ИспользованиеОбменаДаннымиПриИзмененииНаСервере(ЭтаФорма.ИспользованиеОбменаДанными);
КонецПроцедуры

&НаСервере
//Установить значение константы ИспользоватьОбменДаннымиНСИ20 на сервере
//
Процедура ИспользованиеОбменаДаннымиПриИзмененииНаСервере(Значение)
	
	ОбменНСИ = Константы.ИспользоватьОбменДаннымиНСИ20.СоздатьМенеджерЗначения();
	ОбменНСИ.Значение = Значение;
	ОбменНси.Записать();
	
КонецПроцедуры

&НаСервере
Функция ВыгрузкаКодовСоответствияСервер()
	пОбъект = РеквизитФормыВЗначение("Объект");
	ТД = пОбъект.ВыгрузитьТаблицуСоответствияКодов();
	ЗначениеВРеквизитФормы(пОбъект, "Объект");
	Возврат ТД;
КонецФункции

&НаКлиенте
Процедура ВыгрузкаКодовСоответствия(Команда)
	ТД = ВыгрузкаКодовСоответствияСервер();
	Если ТД <> Неопределено Тогда 
		ТД.Показать();
	КонецЕсли;
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура   ЗаполнитьСписокСоставаНаСервере()
    
   
    Для Каждого ЭлементСостава Из Метаданные.ПланыОбмена.НСИ_20.Состав Цикл
        Если Метаданные.Справочники.Найти(ЭлементСостава.Метаданные.Имя) <> Неопределено Тогда 
            СписокМетаданных.Добавить(ЭлементСостава.Метаданные.имя, ЭлементСостава.Метаданные.Синоним,, БиблиотекаКартинок.Справочник);
        КонецЕсли;
    КонецЦикла;	
    СписокМетаданных.СортироватьПоПредставлению();
    
    //Возврат ПоместитьВоВременноеХранилище(СписокЗначений,ЭтаФорма.УникальныйИдентификатор);;
    
КонецПроцедуры // ()


&НаКлиенте
Процедура ДанныеДляРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
    Если ДанныеДляРегистрации <> Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    СтандартнаяОбработка =Ложь;
     
    ЗаполнитьСписокСоставаНаСервере();
    СписокПараметров = Новый Структура;
    СписокПараметров.Вставить("Элемент",Элемент);
    Оповещение = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма,СписокПараметров);
    СписокМетаданных.ПоказатьВыборЭлемента(Оповещение, "Выберите нужный вам объект.",Элемент);
    
    
    
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлемента(ВыбранныйЭлемент, СписокПараметров) Экспорт
    
    Если ВыбранныйЭлемент = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ИмяСправочника = ВыбранныйЭлемент.Значение;
    
    ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
    
    ОткрытьФорму("Справочник."+ИмяСправочника+".ФормаВыбора",ПараметрыФормы,СписокПараметров.Элемент);
    
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьДанные(Команда)
	ЗарегистрироватьДанныеНаСервере(Узел);
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьДанныеНаСервере(Узел)
	
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Сообщить("Не выбран узел");
		Возврат;
	КонецЕсли;
	
	//Сначала очищаем все зарегистрированные изменения
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел);	
	
    //Если Организации Тогда
    //	//Регистрируем изменения по ОРГАНИЗАЦИЯМ	
    //	Запрос = Новый Запрос;
    //	Запрос.Текст = 
    //	"ВЫБРАТЬ
    //	|	Организации.Ссылка КАК Ссылка
    //	|ИЗ
    //	|	Справочник.Организации КАК Организации
    //	|ГДЕ
    //	|	НЕ Организации.ПометкаУдаления";
    //	
    //	РезультатЗапроса = Запрос.Выполнить();
    //	
    //	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    //	ДанныхЗарегистрировано = 0;
    //	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    //		РегОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
    //		ПланыОбмена.ЗарегистрироватьИзменения(Узел,РегОбъект);
    //		ДанныхЗарегистрировано = ДанныхЗарегистрировано + 1;
    //	КонецЦикла;
    //	Сообщить("ОРГАНИЗАЦИИ: " + ДанныхЗарегистрировано);	
    //КонецЕсли;
	
	Если Подразделения Тогда
		//Регистрируем изменения по ПОДРАЗДЕЛЕНИЯМ	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Подразделения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|ГДЕ
		|	НЕ Подразделения.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ДанныхЗарегистрировано = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РегОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ПланыОбмена.ЗарегистрироватьИзменения(Узел,РегОбъект);
			ДанныхЗарегистрировано = ДанныхЗарегистрировано + 1;
		КонецЦикла;
		Сообщить("ПОДРАЗДЕЛЕНИЯ: " + ДанныхЗарегистрировано);	
	КонецЕсли;
	
    //Если Физлица Тогда
    //	//Регистрируем изменения по ФИЗЛИЦАМ	
    //	Запрос = Новый Запрос;
    //	Запрос.Текст = 
    //	"ВЫБРАТЬ
    //	|	РаботникиСрезПоследних.ФизическоеЛицо КАК Ссылка
    //	|ИЗ
    //	|	РегистрСведений.Работники.СрезПоследних КАК РаботникиСрезПоследних
    //	|ГДЕ
    //	|	РаботникиСрезПоследних.ФизическоеЛицо В
    //	|			(ВЫБРАТЬ
    //	|				СотрудникиОрганизаций.ФизическоеЛицо КАК Ссылка
    //	|			ИЗ
    //	|				Справочник.Сотрудники КАК СотрудникиОрганизаций
    //	|			ГДЕ
    //	|				НЕ СотрудникиОрганизаций.ВАрхиве
    //	|				И НЕ СотрудникиОрганизаций.ПометкаУдаления
    //	|			СГРУППИРОВАТЬ ПО
    //	|				СотрудникиОрганизаций.ФизическоеЛицо,
    //	|				СотрудникиОрганизаций.ВАрхиве)";
    //	
    //	РезультатЗапроса = Запрос.Выполнить();
    //	
    //	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    //	ДанныхЗарегистрировано = 0;
    //	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    //		РегОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
    //		ПланыОбмена.ЗарегистрироватьИзменения(Узел,РегОбъект);
    //		ДанныхЗарегистрировано = ДанныхЗарегистрировано + 1;
    //	КонецЦикла;
    //	Сообщить("ФИЗЛИЦА: " + ДанныхЗарегистрировано);
    //КонецЕсли;
	
    //Если Фотографии Тогда
    //	//Регистрируем изменения по ФОТОГРАФИЯМ	
    //	Запрос = Новый Запрос;
    //	Запрос.Текст = 
    //	"ВЫБРАТЬ
    //	|	ФизическиеЛицаПрисоединенныеФайлы.Ссылка КАК Ссылка
    //	|ИЗ
    //	|	Справочник.ФизическиеЛицаПрисоединенныеФайлы КАК ФизическиеЛицаПрисоединенныеФайлы
    //	|ГДЕ
    //	|	НЕ ФизическиеЛицаПрисоединенныеФайлы.ПометкаУдаления";
    //	
    //	РезультатЗапроса = Запрос.Выполнить();
    //	
    //	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    //	ДанныхЗарегистрировано = 0;
    //	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    //		РегОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
    //		ПланыОбмена.ЗарегистрироватьИзменения(Узел,РегОбъект);
    //		ДанныхЗарегистрировано = ДанныхЗарегистрировано + 1;
    //	КонецЦикла;
    //	Сообщить("ФОТОГРАФИИ: " + ДанныхЗарегистрировано);
    //КонецЕсли;
	
	Если Проекты Тогда
		//Регистрируем изменения по ПРОЕКТАМ	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
        |   Проекты.Ссылка КАК Ссылка
        |ИЗ
        |   Справочник.Проекты КАК Проекты
        |ГДЕ
        |   НЕ Проекты.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		ДанныхЗарегистрировано = 0;
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РегОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ПланыОбмена.ЗарегистрироватьИзменения(Узел,РегОбъект);
			ДанныхЗарегистрировано = ДанныхЗарегистрировано + 1;
		КонецЦикла;
		Сообщить("ПРОЕКТЫ: " + ДанныхЗарегистрировано);
	КонецЕсли;
	
	Если Должности Тогда
		
		//Регистрируем изменения по ПОДРАЗДЕЛЕНИЯМ	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Должности.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Должности КАК Должности
		|ГДЕ
		|	НЕ Должности.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ДанныхЗарегистрировано = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РегОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ПланыОбмена.ЗарегистрироватьИзменения(Узел,РегОбъект);
			ДанныхЗарегистрировано = ДанныхЗарегистрировано + 1;
		КонецЦикла;
		Сообщить("ДОЛЖНОСТИ: " + ДанныхЗарегистрировано);			
		
	КонецЕсли;
	
КонецПроцедуры

