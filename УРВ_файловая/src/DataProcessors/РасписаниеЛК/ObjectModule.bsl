
Функция ЗаполнитьТаблицуРасписанияНаСервере() Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область Запрос
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РС.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	РегистрСведений.РолиСотрудниковЛК КАК РС
	|ГДЕ
	|	РС.Роль = ЗНАЧЕНИЕ(Перечисление.РолиСотрудниковЛК.Сотрудник)
	|	И РС.Сотрудник В(&ОтборПоСотрудникам)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РС.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СеткаДней.ДатаВремя КАК ДатаВремя
	|ПОМЕСТИТЬ ВТСеткаДней
	|ИЗ
	|	&СеткаДней КАК СеткаДней
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СеткаВремени.ДатаВремя КАК ДатаВремя,
	|	СеткаВремени.СдвигСекунд
	|ПОМЕСТИТЬ ВТСеткаВремени
	|ИЗ
	|	&СеткаВремени КАК СеткаВремени
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВремя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасписаниеКонсультацийСрезПоследних.Регистратор КАК Регистратор,
	|	РасписаниеКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	РасписаниеКонсультацийСрезПоследних.Работа КАК Работа,
	|	РасписаниеКонсультацийСрезПоследних.Проект КАК Проект,
	//|	РасписаниеКонсультацийСрезПоследних.Задание КАК Задание,
	//|	РасписаниеКонсультацийСрезПоследних.ПакетЧасов,
	|	РасписаниеКонсультацийСрезПоследних.Событие КАК Событие,
	|	РасписаниеКонсультацийСрезПоследних.КрайнийСрок КАК КрайнийСрок,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
	|	РасписаниеКонсультацийСрезПоследних.Контрагент,
	|	РасписаниеКонсультацийСрезПоследних.КонтактноеЛицо,
	|	РасписаниеКонсультацийСрезПоследних.НеДействует,
	|	РасписаниеКонсультацийСрезПоследних.Состояние,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РасписаниеКонсультацийСрезПоследних.Продолжительность,
	|	РасписаниеКонсультацийСрезПоследних.ВидУслуги,
	|	РасписаниеКонсультацийСрезПоследних.ТемаВопроса,
	|	РасписаниеКонсультацийСрезПоследних.КомментарийЗаписи,
	|	РасписаниеКонсультацийСрезПоследних.КонтактныеТелефоны,
	|	РасписаниеКонсультацийСрезПоследних.СрочнаяЗапись,
	|	РасписаниеКонсультацийСрезПоследних.ТипЗаписи,
	|	РасписаниеКонсультацийСрезПоследних.ОписаниеXML,
	|	РасписаниеКонсультацийСрезПоследних.ОписаниеТекст
	|ПОМЕСТИТЬ ВТТекущееРасписание
	|ИЗ
	|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних(
	|			&Момент,
	|			Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТСотрудники.Сотрудник
	|					ИЗ
	|						ВТСотрудники)
	|				И ДатаВремяНачала >= &ДатаНачала
	|				И ДатаВремяНачала <= &ДатаОкончания) КАК РасписаниеКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
	|	И РасписаниеКонсультацийСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Свободно)
	|	И РасписаниеКонсультацийСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВремяНачала,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыКонсультацийСрезПоследних.Регистратор КАК Регистратор,
	|	РезультатыКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	РезультатыКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
	|	РезультатыКонсультацийСрезПоследних.Контрагент,
	|	РезультатыКонсультацийСрезПоследних.КонтактноеЛицо,
	|	РезультатыКонсультацийСрезПоследних.Результат,
	|	РезультатыКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РезультатыКонсультацийСрезПоследних.Продолжительность,
	|	РезультатыКонсультацийСрезПоследних.ВидУслуги,
	|	РезультатыКонсультацийСрезПоследних.ТемаВопроса,
	|	РезультатыКонсультацийСрезПоследних.ВопросКлиента,
	|	РезультатыКонсультацийСрезПоследних.ОтветСотрудника
	|ПОМЕСТИТЬ ВТТекущиеРезультаты
	|ИЗ
	|	РегистрСведений.РезультатыКонсультаций.СрезПоследних(
	|			&Момент,
	|			Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТСотрудники.Сотрудник
	|					ИЗ
	|						ВТСотрудники)
	|				И ДатаВремяНачала >= &ДатаНачала
	|				И ДатаВремяНачала <= &ДатаОкончания) КАК РезультатыКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РезультатыКонсультацийСрезПоследних.НеДействует
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВремяНачала,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТекущееРасписание.ДатаВремяНачала КАК ДатаВремяНачала,
	|	МАКСИМУМ(ВТТекущееРасписание.ДатаВремяОкончания) КАК ДатаВремяОкончания
	|ПОМЕСТИТЬ ВТДатыВремяРасписания
	|ИЗ
	|	ВТТекущееРасписание КАК ВТТекущееРасписание
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТекущееРасписание.ДатаВремяНачала
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВремяНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВТДатыВремяРасписания.ДатаВремяНачала, ДЕНЬ) КАК НачалоДня,
	|	МИНИМУМ(ВТДатыВремяРасписания.ДатаВремяНачала) КАК ПерваяЗапись,
	|	МАКСИМУМ(ВТДатыВремяРасписания.ДатаВремяОкончания) КАК КонецПоследнейЗаписи
	|ПОМЕСТИТЬ ВТДатыТолькоРасписания
	|ИЗ
	|	ВТДатыВремяРасписания КАК ВТДатыВремяРасписания
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВТДатыВремяРасписания.ДатаВремяНачала, ДЕНЬ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НачалоДня,
	|	ПерваяЗапись
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТДатыТолькоРасписания.НачалоДня, ВТСеткаДней.ДатаВремя) КАК НачалоДня,
	|	ЕСТЬNULL(ВТДатыТолькоРасписания.ПерваяЗапись, ДОБАВИТЬКДАТЕ(ВТСеткаДней.ДатаВремя, СЕКУНДА, &СекундДоПервогоСлота)) КАК ПерваяЗапись,
	|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ВТДатыТолькоРасписания.КонецПоследнейЗаписи, СЕКУНДА, -&ШагСеткиСек), ДОБАВИТЬКДАТЕ(ВТСеткаДней.ДатаВремя, СЕКУНДА, &СекундДоПервогоСлота)) КАК КонецПоследнейЗаписи
	|ПОМЕСТИТЬ ВТДатыРасписания
	|ИЗ
	|	ВТСеткаДней КАК ВТСеткаДней
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыТолькоРасписания КАК ВТДатыТолькоРасписания
	|		ПО (НАЧАЛОПЕРИОДА(ВТДатыТолькоРасписания.НачалоДня, ДЕНЬ) = ВТСеткаДней.ДатаВремя)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НачалоДня,
	|	ПерваяЗапись
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвойстваЭлементовРасписанияЛК.ДатаВремяНачала КАК ДатаВремяНачала,
	|	СвойстваЭлементовРасписанияЛК.Сотрудник КАК Сотрудник,
	|	СвойстваЭлементовРасписанияЛК.ДоступноДляСамозаписи
	|ПОМЕСТИТЬ ВТСвойстваСлотов
	|ИЗ
	|	РегистрСведений.СвойстваЭлементовРасписанияЛК КАК СвойстваЭлементовРасписанияЛК
	|ГДЕ
	|	СвойстваЭлементовРасписанияЛК.Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТСотрудники.Сотрудник
	|			ИЗ
	|				ВТСотрудники)
	|	И СвойстваЭлементовРасписанияЛК.ДатаВремяНачала >= &ДатаНачала
	|	И СвойстваЭлементовРасписанияЛК.ДатаВремяНачала <= &ДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВремяНачала,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДатыРасписания.НачалоДня,
	|	ВТДатыРасписания.ПерваяЗапись,
	|	ВТДатыРасписания.КонецПоследнейЗаписи,
	|	ДОБАВИТЬКДАТЕ(ВТДатыРасписания.НачалоДня, СЕКУНДА, ВТСеткаВремени.СдвигСекунд) КАК ДатаРаcписания
	|ПОМЕСТИТЬ ВТСеткаРасписания
	|ИЗ
	|	ВТДатыРасписания КАК ВТДатыРасписания,
	|	ВТСеткаВремени КАК ВТСеткаВремени
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(ВТДатыРасписания.НачалоДня, СЕКУНДА, ВТСеткаВремени.СдвигСекунд) >= ВЫБОР
	|			КОГДА ДОБАВИТЬКДАТЕ(ВТДатыРасписания.НачалоДня, СЕКУНДА, &СекундДоПервогоСлота) < НАЧАЛОПЕРИОДА(ВТДатыРасписания.ПерваяЗапись, ЧАС)
	|				ТОГДА ДОБАВИТЬКДАТЕ(ВТДатыРасписания.НачалоДня, СЕКУНДА, &СекундДоПервогоСлота)
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТДатыРасписания.ПерваяЗапись, ЧАС)
	|		КОНЕЦ
	|	И ДОБАВИТЬКДАТЕ(ВТДатыРасписания.НачалоДня, СЕКУНДА, ВТСеткаВремени.СдвигСекунд) <= ВЫБОР
	|			КОГДА ДОБАВИТЬКДАТЕ(ВТДатыРасписания.НачалоДня, СЕКУНДА, &СекундДоПоследнегоСлота) > КОНЕЦПЕРИОДА(ВТДатыРасписания.КонецПоследнейЗаписи, ЧАС)
	|				ТОГДА ДОБАВИТЬКДАТЕ(ВТДатыРасписания.НачалоДня, СЕКУНДА, &СекундДоПоследнегоСлота)
	|			ИНАЧЕ КОНЕЦПЕРИОДА(ВТДатыРасписания.КонецПоследнейЗаписи, ЧАС)
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаРаcписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТекущееРасписание.Регистратор КАК РегистраторЗаписи,
	|	ВТТекущееРасписание.Сотрудник КАК Сотрудник,
	|	ВТТекущееРасписание.Работа КАК Работа,
	|	ВТТекущееРасписание.Проект КАК Проект,
	//|	ВТТекущееРасписание.Задание КАК Задание,
	//|	ВТТекущееРасписание.ПакетЧасов,
	|	ВТТекущееРасписание.Событие КАК Событие,
	|	ВТТекущееРасписание.КрайнийСрок КАК КрайнийСрок,
	|	ВТТекущееРасписание.ДатаВремяНачала КАК ДатаВремяНачала,
	|	ВТТекущееРасписание.Контрагент,
	|	ВТТекущееРасписание.КонтактноеЛицо,
	|	ВТТекущееРасписание.НеДействует,
	|	ВТТекущееРасписание.Состояние,
	|	ВТТекущееРасписание.ДатаВремяОкончания,
	|	ВТТекущееРасписание.Продолжительность,
	|	ВТТекущееРасписание.ВидУслуги,
	|	ВТТекущееРасписание.ТемаВопроса,
	|	ВТТекущееРасписание.СрочнаяЗапись,
	|	ВТТекущееРасписание.ТипЗаписи,
	|	ВТТекущееРасписание.КомментарийЗаписи,
	|	ВТТекущееРасписание.КонтактныеТелефоны,
	|	ВТТекущееРасписание.ОписаниеXML,
	|	ВТТекущееРасписание.ОписаниеТекст,
	|	ЕСТЬNULL(ВТТекущиеРезультаты.Результат, ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ПустаяСсылка)) КАК Результат,
	|	ЕСТЬNULL(ВТТекущиеРезультаты.Регистратор, НЕОПРЕДЕЛЕНО) КАК РегистраторРезультата,
	|	ЕСТЬNULL(ВТСвойстваСлотов.ДоступноДляСамозаписи, ЛОЖЬ) КАК ДоступноДляСамозаписи,
	|	ВЫБОР
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ОказанаКонсультация)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация)
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.НеОказанаКонсультация)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Свободно)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Свободно)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Запланировано)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Запланировано)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.ЗаписанКлиент)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ЗаписанКлиент)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Блокировка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Блокировка)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Выполнено)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Выполнено)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ПустаяСсылка)
	|	КОНЕЦ КАК ИтоговыйСтатус
	|ПОМЕСТИТЬ ВТИтоговоеРасписание
	|ИЗ
	|	ВТТекущееРасписание КАК ВТТекущееРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеРезультаты КАК ВТТекущиеРезультаты
	|		ПО ВТТекущееРасписание.Сотрудник = ВТТекущиеРезультаты.Сотрудник
	|			И ВТТекущееРасписание.ДатаВремяНачала = ВТТекущиеРезультаты.ДатаВремяНачала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСвойстваСлотов КАК ВТСвойстваСлотов
	|		ПО ВТТекущееРасписание.Сотрудник = ВТСвойстваСлотов.Сотрудник
	|			И ВТТекущееРасписание.ДатаВремяНачала = ВТСвойстваСлотов.ДатаВремяНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСотрудники.Сотрудник КАК Сотрудник,
	|	0 КАК ИндексВТаблице
	|ИЗ
	|	ВТСотрудники КАК ВТСотрудники
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСеткаРасписания.НачалоДня КАК Дата,
	|	ВТСеткаРасписания.ДатаРаcписания КАК ДатаВремя,
	|	ВЫБОР
	|		КОГДА ВТДатыВремяРасписания.ДатаВремяНачала ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьЗапись
	|ИЗ
	|	ВТСеткаРасписания КАК ВТСеткаРасписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыВремяРасписания КАК ВТДатыВремяРасписания
	|		ПО ВТСеткаРасписания.ДатаРаcписания = ВТДатыВремяРасписания.ДатаВремяНачала
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ДатаВремя
	|ИТОГИ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИтоговоеРасписание.РегистраторЗаписи,
	|	ВТИтоговоеРасписание.Сотрудник КАК Сотрудник,
	|	ВТИтоговоеРасписание.Работа КАК Работа,
	|	ВТИтоговоеРасписание.Проект КАК Проект,
	//|	ВТИтоговоеРасписание.Задание КАК Задание,
	//|	ВТИтоговоеРасписание.ПакетЧасов,
	|	ВТИтоговоеРасписание.Событие КАК Событие,
	|	ВТИтоговоеРасписание.КрайнийСрок КАК КрайнийСрок,
	|	ВТИтоговоеРасписание.ДатаВремяНачала КАК ДатаВремяНачала,
	|	ВТИтоговоеРасписание.Контрагент,
	|	ВТИтоговоеРасписание.КонтактноеЛицо,
	|	ВТИтоговоеРасписание.НеДействует,
	|	ВТИтоговоеРасписание.Состояние,
	|	ВТИтоговоеРасписание.ДатаВремяОкончания,
	|	ВТИтоговоеРасписание.Продолжительность,
	|	ВТИтоговоеРасписание.ВидУслуги,
	|	ВТИтоговоеРасписание.ТемаВопроса,
	|	ВТИтоговоеРасписание.КомментарийЗаписи,
	|	ВТИтоговоеРасписание.КонтактныеТелефоны,
	|	ВТИтоговоеРасписание.ОписаниеXML,
	|	ВТИтоговоеРасписание.ОписаниеТекст,
	|	ВТИтоговоеРасписание.Результат,
	|	ВТИтоговоеРасписание.РегистраторРезультата,
	|	ВТИтоговоеРасписание.ТипЗаписи,
	|	ВТИтоговоеРасписание.СрочнаяЗапись,
	|	ВТИтоговоеРасписание.ИтоговыйСтатус,
	|	ВТИтоговоеРасписание.ДоступноДляСамозаписи,
	|	ВЫБОР
	|		КОГДА НЕ РС_ОформлениеПоСтатусуИРаботе.ЦветТекста ЕСТЬ NULL
	|			ТОГДА РС_ОформлениеПоСтатусуИРаботе.ЦветТекста
	|		КОГДА НЕ РС_ОформлениеПоСтатусу.ЦветТекста ЕСТЬ NULL
	|			ТОГДА РС_ОформлениеПоСтатусу.ЦветТекста
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЦветТекста,
	|	ВЫБОР
	|		КОГДА НЕ РС_ОформлениеПоСтатусуИРаботе.ЦветФона ЕСТЬ NULL
	|			ТОГДА РС_ОформлениеПоСтатусуИРаботе.ЦветФона
	|		КОГДА НЕ РС_ОформлениеПоСтатусу.ЦветФона ЕСТЬ NULL
	|			ТОГДА РС_ОформлениеПоСтатусу.ЦветФона
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЦветФона,
	|	ВЫБОР
	|		КОГДА СправочникРаботы.Наименование <> "" ""
	|			ТОГДА СправочникРаботы.Наименование
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ВТИтоговоеРасписание.Работа)
	|	КОНЕЦ КАК РаботаНазвание
	|ИЗ
	|	ВТИтоговоеРасписание КАК ВТИтоговоеРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦветаРасписанияЛК КАК РС_ОформлениеПоСтатусуИРаботе
	|		ПО ВТИтоговоеРасписание.ИтоговыйСтатус = РС_ОформлениеПоСтатусуИРаботе.ИтоговыйСтатус
	|			И ВТИтоговоеРасписание.Работа = РС_ОформлениеПоСтатусуИРаботе.Работа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦветаРасписанияЛК КАК РС_ОформлениеПоСтатусу
	|		ПО ВТИтоговоеРасписание.ИтоговыйСтатус = РС_ОформлениеПоСтатусу.ИтоговыйСтатус
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Работы КАК СправочникРаботы
	|		ПО ВТИтоговоеРасписание.Работа = СправочникРаботы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаВремяНачала";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ОтборПоСотрудникам"			, ОтборПоСотрудникам);
	Запрос.УстановитьПараметр("Момент"						, Неопределено);
	Запрос.УстановитьПараметр("ДатаНачала"					, ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"				, КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("СеткаВремени"				, ПолучитьСеткуВремени());
	Запрос.УстановитьПараметр("СеткаДней"					, ПолучитьСеткуДней());
	
	ШагСеткиСек = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания() * 60;	
	Запрос.УстановитьПараметр("ШагСеткиСек"					, ШагСеткиСек);
	
	СтруктураРабочегоДня = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьРабочееВремяДня();
	Запрос.УстановитьПараметр("СекундДоПервогоСлота"		, СтруктураРабочегоДня.СекундДоПервогоСлота);
	Запрос.УстановитьПараметр("СекундДоПоследнегоСлота"		, СтруктураРабочегоДня.СекундДоПоследнегоСлота);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 3];
	ТаблицаСотрудников = РезультатЗапроса.Выгрузить();
	
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2];
	ДеревоДат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	ТаблицаРасписания.Загрузить(РезультатЗапроса.Выгрузить());
	
	ТабДокРасписания = ПостроитьМатрицуВТабличномДокументе(ДеревоДат, ТаблицаСотрудников);
	
	ВозВрат ТабДокРасписания;
	
	//--------------------------------------------------------------------------------------------------
	#Область ЗаполнитьТаблицуРасписанияНаСервере_прежнийКод
	//ТекущаяДата = ТекущаяДата();
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//#Область Запрос
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	РолиСотрудниковЛК.Подразделение
	//|ПОМЕСТИТЬ ВТПодразделения
	//|ИЗ
	//|	РегистрСведений.РолиСотрудниковЛК КАК РолиСотрудниковЛК
	//|ГДЕ
	//|	РолиСотрудниковЛК.Сотрудник = &Сотрудник
	//|	И (&Условие_Подразделения_Руководитель
	//|			ИЛИ &Условие_Подразделения_Координатор
	//|			ИЛИ &Условие_Подразделения_Сотрудник)
	//|	И НЕ &ТолькоПоСотруднику
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	РолиСотрудниковЛК.Подразделение
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	РолиСотрудниковЛК.Сотрудник
	//|ПОМЕСТИТЬ ВТСотрудники
	//|ИЗ
	//|	ВТПодразделения КАК ВТПодразделения
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудниковЛК КАК РолиСотрудниковЛК
	//|		ПО ВТПодразделения.Подразделение = РолиСотрудниковЛК.Подразделение
	//|ГДЕ
	//|	РолиСотрудниковЛК.Роль = ЗНАЧЕНИЕ(Перечисление.РолиСотрудниковЛК.Сотрудник)
	//|	И НЕ &ТолькоПоСотруднику
	//|
	//|ОБЪЕДИНИТЬ
	//|
	//|ВЫБРАТЬ
	//|	&Сотрудник
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	РолиСотрудниковЛК.Сотрудник
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СеткаДней.ДатаВремя КАК ДатаВремя
	//|ПОМЕСТИТЬ ВТСеткаДней
	//|ИЗ
	//|	&СеткаДней КАК СеткаДней
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СеткаВремени.ДатаВремя КАК ДатаВремя,
	//|	СеткаВремени.СдвигСекунд
	//|ПОМЕСТИТЬ ВТСеткаВремени
	//|ИЗ
	//|	&СеткаВремени КАК СеткаВремени
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ДатаВремя
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	РасписаниеКонсультацийСрезПоследних.Регистратор КАК Регистратор,
	//|	РасписаниеКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
	//|	РасписаниеКонсультацийСрезПоследних.Работа КАК Работа,
	//|	РасписаниеКонсультацийСрезПоследних.Проект КАК Проект,
	//|	РасписаниеКонсультацийСрезПоследних.Задание КАК Задание,
	//|	РасписаниеКонсультацийСрезПоследних.ПакетЧасов,
	//|	РасписаниеКонсультацийСрезПоследних.Событие КАК Событие,
	//|	РасписаниеКонсультацийСрезПоследних.КрайнийСрок КАК КрайнийСрок,
	//|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
	//|	РасписаниеКонсультацийСрезПоследних.Контрагент,
	//|	РасписаниеКонсультацийСрезПоследних.КонтактноеЛицо,
	//|	РасписаниеКонсультацийСрезПоследних.НеДействует,
	//|	РасписаниеКонсультацийСрезПоследних.Состояние,
	//|	РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания,
	//|	РасписаниеКонсультацийСрезПоследних.Продолжительность,
	//|	РасписаниеКонсультацийСрезПоследних.ВидУслуги,
	//|	РасписаниеКонсультацийСрезПоследних.ТемаВопроса,
	//|	РасписаниеКонсультацийСрезПоследних.КомментарийЗаписи,
	//|	РасписаниеКонсультацийСрезПоследних.КонтактныеТелефоны,
	//|	РасписаниеКонсультацийСрезПоследних.СрочнаяЗапись,
	//|	РасписаниеКонсультацийСрезПоследних.ТипЗаписи,
	//|	РасписаниеКонсультацийСрезПоследних.ОписаниеXML,
	//|	РасписаниеКонсультацийСрезПоследних.ОписаниеТекст
	//|ПОМЕСТИТЬ ВТТекущееРасписание
	//|ИЗ
	//|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних(
	//|			&Момент,
	//|			Сотрудник В
	//|					(ВЫБРАТЬ
	//|						ВТСотрудники.Сотрудник
	//|					ИЗ
	//|						ВТСотрудники)
	//|				И ДатаВремяНачала >= &ДатаНачала
	//|				И ДатаВремяНачала <= &ДатаОкончания) КАК РасписаниеКонсультацийСрезПоследних
	//|ГДЕ
	//|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
	//|	И РасписаниеКонсультацийСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Свободно)
	//|	И РасписаниеКонсультацийСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.ПустаяСсылка)
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ДатаВремяНачала,
	//|	Сотрудник
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	РезультатыКонсультацийСрезПоследних.Регистратор КАК Регистратор,
	//|	РезультатыКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
	//|	РезультатыКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
	//|	РезультатыКонсультацийСрезПоследних.Контрагент,
	//|	РезультатыКонсультацийСрезПоследних.КонтактноеЛицо,
	//|	РезультатыКонсультацийСрезПоследних.Результат,
	//|	РезультатыКонсультацийСрезПоследних.ДатаВремяОкончания,
	//|	РезультатыКонсультацийСрезПоследних.Продолжительность,
	//|	РезультатыКонсультацийСрезПоследних.ВидУслуги,
	//|	РезультатыКонсультацийСрезПоследних.ТемаВопроса,
	//|	РезультатыКонсультацийСрезПоследних.ВопросКлиента,
	//|	РезультатыКонсультацийСрезПоследних.ОтветСотрудника
	//|ПОМЕСТИТЬ ВТТекущиеРезультаты
	//|ИЗ
	//|	РегистрСведений.РезультатыКонсультаций.СрезПоследних(
	//|			&Момент,
	//|			Сотрудник В
	//|					(ВЫБРАТЬ
	//|						ВТСотрудники.Сотрудник
	//|					ИЗ
	//|						ВТСотрудники)
	//|				И ДатаВремяНачала >= &ДатаНачала
	//|				И ДатаВремяНачала <= &ДатаОкончания) КАК РезультатыКонсультацийСрезПоследних
	//|ГДЕ
	//|	НЕ РезультатыКонсультацийСрезПоследних.НеДействует
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ДатаВремяНачала,
	//|	Сотрудник
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТТекущееРасписание.ДатаВремяНачала КАК ДатаВремяНачала,
	//|	МАКСИМУМ(ВТТекущееРасписание.ДатаВремяОкончания) КАК ДатаВремяОкончания
	//|ПОМЕСТИТЬ ВТДатыВремяРасписания
	//|ИЗ
	//|	ВТТекущееРасписание КАК ВТТекущееРасписание
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТТекущееРасписание.ДатаВремяНачала
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ДатаВремяНачала
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	НАЧАЛОПЕРИОДА(ВТДатыВремяРасписания.ДатаВремяНачала, ДЕНЬ) КАК НачалоДня,
	//|	МИНИМУМ(ВТДатыВремяРасписания.ДатаВремяНачала) КАК ПерваяЗапись,
	//|	МАКСИМУМ(ВТДатыВремяРасписания.ДатаВремяОкончания) КАК КонецПоследнейЗаписи
	//|ПОМЕСТИТЬ ВТДатыТолькоРасписания
	//|ИЗ
	//|	ВТДатыВремяРасписания КАК ВТДатыВремяРасписания
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	НАЧАЛОПЕРИОДА(ВТДатыВремяРасписания.ДатаВремяНачала, ДЕНЬ)
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	НачалоДня,
	//|	ПерваяЗапись
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЕСТЬNULL(ВТДатыТолькоРасписания.НачалоДня, ВТСеткаДней.ДатаВремя) КАК НачалоДня,
	//|	ЕСТЬNULL(ВТДатыТолькоРасписания.ПерваяЗапись, ДОБАВИТЬКДАТЕ(ВТСеткаДней.ДатаВремя, СЕКУНДА, &СекундДоПервогоСлота)) КАК ПерваяЗапись,
	//|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ВТДатыТолькоРасписания.КонецПоследнейЗаписи, СЕКУНДА, -&ШагСеткиСек), ДОБАВИТЬКДАТЕ(ВТСеткаДней.ДатаВремя, СЕКУНДА, &СекундДоПервогоСлота)) КАК КонецПоследнейЗаписи
	//|ПОМЕСТИТЬ ВТДатыРасписания
	//|ИЗ
	//|	ВТСеткаДней КАК ВТСеткаДней
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыТолькоРасписания КАК ВТДатыТолькоРасписания
	//|		ПО (НАЧАЛОПЕРИОДА(ВТДатыТолькоРасписания.НачалоДня, ДЕНЬ) = ВТСеткаДней.ДатаВремя)
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	НачалоДня,
	//|	ПерваяЗапись
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СвойстваЭлементовРасписанияЛК.ДатаВремяНачала КАК ДатаВремяНачала,
	//|	СвойстваЭлементовРасписанияЛК.Сотрудник КАК Сотрудник,
	//|	СвойстваЭлементовРасписанияЛК.ДоступноДляСамозаписи
	//|ПОМЕСТИТЬ ВТСвойстваСлотов
	//|ИЗ
	//|	РегистрСведений.СвойстваЭлементовРасписанияЛК КАК СвойстваЭлементовРасписанияЛК
	//|ГДЕ
	//|	СвойстваЭлементовРасписанияЛК.Сотрудник В
	//|			(ВЫБРАТЬ
	//|				ВТСотрудники.Сотрудник
	//|			ИЗ
	//|				ВТСотрудники)
	//|	И СвойстваЭлементовРасписанияЛК.ДатаВремяНачала >= &ДатаНачала
	//|	И СвойстваЭлементовРасписанияЛК.ДатаВремяНачала <= &ДатаОкончания
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ДатаВремяНачала,
	//|	Сотрудник
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТДатыРасписания.НачалоДня,
	//|	ВТДатыРасписания.ПерваяЗапись,
	//|	ВТДатыРасписания.КонецПоследнейЗаписи,
	//|	ДОБАВИТЬКДАТЕ(ВТДатыРасписания.НачалоДня, СЕКУНДА, ВТСеткаВремени.СдвигСекунд) КАК ДатаРаcписания
	//|ПОМЕСТИТЬ ВТСеткаРасписания
	//|ИЗ
	//|	ВТДатыРасписания КАК ВТДатыРасписания,
	//|	ВТСеткаВремени КАК ВТСеткаВремени
	//|ГДЕ
	//|	ДОБАВИТЬКДАТЕ(ВТДатыРасписания.НачалоДня, СЕКУНДА, ВТСеткаВремени.СдвигСекунд) >= ВЫБОР
	//|			КОГДА ДОБАВИТЬКДАТЕ(ВТДатыРасписания.НачалоДня, СЕКУНДА, &СекундДоПервогоСлота) < НАЧАЛОПЕРИОДА(ВТДатыРасписания.ПерваяЗапись, ЧАС)
	//|				ТОГДА ДОБАВИТЬКДАТЕ(ВТДатыРасписания.НачалоДня, СЕКУНДА, &СекундДоПервогоСлота)
	//|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТДатыРасписания.ПерваяЗапись, ЧАС)
	//|		КОНЕЦ
	//|	И ДОБАВИТЬКДАТЕ(ВТДатыРасписания.НачалоДня, СЕКУНДА, ВТСеткаВремени.СдвигСекунд) <= ВЫБОР
	//|			КОГДА ДОБАВИТЬКДАТЕ(ВТДатыРасписания.НачалоДня, СЕКУНДА, &СекундДоПоследнегоСлота) > КОНЕЦПЕРИОДА(ВТДатыРасписания.КонецПоследнейЗаписи, ЧАС)
	//|				ТОГДА ДОБАВИТЬКДАТЕ(ВТДатыРасписания.НачалоДня, СЕКУНДА, &СекундДоПоследнегоСлота)
	//|			ИНАЧЕ КОНЕЦПЕРИОДА(ВТДатыРасписания.КонецПоследнейЗаписи, ЧАС)
	//|		КОНЕЦ
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ДатаРаcписания
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТТекущееРасписание.Регистратор КАК РегистраторЗаписи,
	//|	ВТТекущееРасписание.Сотрудник КАК Сотрудник,
	//|	ВТТекущееРасписание.Работа КАК Работа,
	//|	ВТТекущееРасписание.Проект КАК Проект,
	//|	ВТТекущееРасписание.Задание КАК Задание,
	//|	ВТТекущееРасписание.ПакетЧасов,
	//|	ВТТекущееРасписание.Событие КАК Событие,
	//|	ВТТекущееРасписание.КрайнийСрок КАК КрайнийСрок,
	//|	ВТТекущееРасписание.ДатаВремяНачала КАК ДатаВремяНачала,
	//|	ВТТекущееРасписание.Контрагент,
	//|	ВТТекущееРасписание.КонтактноеЛицо,
	//|	ВТТекущееРасписание.НеДействует,
	//|	ВТТекущееРасписание.Состояние,
	//|	ВТТекущееРасписание.ДатаВремяОкончания,
	//|	ВТТекущееРасписание.Продолжительность,
	//|	ВТТекущееРасписание.ВидУслуги,
	//|	ВТТекущееРасписание.ТемаВопроса,
	//|	ВТТекущееРасписание.СрочнаяЗапись,
	//|	ВТТекущееРасписание.ТипЗаписи,
	//|	ВТТекущееРасписание.КомментарийЗаписи,
	//|	ВТТекущееРасписание.КонтактныеТелефоны,
	//|	ВТТекущееРасписание.ОписаниеXML,
	//|	ВТТекущееРасписание.ОписаниеТекст,
	//|	ЕСТЬNULL(ВТТекущиеРезультаты.Результат, ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ПустаяСсылка)) КАК Результат,
	//|	ЕСТЬNULL(ВТТекущиеРезультаты.Регистратор, НЕОПРЕДЕЛЕНО) КАК РегистраторРезультата,
	//|	ЕСТЬNULL(ВТСвойстваСлотов.ДоступноДляСамозаписи, ЛОЖЬ) КАК ДоступноДляСамозаписи,
	//|	ВЫБОР
	//|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ОказанаКонсультация)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация)
	//|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.НеОказанаКонсультация)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация)
	//|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Свободно)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Свободно)
	//|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Запланировано)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Запланировано)
	//|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.ЗаписанКлиент)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ЗаписанКлиент)
	//|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Блокировка)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Блокировка)
	//|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Выполнено)
	//|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Выполнено)
	//|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ПустаяСсылка)
	//|	КОНЕЦ КАК ИтоговыйСтатус
	//|ПОМЕСТИТЬ ВТИтоговоеРасписание
	//|ИЗ
	//|	ВТТекущееРасписание КАК ВТТекущееРасписание
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеРезультаты КАК ВТТекущиеРезультаты
	//|		ПО ВТТекущееРасписание.Сотрудник = ВТТекущиеРезультаты.Сотрудник
	//|			И ВТТекущееРасписание.ДатаВремяНачала = ВТТекущиеРезультаты.ДатаВремяНачала
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСвойстваСлотов КАК ВТСвойстваСлотов
	//|		ПО ВТТекущееРасписание.Сотрудник = ВТСвойстваСлотов.Сотрудник
	//|			И ВТТекущееРасписание.ДатаВремяНачала = ВТСвойстваСлотов.ДатаВремяНачала
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ВТСотрудники.Сотрудник КАК Сотрудник,
	//|	0 КАК ИндексВТаблице
	//|ИЗ
	//|	ВТСотрудники КАК ВТСотрудники
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Сотрудник
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТСеткаРасписания.НачалоДня КАК Дата,
	//|	ВТСеткаРасписания.ДатаРаcписания КАК ДатаВремя,
	//|	ВЫБОР
	//|		КОГДА ВТДатыВремяРасписания.ДатаВремяНачала ЕСТЬ NULL
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ИСТИНА
	//|	КОНЕЦ КАК ЕстьЗапись
	//|ИЗ
	//|	ВТСеткаРасписания КАК ВТСеткаРасписания
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыВремяРасписания КАК ВТДатыВремяРасписания
	//|		ПО ВТСеткаРасписания.ДатаРаcписания = ВТДатыВремяРасписания.ДатаВремяНачала
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Дата,
	//|	ДатаВремя
	//|ИТОГИ ПО
	//|	Дата
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТИтоговоеРасписание.РегистраторЗаписи,
	//|	ВТИтоговоеРасписание.Сотрудник КАК Сотрудник,
	//|	ВТИтоговоеРасписание.Работа КАК Работа,
	//|	ВТИтоговоеРасписание.Проект КАК Проект,
	//|	ВТИтоговоеРасписание.Задание КАК Задание,
	//|	ВТИтоговоеРасписание.ПакетЧасов,
	//|	ВТИтоговоеРасписание.Событие КАК Событие,
	//|	ВТИтоговоеРасписание.КрайнийСрок КАК КрайнийСрок,
	//|	ВТИтоговоеРасписание.ДатаВремяНачала КАК ДатаВремяНачала,
	//|	ВТИтоговоеРасписание.Контрагент,
	//|	ВТИтоговоеРасписание.КонтактноеЛицо,
	//|	ВТИтоговоеРасписание.НеДействует,
	//|	ВТИтоговоеРасписание.Состояние,
	//|	ВТИтоговоеРасписание.ДатаВремяОкончания,
	//|	ВТИтоговоеРасписание.Продолжительность,
	//|	ВТИтоговоеРасписание.ВидУслуги,
	//|	ВТИтоговоеРасписание.ТемаВопроса,
	//|	ВТИтоговоеРасписание.КомментарийЗаписи,
	//|	ВТИтоговоеРасписание.КонтактныеТелефоны,
	//|	ВТИтоговоеРасписание.ОписаниеXML,
	//|	ВТИтоговоеРасписание.ОписаниеТекст,
	//|	ВТИтоговоеРасписание.Результат,
	//|	ВТИтоговоеРасписание.РегистраторРезультата,
	//|	ВТИтоговоеРасписание.ТипЗаписи,
	//|	ВТИтоговоеРасписание.СрочнаяЗапись,
	//|	ВТИтоговоеРасписание.ИтоговыйСтатус,
	//|	ВТИтоговоеРасписание.ДоступноДляСамозаписи,
	//|	ЕСТЬNULL(ЦветаРасписанияЛК.Цвет, """") КАК Цвет,
	//|	ВЫБОР
	//|		КОГДА СправочникРаботы.КраткоеНазвание <> "" ""
	//|			ТОГДА СправочникРаботы.КраткоеНазвание
	//|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ВТИтоговоеРасписание.Работа)
	//|	КОНЕЦ КАК РаботаНазвание
	//|ИЗ
	//|	ВТИтоговоеРасписание КАК ВТИтоговоеРасписание
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦветаРасписанияЛК КАК ЦветаРасписанияЛК
	//|		ПО ВТИтоговоеРасписание.ИтоговыйСтатус = ЦветаРасписанияЛК.ИтоговыйСтатус
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Работы КАК СправочникРаботы
	//|		ПО ВТИтоговоеРасписание.Работа = СправочникРаботы.Ссылка
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Сотрудник,
	//|	ДатаВремяНачала";
	//#КонецОбласти
	//
	//Момент = Неопределено;
	//
	//ДоступностьПодчиненныхПодразделенийЛК	= Истина;
	//ДоступностьСвоегоПодразделенияЛК		= Истина;
	//ДоступностьВсегоДляПП					= БоР_ОбщийМодульКлиентСервер.ВБулево(БоР_ОбщийМодульКлиентСервер.ПолучитьНастройку("ЛК_ПолнымПравамДоступныВсеСотрудники"));
	//ДР = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьДоступностьРолей();
	//
	//Если ДР.ПолныеПрава И ДоступностьВсегоДляПП Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие_Подразделения_Руководитель"	, "ИСТИНА");
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие_Подразделения_Координатор"	, "ИСТИНА");
	//ИначеЕсли ДоступностьПодчиненныхПодразделенийЛК = Истина Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие_Подразделения_Руководитель"	, "РолиСотрудниковЛК.Роль = ЗНАЧЕНИЕ(Перечисление.РолиСотрудниковЛК.Руководитель)");
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие_Подразделения_Координатор"	, "РолиСотрудниковЛК.Роль = ЗНАЧЕНИЕ(Перечисление.РолиСотрудниковЛК.Координатор)");
	//Иначе
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие_Подразделения_Руководитель"	, "ЛОЖЬ");
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие_Подразделения_Координатор"	, "ЛОЖЬ");
	//КонецЕсли;
	//
	//Если ДР.ПолныеПрава И ДоступностьВсегоДляПП Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие_Подразделения_Сотрудник"		, "ИСТИНА");
	//ИначеЕсли ДоступностьСвоегоПодразделенияЛК = Истина Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие_Подразделения_Сотрудник"		, "РолиСотрудниковЛК.Роль = ЗНАЧЕНИЕ(Перечисление.РолиСотрудниковЛК.Сотрудник)");
	//Иначе
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие_Подразделения_Сотрудник"		, "ЛОЖЬ");
	//КонецЕсли;
	//
	//Запрос.УстановитьПараметр("Сотрудник"					, Сотрудник);
	//Запрос.УстановитьПараметр("ТолькоПоСотруднику"			, ТолькоПоСотруднику);
	//Запрос.УстановитьПараметр("Момент"						, Момент);
	//Запрос.УстановитьПараметр("ДатаНачала"					, ДатаНачала);
	//Запрос.УстановитьПараметр("ДатаОкончания"				, КонецДня(ДатаОкончания));
	//Запрос.УстановитьПараметр("СеткаВремени"				, ПолучитьСеткуВремени());
	//Запрос.УстановитьПараметр("СеткаДней"					, ПолучитьСеткуДней());
	//
	//ШагСеткиСек = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания() * 60;	
	//Запрос.УстановитьПараметр("ШагСеткиСек"					, ШагСеткиСек);
	//
	//СтруктураРабочегоДня = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьРабочееВремяДня();
	//Запрос.УстановитьПараметр("СекундДоПервогоСлота"		, СтруктураРабочегоДня.СекундДоПервогоСлота);
	//Запрос.УстановитьПараметр("СекундДоПоследнегоСлота"		, СтруктураРабочегоДня.СекундДоПоследнегоСлота);
	//
	//РезультатыЗапроса = Запрос.ВыполнитьПакет();
	//
	//РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 3];
	//ТаблицаСотрудников = РезультатЗапроса.Выгрузить();
	//
	//РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2];
	//ДеревоДат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	//ТаблицаРасписания.Загрузить(РезультатЗапроса.Выгрузить());
	//
	//ТабДокРасписания = ПостроитьМатрицуВТабличномДокументе(ДеревоДат, ТаблицаСотрудников);
	//
	//ВозВрат ТабДокРасписания;
	
	
	#КонецОбласти
	
КонецФункции

Процедура ПоказатьСкрытьЛегенду(ТабДокумент, ВыводитьЛегенду) Экспорт
	ТабДокумент.Области.ОбластьЛегенды.Видимость = ВыводитьЛегенду;
КонецПроцедуры

Функция ПостроитьМатрицуВТабличномДокументе(ДеревоДат, ТаблицаСотрудников) Экспорт
	
	
	Если ОтборПоСотрудникам.Количество() = 1 Тогда
		Возврат ПостроитьМатрицуВТабличномДокументеСотрудник(ДеревоДат, ТаблицаСотрудников);
	Иначе
		Возврат ПостроитьМатрицуВТабличномДокументеОбщий(ДеревоДат, ТаблицаСотрудников);
	КонецЕсли;
	
КонецФункции

Функция ПостроитьМатрицуВТабличномДокументеСотрудник(ДеревоДат, ТаблицаСотрудников)
	
	Сотрудник	= ТаблицаСотрудников[0].Сотрудник;
	
	СоответствиеДата		= Новый Соответствие;
	СоответствиеВремя		= Новый Соответствие;
	ШагСеткиСек				= Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания() * 60;
	РазмерИнтервала			= ПолучитьКратностьШкалы();
	
	линияПрерывистая		= Новый Линия( ТипЛинииРисункаТабличногоДокумента.ПунктирТочка, 1);
	линияСплошная			= Новый Линия( ТипЛинииРисункаТабличногоДокумента.Сплошная, 1);
	
	ТабДок 					= Новый ТабличныйДокумент;
	Макет 					= ПолучитьМакет("МакетСотрудник");
	ОбластьЗаголовокНачало	= Макет.ПолучитьОбласть("Заголовок|Начало");
	ОбластьЗаголовокДата	= Макет.ПолучитьОбласть("Заголовок|Дата");
	ОбластьВремяНачало		= Макет.ПолучитьОбласть("Время|Начало");
	ОбластьВремяДата		= Макет.ПолучитьОбласть("Время|Дата");
	
	//----------------------------------------------------------------------------------------------------------
	// Легенда
	ТабДокЛегенды	= РегистрыСведений.ЦветаРасписанияЛК.ПолучитьТабДокЛегенды();
	ТабДок.Вывести(ТабДокЛегенды);
	ТабДок.Область(1, 0, ТабДок.ВысотаТаблицы, 0).Имя = "ОбластьЛегенды";
	
	
	//----------------------------------------------------------------------------------------------------------
	// Заголовок
//ОбластьВремяДополнение	= Новый ТабличныйДокумент;
	ОбластьЗаголовокНачало.Параметры.Сотрудник = Сотрудник;
	ТабДок.Вывести(ОбластьЗаголовокНачало);
	ДатаПоКолонке		= Новый Соответствие;
	КоличествоКолонок	= 1;
	ДатаСМакс = Неопределено;
	СекундСПолуночи = 0;
	Для каждого строкаДата Из ДеревоДат.Строки Цикл
		КоличествоКолонок	= КоличествоКолонок + 1;
		СоответствиеДата.Вставить(СтрокаДата.Дата, КоличествоКолонок);
		ДатаПоКолонке.Вставить(КоличествоКолонок, СтрокаДата.Дата);
		//
		ОбластьЗаголовокДата.Параметры.Дата = Формат(СтрокаДата.Дата, "ДФ=dd.MM.yyyy");
		ТабДок.Присоединить(ОбластьЗаголовокДата);
		//
		Для каждого СтрокаДатаВремя Из СтрокаДата.Строки Цикл
			ТекСекундСПолуночи	= СтрокаДатаВремя.ДатаВремя - СтрокаДатаВремя.Дата;
			Если ТекСекундСПолуночи > СекундСПолуночи Тогда
				ДатаСМакс = СтрокаДатаВремя.Дата;
				СекундСПолуночи = ТекСекундСПолуночи;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	//
	ТабДок.ФиксацияСверху	= ТабДок.ВысотаТаблицы;
	ТабДок.ФиксацияСлева	= 1;
	
	//----------------------------------------------------------------------------------------------------------
	// Строки Время
	Если ДеревоДат.Строки.Количество() = 0 Тогда
		Возврат ТабДок;
	КонецЕсли;
	строкаДата = ДеревоДат.Строки[0];
	Для Каждого СтрДер Из ДеревоДат.Строки Цикл
		Если ДатаСМакс = СтрДер.Дата Тогда
			строкаДата = СтрДер;
		КонецЕсли;	
	КонецЦикла;	
	СчетчикИнтервала	= 0;
	Для каждого строкаВремя Из строкаДата.Строки Цикл
		СчетчикИнтервала	= СчетчикИнтервала + 1;
		СекундСПолуночи		= строкаВремя.ДатаВремя - строкаВремя.Дата;
		
		ОбластьВремяНачало.Параметры.Время	= Формат(строкаВремя.ДатаВремя, "ДФ=HH.mm");
		ТабДок.Вывести(ОбластьВремяНачало);
		
		НомерКолонки	= 1;
		Для каждого строкаДата Из ДеревоДат.Строки Цикл
			НомерКолонки	= НомерКолонки + 1;
			текДата 		= ДатаПоКолонке.Получить(НомерКолонки);
			текДатаВремя	= текДата  + СекундСПолуночи; 
			//
			ОбластьВремяДата.Область().Расшифровка	= Новый Структура("Сотрудник, ДатаВремяНачала", Сотрудник, текДатаВремя);
			ТабДок.Присоединить(ОбластьВремяДата);
			//
		КонецЦикла;
		
//		ОбластьВремяДополнение.Присоединить(ОбластьВремяДата);
//		ТабДок.Присоединить(ОбластьВремяДополнение);
		//
		СоответствиеВремя.Вставить(СекундСПолуночи, ТабДок.ВысотаТаблицы); // Секунд с полуночи
		
		Если СчетчикИнтервала = РазмерИнтервала Тогда
			НизИнтервала	= ТабДок.ВысотаТаблицы;
			ВерхИнтервала	= ТабДок.ВысотаТаблицы - РазмерИнтервала + 1;
			//
			ОбластьОбъединения = ТабДок.Область(ВерхИнтервала, 1, НизИнтервала, 1);
			ОбластьОбъединения.Объединить();
			//
			ОбластьГраницы = ТабДок.Область(ВерхИнтервала, 1, НизИнтервала, КоличествоКолонок);
			ОбластьГраницы.Обвести(линияСплошная, , линияСплошная, линияПрерывистая);
			//
			СчетчикИнтервала	= 0;
		КонецЕсли;
	КонецЦикла;
	
	
	//----------------------------------------------------------------------------------------------------------
	// Заполнение ячеек расписания
	СоответствияЦветов	= РегистрыСведений.ЦветаРасписанияЛК.ПолучитьСоответствияЦветов(); // Соответствие Ключ=ЦветСтрокой, Значение=Цвет
	//
	Для каждого строкаТЗ Из ТаблицаРасписания Цикл
		колонкаТД	= СоответствиеДата[НачалоДня(строкаТЗ.ДатаВремяНачала)];
		строкаТД	= СоответствиеВремя[строкаТЗ.ДатаВремяНачала - НачалоДня(строкаТЗ.ДатаВремяНачала)];
		колСтрокТД	= (строкаТЗ.ДатаВремяОкончания - строкаТЗ.ДатаВремяНачала) / ШагСеткиСек; // по идее, должно быть целое число - количество квантов времени в данной консультации - то есть, количество строк в табдоке
		
		ОбластьЗаписи = ТабДок.Область(строкаТД, колонкаТД, строкаТД + колСтрокТД - 1, колонкаТД);
		ОбластьЗаписи.Объединить();
		ОбластьЗаписи.Обвести(линияСплошная, линияСплошная, линияСплошная, линияСплошная);

		ОбластьЗаписи.Расшифровка	= ТаблицаРасписания.Индекс(строкаТЗ) + 1;
		ОбластьЗаписи.ЦветТекста	= СоответствияЦветов.Получить(строкаТЗ.ЦветТекста);
		ОбластьЗаписи.ЦветФона		= СоответствияЦветов.Получить(строкаТЗ.ЦветФона);
		Если колСтрокТД = 1 Тогда // надпись не влазит
			ОбластьЗаписи.Шрифт = Новый Шрифт(ОбластьЗаписи.Шрифт, , 5, Ложь);
		Иначе
			ОбластьЗаписи.Шрифт = Новый Шрифт(ОбластьЗаписи.Шрифт, , 8, Ложь);
		КонецЕсли;
		
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("Работа"			, строкаТЗ.РаботаНазвание);
		ПараметрыТекста.Вставить("Контрагент"		, строкаТЗ.Контрагент);
		ПараметрыТекста.Вставить("Самозапись"		, ?(строкаТЗ.ДоступноДляСамозаписи, "" + Символы.ПС + "Самозапись", ""));
		ПараметрыТекста.Вставить("Проект"			, строкаТЗ.Проект);
		Если ЗначениеЗаполнено(строкаТЗ.ВидУслуги) Тогда
			ПараметрыТекста.Вставить("ВидУслуги"	, строкаТЗ.ВидУслуги);
		КонецЕсли;

		ШаблонТекста = "";
		Если строкаТЗ.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Запланировано Тогда
			ШаблонТекста = "&Работа/&Проект &ПС &Контрагент&Самозапись";
		ИначеЕсли строкаТЗ.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.ЗаписанКлиент Тогда
			ШаблонТекста = "&Работа/&Проект &ПС &Контрагент&Самозапись";
		ИначеЕсли строкаТЗ.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация Тогда
			ШаблонТекста = "&Работа/&Проект &ПС &Контрагент";
		ИначеЕсли строкаТЗ.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация Тогда
			ШаблонТекста = "&Работа/&Проект &ПС &Контрагент";
		ИначеЕсли строкаТЗ.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Выполнено Тогда
			ШаблонТекста = "&Работа/&Проект &ПС &Контрагент";
		ИначеЕсли строкаТЗ.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Блокировка Тогда
			ШаблонТекста = "&Работа/&Проект";
			ОбластьЗаписи.Узор = ТипУзораТабличногоДокумента.Узор14;
		КонецЕсли;
		
		////Если ОтборПоСотрудникам.Количество() = 1 Тогда //Если ТолькоПоСотруднику Тогда
		//	Если строкаТЗ.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Блокировка Тогда
		//	ИначеЕсли строкаТЗ.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.ЗаписанКлиент Тогда
		//	ИначеЕсли строкаТЗ.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация Тогда
		//		ШаблонТекста = "&Работа/&Проект &ПС &Контрагент";
		//	ИначеЕсли строкаТЗ.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация Тогда
		//		ШаблонТекста = "&Работа/&Проект &ПС &Контрагент";
		//	КонецЕсли;
		////КонецЕсли;
		Если ПараметрыТекста.Свойство("ВидУслуги") Тогда
			ШаблонТекста = ШаблонТекста + "&ПС&ВидУслуги";
		КонецЕсли;
		
		//В отображении расписания - Наименование проекта убираем для работ с видом ЛК, а для других видов оставляем 
		//Если строкаТЗ.Работа = Справочники.Работы.ЛинияКонсультаций Тогда
		//	ШаблонТекста = СтрЗаменить(ШаблонТекста, "/&Проект", "");
		//КонецЕсли;
		
		
		ОбластьЗаписи.Текст = БоР_ОбщийМодуль.СформироватьТекстСообщения(ШаблонТекста, ПараметрыТекста);
	КонецЦикла;
	
	
	//
	//
	//ОбластьЗаголовок_Сотрудник = Макет.ПолучитьОбласть("Заголовок|" + ИмяОбластиСотрудника);
	//ШиринаОбластиСотрудник = ОбластьЗаголовок_Сотрудник.ШиринаТаблицы;
	//
	//ТабДокСтрокиСотрудников = Новый ТабличныйДокумент;
	//ОбластьДатаВремя_Сотрудник = Макет.ПолучитьОбласть("ДатаВремя|" + ИмяОбластиСотрудника);
	//ОбластьДатаВремя_Сотрудник.Область().Расшифровка = 0;
	//
	//Для каждого СтрокаСотрудника Из ТаблицаСотрудников Цикл
	//	
	//	ОбластьЗаголовок_Сотрудник.Параметры.Сотрудник = СтрокаСотрудника.Сотрудник;
	//	ТабДокЗаголовка.Присоединить(ОбластьЗаголовок_Сотрудник);
	//	ИндексВТаблице = ТабДокЗаголовка.ШиринаТаблицы - ШиринаОбластиСотрудник + 1; // получаем номер первой колонки сотрудника (особенно, если он из нескольких колонок)
	//	СоответствиеСотрудников.Вставить(СтрокаСотрудника.Сотрудник, ИндексВТаблице);
	//	
	//	Если ТабДокСтрокиСотрудников.ШиринаТаблицы = 0 Тогда
	//		ТабДокСтрокиСотрудников.Вывести(ОбластьДатаВремя_Сотрудник);
	//	Иначе
	//		ТабДокСтрокиСотрудников.Присоединить(ОбластьДатаВремя_Сотрудник);
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//ТабДок.Вывести(ТабДокЗаголовка);
	//
	//Если ДеревоДат.Строки.Количество() = 0 Тогда
	//	ВозВрат ТабДок;
	//КонецЕсли;
	//
	//
	//ОбластьДата = Макет.ПолучитьОбласть("Дата|Начало");
	//ВысотаОбластиДата = ОбластьДата.ВысотаТаблицы;
	//ОбластьДатаВремя = Макет.ПолучитьОбласть("ДатаВремя|Начало");
	//ВысотаОбластиДатаВремя = ОбластьДатаВремя.ВысотаТаблицы;
	//НомерКолонкиДаты = ОбластьДатаВремя.Область("ЯчейкаДатаРасшифровки").Лево;
	//
	//Для каждого СтрокаДата Из ДеревоДат.Строки Цикл
	//	
	//	СчетчикКратности = 0;
	//	ОбластьДата.Параметры.Дата = Формат(СтрокаДата.Дата, "ДФ=dd.MM.yyyy");
	//	ТабДок.Вывести(ОбластьДата);
	//	Для каждого СтрокаДатаВремя Из СтрокаДата.Строки Цикл
	//		СчетчикКратности = СчетчикКратности + 1;
	//	
	//		ОбластьДатаВремя.Параметры.Дата = Формат(СтрокаДатаВремя.ДатаВремя, "ДФ=HH.mm");;
	//		ОбластьДатаВремя.Область().Расшифровка = СтрокаДатаВремя.ДатаВремя;
	//		ТабДок.Вывести(ОбластьДатаВремя);
	//		ТабДок.Присоединить(ТабДокСтрокиСотрудников);
	//		Если СтрокаДатаВремя.ЕстьЗапись Тогда
	//			ИндексВТаблице = ТабДок.ВысотаТаблицы - ВысотаОбластиДатаВремя + 1;
	//			СоответствиеДат.Вставить(СтрокаДатаВремя.ДатаВремя, ИндексВТаблице);
	//		КонецЕсли;
	//		Если СчетчикКратности = КратностьШкалы Тогда
	//			Верх		= ТабДок.ВысотаТаблицы - ВысотаОбластиДатаВремя * КратностьШкалы + 1;
	//			Низ			= ТабДок.ВысотаТаблицы;
	//			ЯчейкаДата 	= ОбластьДатаВремя.Область("ЯчейкаДата");
	//			Лево 		= ЯчейкаДата.Лево;
	//			Право		= ЯчейкаДата.Право;
	//			ОбластьОбъединения = ТабДок.Область(Верх, Лево, Низ, Право);
	//			ОбластьОбъединения.Объединить();
	//			ОбластьГраницы = ТабДок.Область(Верх, 1, Низ, ТабДок.ШиринаТаблицы);
	//			Линия = Новый Линия( ТипЛинииРисункаТабличногоДокумента.ПунктирТочка, 1);
	//			ОбластьГраницы.Обвести(, , , Линия);

	//			СчетчикКратности = 0;
	//		КонецЕсли;
	//	
	//	КонецЦикла;
	//
	//КонецЦикла;
	//
	//СоответствияЦветов = РегистрыСведений.ЦветаРасписанияЛК.ПолучитьСоответствияЦветов(); // Соответствие Ключ=ЦветСтрокой, Значение=Цвет
	//
	//Для каждого СтрокаРасписания Из ТаблицаРасписания Цикл
	//	//Если СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Свободно Тогда
	//	//	// пока просто пропустим, как будто не такого. Потом можно будет и из таблицы удалить
	//	//	Продолжить;
	//	//КонецЕсли;
	//	ИндексДаты			= СоответствиеДат[СтрокаРасписания.ДатаВремяНачала];
	//	ИндексСотрудника	= СоответствиеСотрудников[СтрокаРасписания.Сотрудник];
	//	
	//	// по идее, должно быть целое число - количество квантов времени в данной консультации - то есть, количество строк в табдоке
	//	ВысотаСлотаВремени = (СтрокаРасписания.ДатаВремяОкончания - СтрокаРасписания.ДатаВремяНачала) / ШагСеткиСек;
	//	
	//	ОбластьЗаписи = ТабДок.Область(ИндексДаты, ИндексСотрудника, ИндексДаты + ВысотаОбластиДатаВремя * ВысотаСлотаВремени - 1, ИндексСотрудника + ШиринаОбластиСотрудник - 1);
	//	ОбластьЗаписи.Объединить();
	//	Линия = Новый Линия( ТипЛинииРисункаТабличногоДокумента.Сплошная, 1);
	//	ОбластьЗаписи.Обвести(Линия, Линия, Линия, Линия);

	//	ОбластьЗаписи.Расшифровка	= ТаблицаРасписания.Индекс(СтрокаРасписания) + 1;
	//	ОбластьЗаписи.ЦветТекста	= СоответствияЦветов.Получить(СтрокаРасписания.ЦветТекста);
	//	ОбластьЗаписи.ЦветФона		= СоответствияЦветов.Получить(СтрокаРасписания.ЦветФона); //РегистрыСведений.ЦветаРасписанияЛК.ПолучитьЦветИзСтроки(СтрокаРасписания.ЦветФона);// !!!!!!!!!!!!!!оптимизировать!!!!!!!!!!!!!!!!
	//	Если ВысотаСлотаВремени = 1 Тогда // надпись не влазит
	//		ОбластьЗаписи.Шрифт = Новый Шрифт(ОбластьЗаписи.Шрифт, , 5, Ложь);
	//	Иначе
	//		ОбластьЗаписи.Шрифт = Новый Шрифт(ОбластьЗаписи.Шрифт, , 8, Ложь);
	//	КонецЕсли;
	//	
	//	ПараметрыТекста = Новый Структура;
	//	ПараметрыТекста.Вставить("Работа"			, СтрокаРасписания.РаботаНазвание);
	//	ПараметрыТекста.Вставить("Контрагент"		, СтрокаРасписания.Контрагент);
	//	ПараметрыТекста.Вставить("Самозапись"		, ?(СтрокаРасписания.ДоступноДляСамозаписи, "" + Символы.ПС + "Самозапись", ""));
	//	ПараметрыТекста.Вставить("Проект"			, СтрокаРасписания.Проект);
	//	Если ЗначениеЗаполнено(СтрокаРасписания.ВидУслуги) Тогда
	//		ПараметрыТекста.Вставить("ВидУслуги"	, СтрокаРасписания.ВидУслуги);
	//	КонецЕсли;

	//	ШаблонТекста = "";
	//	Если СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Запланировано Тогда
	//		ШаблонТекста = "&Работа/&Проект &ПС &Контрагент&Самозапись";
	//	ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.ЗаписанКлиент Тогда
	//		ШаблонТекста = "&Работа/&Проект &ПС &Контрагент&Самозапись";
	//	ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация Тогда
	//		ШаблонТекста = "&Работа/&Проект &ПС &Контрагент";
	//	ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация Тогда
	//		ШаблонТекста = "&Работа/&Проект &ПС &Контрагент";
	//	ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Выполнено Тогда
	//		ШаблонТекста = "&Работа/&Проект &ПС &Контрагент";
	//	ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Блокировка Тогда
	//		ШаблонТекста = "&Работа/&Проект";
	//		ОбластьЗаписи.Узор = ТипУзораТабличногоДокумента.Узор14;
	//		Если ВысотаСлотаВремени = 1 Тогда // надпись не влазит
	//			ОбластьЗаписи.Шрифт = Новый Шрифт(ОбластьЗаписи.Шрифт, , 5, Истина);
	//		Иначе
	//			ОбластьЗаписи.Шрифт = Новый Шрифт(ОбластьЗаписи.Шрифт, , 12, Истина);
	//		КонецЕсли;
	//		ОбластьЗаписи.Текст = СтрокаРасписания.Работа;
	//	КонецЕсли;
	//	
	//	//Если ОтборПоСотрудникам.Количество() = 1 Тогда //Если ТолькоПоСотруднику Тогда
	//		Если СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Блокировка Тогда
	//		ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.ЗаписанКлиент Тогда
	//		ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация Тогда
	//			ШаблонТекста = "&Работа/&Проект &ПС &Контрагент";
	//		ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация Тогда
	//			ШаблонТекста = "&Работа/&Проект &ПС &Контрагент";
	//		КонецЕсли;
	//	//КонецЕсли;
	//	Если ПараметрыТекста.Свойство("ВидУслуги") Тогда
	//		ШаблонТекста = ШаблонТекста + "&ПС&ВидУслуги";
	//	КонецЕсли;
	//	
	//	
	//	ОбластьЗаписи.Текст = БоР_ОбщийМодуль.СформироватьТекстСообщения(ШаблонТекста, ПараметрыТекста);
	//КонецЦикла;

	ВозВрат ТабДок;
	
КонецФункции

Функция ПостроитьМатрицуВТабличномДокументеОбщий(ДеревоДат, ТаблицаСотрудников)
	
	СоответствиеДат = Новый Соответствие;
	СоответствиеСотрудников = Новый Соответствие;
	ШагСеткиСек = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания() * 60;
	КратностьШкалы = ПолучитьКратностьШкалы();
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("МакетОбщий");
	
	ТабДокументЛегенды = РегистрыСведений.ЦветаРасписанияЛК.ПолучитьТабДокЛегенды(); //ПолучитьТабличныйДокументЛегенды(Макет);
	ТабДокумент.Вывести(ТабДокументЛегенды);
	ВысотаЛегенды = ТабДокументЛегенды.ВысотаТаблицы;
	ТабДокумент.Область(1,0,ВысотаЛегенды,0).Имя = "ОбластьЛегенды";
	
	ВерхЗаголовка = ТабДокумент.ВысотаТаблицы + 1; // дальше будет заголовок
	
	ТабДокументЗаголовка = Новый ТабличныйДокумент;
	Область = Макет.ПолучитьОбласть("Заголовок|Начало");
	ТабДокументЗаголовка.Вывести(Область);
	ВысотаЗакрепления = Область.ВысотаТаблицы + ВысотаЛегенды;
	ШиринаЗакрепления = Область.ШиринаТаблицы;
	
	ИмяОбластиСотрудника	= "Сотрудник";
	ИмяЯчейкиСотрудника		= "ЯчейкаСотрудник";
	
	ОбластьЗаголовок_Сотрудник = Макет.ПолучитьОбласть("Заголовок|" + ИмяОбластиСотрудника);
	ШиринаОбластиСотрудник = ОбластьЗаголовок_Сотрудник.ШиринаТаблицы;
	НомерСтрокиСотрудника = ВерхЗаголовка + ОбластьЗаголовок_Сотрудник.Область(ИмяЯчейкиСотрудника).Верх - 1;
	
	ТабДокументСтрокиСотрудников = Новый ТабличныйДокумент;
	ОбластьДатаВремя_Сотрудник = Макет.ПолучитьОбласть("ДатаВремя|" + ИмяОбластиСотрудника);
	ОбластьДатаВремя_Сотрудник.Область().Расшифровка = 0;
	
	Для каждого СтрокаСотрудника Из ТаблицаСотрудников Цикл
		
		ОбластьЗаголовок_Сотрудник.Параметры.Сотрудник = СтрокаСотрудника.Сотрудник;
		ТабДокументЗаголовка.Присоединить(ОбластьЗаголовок_Сотрудник);
		ИндексВТаблице = ТабДокументЗаголовка.ШиринаТаблицы - ШиринаОбластиСотрудник + 1; // получаем номер первой колонки сотрудника (особенно, если он из нескольких колонок)
		СоответствиеСотрудников.Вставить(СтрокаСотрудника.Сотрудник, ИндексВТаблице);
		
		Если ТабДокументСтрокиСотрудников.ШиринаТаблицы = 0 Тогда
			ТабДокументСтрокиСотрудников.Вывести(ОбластьДатаВремя_Сотрудник);
		Иначе
			ТабДокументСтрокиСотрудников.Присоединить(ОбластьДатаВремя_Сотрудник);
		КонецЕсли;
		
	КонецЦикла;
	ТабДокумент.Вывести(ТабДокументЗаголовка);
	
	Если ДеревоДат.Строки.Количество() = 0 Тогда
		ВозВрат ТабДокумент;
	КонецЕсли;
	
	
	ОбластьДата = Макет.ПолучитьОбласть("Дата|Начало");
	ВысотаОбластиДата = ОбластьДата.ВысотаТаблицы;
	ОбластьДатаВремя = Макет.ПолучитьОбласть("ДатаВремя|Начало");
	ВысотаОбластиДатаВремя = ОбластьДатаВремя.ВысотаТаблицы;
	НомерКолонкиДаты = ОбластьДатаВремя.Область("ЯчейкаДатаРасшифровки").Лево;
	
	Для каждого СтрокаДата Из ДеревоДат.Строки Цикл
		
		СчетчикКратности = 0;
		ОбластьДата.Параметры.Дата = Формат(СтрокаДата.Дата, "ДФ=dd.MM.yyyy");
		ТабДокумент.Вывести(ОбластьДата);
		Для каждого СтрокаДатаВремя Из СтрокаДата.Строки Цикл
			СчетчикКратности = СчетчикКратности + 1;
		
			ОбластьДатаВремя.Параметры.Дата = Формат(СтрокаДатаВремя.ДатаВремя, "ДФ=HH.mm");;
			ОбластьДатаВремя.Область().Расшифровка = СтрокаДатаВремя.ДатаВремя;
			ТабДокумент.Вывести(ОбластьДатаВремя);
			ТабДокумент.Присоединить(ТабДокументСтрокиСотрудников);
			Если СтрокаДатаВремя.ЕстьЗапись Тогда
				ИндексВТаблице = ТабДокумент.ВысотаТаблицы - ВысотаОбластиДатаВремя + 1;
				СоответствиеДат.Вставить(СтрокаДатаВремя.ДатаВремя, ИндексВТаблице);
			КонецЕсли;
			Если СчетчикКратности = КратностьШкалы Тогда
				Верх		= ТабДокумент.ВысотаТаблицы - ВысотаОбластиДатаВремя * КратностьШкалы + 1;
				Низ			= ТабДокумент.ВысотаТаблицы;
				ЯчейкаДата 	= ОбластьДатаВремя.Область("ЯчейкаДата");
				Лево 		= ЯчейкаДата.Лево;
				Право		= ЯчейкаДата.Право;
				ОбластьОбъединения = ТабДокумент.Область(Верх, Лево, Низ, Право);
				ОбластьОбъединения.Объединить();
				ОбластьГраницы = ТабДокумент.Область(Верх, 1, Низ, ТабДокумент.ШиринаТаблицы);
				Линия = Новый Линия( ТипЛинииРисункаТабличногоДокумента.ПунктирТочка, 1);
				ОбластьГраницы.Обвести(, , , Линия);

				СчетчикКратности = 0;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;
	
	СоответствияЦветов = РегистрыСведений.ЦветаРасписанияЛК.ПолучитьСоответствияЦветов(); // Соответствие Ключ=ЦветСтрокой, Значение=Цвет
	
	Для каждого СтрокаРасписания Из ТаблицаРасписания Цикл
		//Если СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Свободно Тогда
		//	// пока просто пропустим, как будто не такого. Потом можно будет и из таблицы удалить
		//	Продолжить;
		//КонецЕсли;
		ИндексДаты			= СоответствиеДат[СтрокаРасписания.ДатаВремяНачала];
		ИндексСотрудника	= СоответствиеСотрудников[СтрокаРасписания.Сотрудник];
		
		// по идее, должно быть целое число - количество квантов времени в данной консультации - то есть, количество строк в табдоке
		ВысотаСлотаВремени = (СтрокаРасписания.ДатаВремяОкончания - СтрокаРасписания.ДатаВремяНачала) / ШагСеткиСек;
		
		ОбластьЗаписи = ТабДокумент.Область(ИндексДаты, ИндексСотрудника, ИндексДаты + ВысотаОбластиДатаВремя * ВысотаСлотаВремени - 1, ИндексСотрудника + ШиринаОбластиСотрудник - 1);
		ОбластьЗаписи.Объединить();
		Линия = Новый Линия( ТипЛинииРисункаТабличногоДокумента.Сплошная, 1);
		ОбластьЗаписи.Обвести(Линия, Линия, Линия, Линия);

		ОбластьЗаписи.Расшифровка	= ТаблицаРасписания.Индекс(СтрокаРасписания) + 1;
		ОбластьЗаписи.ЦветТекста	= СоответствияЦветов.Получить(СтрокаРасписания.ЦветТекста);
		ОбластьЗаписи.ЦветФона		= СоответствияЦветов.Получить(СтрокаРасписания.ЦветФона); //РегистрыСведений.ЦветаРасписанияЛК.ПолучитьЦветИзСтроки(СтрокаРасписания.ЦветФона);// !!!!!!!!!!!!!!оптимизировать!!!!!!!!!!!!!!!!
		Если ВысотаСлотаВремени = 1 Тогда // надпись не влазит
			ОбластьЗаписи.Шрифт = Новый Шрифт(ОбластьЗаписи.Шрифт, , 5, Ложь);
		Иначе
			ОбластьЗаписи.Шрифт = Новый Шрифт(ОбластьЗаписи.Шрифт, , 8, Ложь);
		КонецЕсли;
		
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("Работа"			, СтрокаРасписания.РаботаНазвание);
		ПараметрыТекста.Вставить("Контрагент"		, СтрокаРасписания.Контрагент);
		ПараметрыТекста.Вставить("Самозапись"		, ?(СтрокаРасписания.ДоступноДляСамозаписи, "" + Символы.ПС + "Самозапись", ""));
		ПараметрыТекста.Вставить("Проект"			, СтрокаРасписания.Проект);
		Если ЗначениеЗаполнено(СтрокаРасписания.ВидУслуги) Тогда
			ПараметрыТекста.Вставить("ВидУслуги"	, СтрокаРасписания.ВидУслуги);
		КонецЕсли;

		ШаблонТекста = "";
		Если СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Запланировано Тогда
			ШаблонТекста = "&Работа/&Проект &ПС &Контрагент&Самозапись";
		ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.ЗаписанКлиент Тогда
			ШаблонТекста = "&Работа/&Проект &ПС &Контрагент&Самозапись";
		ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация Тогда
			ШаблонТекста = "&Работа/&Проект &ПС &Контрагент";
		ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация Тогда
			ШаблонТекста = "&Работа/&Проект &ПС &Контрагент";
		ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Выполнено Тогда
			ШаблонТекста = "&Работа/&Проект &ПС &Контрагент";
		ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Блокировка Тогда
			ШаблонТекста = "&Работа/&Проект";
			ОбластьЗаписи.Узор = ТипУзораТабличногоДокумента.Узор14;
			Если ВысотаСлотаВремени = 1 Тогда // надпись не влазит
				ОбластьЗаписи.Шрифт = Новый Шрифт(ОбластьЗаписи.Шрифт, , 5, Истина);
			Иначе
				ОбластьЗаписи.Шрифт = Новый Шрифт(ОбластьЗаписи.Шрифт, , 12, Истина);
			КонецЕсли;
			ОбластьЗаписи.Текст = СтрокаРасписания.Работа;
		КонецЕсли;
		Если ПараметрыТекста.Свойство("ВидУслуги") Тогда
			ШаблонТекста = ШаблонТекста + "&ПС&ВидУслуги";
		КонецЕсли;
		
		//В отображении расписания - Наименование проекта убираем для работ с видом ЛК, а для других видов оставляем 
		//Если СтрокаРасписания.Работа = Справочники.Работы.ЛинияКонсультаций Тогда
		//	ШаблонТекста = СтрЗаменить(ШаблонТекста, "/&Проект", "");
		//КонецЕсли;
		
		ОбластьЗаписи.Текст = БоР_ОбщийМодуль.СформироватьТекстСообщения(ШаблонТекста, ПараметрыТекста);
	КонецЦикла;

	ТабДокумент.ФиксацияСверху	= ВысотаЗакрепления;
	ТабДокумент.ФиксацияСлева	= ШиринаЗакрепления;
	ВозВрат ТабДокумент;
	
КонецФункции

Функция ПолучитьСеткуВремени() Экспорт
	СеткаВремени = Новый ТаблицаЗначений;
	СеткаВремени.Колонки.Добавить("ДатаВремя", Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	СеткаВремени.Колонки.Добавить("СдвигСекунд", Новый ОписаниеТипов("Число"));
	ШагСеткиСек = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания() * 60;
	ВремяНачала = '00010101';
	ВремяОкончания = ВремяНачала + 86400;
	ТекущееВремя = ВремяНачала;
	Пока ТекущееВремя < ВремяОкончания Цикл
		СтрокаСеткаВремени = СеткаВремени.Добавить();
		СтрокаСеткаВремени.ДатаВремя = ТекущееВремя;
		СтрокаСеткаВремени.СдвигСекунд = ТекущееВремя - ВремяНачала;
		ТекущееВремя = ТекущееВремя + ШагСеткиСек;
	КонецЦикла;
	ВозВрат СеткаВремени;
КонецФункции

Функция ПолучитьСеткуДней() Экспорт
	СеткаДней = Новый ТаблицаЗначений;
	СеткаДней.Колонки.Добавить("ДатаВремя", Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДатаНачалаЗаполнения	= НачалоДня(ДатаНачала);
	ДатаОкончанияЗаполнения	= НачалоДня(ДатаОкончания);

	ТекущееВремя = ДатаНачалаЗаполнения;
	Пока ТекущееВремя <= ДатаОкончанияЗаполнения Цикл
		СтрокаСеткаДней = СеткаДней.Добавить();
		СтрокаСеткаДней.ДатаВремя = ТекущееВремя;

		ТекущееВремя = ТекущееВремя + 86400;
	КонецЦикла;
	ВозВрат СеткаДней;
КонецФункции

Функция ПолучитьКратностьШкалы() Экспорт
	ВозВрат 3;//количество слотов для объединения
КонецФункции

//--------------------------------------------------------------------------------------------------
#Область ПрежниеПроцедурыФункции

Функция ПрежниеПроцедурыФункции()

//Функция ПолучитьТабличныйДокументЛегенды(Макет) Экспорт
//	
//	ТабДокументЛегенды = Новый ТабличныйДокумент;
//	Область = Макет.ПолучитьОбласть("СтрокаЛегенды|КолонкаЛегенды");
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	РС_Оформление.ИтоговыйСтатус,
//	|	РС_Оформление.ЦветФона КАК ЦветФона
//	|ИЗ
//	|	РегистрСведений.ЦветаРасписанияЛК КАК РС_Оформление";
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		Область.Параметры.ИтоговыйСтатус = ВыборкаДетальныеЗаписи.ИтоговыйСтатус;
//		Область.Области.ЛегендаЦвет.ЦветФона = РегистрыСведений.ЦветаРасписанияЛК.ПолучитьЦветИзСтроки(ВыборкаДетальныеЗаписи.ЦветФона);
//		ТабДокументЛегенды.Вывести(Область);
//	КонецЦикла;
//	ВозВрат ТабДокументЛегенды;
//КонецФункции

КонецФункции // ()



#КонецОбласти
