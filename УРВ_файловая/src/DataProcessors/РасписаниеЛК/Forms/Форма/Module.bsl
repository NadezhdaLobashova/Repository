
&НаКлиенте
Перем ТабДок_ОбрабатываемаяЯчейка;

//==================================================================================================
#Область СобытияФормы
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПутьКМетаданнымОбработки = ПутьКМетаданнымОбработки();
	ТекущаяДата = ТекущаяДата();
	БоР_ОбщийМодуль.ЗаполнитьРеквизитыИзПараметров(ЭтаФорма, Неопределено);
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = НачалоДня(ТекущаяДата);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.ДатаОкончания = КонецДня(ТекущаяДата + 86400);
	КонецЕсли;
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;
	//Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
	//	Объект.Сотрудник = ПользователиКлиентСервер.ТекущийПользователь();
	//КонецЕсли;
	
	Объект.ДоступныеДействия = РегистрыСведений.РолиСотрудниковЛК.ПолучитьДоступныеДействия(ПользователиКлиентСервер.ТекущийПользователь());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Объект.ОтборПоСотрудникам.Количество() = 0 Тогда
		Объект.ОтборПоСотрудникам.ЗагрузитьЗначения(РегистрыСведений.РолиСотрудниковЛК.ПолучитьМассивДоступныхСотрудников(Истина, Истина));
	КонецЕсли;
	
	// Если текущий пользователь только сотрудник, то отключить функции доступные координатору и руководителю
	Сотрудник = ПользователиКлиентСервер.ТекущийПользователь();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РС.Роль КАК Роль
	|ИЗ
	|	РегистрСведений.РолиСотрудниковЛК КАК РС
	|ГДЕ
	|	РС.Сотрудник = &Сотрудник
	|	И РС.Роль <> ЗНАЧЕНИЕ(Перечисление.РолиСотрудниковЛК.Сотрудник)
	|	";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		
		// Установим  в отбор ТОЛЬКО текущего сотрудника
		Сотрудники = Новый Массив;
		Сотрудники.Добавить(Сотрудник);
		Объект.ОтборПоСотрудникам.ЗагрузитьЗначения(Сотрудники);
		
		// Отключаем недоступные функции
		//Лобашова 30.05.2019 87280 +	
		Если НЕ Объект.ДоступныеДействия.ДоступноПросмотрДругихСотрудников Тогда
		//Лобашова 30.05.2019 87280 -
			Элементы.ОтборПоСотрудникам.Доступность						= Ложь;
		//Лобашова 30.05.2019 87280 +	
		КонецЕсли;
		//Лобашова 30.05.2019 87280 -
		Элементы.ФормаУстановитьСвойства.Видимость					= Ложь;
		Элементы.ФормаУстановитьОграниченияПоВидамУслуг.Видимость	= Ложь;
		
		//
		Элементы.ФормаЗапланировать.Видимость			= Объект.ДоступныеДействия.ДоступноСоздание;
		//Элементы.__НетТакойКнопки___.Видимость		= Объект.ДоступныеДействия.ДоступноПерепланирование;
		Элементы.ФормаЗаблокироватьЗапись.Видимость		= Объект.ДоступныеДействия.ДоступноБлокировка;
		Элементы.ФормаОсвободить.Видимость				= Объект.ДоступныеДействия.ДоступноОтменаБлокировки;
	КонецЕсли;
	
	//
	ЗаполнитьТаблицуРасписанияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПериодичностьОбновленияФормыРасписания = БоР_ОбщийМодульКлиентСервер.ВЧисло(БоР_ОбщийМодуль.ПолучитьНастройку("ЛК_ПериодичностьОбновленияФормыРасписания"));
	Автообновление = Истина;
	НастроитьПериодическоеОбновление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Обработка_РасписаниеЛК_Форма_Обновить" Тогда
		ЗаполнитьТаблицуРасписанияНаСервере();
	ИначеЕсли ИмяСобытия = "Обработка_РасписаниеЛК_Форма_УстановитьБлокировкуФормы" Тогда
		УстановитьБлокировкуФормы();
	ИначеЕсли ИмяСобытия = "Обработка_РасписаниеЛК_Форма_СнятьБлокировкуФормы" Тогда
		СнятьБлокировкуФормы();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


//==================================================================================================
#Область СобытияЭлементовФормы
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	ТекущаяДата = ТекущаяДата();
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = НачалоДня(ТекущаяДата);
	КонецЕсли;
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;
	ЗаполнитьТаблицуРасписанияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	ТекущаяДата = ТекущаяДата();
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.ДатаОкончания = НачалоДня(ТекущаяДата);
	КонецЕсли;
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаНачала = Объект.ДатаОкончания;
	КонецЕсли;
	ЗаполнитьТаблицуРасписанияНаСервере();
КонецПроцедуры


#КонецОбласти


//==================================================================================================
#Область СобытияТабДок
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ

&НаКлиенте
Процедура ТабДокРасписанияПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = ТабДокРасписания.ТекущаяОбласть;
	Если ТекущаяОбласть = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТабДок_ОбрабатываемаяЯчейка) Тогда
		Элементы.ТабДокРасписания.ТекущаяОбласть = ТабДок_ОбрабатываемаяЯчейка;
		Возврат;
	КонецЕсли;
	
	Расшифровка = ТекущаяОбласть.Расшифровка;
	УстановитьВидимостьКомандКонтекстногоМеню(Расшифровка);
КонецПроцедуры

&НаКлиенте
Процедура ТабДокРасписанияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ТабДок_ОбрабатываемаяЯчейка) Тогда
		Элементы.ТабДокРасписания.ТекущаяОбласть = ТабДок_ОбрабатываемаяЯчейка;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Не ОбработкаРасшифровки(Расшифровка);
	
КонецПроцедуры

#Область Контекстное_меню


&НаКлиенте
Процедура ТабДокРасписанияОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ТабДок_ОбрабатываемаяЯчейка) Тогда
		Элементы.ТабДокРасписания.ТекущаяОбласть = ТабДок_ОбрабатываемаяЯчейка;
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьКомандКонтекстногоМеню(Расшифровка);

	//Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
	//	ВозВрат;
	//КонецЕсли;
	
	//СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКомандКонтекстногоМеню(Расшифровка)
	
	ОтключитьКомандыКонтекстногоМеню(ЭтаФорма);
	ДанныеЯчейки = ПолучитьДанныеЯчейкиПоРасшифровке(Расшифровка);
	Если ДанныеЯчейки = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Элементы.ТабДокРасписанияКонтекстноеМенюКонтекстноеМеню_ОткрытьИсториюРасписания.Доступность = Истина;
	Элементы.ТабДокРасписанияКонтекстноеМенюКонтекстноеМеню_ОткрытьИсториюРезультата.Доступность = Истина;
	
	Если ДанныеЯчейки.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЭлементаРасписанияЛК.ЗаписанКлиент") Тогда
		Элементы.ТабДокРасписанияКонтекстноеМенюКонтекстноеМеню_ОткрытьДокументЗаписи.Доступность = Истина;
	КонецЕсли;
	
	Если ДанныеЯчейки.ИтоговыйСтатус = ПредопределенноеЗначение("Перечисление.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация") Тогда
		Элементы.ТабДокРасписанияКонтекстноеМенюКонтекстноеМеню_ОткрытьДокументВыполнения.Доступность = Истина;
	ИначеЕсли ДанныеЯчейки.ИтоговыйСтатус = ПредопределенноеЗначение("Перечисление.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация") Тогда
		Элементы.ТабДокРасписанияКонтекстноеМенюКонтекстноеМеню_ОткрытьДокументВыполнения.Доступность = Истина;
	ИначеЕсли ДанныеЯчейки.ИтоговыйСтатус = ПредопределенноеЗначение("Перечисление.ИтоговыеСтатусыРасписанияЛК.Выполнено") Тогда
		Элементы.ТабДокРасписанияКонтекстноеМенюКонтекстноеМеню_ОткрытьДокументВыполнения.Доступность = Истина;
	КонецЕсли;
	
	Если ДанныеЯчейки.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЭлементаРасписанияЛК.Блокировка") Тогда
		Элементы.ТабДокРасписанияКонтекстноеМенюКонтекстноеМеню_ОткрытьДокументБлокировки.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтключитьКомандыКонтекстногоМеню(ЭтаФорма)
	Элементы = ЭтаФорма.Элементы;
	Элементы.ТабДокРасписанияКонтекстноеМенюКонтекстноеМеню_ОткрытьДокументБлокировки	.Доступность = Ложь;
	Элементы.ТабДокРасписанияКонтекстноеМенюКонтекстноеМеню_ОткрытьДокументВыполнения	.Доступность = Ложь;
	Элементы.ТабДокРасписанияКонтекстноеМенюКонтекстноеМеню_ОткрытьДокументЗаписи		.Доступность = Ложь;
	Элементы.ТабДокРасписанияКонтекстноеМенюКонтекстноеМеню_ОткрытьИсториюРасписания	.Доступность = Ложь;
	Элементы.ТабДокРасписанияКонтекстноеМенюКонтекстноеМеню_ОткрытьИсториюРезультата	.Доступность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМеню_ОткрытьДокументЗаписи(Команда)
	ОтключитьКомандыКонтекстногоМеню(ЭтаФорма);
	
	ДанныеЯчейки = ПолучитьДанныеТекущейЯчейки();
	Если ДанныеЯчейки = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(ДанныеЯчейки.РегистраторЗаписи) <> Тип("ДокументСсылка.ЗаписьНаЛК") Тогда
		ВозВрат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ"				, ДанныеЯчейки.РегистраторЗаписи);
	ПараметрыФормы.Вставить("ТолькоПросмотр"	, Истина);
	ИмяФормыДляОткрытия = "Документ.ЗаписьНаЛК.ФормаОбъекта";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМеню_ОткрытьИсториюРасписания(Команда)
	ОтключитьКомандыКонтекстногоМеню(ЭтаФорма);
	
	ДанныеЯчейки = ПолучитьДанныеТекущейЯчейки();
	Если ДанныеЯчейки = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДатаВремяНачала"		, ДанныеЯчейки.ДатаВремяНачала);
	Отбор.Вставить("Сотрудник"				, ДанныеЯчейки.Сотрудник);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор"				, Отбор);
	ИмяФормыДляОткрытия = "РегистрСведений.РасписаниеКонсультаций.ФормаСписка";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, Неопределено, Неопределено, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМеню_ОткрытьИсториюРезультата(Команда)
	ОтключитьКомандыКонтекстногоМеню(ЭтаФорма);
	
	ДанныеЯчейки = ПолучитьДанныеТекущейЯчейки();
	Если ДанныеЯчейки = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДатаВремяНачала"		, ДанныеЯчейки.ДатаВремяНачала);
	Отбор.Вставить("Сотрудник"				, ДанныеЯчейки.Сотрудник);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор"				, Отбор);
	ИмяФормыДляОткрытия = "РегистрСведений.РезультатыКонсультаций.ФормаСписка";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, Неопределено, Неопределено, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМеню_ОткрытьДокументБлокировки(Команда)
	ОтключитьКомандыКонтекстногоМеню(ЭтаФорма);
	
	ДанныеЯчейки = ПолучитьДанныеТекущейЯчейки();
	Если ДанныеЯчейки = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ"				, ДанныеЯчейки.РегистраторЗаписи);
	ПараметрыФормы.Вставить("ТолькоПросмотр"	, Истина);
	ИмяФормыДляОткрытия = "Документ." + БоР_ОбщийМодуль.ПолучитьИмяОбъектаПоСсылке(ДанныеЯчейки.РегистраторЗаписи) + ".ФормаОбъекта";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМеню_ОткрытьДокументВыполнения(Команда)
	ОтключитьКомандыКонтекстногоМеню(ЭтаФорма);
	
	ДанныеЯчейки = ПолучитьДанныеТекущейЯчейки();
	Если ДанныеЯчейки = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ"				, ДанныеЯчейки.РегистраторРезультата);
	ПараметрыФормы.Вставить("ТолькоПросмотр"	, Истина);
	ИмяФормыДляОткрытия = "Документ." + БоР_ОбщийМодуль.ПолучитьИмяОбъектаПоСсылке(ДанныеЯчейки.РегистраторЗаписи) + ".ФормаОбъекта";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, Неопределено, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


//==================================================================================================
#Область СобытияОбщегоНазначения
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//--------------------------------------------------------------------------------------------------
#Область СобытияОбщегоНазначенияСервер

&НаСервере
Процедура ЗаполнитьТаблицуРасписанияНаСервере()
	
	ОбъектОбработки = ОбъектОбработки();
	
	ТабДокРасписания = ОбъектОбработки.ЗаполнитьТаблицуРасписанияНаСервере();
	ЗначениеВРеквизитФормы(ОбъектОбработки, "Объект");
	ПоказатьСкрытьЛегенду(ТабДокРасписания, Объект.ВыводитьЛегенду);
	
КонецПроцедуры

#КонецОбласти

//--------------------------------------------------------------------------------------------------
#Область СобытияОбщегоНазначенияКлиент

#Область Получение_данных_ячейки
// БоР : Получение расшифровки текущей ячейки 01.05.2017 2:32:07
&НаКлиенте
Функция ПолучитьДанныеТекущейЯчейки() Экспорт
	ТекущаяОбласть = ТабДокРасписания.ТекущаяОбласть;
	ВозВрат ПолучитьДанныеЯчейки(ТекущаяОбласть);
КонецФункции

// БоР : Получение данных из расшифровки ячейки 01.05.2017 2:32:07
&НаКлиенте
Функция ПолучитьДанныеЯчейки(ОбластьТабличногоДокумента) Экспорт
	
	Если ОбластьТабличногоДокумента = Неопределено Тогда
		ВозВрат Неопределено;
	КонецЕсли;
	Расшифровка = ОбластьТабличногоДокумента.Расшифровка;
	Если Расшифровка = Неопределено Тогда
		ВозВрат Неопределено;
	КонецЕсли;
	
	ВозВрат ПолучитьДанныеЯчейкиПоРасшифровке(Расшифровка, ОбластьТабличногоДокумента);
КонецФункции
	
&НаКлиенте
Функция ПолучитьДанныеЯчейкиПоРасшифровке(Расшифровка, ОбластьТабличногоДокумента = Неопределено) Экспорт
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		ВозВрат ПолучитьДанныеПустойЯчейки(Расшифровка.Сотрудник, Расшифровка.ДатаВремяНачала);
	ИначеЕсли ТипЗнч(Расшифровка) <> Тип("Число") Тогда
		ВозВрат Неопределено;
	КонецЕсли;
	
	Если Расшифровка = 0 Тогда
		Если ОбластьТабличногоДокумента = Неопределено Тогда
			ОбластьТабличногоДокумента = ТабДокРасписания.ТекущаяОбласть;
		КонецЕсли;
		Если ОбластьТабличногоДокумента = Неопределено Тогда
			ВозВрат Неопределено;
		КонецЕсли;
		
		ОбластьСотрудника = ТабДокРасписания.Область(Объект.НомерСтрокиСотрудника, ОбластьТабличногоДокумента.Лево, Объект.НомерСтрокиСотрудника, ОбластьТабличногоДокумента.Право);
		Сотрудник = ОбластьСотрудника.Расшифровка;
		
		ОбластьДаты = ТабДокРасписания.Область(ОбластьТабличногоДокумента.Верх, Объект.НомерКолонкиДаты, ОбластьТабличногоДокумента.Верх, Объект.НомерКолонкиДаты);
		ДатаВремяНачала = ОбластьДаты.Расшифровка;
		ДанныеЯчейки = ПолучитьДанныеПустойЯчейки(Сотрудник, ДатаВремяНачала);
	ИначеЕсли Расшифровка > 0 Тогда
		СтрокаТаблицыРасписания = Объект.ТаблицаРасписания[Расшифровка - 1];
		ДанныеЯчейки = ПолучитьДанныеПустойЯчейки(СтрокаТаблицыРасписания.Сотрудник, СтрокаТаблицыРасписания.ДатаВремяНачала);
		ЗаполнитьЗначенияСвойств(ДанныеЯчейки, СтрокаТаблицыРасписания);
		ДанныеЯчейки.Автор = БоР_ОбщийМодуль.ПолучитьПолеОбъекта(СтрокаТаблицыРасписания.РегистраторЗаписи,"Автор");
		//ДанныеЯчейки = Новый Структура;
		//ДанныеЯчейки.Вставить("НомерСтроки"				, СтрокаТаблицыРасписания.НомерСтроки);
		//ДанныеЯчейки.Вставить("Сотрудник"				, СтрокаТаблицыРасписания.Сотрудник);
		//ДанныеЯчейки.Вставить("ДатаВремяНачала"			, СтрокаТаблицыРасписания.ДатаВремяНачала);
		//ДанныеЯчейки.Вставить("ДатаВремяОкончания"		, СтрокаТаблицыРасписания.ДатаВремяОкончания);
		//ДанныеЯчейки.Вставить("Продолжительность"		, СтрокаТаблицыРасписания.Продолжительность);
		//ДанныеЯчейки.Вставить("Контрагент"				, СтрокаТаблицыРасписания.Контрагент);
		//ДанныеЯчейки.Вставить("КонтактноеЛицо"			, СтрокаТаблицыРасписания.КонтактноеЛицо);
		//ДанныеЯчейки.Вставить("ВидУслуги"			, СтрокаТаблицыРасписания.ВидУслуги);
		//ДанныеЯчейки.Вставить("ТипЗаписи"				, СтрокаТаблицыРасписания.ТипЗаписи);
		//ДанныеЯчейки.Вставить("ТемаВопроса"				, СтрокаТаблицыРасписания.ТемаВопроса);
		//ДанныеЯчейки.Вставить("Работа"					, СтрокаТаблицыРасписания.Работа);
		//ДанныеЯчейки.Вставить("Проект"					, СтрокаТаблицыРасписания.Проект);
		//ДанныеЯчейки.Вставить("Задание"					, СтрокаТаблицыРасписания.Задание);
		//ДанныеЯчейки.Вставить("ПакетЧасов"				, СтрокаТаблицыРасписания.ПакетЧасов);
		//ДанныеЯчейки.Вставить("Событие"					, СтрокаТаблицыРасписания.Событие);
		//ДанныеЯчейки.Вставить("КрайнийСрок"				, СтрокаТаблицыРасписания.КрайнийСрок);
		//ДанныеЯчейки.Вставить("Состояние"				, СтрокаТаблицыРасписания.Состояние);
		//ДанныеЯчейки.Вставить("Результат"				, СтрокаТаблицыРасписания.Результат);
		//ДанныеЯчейки.Вставить("ИтоговыйСтатус"			, СтрокаТаблицыРасписания.ИтоговыйСтатус);
		//ДанныеЯчейки.Вставить("КомментарийЗаписи"		, СтрокаТаблицыРасписания.КомментарийЗаписи);
		//ДанныеЯчейки.Вставить("КонтактныеТелефоны"		, СтрокаТаблицыРасписания.КонтактныеТелефоны);
		//ДанныеЯчейки.Вставить("ДоступноДляСамозаписи"	, СтрокаТаблицыРасписания.ДоступноДляСамозаписи);
		//ДанныеЯчейки.Вставить("РегистраторЗаписи"		, СтрокаТаблицыРасписания.РегистраторЗаписи);
		//ДанныеЯчейки.Вставить("РегистраторРезультата"	, СтрокаТаблицыРасписания.РегистраторРезультата);
		//ДанныеЯчейки.Вставить("ОписаниеXML"				, СтрокаТаблицыРасписания.ОписаниеXML);
		//ДанныеЯчейки.Вставить("ОписаниеТекст"			, СтрокаТаблицыРасписания.ОписаниеТекст);
	Иначе
		ВозВрат Неопределено;
	КонецЕсли;
	
	ВозВрат ДанныеЯчейки;

КонецФункции

// БоР : Дефолтные значения для "расшифровки" "пустой" ячейки 14.07.2017 20:13:10
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДанныеПустойЯчейки(Сотрудник, ДатаВремяНачала) Экспорт
	
	ШагСеткиМин = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания();
	ШагСеткиСек = ШагСеткиМин * 60;
	
	ДанныеЯчейки = Новый Структура;
	ДанныеЯчейки.Вставить("НомерСтроки"				, 0);
	ДанныеЯчейки.Вставить("Сотрудник"				, Сотрудник);
	ДанныеЯчейки.Вставить("ДатаВремяНачала"			, ДатаВремяНачала);
	ДанныеЯчейки.Вставить("ДатаВремяОкончания"		, ДатаВремяНачала + ШагСеткиСек);
	ДанныеЯчейки.Вставить("Продолжительность"		, ШагСеткиМин);
	ДанныеЯчейки.Вставить("Контрагент"				, ПредопределенноеЗначение("Справочник.Абоненты.ПустаяСсылка"));
	ДанныеЯчейки.Вставить("КонтактноеЛицо"			, ПредопределенноеЗначение("Справочник.ПользователиСервисов.ПустаяСсылка"));
	ДанныеЯчейки.Вставить("ВидУслуги"				, ПредопределенноеЗначение("Справочник.ВидыУслуг.ПустаяСсылка"));
	ДанныеЯчейки.Вставить("ТипЗаписи"				, ПредопределенноеЗначение("Перечисление.ТипыЗаписейЛК.ПустаяСсылка"));
	ДанныеЯчейки.Вставить("ТемаВопроса"				, "");
	ДанныеЯчейки.Вставить("Работа"					, ПредопределенноеЗначение("Справочник.Работы.ПустаяСсылка"));
	ДанныеЯчейки.Вставить("Проект"					, ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"));
	//ДанныеЯчейки.Вставить("Задание"					, ПредопределенноеЗначение("Документ.франЗадание.ПустаяСсылка"));
	//ДанныеЯчейки.Вставить("ПакетЧасов"				, ПредопределенноеЗначение("Документ.ПакетЧасов.ПустаяСсылка"));
	ДанныеЯчейки.Вставить("Событие"					, ПредопределенноеЗначение("Документ.Обращение.ПустаяСсылка"));
	ДанныеЯчейки.Вставить("КрайнийСрок"				, '00010101');
	ДанныеЯчейки.Вставить("Состояние"				, ПредопределенноеЗначение("Перечисление.СостоянияЭлементаРасписанияЛК.ПустаяСсылка"));
	ДанныеЯчейки.Вставить("Результат"				, ПредопределенноеЗначение("Перечисление.РезультатыКонсультации.ПустаяСсылка"));
	ДанныеЯчейки.Вставить("ИтоговыйСтатус"			, ПредопределенноеЗначение("Перечисление.ИтоговыеСтатусыРасписанияЛК.ПустаяСсылка"));
	ДанныеЯчейки.Вставить("КомментарийЗаписи"		, "");
	ДанныеЯчейки.Вставить("КонтактныеТелефоны"		, "");
	ДанныеЯчейки.Вставить("ДоступноДляСамозаписи"	, Ложь);
	ДанныеЯчейки.Вставить("РегистраторЗаписи"		, Неопределено);
	ДанныеЯчейки.Вставить("РегистраторРезультата"	, Неопределено);
	ДанныеЯчейки.Вставить("ОписаниеXML"				, "");
	ДанныеЯчейки.Вставить("ОписаниеТекст"			, "");
	ДанныеЯчейки.Вставить("Автор"					, ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	
	ВозВрат ДанныеЯчейки;
	
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти


//==================================================================================================

//==================================================================================================
#Область ПрежнийКод
// Ранее используемый код

Процедура ПрежнийКод()

//&НаКлиенте
//Процедура СотрудникПриИзменении(Элемент)
//	Объект.ТолькоПоСотруднику = ЗначениеЗаполнено(Объект.Сотрудник);
//	ЗаполнитьТаблицуРасписанияНаСервере();
//КонецПроцедуры

//&НаКлиенте
//Процедура ТолькоПоСотрудникуПриИзменении(Элемент)
//	ЗаполнитьТаблицуРасписанияНаСервере();
//КонецПроцедуры

//&НаКлиенте
//Процедура ОбработкаРасшифровкиЗаписанКлиент_Завершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	СтруктураВозВрата = Результат;
//	Если СтруктураВозВрата = Неопределено Тогда
//		ВозВрат;
//	КонецЕсли;
//	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
//		ВозВрат;
//	КонецЕсли;
//	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
//		ВозВрат;
//	КонецЕсли;
//	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
//		ВозВрат;
//	КонецЕсли;

//	ЗаполнитьТаблицуРасписанияНаСервере();

//КонецПроцедуры

КонецПроцедуры

#Область Коммент
Процедура Область_Коммент()
//&НаСервере
//Функция ПостроитьМатрицуВТабличномДокументе(ТаблицаРасписания, ДеревоДат, ТаблицаСотрудников) Экспорт
//	
//	ОбъектОбработки = ОбъектОбработки();
//	Если Ложь Тогда
//		ОбъектОбработки = Обработки.РасписаниеЛК.Создать();
//	КонецЕсли;
//	
//	СоответствиеДат = Новый Соответствие;
//	СоответствиеСотрудников = Новый Соответствие;
//	ШагСеткиСек = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания() * 60;
//	КратностьШкалы = ПолучитьКратностьШкалы();
//	
//	ТабДокумент = Новый ТабличныйДокумент;
//	Макет = ОбъектОбработки.ПолучитьМакет("МакетОбщий");
//	
//	ТабДокументЛегенды = ПолучитьТабличныйДокументЛегенды(Макет);
//	ТабДокумент.Вывести(ТабДокументЛегенды);
//	ВысотаЛегенды = ТабДокументЛегенды.ВысотаТаблицы;
//	ТабДокумент.Область(1,0,ВысотаЛегенды,0).Имя = "ОбластьЛегенды";
//	ПоказатьСкрытьЛегенду(ТабДокумент, Объект.ВыводитьЛегенду);
//	
//	ВерхЗаголовка = ТабДокумент.ВысотаТаблицы + 1; // дальше будет заголовок
//	
//	ТабДокументЗаголовка = Новый ТабличныйДокумент;
//	Область = Макет.ПолучитьОбласть("Заголовок|Начало");
//	ТабДокументЗаголовка.Вывести(Область);
//	ВысотаЗакрепления = Область.ВысотаТаблицы + ВысотаЛегенды;
//	ШиринаЗакрепления = Область.ШиринаТаблицы;
//	
//	Если Объект.ТолькоПоСотруднику Тогда
//		ИмяОбластиСотрудника	= "СотрудникОдин";
//		ИмяЯчейкиСотрудника		= "ЯчейкаСотрудникОдин";
//	Иначе
//		ИмяОбластиСотрудника	= "Сотрудник";
//		ИмяЯчейкиСотрудника		= "ЯчейкаСотрудник";
//	КонецЕсли;
//	
//	ОбластьЗаголовок_Сотрудник = Макет.ПолучитьОбласть("Заголовок|" + ИмяОбластиСотрудника);
//	ШиринаОбластиСотрудник = ОбластьЗаголовок_Сотрудник.ШиринаТаблицы;
//	Объект.НомерСтрокиСотрудника = ВерхЗаголовка + ОбластьЗаголовок_Сотрудник.Область(ИмяЯчейкиСотрудника).Верх - 1;
//	
//	ТабДокументСтрокиСотрудников = Новый ТабличныйДокумент;
//	ОбластьДатаВремя_Сотрудник = Макет.ПолучитьОбласть("ДатаВремя|" + ИмяОбластиСотрудника);
//	ОбластьДатаВремя_Сотрудник.Область().Расшифровка = 0;
//	
//	Для каждого СтрокаСотрудника Из ТаблицаСотрудников Цикл
//		
//		ОбластьЗаголовок_Сотрудник.Параметры.Сотрудник = СтрокаСотрудника.Сотрудник;
//		ТабДокументЗаголовка.Присоединить(ОбластьЗаголовок_Сотрудник);
//		ИндексВТаблице = ТабДокументЗаголовка.ШиринаТаблицы - ШиринаОбластиСотрудник + 1; // получаем номер первой колонки сотрудника (особенно, если он из нескольких колонок)
//		СоответствиеСотрудников.Вставить(СтрокаСотрудника.Сотрудник, ИндексВТаблице);
//		
//		Если ТабДокументСтрокиСотрудников.ШиринаТаблицы = 0 Тогда
//			ТабДокументСтрокиСотрудников.Вывести(ОбластьДатаВремя_Сотрудник);
//		Иначе
//			ТабДокументСтрокиСотрудников.Присоединить(ОбластьДатаВремя_Сотрудник);
//		КонецЕсли;
//		
//	КонецЦикла;
//	ТабДокумент.Вывести(ТабДокументЗаголовка);
//	
//	Если ДеревоДат.Строки.Количество() = 0 Тогда
//		ВозВрат ТабДокумент;
//	КонецЕсли;
//	
//	
//	ОбластьДата = Макет.ПолучитьОбласть("Дата|Начало");
//	ВысотаОбластиДата = ОбластьДата.ВысотаТаблицы;
//	ОбластьДатаВремя = Макет.ПолучитьОбласть("ДатаВремя|Начало");
//	ВысотаОбластиДатаВремя = ОбластьДатаВремя.ВысотаТаблицы;
//	Объект.НомерКолонкиДаты = ОбластьДатаВремя.Область("ЯчейкаДатаРасшифровки").Лево;
//	
//	Для каждого СтрокаДата Из ДеревоДат.Строки Цикл
//		
//		СчетчикКратности = 0;
//		ОбластьДата.Параметры.Дата = Формат(СтрокаДата.Дата, "ДФ=dd.MM.yyyy");
//		ТабДокумент.Вывести(ОбластьДата);
//		Для каждого СтрокаДатаВремя Из СтрокаДата.Строки Цикл
//			СчетчикКратности = СчетчикКратности + 1;
//		
//			ОбластьДатаВремя.Параметры.Дата = Формат(СтрокаДатаВремя.ДатаВремя, "ДФ=HH.mm");;
//			ОбластьДатаВремя.Область().Расшифровка = СтрокаДатаВремя.ДатаВремя;
//			ТабДокумент.Вывести(ОбластьДатаВремя);
//			ТабДокумент.Присоединить(ТабДокументСтрокиСотрудников);
//			Если СтрокаДатаВремя.ЕстьЗапись Тогда
//				ИндексВТаблице = ТабДокумент.ВысотаТаблицы - ВысотаОбластиДатаВремя + 1;
//				СоответствиеДат.Вставить(СтрокаДатаВремя.ДатаВремя, ИндексВТаблице);
//			КонецЕсли;
//			Если СчетчикКратности = КратностьШкалы Тогда
//				Верх		= ТабДокумент.ВысотаТаблицы - ВысотаОбластиДатаВремя * КратностьШкалы + 1;
//				Низ			= ТабДокумент.ВысотаТаблицы;
//				ЯчейкаДата 	= ОбластьДатаВремя.Область("ЯчейкаДата");
//				Лево 		= ЯчейкаДата.Лево;
//				Право		= ЯчейкаДата.Право;
//				ОбластьОбъединения = ТабДокумент.Область(Верх, Лево, Низ, Право);
//				ОбластьОбъединения.Объединить();
//				ОбластьГраницы = ТабДокумент.Область(Верх, 1, Низ, ТабДокумент.ШиринаТаблицы);
//				Линия = Новый Линия( ТипЛинииРисункаТабличногоДокумента.ПунктирТочка, 1);
//				ОбластьГраницы.Обвести(, , , Линия);

//				СчетчикКратности = 0;
//			КонецЕсли;
//		
//		КонецЦикла;
//	
//	КонецЦикла;
//	
//	Для каждого СтрокаРасписания Из Объект.ТаблицаРасписания Цикл
//		//Если СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Свободно Тогда
//		//	// пока просто пропустим, как будто не такого. Потом можно будет и из таблицы удалить
//		//	Продолжить;
//		//КонецЕсли;
//		ИндексДаты			= СоответствиеДат[СтрокаРасписания.ДатаВремяНачала];
//		ИндексСотрудника	= СоответствиеСотрудников[СтрокаРасписания.Сотрудник];
//		
//		// по идее, должно быть целое число - количество квантов времени в данной консультации - то есть, количество строк в табдоке
//		ВысотаСлотаВремени = (СтрокаРасписания.ДатаВремяОкончания - СтрокаРасписания.ДатаВремяНачала) / ШагСеткиСек;
//		
//		ОбластьЗаписи = ТабДокумент.Область(ИндексДаты, ИндексСотрудника, ИндексДаты + ВысотаОбластиДатаВремя * ВысотаСлотаВремени - 1, ИндексСотрудника + ШиринаОбластиСотрудник - 1);
//		ОбластьЗаписи.Объединить();
//		Линия = Новый Линия( ТипЛинииРисункаТабличногоДокумента.Сплошная, 1);
//		ОбластьЗаписи.Обвести(Линия, Линия, Линия, Линия);

//		ОбластьЗаписи.Расшифровка = Объект.ТаблицаРасписания.Индекс(СтрокаРасписания) + 1;
//		
//		ОбластьЗаписи.ЦветФона = РегистрыСведений.ЦветаРасписанияЛК.ПолучитьЦветИзСтроки(СтрокаРасписания.Цвет);// !!!!!!!!!!!!!!оптимизировать!!!!!!!!!!!!!!!!
//		Если ВысотаСлотаВремени = 1 Тогда // надпись не влазит
//			ОбластьЗаписи.Шрифт = Новый Шрифт(ОбластьЗаписи.Шрифт, , 5, Ложь);
//		Иначе
//			ОбластьЗаписи.Шрифт = Новый Шрифт(ОбластьЗаписи.Шрифт, , 8, Ложь);
//		КонецЕсли;
//		
//		ПараметрыТекста = Новый Структура;
//		ПараметрыТекста.Вставить("Работа"			, СтрокаРасписания.Работа);
//		ПараметрыТекста.Вставить("Контрагент"		, СтрокаРасписания.Контрагент);
//		ПараметрыТекста.Вставить("Самозапись"		, ?(СтрокаРасписания.ДоступноДляСамозаписи, "" + Символы.ПС + "Самозапись", ""));

//		ШаблонТекста = "";
//		Если СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Запланировано Тогда
//			ШаблонТекста = "&Работа &ПС &Контрагент&Самозапись";
//		ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.ЗаписанКлиент Тогда
//			ШаблонТекста = "&Работа &ПС &Контрагент&Самозапись";
//		ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация Тогда
//			ШаблонТекста = "";
//		ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация Тогда
//			ШаблонТекста = "";
//		ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Выполнено Тогда
//			ШаблонТекста = "&Работа &ПС &Контрагент";
//		ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Блокировка Тогда
//			ШаблонТекста = "&Работа";
//			ОбластьЗаписи.Узор = ТипУзораТабличногоДокумента.Узор14;
//			Если ВысотаСлотаВремени = 1 Тогда // надпись не влазит
//				ОбластьЗаписи.Шрифт = Новый Шрифт(ОбластьЗаписи.Шрифт, , 5, Истина);
//			Иначе
//				ОбластьЗаписи.Шрифт = Новый Шрифт(ОбластьЗаписи.Шрифт, , 12, Истина);
//			КонецЕсли;
//			ОбластьЗаписи.Текст = СтрокаРасписания.Работа;
//		КонецЕсли;
//		Если Объект.ТолькоПоСотруднику Тогда
//			Если СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.Блокировка Тогда
//			ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.ЗаписанКлиент Тогда
//			ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация Тогда
//				ШаблонТекста = "&Работа &ПС &Контрагент";
//			ИначеЕсли СтрокаРасписания.ИтоговыйСтатус = Перечисления.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация Тогда
//				ШаблонТекста = "&Работа &ПС &Контрагент";
//			КонецЕсли;
//		КонецЕсли;
//		ОбластьЗаписи.Текст = БоР_ОбщийМодуль.СформироватьТекстСообщения(ШаблонТекста, ПараметрыТекста);
//	КонецЦикла;

//	ТабДокумент.ФиксацияСверху	= ВысотаЗакрепления;
//	ТабДокумент.ФиксацияСлева	= ШиринаЗакрепления;
//	ВозВрат ТабДокумент;
//	
//КонецФункции

//&НаСервере
//Функция ПолучитьТабличныйДокументЛегенды(Макет) Экспорт
//	
//	ТабДокументЛегенды = Новый ТабличныйДокумент;
//	Область = Макет.ПолучитьОбласть("СтрокаЛегенды|КолонкаЛегенды");
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЦветаРасписанияЛК.ИтоговыйСтатус,
//	|	ЦветаРасписанияЛК.Цвет
//	|ИЗ
//	|	РегистрСведений.ЦветаРасписанияЛК КАК ЦветаРасписанияЛК";
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		Область.Параметры.ИтоговыйСтатус = ВыборкаДетальныеЗаписи.ИтоговыйСтатус;
//		Область.Области.ЛегендаЦвет.ЦветФона = РегистрыСведений.ЦветаРасписанияЛК.ПолучитьЦветИзСтроки(ВыборкаДетальныеЗаписи.Цвет);;
//		ТабДокументЛегенды.Вывести(Область);
//	КонецЦикла;
//	ВозВрат ТабДокументЛегенды;
//КонецФункции
КонецПроцедуры
#КонецОбласти

#Область Удалено
#Область ЗаписьНаЛК

//&НаКлиенте
//Процедура СоздатьЗаписьНаЛК_Завершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	ПараметрыДокумента = Результат;
//	Если ПараметрыДокумента = Неопределено Тогда
//		ВозВрат;
//	КонецЕсли;
//	СоздатьЗаписьНаЛКНаСервере(ПараметрыДокумента);

//КонецПроцедуры

//&НаСервере
//Процедура СоздатьЗаписьНаЛКНаСервере(ПараметрыДокумента) Экспорт
//	
//	ТекущаяДата = ТекущаяДата();
//	ДокументОбъект = Документы.ЗаписьНаЛК.СоздатьДокумент();
//	ДокументОбъект.Дата					= ТекущаяДата;
//	ДокументОбъект.ИсточникСоздания		= "РасписаниеЛК";
//	ДокументОбъект.Сотрудник			= ПараметрыДокумента.Сотрудник;
//	ДокументОбъект.ДатаВремяНачала		= ПараметрыДокумента.ДатаВремяНачала;
//	ДокументОбъект.Контрагент			= ПараметрыДокумента.Контрагент;
//	ДокументОбъект.КонтактноеЛицо		= ПараметрыДокумента.КонтактноеЛицо;
//	ДокументОбъект.ВидУслуги		= ПараметрыДокумента.ВидУслуги;
//	ДокументОбъект.ТемаВопроса			= ПараметрыДокумента.ТемаВопроса;
//	ДокументОбъект.КомментарийЗаписи	= ПараметрыДокумента.КомментарийЗаписи;
//	ДокументОбъект.ТипЗаписи			= Перечисления.ТипыЗаписейЛК.Обычная;
//	ДокументОбъект.СрочнаяЗапись		= ПараметрыДокумента.СрочнаяЗапись;
//	Попытка
//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
//	Исключение
//		ТекстОшибки = "Ошибка при создании документа ""Запись на ЛК""" + Символы.ПС;
//		Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//		ВозВрат;
//	КонецПопытки;

//	ЗаполнитьТаблицуРасписанияНаСервере();
//	
//КонецПроцедуры
#КонецОбласти

#Область БлокировкаЗаписиНаЛК

//&НаКлиенте
//Процедура СоздатьБлокировкаЗаписиНаЛК_Завершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	ПараметрыДокумента = Результат;
//	Если ПараметрыДокумента = Неопределено Тогда
//		ВозВрат;
//	КонецЕсли;
//	СоздатьБлокировкаЗаписиНаЛКНаСервере(ПараметрыДокумента);

//КонецПроцедуры

//&НаСервере
//Процедура СоздатьБлокировкаЗаписиНаЛКНаСервере(ПараметрыДокумента) Экспорт
//	
//	ТекущаяДата = ТекущаяДата();
//	ДокументОбъект = Документы.БлокировкаЗаписиНаЛК.СоздатьДокумент();
//	ДокументОбъект.Дата					= ТекущаяДата;
//	ДокументОбъект.ИсточникСоздания		= "РасписаниеЛК";
//	ДокументОбъект.Сотрудник			= ПараметрыДокумента.Сотрудник;
//	ДокументОбъект.ДатаВремяНачала		= ПараметрыДокумента.ДатаВремяНачала;
//	ДокументОбъект.Работа				= ПараметрыДокумента.Работа;
//	Попытка
//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
//	Исключение
//		ТекстОшибки = "Ошибка при создании документа ""Блокировка записи на ЛК""" + Символы.ПС;
//		Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//		ВозВрат;
//	КонецПопытки;

//	ЗаполнитьТаблицуРасписанияНаСервере();
//	
//КонецПроцедуры

//&НаСервере
//Процедура СоздатьДокументыБлокировкаЗаписиНаЛКНаСервере(ДанныеСлотов, ПараметрыДокумента) Экспорт
//	
//	ТекущаяДата = ТекущаяДата();
//	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
//	Для каждого СтрокаСотрудника Из ДанныеСлотов Цикл
//		Для каждого СтрокаСлота Из СтрокаСотрудника.Слоты Цикл
//			ДокументОбъект = Документы.БлокировкаЗаписиНаЛК.СоздатьДокумент();
//			ДокументОбъект.Дата					= ТекущаяДата;
//			ДокументОбъект.ИсточникСоздания		= "РасписаниеЛК";
//			ДокументОбъект.Сотрудник			= СтрокаСлота.Сотрудник;
//			ДокументОбъект.ДатаВремяНачала		= СтрокаСлота.ДатаВремяНачала;
//			ДокументОбъект.ДатаВремяОкончания	= СтрокаСлота.ДатаВремяОкончания;
//			ДокументОбъект.Продолжительность	= (СтрокаСлота.ДатаВремяОкончания - ДокументОбъект.ДатаВремяНачала) / 60;
//			ДокументОбъект.Работа				= ПараметрыДокумента.Работа;
//			ДокументОбъект.Проект				= ПараметрыДокумента.Проект;
//			ДокументОбъект.Задание				= ПараметрыДокумента.Задание;
//			ДокументОбъект.Замещение			= ПараметрыДокумента.Замещение;
//			Попытка
//				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
//			Исключение
//				ОтменитьТранзакцию();
//				ТекстОшибки = "Ошибка при создании документа ""Блокировка записи на ЛК""" + Символы.ПС;
//				Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//				ВозВрат;
//			КонецПопытки;
//		КонецЦикла;
//	КонецЦикла;
//	ЗафиксироватьТранзакцию();
//	

//	ЗаполнитьТаблицуРасписанияНаСервере();
//	
//КонецПроцедуры
#КонецОбласти

#Область Установка_свойств_слотов

&НаКлиенте
Процедура УстановкаСвойствЭлементаРасписания(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыДокумента = Результат;
	Если ПараметрыДокумента = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	ОбновитьТаблицу = УстановкаСвойствЭлементаРасписанияЛКНаСервере(ПараметрыДокумента);
	Если ОбновитьТаблицу Тогда
		ЗаполнитьТаблицуРасписанияНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановкаСвойствЭлементаРасписанияЛКНаСервере(ПараметрыДокумента) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СвойстваЭлементовРасписанияЛК.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сотрудник			= ПараметрыДокумента.Сотрудник;
	МенеджерЗаписи.ДатаВремяНачала		= ПараметрыДокумента.ДатаВремяНачала;
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Сотрудник			= ПараметрыДокумента.Сотрудник;
	МенеджерЗаписи.ДатаВремяНачала		= ПараметрыДокумента.ДатаВремяНачала;
	ОбновитьТаблицу = Ложь;
	ЗаписатьИзменения = Ложь;
	Для каждого УстанавливаемоеСвойство Из ПараметрыДокумента.УстанавливаемыеСвойства Цикл
		Если МенеджерЗаписи[УстанавливаемоеСвойство.Ключ] <> УстанавливаемоеСвойство.Значение Тогда
			ЗаписатьИзменения = Истина;
			ОбновитьТаблицу = Истина;
		КонецЕсли;
		МенеджерЗаписи[УстанавливаемоеСвойство.Ключ] = УстанавливаемоеСвойство.Значение;
	КонецЦикла;
	Если ЗаписатьИзменения Тогда
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			ТекстОшибки = "Ошибка при записи свойств элемента расписания" + Символы.ПС;
			Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВозВрат Ложь;
		КонецПопытки;
	КонецЕсли;

	ВозВрат ОбновитьТаблицу;
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановкаСвойствЭлементаРасписанияЛКНаСервере_Массовая(ДанныеСлотов, УстанавливаемыеСвойства) Экспорт
	
	ОбновитьТаблицу = Ложь;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Для каждого СтрокаСотрудника Из ДанныеСлотов Цикл
		Для каждого СтрокаСлота Из СтрокаСотрудника.Слоты Цикл
		МенеджерЗаписи = РегистрыСведений.СвойстваЭлементовРасписанияЛК.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Сотрудник			= СтрокаСлота.Сотрудник;
		МенеджерЗаписи.ДатаВремяНачала		= СтрокаСлота.ДатаВремяНачала;
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.Сотрудник			= СтрокаСлота.Сотрудник;
		МенеджерЗаписи.ДатаВремяНачала		= СтрокаСлота.ДатаВремяНачала;
		ОбновитьТаблицу = Ложь;
		ЗаписатьИзменения = Ложь;
		Для каждого УстанавливаемоеСвойство Из УстанавливаемыеСвойства Цикл
			Если МенеджерЗаписи[УстанавливаемоеСвойство.Ключ] <> УстанавливаемоеСвойство.Значение Тогда
				ЗаписатьИзменения = Истина;
				ОбновитьТаблицу = Истина;
			КонецЕсли;
			МенеджерЗаписи[УстанавливаемоеСвойство.Ключ] = УстанавливаемоеСвойство.Значение;
		КонецЦикла;
		Если ЗаписатьИзменения Тогда
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
				ОтменитьТранзакцию();
				ТекстОшибки = "Ошибка при записи свойств элемента расписания" + Символы.ПС;
				Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВозВрат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	ВозВрат ОбновитьТаблицу;
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановкаСвойствЭлементаРасписанияЛКНаСервере_Групповая(Результат) Экспорт
	
	ДанныеСлотов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала,
	|	РасписаниеКонсультацийСрезПоследних.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних(
	|			,
	|			ДатаВремяНачала >= &ДатаНачала
	|				И ДатаВремяНачала <= &ДатаОкончания
	|				И Сотрудник В (&Сотрудники)) КАК РасписаниеКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
	|	И РасписаниеКонсультацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Запланировано)
	|	И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала, ДЕНЬ), РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала, СЕКУНДА) >= РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&ВремяНачала, ДЕНЬ), &ВремяНачала, СЕКУНДА)
	|	И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала, ДЕНЬ), РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала, СЕКУНДА) < РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&ВремяОкончания, ДЕНЬ), &ВремяОкончания, СЕКУНДА)
	|ИТОГИ ПО
	|	Сотрудник";
	
	Запрос.УстановитьПараметр("ВремяНачала"		, Результат.ВремяНачала);
	Запрос.УстановитьПараметр("ВремяОкончания"	, Результат.ВремяОкончания);
	Запрос.УстановитьПараметр("ДатаНачала"		, Результат.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, КонецДня(Результат.ДатаОкончания));
	Запрос.УстановитьПараметр("Сотрудники"		, Результат.Сотрудники);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСотрудники = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСотрудники.Следующий() Цикл
		ДанныеСотрудника = Новый Структура;
		ДанныеСотрудника.Вставить("Сотрудник"	, ВыборкаСотрудники.Сотрудник);
		ДанныеСотрудника.Вставить("Слоты"		, Новый Массив);
		ДанныеСлотов.Добавить(ДанныеСотрудника);
		
		ВыборкаДетальныеЗаписи = ВыборкаСотрудники.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СвойстваСлота = Новый Структура;
			СвойстваСлота.Вставить("Сотрудник"				, ВыборкаДетальныеЗаписи.Сотрудник);
			СвойстваСлота.Вставить("ДатаВремяНачала"		, ВыборкаДетальныеЗаписи.ДатаВремяНачала);
			
			ДанныеСотрудника.Слоты.Добавить(СвойстваСлота);
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеСлотов.Количество() = 0 Тогда
		ВозВрат Ложь;
	КонецЕсли;
	
	УстанавливаемыеСвойства	= Результат.УстанавливаемыеСвойства;
	
	ОбновитьТаблицу = УстановкаСвойствЭлементаРасписанияЛКНаСервере_Массовая(ДанныеСлотов, УстанавливаемыеСвойства);
	
	ВозВрат ОбновитьТаблицу;
	
КонецФункции
#КонецОбласти

#Область ВыполнениеКонсультацииЛК

//&НаКлиенте
//Процедура СоздатьВыполнениеКонсультацииЛК_Завершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	ПараметрыДокумента = Результат;
//	Если ПараметрыДокумента = Неопределено Тогда
//		ВозВрат;
//	КонецЕсли;
//	СоздатьВыполнениеКонсультацииЛКНаСервере(ПараметрыДокумента);
//	
//КонецПроцедуры

//&НаСервере
//Процедура СоздатьВыполнениеКонсультацииЛКНаСервере(ПараметрыДокумента) Экспорт
//	
//	ТекущаяДата = ТекущаяДата();
//	ДокументОбъект = Документы.ВыполнениеКонсультацииЛК.СоздатьДокумент();
//	ДокументОбъект.Дата						= ТекущаяДата;
//	ДокументОбъект.ИсточникСоздания			= "РасписаниеЛК";
//	ДокументОбъект.Сотрудник				= ПараметрыДокумента.Сотрудник;
//	ДокументОбъект.ДатаВремяНачала			= ПараметрыДокумента.ДатаВремяНачала;
//	ДокументОбъект.Контрагент				= ПараметрыДокумента.Контрагент;
//	ДокументОбъект.КонтактноеЛицо			= ПараметрыДокумента.КонтактноеЛицо;
//	ДокументОбъект.ВидУслуги			= ПараметрыДокумента.ВидУслуги;
//	ДокументОбъект.ТемаВопроса				= ПараметрыДокумента.ТемаВопроса;
//	ДокументОбъект.Результат				= ПараметрыДокумента.Результат;
//	ДокументОбъект.ВопросКлиента			= ПараметрыДокумента.ВопросКлиента;
//	ДокументОбъект.ОтветСотрудника			= ПараметрыДокумента.ОтветСотрудника;
//	ДокументОбъект.ДатаВремяНачалаФакт		= ПараметрыДокумента.ДатаВремяНачалаФакт;
//	ДокументОбъект.ДатаВремяОкончанияФакт	= ПараметрыДокумента.ДатаВремяОкончанияФакт;
//	ДокументОбъект.ПричинаНеоказания		= ПараметрыДокумента.ПричинаНеоказания;
//	Для каждого Категория Из ПараметрыДокумента.КатегорииСобытия Цикл
//		СтрокаКатегорииСобытия = ДокументОбъект.КатегорииСобытия.Добавить();
//		СтрокаКатегорииСобытия.Категория = Категория;
//	КонецЦикла;
//	Попытка
//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
//	Исключение
//		ТекстОшибки = "Ошибка при создании документа ""Выполнение консультации""" + Символы.ПС;
//		Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//		ВозВрат;
//	КонецПопытки;

//	ЗаполнитьТаблицуРасписанияНаСервере();
//	
//КонецПроцедуры
#КонецОбласти

#Область ОтменаЗаписиНаЛК

//&НаКлиенте
//Процедура СоздатьОтменаЗаписиНаЛК_Завершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	ПараметрыДокумента = Результат;
//	Если ПараметрыДокумента = Неопределено Тогда
//		ВозВрат;
//	КонецЕсли;
//	СоздатьОтменаЗаписиНаЛКНаСервере(ПараметрыДокумента);

//КонецПроцедуры

//&НаСервере
//Процедура СоздатьОтменаЗаписиНаЛКНаСервере(ПараметрыДокумента) Экспорт
//	
//	ТекущаяДата = ТекущаяДата();
//	ДокументОбъект = Документы.ОтменаЗаписиНаЛК.СоздатьДокумент();
//	ДокументОбъект.Дата					= ТекущаяДата;
//	ДокументОбъект.ИсточникСоздания		= "РасписаниеЛК";
//	ДокументОбъект.Сотрудник			= ПараметрыДокумента.Сотрудник;
//	ДокументОбъект.ДатаВремяНачала		= ПараметрыДокумента.ДатаВремяНачала;
//	ДокументОбъект.ПричинаОтмены		= ПараметрыДокумента.ПричинаОтмены;
//	Попытка
//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
//	Исключение
//		ТекстОшибки = "Ошибка при создании документа ""Отмена записи на ЛК""" + Символы.ПС;
//		Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//		ВозВрат;
//	КонецПопытки;

//	ЗаполнитьТаблицуРасписанияНаСервере();
//	
//КонецПроцедуры
#КонецОбласти

#Область ОтменаБлокировкиЗаписиНаЛК

//&НаСервере
//Процедура СоздатьОтменаБлокировкиЗаписиНаЛКНаСервере(ПараметрыДокумента) Экспорт
//	
//	ТекущаяДата = ТекущаяДата();
//	ДокументОбъект = Документы.ОтменаБлокировкиЗаписиНаЛК.СоздатьДокумент();
//	ДокументОбъект.Дата					= ТекущаяДата;
//	ДокументОбъект.ИсточникСоздания		= "РасписаниеЛК";
//	ДокументОбъект.Сотрудник			= ПараметрыДокумента.Сотрудник;
//	ДокументОбъект.ДатаВремяНачала		= ПараметрыДокумента.ДатаВремяНачала;
//	Попытка
//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
//	Исключение
//		ТекстОшибки = "Ошибка при создании документа ""Отмена блокировки записи на ЛК""" + Символы.ПС;
//		Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//		ВозВрат;
//	КонецПопытки;

//	ЗаполнитьТаблицуРасписанияНаСервере();
//	
//КонецПроцедуры
#КонецОбласти

#Область ПеренестиЗапись

//&НаКлиенте
//Процедура ПеренестиЗапись_Завершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	ПараметрыДокумента = Результат;
//	Если ПараметрыДокумента = Неопределено Тогда
//		ВозВрат;
//	КонецЕсли;
//	ПеренестиЗапись_Завершение_НаСервере(ПараметрыДокумента);

//КонецПроцедуры

//&НаСервере
//Процедура ПеренестиЗапись_Завершение_НаСервере(ПараметрыДокумента) Экспорт
//	
//	ИсходнаяСтруктура = ПараметрыДокумента.ИсходнаяСтруктура;
//	
//	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
//	ТекущаяДата = ТекущаяДата();
//	ДокументОбъект = Документы.ОтменаЗаписиНаЛК.СоздатьДокумент();
//	ДокументОбъект.Дата					= ТекущаяДата;
//	ДокументОбъект.ИсточникСоздания		= "РасписаниеЛК";
//	ДокументОбъект.Сотрудник			= ИсходнаяСтруктура.Сотрудник;
//	ДокументОбъект.ДатаВремяНачала		= ИсходнаяСтруктура.ДатаВремяНачала;
//	ДокументОбъект.ПричинаОтмены		= ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаписиНаЛК.Перенос");
//	Попытка
//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
//	Исключение
//		ОтменитьТранзакцию();
//		ТекстОшибки = "Ошибка при создании документа ""Отмена записи на ЛК""" + Символы.ПС;
//		Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//		ВозВрат;
//	КонецПопытки;
//	
//	ДокументОбъект = Документы.ЗаписьНаЛК.СоздатьДокумент();
//	ДокументОбъект.Дата					= ТекущаяДата;
//	ДокументОбъект.ИсточникСоздания		= "РасписаниеЛК";
//	ДокументОбъект.Сотрудник			= ПараметрыДокумента.Сотрудник;
//	ДокументОбъект.ДатаВремяНачала		= ПараметрыДокумента.ДатаВремяНачала;
//	ДокументОбъект.Контрагент			= ИсходнаяСтруктура.Контрагент;
//	ДокументОбъект.КонтактноеЛицо		= ИсходнаяСтруктура.КонтактноеЛицо;
//	ДокументОбъект.ВидУслуги		= ИсходнаяСтруктура.ВидУслуги;
//	ДокументОбъект.ТемаВопроса			= ИсходнаяСтруктура.ТемаВопроса;
//	ДокументОбъект.КомментарийЗаписи	= ИсходнаяСтруктура.КомментарийЗаписи;
//	ДокументОбъект.ТипЗаписи			= Перечисления.ТипыЗаписейЛК.Обычная;
//	ДокументОбъект.СрочнаяЗапись		= ПараметрыДокумента.СрочнаяЗапись;
//	Попытка
//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
//	Исключение
//		ОтменитьТранзакцию();
//		ТекстОшибки = "Ошибка при создании документа ""Запись на ЛК""" + Символы.ПС;
//		Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//		ВозВрат;
//	КонецПопытки;
//	ЗафиксироватьТранзакцию();

//	ЗаполнитьТаблицуРасписанияНаСервере();
//	
//КонецПроцедуры

#КонецОбласти

#Область ПеренестиСрочнуюЗапись

//&НаКлиенте
//Процедура ПеренестиСрочнуюЗапись_Завершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	ПараметрыДокумента = Результат;
//	Если ПараметрыДокумента = Неопределено Тогда
//		ВозВрат;
//	КонецЕсли;
//	ПеренестиСрочнуюЗапись_Завершение_НаСервере(ПараметрыДокумента);

//КонецПроцедуры

//&НаСервере
//Процедура ПеренестиСрочнуюЗапись_Завершение_НаСервере(ПараметрыДокумента) Экспорт
//	
//	// ИсходнаяСтруктура - пустая запись, в которую переносим, слот станет записанным
//	// ПараметрыДокумента - данные записи, которую переносим, слот должен стать пустым
//	
//	ИсходнаяСтруктура = ПараметрыДокумента.ИсходнаяСтруктура;
//	
//	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
//	ТекущаяДата = ТекущаяДата();
//	ДокументОбъект = Документы.ОтменаЗаписиНаЛК.СоздатьДокумент();
//	ДокументОбъект.Дата					= ТекущаяДата;
//	ДокументОбъект.ИсточникСоздания		= "РасписаниеЛК";
//	ДокументОбъект.Сотрудник			= ПараметрыДокумента.Сотрудник;
//	ДокументОбъект.ДатаВремяНачала		= ПараметрыДокумента.ДатаВремяНачала;
//	ДокументОбъект.ПричинаОтмены		= ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаписиНаЛК.Перенос");
//	Попытка
//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
//	Исключение
//		ОтменитьТранзакцию();
//		ТекстОшибки = "Ошибка при создании документа ""Отмена записи на ЛК""" + Символы.ПС;
//		Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//		ВозВрат;
//	КонецПопытки;
//	
//	ДокументОбъект = Документы.ЗаписьНаЛК.СоздатьДокумент();
//	ДокументОбъект.Дата					= ТекущаяДата;
//	ДокументОбъект.ИсточникСоздания		= "РасписаниеЛК";
//	ДокументОбъект.Сотрудник			= ИсходнаяСтруктура.Сотрудник;
//	ДокументОбъект.ДатаВремяНачала		= ИсходнаяСтруктура.ДатаВремяНачала;
//	ДокументОбъект.Контрагент			= ПараметрыДокумента.Контрагент;
//	ДокументОбъект.КонтактноеЛицо		= ПараметрыДокумента.КонтактноеЛицо;
//	ДокументОбъект.ВидУслуги		= ПараметрыДокумента.ВидУслуги;
//	ДокументОбъект.ТемаВопроса			= ПараметрыДокумента.ТемаВопроса;
//	ДокументОбъект.КомментарийЗаписи	= ПараметрыДокумента.КомментарийЗаписи;
//	ДокументОбъект.ТипЗаписи			= ПараметрыДокумента.ТипЗаписи;
//	ДокументОбъект.СрочнаяЗапись		= ПараметрыДокумента.СрочнаяЗапись;
//	Попытка
//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
//	Исключение
//		ОтменитьТранзакцию();
//		ТекстОшибки = "Ошибка при создании документа ""Запись на ЛК""" + Символы.ПС;
//		Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//		ВозВрат;
//	КонецПопытки;
//	ЗафиксироватьТранзакцию();

//	ЗаполнитьТаблицуРасписанияНаСервере();
//	
//КонецПроцедуры

#КонецОбласти

#Область Общие_Вспомогательные

&НаСервере
Функция ПутьКМетаданнымОбработки() Экспорт
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	ВозВрат ОбъектФормы.Метаданные().ПолноеИмя();
КонецФункции

&НаСервере
Функция ОбъектОбработки() Экспорт
	ВозВрат РеквизитФормыВЗначение("Объект");
КонецФункции

#КонецОбласти
#КонецОбласти

#КонецОбласти



#Область Обработка_расшифровки

&НаКлиенте
Функция ОбработкаРасшифровки(Расшифровка)
	
	ДанныеЯчейки = ПолучитьДанныеЯчейкиПоРасшифровке(Расшифровка);
	Если ДанныеЯчейки = Неопределено Тогда
		ВозВрат Ложь;
	КонецЕсли;
	
	//Лобашова 30.05.2019 87280 +
	ЭтоСотрудник = НЕ ТекПользовательЯвляетсяКоординаторомИлиРуководителем();
	
	Если ЭтоСотрудник И ДанныеЯчейки.Сотрудник <> ПользователиКлиентСервер.ТекущийПользователь()  Тогда
		Объект.ДоступныеДействия.ДоступноБлокировка = Ложь;
		Объект.ДоступныеДействия.ДоступноОтменаБлокировки = Ложь;
		Объект.ДоступныеДействия.ДоступноПерепланирование = Ложь;
		Объект.ДоступныеДействия.ДоступноИзменение = Ложь;
		Объект.ДоступныеДействия.ДоступноСоздание = Ложь;
	КонецЕсли;	
	//Лобашова 30.05.2019 87280 -	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки"	, ПутьКМетаданнымОбработки);
	ПараметрыФормы.Вставить("ИсходнаяСтруктура"			, ДанныеЯчейки);
	ПараметрыФормы.Вставить("ДоступныеДействия"			, Объект.ДоступныеДействия);
	БоР_ОбщийМодульКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ДанныеЯчейки);
	ДополнительныеПараметры = Новый Структура;
	
	Если ДанныеЯчейки.ИтоговыйСтатус = ПредопределенноеЗначение("Перечисление.ИтоговыеСтатусыРасписанияЛК.ПустаяСсылка") Тогда
		ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаОбработкиСвободно";
		БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ОбработкаРасшифровкиСвободно_Завершение", ДополнительныеПараметры);
		ВозВрат Истина;
	ИначеЕсли ДанныеЯчейки.ИтоговыйСтатус = ПредопределенноеЗначение("Перечисление.ИтоговыеСтатусыРасписанияЛК.Свободно") Тогда
		ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаОбработкиСвободно";
		БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ОбработкаРасшифровкиСвободно_Завершение", ДополнительныеПараметры);
		ВозВрат Истина;
	ИначеЕсли ДанныеЯчейки.ИтоговыйСтатус = ПредопределенноеЗначение("Перечисление.ИтоговыеСтатусыРасписанияЛК.Запланировано") Тогда
		ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаОбработкиЗапланировано";
		БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ОбработкаРасшифровкиЗапланировано_Завершение", ДополнительныеПараметры);
		ВозВрат Истина;
	ИначеЕсли ДанныеЯчейки.ИтоговыйСтатус = ПредопределенноеЗначение("Перечисление.ИтоговыеСтатусыРасписанияЛК.ЗаписанКлиент") Тогда
		//Лобашова 31.07.2019 89291 +
		//ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаОбработкиЗаписанКлиент";
		Событие =  ПараметрыФормы.Событие;
		ИмяФормыДляОткрытия = "Документ.Обращение.Форма.ФормаДокумента";
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ"				, Событие);
		ПараметрыФормы.Вставить("ТолькоПросмотр"	, Ложь);
		//Лобашова 
		Если ЗначениеЗаполнено(ТабДок_ОбрабатываемаяЯчейка) Тогда
			// Уже вызвали форму
		Иначе	
			ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		//БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ОбработкаРасшифровкиЗаписанКлиент_Завершение", ДополнительныеПараметры, РежимОткрытияОкнаФормы.Независимый);
		ВозВрат Истина;
	ИначеЕсли ДанныеЯчейки.ИтоговыйСтатус = ПредопределенноеЗначение("Перечисление.ИтоговыеСтатусыРасписанияЛК.Блокировка") Тогда
		ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаОбработкиБлокировка";
		БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ОбработкаРасшифровкиБлокировка_Завершение", ДополнительныеПараметры);
		ВозВрат Истина;
	ИначеЕсли ДанныеЯчейки.ИтоговыйСтатус = ПредопределенноеЗначение("Перечисление.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация") ИЛИ ДанныеЯчейки.ИтоговыйСтатус = ПредопределенноеЗначение("Перечисление.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация") Тогда
		ЭлементыМеню = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ДанныеЯчейки.РегистраторЗаписи) Тогда
			ДополнительныеПараметры.Вставить("РегистраторЗаписи"		, ДанныеЯчейки.РегистраторЗаписи);
			ЭлементыМеню.Добавить("Документ записи");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеЯчейки.РегистраторРезультата) Тогда
			ДополнительныеПараметры.Вставить("РегистраторРезультата"	, ДанныеЯчейки.РегистраторРезультата);
			ЭлементыМеню.Добавить("Документ выполнения");
			Если ТипЗнч(ДанныеЯчейки.РегистраторРезультата) = Тип("ДокументСсылка.ВыполнениеКонсультацииЛК") Тогда
				Событие = БоР_ОбщийМодуль.ПолучитьПолеОбъекта(ДанныеЯчейки.РегистраторРезультата, "Событие");
				Если ЗначениеЗаполнено(Событие) И ТипЗнч(Событие) = Тип("ДокументСсылка.Обращение") Тогда
					ДополнительныеПараметры.Вставить("Событие"	, Событие);
					ЭлементыМеню.Добавить("Обращение");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЭлементыМеню.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиВыполнено_Завершение", ЭтаФорма, ДополнительныеПараметры);
			ПоказатьВыборИзМеню(ОписаниеОповещения, ЭлементыМеню);
		КонецЕсли;
		ВозВрат Истина;
	ИначеЕсли ДанныеЯчейки.ИтоговыйСтатус = ПредопределенноеЗначение("Перечисление.ИтоговыеСтатусыРасписанияЛК.Выполнено") Тогда
		ЭлементыМеню = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ДанныеЯчейки.РегистраторЗаписи) Тогда
			ДополнительныеПараметры.Вставить("РегистраторЗаписи"		, ДанныеЯчейки.РегистраторЗаписи);
			ЭлементыМеню.Добавить("Документ записи");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеЯчейки.РегистраторРезультата) Тогда
			ДополнительныеПараметры.Вставить("РегистраторРезультата"	, ДанныеЯчейки.РегистраторРезультата);
			ЭлементыМеню.Добавить("Документ выполнения");
			Если ТипЗнч(ДанныеЯчейки.РегистраторРезультата) = Тип("ДокументСсылка.ВыполнениеКонсультацииЛК") Тогда
				Событие = БоР_ОбщийМодуль.ПолучитьПолеОбъекта(ДанныеЯчейки.РегистраторРезультата, "Событие");
				Если ЗначениеЗаполнено(Событие) И ТипЗнч(Событие) = Тип("ДокументСсылка.Обращение") Тогда
					ДополнительныеПараметры.Вставить("Событие"	, Событие);
					ЭлементыМеню.Добавить("Обращение");
				КонецЕсли;
			//Лобашова 30.04.2019 81724 +
			ИначеЕсли ТипЗнч(ДанныеЯчейки.РегистраторРезультата) = Тип("ДокументСсылка.ВыполнениеРаботы") Тогда
				Событие = БоР_ОбщийМодуль.ПолучитьПолеОбъекта(ДанныеЯчейки.РегистраторРезультата, "Событие");
				Если ЗначениеЗаполнено(Событие) И ТипЗнч(Событие) = Тип("ДокументСсылка.Обращение") Тогда
					ДополнительныеПараметры.Вставить("Событие"	, Событие);
					ЭлементыМеню.Добавить("Обращение");
				КонецЕсли;
			//Лобашова 30.04.2019 81724 -
			КонецЕсли;
		КонецЕсли;
		Если ЭлементыМеню.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиВыполнено_Завершение", ЭтаФорма, ДополнительныеПараметры);
			ПоказатьВыборИзМеню(ОписаниеОповещения, ЭлементыМеню);
		КонецЕсли;
		ВозВрат Истина;
	Иначе
		ВозВрат Истина;
	КонецЕсли;
	
	ВозВрат Истина;

КонецФункции

&НаКлиенте
Процедура ОбработкаРасшифровкиВыполнено_Завершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "Документ записи" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ"				, ДополнительныеПараметры.РегистраторЗаписи);
		ПараметрыФормы.Вставить("ТолькоПросмотр"	, Истина);
		ИмяФормыДляОткрытия = "Документ." + БоР_ОбщийМодуль.ПолучитьИмяОбъектаПоСсылке(ДополнительныеПараметры.РегистраторЗаписи) + ".ФормаОбъекта";
		БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, Неопределено, Неопределено);
	ИначеЕсли ВыбранныйЭлемент.Значение = "Документ выполнения" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ"				, ДополнительныеПараметры.РегистраторРезультата);
		ПараметрыФормы.Вставить("ТолькоПросмотр"	, Истина);
		ИмяФормыДляОткрытия = "Документ." + БоР_ОбщийМодуль.ПолучитьИмяОбъектаПоСсылке(ДополнительныеПараметры.РегистраторРезультата) + ".ФормаОбъекта";
		БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, Неопределено, Неопределено);
	ИначеЕсли ВыбранныйЭлемент.Значение = "Обращение" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ"				, ДополнительныеПараметры.Событие);
		ПараметрыФормы.Вставить("ТолькоПросмотр"	, Истина);
		ИмяФормыДляОткрытия = "Документ." + БоР_ОбщийМодуль.ПолучитьИмяОбъектаПоСсылке(ДополнительныеПараметры.Событие) + ".ФормаОбъекта";
		БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, Неопределено, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРасшифровкиСвободно_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;

	ЗаполнитьТаблицуРасписанияНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРасшифровкиЗапланировано_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;

	ЗаполнитьТаблицуРасписанияНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаРасшифровкиБлокировка_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;

	ЗаполнитьТаблицуРасписанияНаСервере();
	
	//ПараметрыДокумента = Результат;
	//Если ПараметрыДокумента = Неопределено Тогда
	//	ВозВрат;
	//КонецЕсли;
	//Если ТипЗнч(ПараметрыДокумента) <> Тип("Структура") Тогда
	//	ВозВрат;
	//КонецЕсли;
	//Если Не ПараметрыДокумента.Свойство("Действие") Тогда
	//	ВозВрат;
	//КонецЕсли;
	//ДополнительныеПараметры = Новый Структура;
	//Если ПараметрыДокумента.Действие = "Отменить блокировку" Тогда
	//	СоздатьОтменаБлокировкиЗаписиНаЛКНаСервере(ПараметрыДокумента);
	//КонецЕсли;

КонецПроцедуры
#КонецОбласти

// БоР : Управление периодическим обновлением содержимого таблицы 27.01.2017 16:45:34
&НаКлиенте
Процедура НастроитьПериодическоеОбновление() Экспорт
	Автообновление = Автообновление И ПериодичностьОбновленияФормыРасписания > 0;
	Элементы.ФормаАвтообновление.Пометка = Автообновление;
	Если Автообновление И ПериодичностьОбновленияФормыРасписания > 0 Тогда
		ПодключитьОбработчикОжидания("ОбработкаОжидания_ЗаполнитьТаблицуРасписания", ПериодичностьОбновленияФормыРасписания);
	Иначе
		ОтключитьОбработчикОжидания("ОбработкаОжидания_ЗаполнитьТаблицуРасписания");
	КонецЕсли;
КонецПроцедуры

#Область Вспомогательные
&НаСервере
Функция ПолучитьСеткуВремени() Экспорт
	СеткаВремени = Новый ТаблицаЗначений;
	СеткаВремени.Колонки.Добавить("ДатаВремя", Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	СеткаВремени.Колонки.Добавить("СдвигСекунд", Новый ОписаниеТипов("Число"));
	ШагСеткиСек = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьШагСеткиРасписания() * 60;
	ВремяНачала = '00010101';
	ВремяОкончания = ВремяНачала + 86400;
	ТекущееВремя = ВремяНачала;
	Пока ТекущееВремя < ВремяОкончания Цикл
		СтрокаСеткаВремени = СеткаВремени.Добавить();
		СтрокаСеткаВремени.ДатаВремя = ТекущееВремя;
		СтрокаСеткаВремени.СдвигСекунд = ТекущееВремя - ВремяНачала;
		ТекущееВремя = ТекущееВремя + ШагСеткиСек;
	КонецЦикла;
	ВозВрат СеткаВремени;
КонецФункции

&НаСервере
Функция ПолучитьСеткуДней() Экспорт
	СеткаДней = Новый ТаблицаЗначений;
	СеткаДней.Колонки.Добавить("ДатаВремя", Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДатаНачала		= НачалоДня(Объект.ДатаНачала);
	ДатаОкончания	= НачалоДня(Объект.ДатаОкончания);

	ТекущееВремя = ДатаНачала;
	Пока ТекущееВремя <= ДатаОкончания Цикл
		СтрокаСеткаДней = СеткаДней.Добавить();
		СтрокаСеткаДней.ДатаВремя = ТекущееВремя;

		ТекущееВремя = ТекущееВремя + 86400;
	КонецЦикла;
	ВозВрат СеткаДней;
КонецФункции

&НаСервере
Функция ПолучитьКратностьШкалы() Экспорт
	ВозВрат 3;//количество слотов для объединения
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТелефоны(Контрагент, КонтактноеЛицо)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &КонтактноеЛицо
	|	И КонтактнаяИнформация.Тип = &ТипКонтактнойИнформации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Контрагент
	|	И КонтактнаяИнформация.Тип = &ТипКонтактнойИнформации";
	
	
	#КонецОбласти
	Запрос.УстановитьПараметр("Контрагент"				, Контрагент);
	Запрос.УстановитьПараметр("КонтактноеЛицо"			, КонтактноеЛицо);
	Запрос.УстановитьПараметр("ТипКонтактнойИнформации"	,Перечисления.ТипыКонтактнойИнформации.Телефон);

	ТаблицаКонтактнойИнформации = Запрос.Выполнить().Выгрузить();
	СтрокаТелефонов = "";
	Для каждого СтрокаКИ Из ТаблицаКонтактнойИнформации Цикл
		СтрокаТелефонов = СтрокаТелефонов + ?(ЗначениеЗаполнено(СтрокаТелефонов), ";", "") + СтрокаКИ.Представление;
	КонецЦикла;
	
	ВозВрат СтрокаТелефонов;
	
КонецФункции
#КонецОбласти

#Область Работа_с_данными_областей_ТабДока
// БоР : Функция определяет все области (значимые для обработки) и выдает их как соответствие ИмяОбласти-Область 04.02.2017 20:00:25
&НаКлиенте
Функция ПолучитьВыделенныеОбласти(ТабДок)
	
	ВысотаТаблицы = ТабДок.ВысотаТаблицы; // БоР : Как ни странно, это значение может меняться по мере обработки ТабДок.ВыделенныеОбласти 04.02.2017 17:45:17
	ШиринаТаблицы = ТабДок.ШиринаТаблицы;
	НайденныеОбласти = Новый Соответствие;
	
	ВыделенныеОбласти = ТабДок.ВыделенныеОбласти;
	Для каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда // это рисунок
			Продолжить;
		КонецЕсли;
		Область_Верх	= ВыделеннаяОбласть.Верх;
		Область_Лево	= ВыделеннаяОбласть.Лево;
		Область_Низ		= ВыделеннаяОбласть.Низ;
		Область_Право	= ВыделеннаяОбласть.Право;
		Если Область_Верх > ВысотаТаблицы Тогда // область за пределами документа
			Продолжить;
		КонецЕсли;
		Если Область_Лево > ШиринаТаблицы Тогда // область за пределами документа
			Продолжить;
		КонецЕсли;
		ГраницаОбработки_Верх	= Макс(Область_Верх, 1);
		ГраницаОбработки_Лево	= Макс(Область_Лево, 1);
		ГраницаОбработки_Низ	= ?(Область_Низ = 0, ВысотаТаблицы, Мин(Область_Низ, ВысотаТаблицы));
		ГраницаОбработки_Право	= ?(Область_Право = 0, ШиринаТаблицы, Мин(Область_Право, ШиринаТаблицы));
		
		МассивОбработкиЯчеек = Новый Массив(ГраницаОбработки_Низ - ГраницаОбработки_Верх + 1, ГраницаОбработки_Право - ГраницаОбработки_Лево + 1);
		
		Для НомерСтроки = ГраницаОбработки_Верх По ГраницаОбработки_Низ Цикл
			Для НомерКолонки = ГраницаОбработки_Лево По ГраницаОбработки_Право Цикл
				Если МассивОбработкиЯчеек[НомерСтроки - ГраницаОбработки_Верх][НомерКолонки - ГраницаОбработки_Лево] = 1 Тогда
					Продолжить;
				КонецЕсли;
				ОчереднаяОбласть = ТабДок.Область(НомерСтроки, НомерКолонки);
				ГраницаОбласти_Верх		= Макс(ОчереднаяОбласть.Верх, ГраницаОбработки_Верх);
				ГраницаОбласти_Лево		= Макс(ОчереднаяОбласть.Лево, ГраницаОбработки_Лево);
				ГраницаОбласти_Низ		= ?(ОчереднаяОбласть.Низ = 0, ГраницаОбработки_Низ, Мин(ОчереднаяОбласть.Низ, ГраницаОбработки_Низ));
				ГраницаОбласти_Право	= ?(ОчереднаяОбласть.Право = 0, ГраницаОбработки_Право, Мин(ОчереднаяОбласть.Право, ГраницаОбработки_Право));
				ЗаполнитьМассив(МассивОбработкиЯчеек, ГраницаОбласти_Верх - ГраницаОбработки_Верх, ГраницаОбласти_Низ - ГраницаОбработки_Верх, ГраницаОбласти_Лево - ГраницаОбработки_Лево, ГраницаОбласти_Право - ГраницаОбработки_Лево, 1);
				// БоР : Если хотим просто получить все области из заданной области :) , то складываем в массив - получим полное покрытие (или разбиение) 04.02.2017 19:11:56
				// БоР : Также, надо учесть, что полученные области в сумме могут давать несколько большее пространство, если есть объединенные ячейки, на попавшие полностью в исходную область 04.02.2017 19:11:56
				// БоР : Пока что хотим получить только ячейки, которые для нас что-то значат - имеющие расшифровку 04.02.2017 19:11:56
				// БоР : Новое - теперь расшифровка есть почти в любой ячейке 18.07.2017 2:03:04
				Если ОчереднаяОбласть.Расшифровка = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НайденныеОбласти.Вставить(ОчереднаяОбласть.Имя, ОчереднаяОбласть);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ВозВрат НайденныеОбласти;
	
КонецФункции

// БоР : преобразует результат функции ПолучитьВыделенныеОбласти() в массив непрерывных (или нет) фрагментов [Сотрудник/ДатаНачала/ДатаОкончания], сливая "соседние" слоты 04.02.2017 20:00:25
&НаКлиенте
Функция ПолучитьДанныеВыделенныхОбластей(НайденныеОбласти, ГруппировкаПоСотруднику = Истина, ОбъединитьСоседние = Истина)
	// параметр ОбъединитьСоседние указывает, что надо объеднить соседние, но разные области (например, слот "свободно" и слот "запланировано"  или два слота "запланировано" рядом)
	
	МассивСвойствЯчеек = Новый Массив;
	Для каждого ЭлементНайденныеОбласти Из НайденныеОбласти Цикл
		НайденнаяОбласть = ЭлементНайденныеОбласти.Значение;
		ДанныеЯчейки = ПолучитьДанныеЯчейки(НайденнаяОбласть);
		Если ДанныеЯчейки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СвойстваЯчейки = Новый Структура;
		СвойстваЯчейки.Вставить("НомерСтроки"			, ДанныеЯчейки.НомерСтроки);
		СвойстваЯчейки.Вставить("Сотрудник"				, ДанныеЯчейки.Сотрудник);
		СвойстваЯчейки.Вставить("ДатаВремяНачала"		, ДанныеЯчейки.ДатаВремяНачала);
		СвойстваЯчейки.Вставить("ДатаВремяОкончания"	, ДанныеЯчейки.ДатаВремяОкончания);
		СвойстваЯчейки.Вставить("Состояние"				, ДанныеЯчейки.Состояние);
		СвойстваЯчейки.Вставить("ИтоговыйСтатус"		, ДанныеЯчейки.ИтоговыйСтатус);
		СвойстваЯчейки.Вставить("ОписаниеXML"			, ДанныеЯчейки.ОписаниеXML);
		СвойстваЯчейки.Вставить("ОписаниеТекст"			, ДанныеЯчейки.ОписаниеТекст);
		МассивСвойствЯчеек.Добавить(СвойстваЯчейки);
	КонецЦикла;
	
	ДанныеСлотов = ОбъединитьСлотыНаСервере(МассивСвойствЯчеек, ГруппировкаПоСотруднику, ОбъединитьСоседние);
	ВозВрат ДанныеСлотов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъединитьСлотыНаСервере(МассивСвойствЯчеек, ГруппировкаПоСотруднику = Истина, ОбъединитьСоседние = Истина)
	
	МассивОбъединенныхСлотов = Новый Массив;
	Если МассивСвойствЯчеек.Количество() = 0 Тогда
		ВозВрат МассивОбъединенныхСлотов;
	КонецЕсли;
	
	ТаблицаСлотов = Новый ТаблицаЗначений;
	Для каждого СвойствоЯчейки Из МассивСвойствЯчеек[0] Цикл // пока пусть так
		ТаблицаСлотов.Колонки.Добавить(СвойствоЯчейки.Ключ			, БоР_ОбщийМодульКлиентСервер.ОписаниеТиповПоТипу(СвойствоЯчейки.Значение));
	КонецЦикла;
	
	Для каждого СвойстваЯчейки Из МассивСвойствЯчеек Цикл
		СтрокаТаблицаСлотов = ТаблицаСлотов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицаСлотов, СвойстваЯчейки);
	КонецЦикла;
	ТаблицаСлотов.Сортировать("Сотрудник, ДатаВремяНачала");
	
	ОчередныеЗначения = Новый Структура;
	ОчередныеЗначения.Вставить("Сотрудник");
	Если Не ОбъединитьСоседние Тогда
		ОчередныеЗначения.Вставить("НомерСтроки");
	КонецЕсли;
	
	МассивДляЗаполнения = МассивОбъединенныхСлотов;
	//ЗаполнитьЗначенияСвойств(ОчередныеЗначения, ТаблицаСлотов[0]);
	//ОчереднаяДатаНачала			= '00010101';//ТаблицаСлотов[0].ДатаВремяНачала;
	ОчереднаяДатаОкончания		= '00010101';//ТаблицаСлотов[0].ДатаВремяОкончания;
	Для каждого СтрокаТаблицаСлотов Из ТаблицаСлотов Цикл
		Если ОчереднаяДатаОкончания < СтрокаТаблицаСлотов.ДатаВремяНачала ИЛИ Не БоР_ОбщийМодульКлиентСервер.СравнитьПоляСтруктур(ОчередныеЗначения, СтрокаТаблицаСлотов) Тогда
			СвойстваСлота = Новый Структура;
			Для каждого Колонка Из ТаблицаСлотов.Колонки Цикл // пока пусть так
				СвойстваСлота.Вставить(Колонка.Имя			, СтрокаТаблицаСлотов[Колонка.Имя]);
			КонецЦикла;
			//СвойстваСлота.Вставить("НомерСтроки"			, СтрокаТаблицаСлотов.НомерСтроки);
			//СвойстваСлота.Вставить("Сотрудник"				, СтрокаТаблицаСлотов.Сотрудник);
			//СвойстваСлота.Вставить("ДатаВремяНачала"		, СтрокаТаблицаСлотов.ДатаВремяНачала);
			//СвойстваСлота.Вставить("Состояние"				, СтрокаТаблицаСлотов.Состояние);
			//СвойстваСлота.Вставить("ИтоговыйСтатус"			, СтрокаТаблицаСлотов.ИтоговыйСтатус);
			
			Если ГруппировкаПоСотруднику И ОчередныеЗначения.Сотрудник <> СтрокаТаблицаСлотов.Сотрудник Тогда
				ДанныеСотрудника = Новый Структура;
				ДанныеСотрудника.Вставить("Сотрудник"		, СтрокаТаблицаСлотов.Сотрудник);
				ДанныеСотрудника.Вставить("Слоты"		, Новый Массив);
				МассивОбъединенныхСлотов.Добавить(ДанныеСотрудника);
				МассивДляЗаполнения = ДанныеСотрудника.Слоты;
			КонецЕсли;
			
			
			//Если ГруппировкаПоСотруднику И ОчередныеЗначения.Сотрудник <> СтрокаТаблицаСлотов.Сотрудник Тогда
			//	СлотыСотрудника = Новый Структура;
			//	СлотыСотрудника.Вставить("Сотрудник"		, СтрокаТаблицаСлотов.Сотрудник);
			//	СлотыСотрудника.Вставить("Слоты"		, Новый Массив);
			//	МассивОбъединенныхСлотов.Добавить(СлотыСотрудника);
			//КонецЕсли;
			//Если ГруппировкаПоСотруднику Тогда
			//	СлотыСотрудника = Новый Структура;
			//	СлотыСотрудника.Вставить("Сотрудник"			, СтрокаТаблицаСлотов.Сотрудник);
			//	СлотыСотрудника.Вставить("СвойстваСлота"		, Новый Массив);
			//	МассивОбъединенныхСлотов.Добавить(СлотыСотрудника);
			//Иначе
			//КонецЕсли;
			//	СвойстваСлота = Новый Структура;
			//	СвойстваСлота.Вставить("НомерСтроки"			, СтрокаТаблицаСлотов.НомерСтроки);
			//	СвойстваСлота.Вставить("Сотрудник"				, СтрокаТаблицаСлотов.Сотрудник);
			//	СвойстваСлота.Вставить("ДатаВремяНачала"		, ОчереднаяДатаНачала);
			//	СвойстваСлота.Вставить("ДатаВремяОкончания"	, ОчереднаяДатаОкончания);
				
			МассивДляЗаполнения.Добавить(СвойстваСлота);

			ЗаполнитьЗначенияСвойств(ОчередныеЗначения, СтрокаТаблицаСлотов);
			//ОчереднаяДатаНачала = СтрокаТаблицаПериодов.ДатаВремяНачала;
		КонецЕсли;
		СвойстваСлота.Вставить("ДатаВремяОкончания"		, СтрокаТаблицаСлотов.ДатаВремяОкончания);
		ОчереднаяДатаОкончания = СтрокаТаблицаСлотов.ДатаВремяОкончания;
	КонецЦикла;
	
	
	ВозВрат МассивОбъединенныхСлотов;
	
КонецФункции

// БоР :  04.02.2017 18:54:51
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьМассив(МассивДляЗаполнения, НачальныйИндекс1, КонечныйИндекс1, НачальныйИндекс2, КонечныйИндекс2, ЗначениеЗаполнения) Экспорт
	Для Индекс1 = НачальныйИндекс1 По КонечныйИндекс1 Цикл
		Для Индекс2 = НачальныйИндекс2 По КонечныйИндекс2 Цикл
			МассивДляЗаполнения[Индекс1][Индекс2] = ЗначениеЗаполнения;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Обработчики_кнопок

&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьТаблицуРасписанияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПоКлиенту(Команда)
	ПараметрыФормы = Новый Структура;
	//ОткрытьФорму(ПутьКМетаданнымОбработки + ".Форма.ФормаПросмотраИсторииПоКлиенту", ПараметрыФормы, ЭтаФорма,,,, , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаПросмотраИсторииПоКлиенту";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, Неопределено, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Автообновление(Команда)
	Автообновление = Не Автообновление;
	НастроитьПериодическоеОбновление();
КонецПроцедуры

&НаКлиенте
Процедура Легенда(Команда)
	Объект.ВыводитьЛегенду = Не Объект.ВыводитьЛегенду;
	Элементы.ФормаЛегенда.Пометка = Объект.ВыводитьЛегенду;
	ПоказатьСкрытьЛегенду(ТабДокРасписания, Объект.ВыводитьЛегенду);
КонецПроцедуры

// БоР :  28.01.2017 21:32:48
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСкрытьЛегенду(ТабДокумент, ВыводитьЛегенду) Экспорт
	ТабДокумент.Области.ОбластьЛегенды.Видимость = ВыводитьЛегенду;
КонецПроцедуры

#Область Команда_ЗаблокироватьЗапись
&НаКлиенте
Процедура ЗаблокироватьЗапись(Команда)
	
	НайденныеОбласти = ПолучитьВыделенныеОбласти(ТабДокРасписания);
	ДанныеСлотов = ПолучитьДанныеВыделенныхОбластей(НайденныеОбласти, Истина, Истина);
	
	//Лобашова 30.05.2019 87280 +
	ЭтоСотрудник = НЕ ТекПользовательЯвляетсяКоординаторомИлиРуководителем();
	
	Если ЭтоСотрудник И ДанныеСлотов[0].Сотрудник <> ПользователиКлиентСервер.ТекущийПользователь()  Тогда
			ТекстОшибки = "Редактирование расписания других сотрудников недоступно!" + Символы.ПС;
			Сообщить(ТекстОшибки);
			ВозВрат;
	КонецЕсли;	
	//Лобашова 30.05.2019 87280 -

	Если ДанныеСлотов.Количество() = 0 Тогда
		ВозВрат;
	КонецЕсли;
	Адрес_ДанныеСлотов = ПоместитьВоВременноеХранилище(ДанныеСлотов, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Адрес_ДанныеСлотов"		, Адрес_ДанныеСлотов);
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки"	, ПутьКМетаданнымОбработки);
	
	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаБлокировки";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ЗаблокироватьЗапись_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьЗапись_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	
	ЗаполнитьТаблицуРасписанияНаСервере();

КонецПроцедуры
#КонецОбласти

#Область Команда_Запланировать
&НаКлиенте
Процедура Запланировать(Команда)
	
	НайденныеОбласти = ПолучитьВыделенныеОбласти(ТабДокРасписания);
	ДанныеСлотов = ПолучитьДанныеВыделенныхОбластей(НайденныеОбласти, Истина, Истина);
	
	//Лобашова 30.05.2019 87280 +
	ЭтоСотрудник = НЕ ТекПользовательЯвляетсяКоординаторомИлиРуководителем();
	
	Если ЭтоСотрудник И ДанныеСлотов[0].Сотрудник <> ПользователиКлиентСервер.ТекущийПользователь()  Тогда
			ТекстОшибки = "Редактирование расписания других сотрудников недоступно!" + Символы.ПС;
			Сообщить(ТекстОшибки);
			ВозВрат;
	КонецЕсли;	
	//Лобашова 30.05.2019 87280 -

	Если ДанныеСлотов.Количество() = 0 Тогда
		ВозВрат;
	КонецЕсли;
	Адрес_ДанныеСлотов = ПоместитьВоВременноеХранилище(ДанныеСлотов, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Адрес_ДанныеСлотов"		, Адрес_ДанныеСлотов);
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки"	, ПутьКМетаданнымОбработки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеСлотов", ДанныеСлотов);
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаПланирования";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "Запланировать_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Запланировать_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	
	ЗаполнитьТаблицуРасписанияНаСервере();

КонецПроцедуры
#КонецОбласти

#Область Команда_Освободить
&НаКлиенте
Процедура Освободить(Команда)
	
	НайденныеОбласти = ПолучитьВыделенныеОбласти(ТабДокРасписания);
	ДанныеСлотов = ПолучитьДанныеВыделенныхОбластей(НайденныеОбласти, Истина, Истина);
	
	//Лобашова 30.05.2019 87280 +
	ЭтоСотрудник = НЕ ТекПользовательЯвляетсяКоординаторомИлиРуководителем();
	
	Если ЭтоСотрудник И ДанныеСлотов[0].Сотрудник <> ПользователиКлиентСервер.ТекущийПользователь()  Тогда
			ТекстОшибки = "Редактирование расписания других сотрудников недоступно!" + Символы.ПС;
			Сообщить(ТекстОшибки);
			ВозВрат;
	КонецЕсли;	
	//Лобашова 30.05.2019 87280 -
	
	Если ДанныеСлотов.Количество() = 0 Тогда
		ВозВрат;
	КонецЕсли;
	Адрес_ДанныеСлотов = ПоместитьВоВременноеХранилище(ДанныеСлотов, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Адрес_ДанныеСлотов"		, Адрес_ДанныеСлотов);
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки"	, ПутьКМетаданнымОбработки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеСлотов", ДанныеСлотов);
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаОтменыПланирования";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "Освободить_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	
	ЗаполнитьТаблицуРасписанияНаСервере();

КонецПроцедуры
#КонецОбласти

#Область УстановитьСвойства_ВыделенныеЯчейки

&НаКлиенте
Процедура УстановитьСвойства_ВыделенныеЯчейки(Команда)
	
	НайденныеОбласти = ПолучитьВыделенныеОбласти(ТабДокРасписания);
	//ДанныеСлотов = Новый Массив;
	//
	//Для каждого ЭлементНайденныеОбласти Из НайденныеОбласти Цикл
	//	НайденнаяОбласть = ЭлементНайденныеОбласти.Значение;
	//	ДанныеЯчейки = ПолучитьДанныеЯчейки(НайденнаяОбласть);
	//	Если ДанныеЯчейки = Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	Если ДанныеЯчейки.ИтоговыйСтатус = ПредопределенноеЗначение("Перечисление.ИтоговыеСтатусыРасписанияЛК.Запланировано") Тогда
	//		ПараметрыДокумента = Новый Структура;
	//		ПараметрыДокумента.Вставить("Сотрудник"			, ДанныеЯчейки.Сотрудник);
	//		ПараметрыДокумента.Вставить("ДатаВремяНачала"	, ДанныеЯчейки.ДатаВремяНачала);
	//		ДанныеСлотов.Добавить(ПараметрыДокумента);
	//	КонецЕсли;
	//КонецЦикла;
	
	ДанныеСлотов = ПолучитьДанныеВыделенныхОбластей(НайденныеОбласти, Истина, Ложь);
	
	Если ДанныеСлотов.Количество() = 0 Тогда
		ВозВрат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеСлотов", ДанныеСлотов);
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаВводаПараметровМассовойУстановкиСвойств";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "УстановитьСвойства_ВыделенныеЯчейки_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойства_ВыделенныеЯчейки_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	
	ДанныеСлотов			= ДополнительныеПараметры.ДанныеСлотов;
	УстанавливаемыеСвойства	= Результат.УстанавливаемыеСвойства;
	УстановитьСвойства_ВыделенныеЯчейки_Завершение_НаСервере(ДанныеСлотов, УстанавливаемыеСвойства);
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойства_ВыделенныеЯчейки_Завершение_НаСервере(ДанныеСлотов, УстанавливаемыеСвойства) Экспорт
	
	ОбновитьТаблицу = УстановкаСвойствЭлементаРасписанияЛКНаСервере_Массовая(ДанныеСлотов, УстанавливаемыеСвойства);
	Если ОбновитьТаблицу Тогда
		ЗаполнитьТаблицуРасписанияНаСервере();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УстановитьСвойства_ГрупповаяУстановка

&НаКлиенте
Процедура УстановитьСвойства_ГрупповаяУстановка(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачала"	, Объект.ДатаНачала);
	ПараметрыФормы.Вставить("ДатаОкончания"	, Объект.ДатаОкончания);
	
	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаМассовойУстановкиСвойств";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "УстановитьСвойства_ГрупповаяУстановка_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойства_ГрупповаяУстановка_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	УстановитьСвойства_ГрупповаяУстановка_Завершение_НаСервере(Результат);
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойства_ГрупповаяУстановка_Завершение_НаСервере(Результат) Экспорт
	
	ОбновитьТаблицу = УстановкаСвойствЭлементаРасписанияЛКНаСервере_Групповая(Результат);
	Если ОбновитьТаблицу Тогда
		ЗаполнитьТаблицуРасписанияНаСервере();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УстановитьОграниченияПоВидамУслуг

&НаКлиенте
Процедура УстановитьОграниченияПоВидамУслуг(Команда)
	
	НайденныеОбласти = ПолучитьВыделенныеОбласти(ТабДокРасписания);
	ДанныеСлотов = ПолучитьДанныеВыделенныхОбластей(НайденныеОбласти, Истина, Ложь);
	
	Если ДанныеСлотов.Количество() = 0 Тогда
		ВозВрат;
	КонецЕсли;
	Адрес_ДанныеСлотов = ПоместитьВоВременноеХранилище(ДанныеСлотов, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Адрес_ДанныеСлотов"		, Адрес_ДанныеСлотов);
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки"	, ПутьКМетаданнымОбработки);
	
	ДополнительныеПараметры = Новый Структура;
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаУстановкиОграниченийПоВидамУслуг";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "УстановитьОграниченияПоВидамУслуг_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграниченияПоВидамУслуг_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозВрата = Результат;
	Если СтруктураВозВрата = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(СтруктураВозВрата) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СтруктураВозВрата.Свойство("РезультатОткрытия") Тогда
		ВозВрат;
	КонецЕсли;
	Если СтруктураВозВрата.РезультатОткрытия <> Истина Тогда
		ВозВрат;
	КонецЕсли;
	
	//ЗаполнитьТаблицуРасписанияНаСервере();
	//Если Не СтруктураВозВрата.Свойство("ОбновитьТаблицу") Тогда
	//	ВозВрат;
	//КонецЕсли;
	//Если СтруктураВозВрата.ОбновитьТаблицу = Истина Тогда
	//	ЗаполнитьТаблицуРасписанияНаСервере();
	//КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Кнопки_Масштаб

&НаКлиенте
Процедура МасштабПлюс(Команда)
	Элементы.ТабДокРасписания.РежимМасштабированияПросмотра = РежимМасштабированияПросмотра.Крупный;
КонецПроцедуры

&НаКлиенте
Процедура Масштаб100(Команда)
	Элементы.ТабДокРасписания.РежимМасштабированияПросмотра = РежимМасштабированияПросмотра.Авто;
КонецПроцедуры

&НаКлиенте
Процедура МасштабМинус(Команда)
	Элементы.ТабДокРасписания.РежимМасштабированияПросмотра = РежимМасштабированияПросмотра.Обычный;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработкаОжидания_ЗаполнитьТаблицуРасписания()
	Если ВводДоступен() Тогда
		ЗаполнитьТаблицуРасписанияНаСервере();
	КонецЕсли;
КонецПроцедуры

//Лобашова 30.05.2019 87280 +
Функция  ТекПользовательЯвляетсяКоординаторомИлиРуководителем()
	
	Сотрудник = ПользователиКлиентСервер.ТекущийПользователь();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РС.Роль КАК Роль
	|ИЗ
	|	РегистрСведений.РолиСотрудниковЛК КАК РС
	|ГДЕ
	|	РС.Сотрудник = &Сотрудник
	|	И РС.Роль <> ЗНАЧЕНИЕ(Перечисление.РолиСотрудниковЛК.Сотрудник)
	|	";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции
//Лобашова 30.05.2019 87280 -

//--------------------------------------------------------------------------------------------------
#Область Furman_2018_04

&НаКлиенте
Процедура ОтборПоСотрудникамНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;	
	ПараметрыФормы			= Новый Структура("ОтборПоСотрудникам", Объект.ОтборПоСотрудникам);
	ИмяФормыДляОткрытия		= ПутьКМетаданнымОбработки + ".Форма.ФормаУстановкиОтбора";
	
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ОтборПоСотрудникамНачалоВыбора_Завершение" );
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборПоСотрудникамНачалоВыбора_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураВозврата = Результат;
	Если 		СтруктураВозврата = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
		Возврат;
	ИначеЕсли НЕ СтруктураВозврата.Свойство("ОтборПоСотрудникам") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОтборПоСотрудникам	= СтруктураВозврата.ОтборПоСотрудникам;
	ЗаполнитьТаблицуРасписанияНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьБлокировкуФормы()

	ТабДок_ОбрабатываемаяЯчейка = Элементы.ТабДокРасписания.ТекущаяОбласть;
	Элементы.Группа1.Доступность			= Ложь;
	ЭтаФорма.КоманднаяПанель.Доступность	= Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СнятьБлокировкуФормы()

	ТабДок_ОбрабатываемаяЯчейка = Неопределено;
	Элементы.Группа1.Доступность			= Истина;
	ЭтаФорма.КоманднаяПанель.Доступность	= Истина;

КонецПроцедуры

#КонецОбласти
