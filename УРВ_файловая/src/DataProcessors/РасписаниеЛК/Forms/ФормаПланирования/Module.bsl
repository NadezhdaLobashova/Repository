
#Область Условное_оформление

// БоР : Задолбало руками везде настраивать 21.01.2017 0:32:21
&НаСервере
Процедура НастроитьУсловноеОформление() Экспорт
	РегистрыСведений.ЦветаРасписанияЛК.НастроитьУсловноеОформление(УсловноеОформление, "ТаблицаРасписанияИтоговыйСтатус", "ТаблицаРасписания.ИтоговыйСтатус");
КонецПроцедуры

#КонецОбласти

#Область События_формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	БоР_ОбщийМодуль.ЗаполнитьРеквизитыИзПараметров(ЭтаФорма, Неопределено);
	Если ЭтоАдресВременногоХранилища(Адрес_ДанныеСлотов) Тогда
		ДанныеСлотов = ПолучитьИзВременногоХранилища(Адрес_ДанныеСлотов);
		Если ТипЗнч(ДанныеСлотов) = Тип("Массив") Тогда
			Для каждого СтрокаСотрудника Из ДанныеСлотов Цикл
				Для каждого СтрокаСлота Из СтрокаСотрудника.Слоты Цикл
					СтрокаТаблицаСлотов = ТаблицаСлотов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаСлотов, СтрокаСлота);
					СтрокаТаблицаСлотов.Дата				= НачалоДня(СтрокаСлота.ДатаВремяНачала);
					СтрокаТаблицаСлотов.Продолжительность	= (СтрокаСлота.ДатаВремяОкончания - СтрокаСлота.ДатаВремяНачала) / 60;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ВводНаОсновании Тогда
		ЗаполнитьДанныеПоДаннымЗаполнения(ЭтаФорма, ДанныеЗаполнения);
	КонецЕсли;
	Если ТаблицаСлотов.Количество() = 0 Тогда
		СтрокаТаблицаСлотов = ТаблицаСлотов.Добавить();
	КонецЕсли;
	БоР_ОбщийМодульКлиентСервер.РазвернутьФорматированныйДокументИзXML(ТаблицаСлотов[0].ОписаниеXML, ОписаниеФД, , );
	Списком = ТаблицаСлотов.Количество() > 1;
	УстановитьВидимостьДоступность(ЭтаФорма);
	ПараметрыСлота = ПолучитьПараметрыСлота(ТаблицаСлотов[0]);
	ЗаполнитьТаблицуКонфликтовНаСервере(ПараметрыСлота, ТаблицаРасписания);
	НастроитьУсловноеОформление();
	ОбновитьИтоговуюИнформацию(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

#Область Обработчики_изменений

&НаКлиенте
Процедура ТаблицаСлотовСотрудник0ПриИзменении(Элемент)
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовДатаВремяНачала0ПриИзменении(Элемент)
	БоР_ОбщийМодульКлиентСервер.УРВ_ДатаВремяНачалаПриИзменении(ТаблицаСлотов[0].ДатаВремяНачала, ТаблицаСлотов[0].ДатаВремяОкончания, ТаблицаСлотов[0].Продолжительность, "ТаблицаСлотов[0].ДатаВремяНачала", "", Неопределено, ТаблицаСлотов[0].Дата);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовДатаВремяОкончания0ПриИзменении(Элемент)
	БоР_ОбщийМодульКлиентСервер.УРВ_ДатаВремяОкончанияПриИзменении(ТаблицаСлотов[0].ДатаВремяНачала, ТаблицаСлотов[0].ДатаВремяОкончания, ТаблицаСлотов[0].Продолжительность, "ТаблицаСлотов[0].ДатаВремяОкончания", "", Неопределено);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовПродолжительность0ПриИзменении(Элемент)
	БоР_ОбщийМодульКлиентСервер.УРВ_ПродолжительностьПриИзменении(ТаблицаСлотов[0].ДатаВремяНачала, ТаблицаСлотов[0].ДатаВремяОкончания, ТаблицаСлотов[0].Продолжительность, "ТаблицаСлотов[0].Продолжительность", "", Неопределено);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовДата0ПриИзменении(Элемент)
	БоР_ОбщийМодульКлиентСервер.УРВ_БазоваяДатаПриИзменении(ТаблицаСлотов[0].ДатаВремяНачала, ТаблицаСлотов[0].ДатаВремяОкончания, ТаблицаСлотов[0].Дата);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовСотрудникПриИзменении(Элемент)
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовДатаВремяНачалаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
	БоР_ОбщийМодульКлиентСервер.УРВ_ДатаВремяНачалаПриИзменении(ТекущиеДанные.ДатаВремяНачала, ТекущиеДанные.ДатаВремяОкончания, ТекущиеДанные.Продолжительность, "ТаблицаСлотов[" + ТаблицаСлотов.Индекс(ТекущиеДанные) + "].ДатаВремяНачала", "", Неопределено, ТекущиеДанные.Дата);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовДатаВремяОкончанияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
	БоР_ОбщийМодульКлиентСервер.УРВ_ДатаВремяОкончанияПриИзменении(ТекущиеДанные.ДатаВремяНачала, ТекущиеДанные.ДатаВремяОкончания, ТекущиеДанные.Продолжительность, "ТаблицаСлотов[" + ТаблицаСлотов.Индекс(ТекущиеДанные) + "].ДатаВремяОкончания", "", Неопределено);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовПродолжительностьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
	БоР_ОбщийМодульКлиентСервер.УРВ_ПродолжительностьПриИзменении(ТекущиеДанные.ДатаВремяНачала, ТекущиеДанные.ДатаВремяОкончания, ТекущиеДанные.Продолжительность, "ТаблицаСлотов[" + ТаблицаСлотов.Индекс(ТекущиеДанные) + "].Продолжительность", "", Неопределено);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовДатаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
	БоР_ОбщийМодульКлиентСервер.УРВ_БазоваяДатаПриИзменении(ТекущиеДанные.ДатаВремяНачала, ТекущиеДанные.ДатаВремяОкончания, ТекущиеДанные.Дата);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовРаботаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
	РаботаПоля = БоР_ОбщийМодуль.ПолучитьПоляОбъекта(ТекущиеДанные.Работа, "ТребуетУказанияКонтрагента, Отсутствие");
	Если Не РаботаПоля.ТребуетУказанияКонтрагента Тогда
		ТекущиеДанные.Контрагент		= Неопределено;
		ТекущиеДанные.КонтактноеЛицо	= Неопределено;
	КонецЕсли;
	Если РаботаПоля.Отсутствие Тогда
		ТекущиеДанные.Проект			= Неопределено;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеПоДаннымЗаполнения(ЭтаФорма, ДанныеЗаполнения)
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		ВозВрат;
	КонецЕсли;
	//Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.франЗадание") Тогда
	//	ЭтаФорма.Задание = ДанныеЗаполнения;
	//	ЗаполнитьДанныеПоЗаданию(ЭтаФорма, ЭтаФорма.Задание);
	//ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПакетЧасов") Тогда
	//	ЭтаФорма.ПакетЧасов = ДанныеЗаполнения;
	//	ЗаполнитьДанныеПоПакетуЧасов(ЭтаФорма, ЭтаФорма.ПакетЧасов);
	//Иначе
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Обращение") Тогда
		ЭтаФорма.Событие = ДанныеЗаполнения;
		ЗаполнитьДанныеПоСобытию(ЭтаФорма, ЭтаФорма.Событие);
	КонецЕсли;
КонецПроцедуры

#Область Изменения_Шапка

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Проект) Тогда
		Для каждого СтрокаТаблицаСлотов Из ТаблицаСлотов Цикл
			СтрокаТаблицаСлотов.Проект = Проект;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПакетЧасовПриИзменении(Элемент)
	//ЗаполнитьДанныеПоПакетуЧасов(ЭтаФорма, ПакетЧасов);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоговуюИнформацию(ЭтаФорма)
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("Контрагент", ЭтаФорма.Контрагент);
	//ПараметрыДанных.Вставить("ПакетЧасов", ЭтаФорма.ПакетЧасов);
	//ИтоговаяИнформация = ПолучитьИтоговуюИнформацию(ПараметрыДанных);
	//ЗаполнитьЗначенияСвойств(ЭтаФорма, ИтоговаяИнформация);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеПоПакетуЧасов(ЭтаФорма, ПакетЧасов)
	//ДанныеПакетаЧасов = БоР_ОбщийМодуль.ПолучитьПоляОбъекта(ПакетЧасов, "Проект,Работа,Контрагент,КонтактноеЛицо,КрайнийСрок");
	//ЗаменитьНепустым(ЭтаФорма.Проект			, ДанныеПакетаЧасов.Проект);
	//ЗаменитьНепустым(ЭтаФорма.Работа			, ДанныеПакетаЧасов.Работа);
	//ЗаменитьНепустым(ЭтаФорма.Контрагент		, ДанныеПакетаЧасов.Контрагент);
	//ЗаменитьНепустым(ЭтаФорма.КонтактноеЛицо	, ДанныеПакетаЧасов.КонтактноеЛицо);
	//Для каждого СтрокаТаблицаСлотов Из ЭтаФорма.ТаблицаСлотов Цикл
	//	СтрокаТаблицаСлотов.ПакетЧасов = ПакетЧасов;
	//	ЗаполнитьСтрокуПоПакетуЧасов(ЭтаФорма, СтрокаТаблицаСлотов, ПакетЧасов, ДанныеПакетаЧасов);
	//КонецЦикла;
	//ОбновитьИтоговуюИнформацию(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуПоПакетуЧасов(ЭтаФорма, СтрокаТаблицаСлотов, ПакетЧасов, ДанныеПакетаЧасов)
	//Если ЗначениеЗаполнено(ПакетЧасов) Тогда
	//	ЗаменитьНепустым(СтрокаТаблицаСлотов.Проект			, ДанныеПакетаЧасов.Проект);
	//	ЗаменитьНепустым(СтрокаТаблицаСлотов.Работа			, ДанныеПакетаЧасов.Работа);
	//	ЗаменитьНепустым(СтрокаТаблицаСлотов.Контрагент		, ДанныеПакетаЧасов.Контрагент);
	//	ЗаменитьНепустым(СтрокаТаблицаСлотов.КонтактноеЛицо	, ДанныеПакетаЧасов.КонтактноеЛицо);
	//	ЗаменитьНепустым(СтрокаТаблицаСлотов.КрайнийСрок	, ДанныеПакетаЧасов.КрайнийСрок);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПриИзменении(Элемент)
	//ЗаполнитьДанныеПоЗаданию(ЭтаФорма, Задание);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеПоЗаданию(ЭтаФорма, Задание)
	//ДанныеЗадания = БоР_ОбщийМодуль.ПолучитьПоляОбъекта(Задание, "Проект,Контрагент,КонтактноеЛицо,КрайнийСрок,ПакетЧасов");
	//ЗаменитьНепустым(ЭтаФорма.Проект			, ДанныеЗадания.Проект);
	//ЗаменитьНепустым(ЭтаФорма.ПакетЧасов		, ДанныеЗадания.ПакетЧасов);
	//ЗаменитьНепустым(ЭтаФорма.Контрагент		, ДанныеЗадания.Контрагент);
	//ЗаменитьНепустым(ЭтаФорма.КонтактноеЛицо	, ДанныеЗадания.КонтактноеЛицо);
	//Для каждого СтрокаТаблицаСлотов Из ЭтаФорма.ТаблицаСлотов Цикл
	//	СтрокаТаблицаСлотов.Задание = Задание;
	//	ЗаполнитьСтрокуПоЗаданию(ЭтаФорма, СтрокаТаблицаСлотов, Задание, ДанныеЗадания);
	//КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуПоЗаданию(ЭтаФорма, СтрокаТаблицаСлотов, Задание, ДанныеЗадания)
	//Если ЗначениеЗаполнено(Задание) Тогда
	//	ЗаменитьНепустым(СтрокаТаблицаСлотов.Проект			, ДанныеЗадания.Проект);
	//	ЗаменитьНепустым(СтрокаТаблицаСлотов.Контрагент		, ДанныеЗадания.Контрагент);
	//	ЗаменитьНепустым(СтрокаТаблицаСлотов.КонтактноеЛицо	, ДанныеЗадания.КонтактноеЛицо);
	//	ЗаменитьНепустым(СтрокаТаблицаСлотов.КрайнийСрок	, ДанныеЗадания.КрайнийСрок);
	//	ЗаменитьНепустым(СтрокаТаблицаСлотов.ПакетЧасов		, ДанныеЗадания.ПакетЧасов);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СобытиеПриИзменении(Элемент)
	ЗаполнитьДанныеПоСобытию(ЭтаФорма, Событие);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеПоСобытию(ЭтаФорма, Событие)
	ДанныеСобытия = БоР_ОбщийМодуль.ПолучитьПоляОбъекта(Событие, "Проект,Контрагент,КонтактноеЛицо");
	ЗаменитьНепустым(ЭтаФорма.Проект			, ДанныеСобытия.Проект);
	ЗаменитьНепустым(ЭтаФорма.Контрагент		, ДанныеСобытия.Контрагент);
	ЗаменитьНепустым(ЭтаФорма.КонтактноеЛицо	, ДанныеСобытия.КонтактноеЛицо);
	Для каждого СтрокаТаблицаСлотов Из ЭтаФорма.ТаблицаСлотов Цикл
		СтрокаТаблицаСлотов.Событие = Событие;
		ЗаполнитьСтрокуПоСобытию(ЭтаФорма, СтрокаТаблицаСлотов, Событие, ДанныеСобытия);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуПоСобытию(ЭтаФорма, СтрокаТаблицаСлотов, Событие, ДанныеСобытия)
	Если ЗначениеЗаполнено(Событие) Тогда
		ЗаменитьНепустым(СтрокаТаблицаСлотов.Проект			, ДанныеСобытия.Проект);
		ЗаменитьНепустым(СтрокаТаблицаСлотов.Контрагент		, ДанныеСобытия.Контрагент);
		ЗаменитьНепустым(СтрокаТаблицаСлотов.КонтактноеЛицо	, ДанныеСобытия.КонтактноеЛицо);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаботаПриИзменении(Элемент)
	РаботаПоля = БоР_ОбщийМодуль.ПолучитьПоляОбъекта(Работа, "ТребуетУказанияКонтрагента,Отсутствие");
	
	Если Не РаботаПоля.ТребуетУказанияКонтрагента Тогда
		Контрагент		= Неопределено;
		КонтактноеЛицо	= Неопределено;
	КонецЕсли;
	Если РаботаПоля.Отсутствие Тогда
		Проект			= Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(Работа) Тогда
		Для каждого СтрокаТаблицаСлотов Из ТаблицаСлотов Цикл
			СтрокаТаблицаСлотов.Работа = Работа;
			Если Не РаботаПоля.ТребуетУказанияКонтрагента Тогда
				СтрокаТаблицаСлотов.Контрагент		= Неопределено;
				СтрокаТаблицаСлотов.КонтактноеЛицо	= Неопределено;
			КонецЕсли;
			Если РаботаПоля.Отсутствие Тогда
				СтрокаТаблицаСлотов.Проект			= Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	УстановитьВидимостьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Для каждого СтрокаТаблицаСлотов Из ТаблицаСлотов Цикл
			СтрокаТаблицаСлотов.Контрагент = Контрагент;
		КонецЦикла;
	КонецЕсли;
	ОбновитьИтоговуюИнформацию(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		Для каждого СтрокаТаблицаСлотов Из ТаблицаСлотов Цикл
			СтрокаТаблицаСлотов.КонтактноеЛицо = КонтактноеЛицо;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
		ТекущиеДанные.Работа			= Работа;
		ТекущиеДанные.Проект			= Проект;
		//ТекущиеДанные.ПакетЧасов		= ПакетЧасов;
		ТекущиеДанные.Событие			= Событие;
		//ТекущиеДанные.Задание			= Задание;
		ТекущиеДанные.Контрагент		= Контрагент;
		ТекущиеДанные.КонтактноеЛицо	= КонтактноеЛицо;
		//ТекущиеДанные.КрайнийСрок		= БоР_ОбщийМодуль.ПолучитьПолеОбъекта(Задание, "КрайнийСрок");
	ИначеЕсли НоваяСтрока И Копирование Тогда
		ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			БоР_ОбщийМодульКлиентСервер.РазвернутьФорматированныйДокументИзXML(ТекущиеДанные.ОписаниеXML, ОписаниеФД, , );
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура СпискомПриИзменении(Элемент)
	Если Не Списком И ТаблицаСлотов.Количество() = 0 Тогда
		ТаблицаСлотов.Добавить();
	КонецЕсли;
	Если Не Списком Тогда
		ЗаполнитьРеквизитыИзСписка();
	КонецЕсли;
	УстановитьВидимостьДоступность(ЭтаФорма);
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыИзСписка()
	Если ТаблицаСлотов.Количество() > 0 Тогда
		Проект			= ТаблицаСлотов[0].Проект;
		Работа			= ТаблицаСлотов[0].Работа;
		//ПакетЧасов		= ТаблицаСлотов[0].ПакетЧасов;
		Контрагент		= ТаблицаСлотов[0].Контрагент;
		КонтактноеЛицо	= ТаблицаСлотов[0].КонтактноеЛицо;
		//Задание			= ТаблицаСлотов[0].Задание;
		Событие			= ТаблицаСлотов[0].Событие;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		БоР_ОбщийМодульКлиентСервер.РазвернутьФорматированныйДокументИзXML(ТекущиеДанные.ОписаниеXML, ОписаниеФД, , );
	КонецЕсли;
	ОбновитьКонфликтующиеЗаписи();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	БоР_ОбщийМодуль.УстановитьПроверкуЗаполненияРеквизита(ПроверяемыеРеквизиты, "Проект"			, Не Списком И НЕ Работа.Отсутствие);
	БоР_ОбщийМодуль.УстановитьПроверкуЗаполненияРеквизита(ПроверяемыеРеквизиты, "Работа"			, Не Списком);
	БоР_ОбщийМодуль.УстановитьПроверкуЗаполненияРеквизита(ПроверяемыеРеквизиты, "Контрагент"		, Не Списком И Работа.ТребуетУказанияКонтрагента);
	БоР_ОбщийМодуль.УстановитьПроверкуЗаполненияРеквизита(ПроверяемыеРеквизиты, "КонтактноеЛицо"	, Не Списком И Работа.ТребуетУказанияКонтрагента);
	Если ТаблицаСлотов.Количество() = 0 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указаны параметры записи.";
		Сообщение.Поле = "ТаблицаСлотовСотрудник0";
		Сообщение.Сообщить();
	ИначеЕсли Списком Тогда
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаТЧФормы("ТаблицаСлотов", "Сотрудник"			, ЭтаФорма, Отказ);
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаТЧФормы("ТаблицаСлотов", "Проект"				, ЭтаФорма, Отказ, "НЕ СтрокаТЧ.Работа.Отсутствие И Не ЗначениеЗаполнено(СтрокаТЧ[ИмяПоля])");
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаТЧФормы("ТаблицаСлотов", "Работа"				, ЭтаФорма, Отказ);
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаТЧФормы("ТаблицаСлотов", "Контрагент"			, ЭтаФорма,	Отказ, "СтрокаТЧ.Работа.ТребуетУказанияКонтрагента И Не ЗначениеЗаполнено(СтрокаТЧ[ИмяПоля])");
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаТЧФормы("ТаблицаСлотов", "КонтактноеЛицо"		, ЭтаФорма, Отказ, "СтрокаТЧ.Работа.ТребуетУказанияКонтрагента И Не ЗначениеЗаполнено(СтрокаТЧ[ИмяПоля])");
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаТЧФормы("ТаблицаСлотов", "ДатаВремяНачала"		, ЭтаФорма, Отказ);
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаТЧФормы("ТаблицаСлотов", "ДатаВремяОкончания"	, ЭтаФорма, Отказ);
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаТЧФормы("ТаблицаСлотов", "Продолжительность"	, ЭтаФорма, Отказ);
	Иначе
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаФормы("Сотрудник"			, "Сотрудник"				, ТаблицаСлотов[0].Сотрудник			, Отказ);
		Если НЕ ТаблицаСлотов[0].Работа.Отсутствие Тогда
			БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаФормы("Проект"				, "Проект"					, ТаблицаСлотов[0].Проект				, Отказ);
		КонецЕсли;
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаФормы("Работа"				, "Работа"					, ТаблицаСлотов[0].Работа				, Отказ);
		Если ТаблицаСлотов[0].Работа.ТребуетУказанияКонтрагента Тогда
			БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаФормы("Контрагент"			, "Контрагент"				, ТаблицаСлотов[0].Контрагент			, Отказ);
			БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаФормы("КонтактноеЛицо"		, "КонтактноеЛицо"			, ТаблицаСлотов[0].КонтактноеЛицо		, Отказ);
		КонецЕсли;
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаФормы("ДатаВремяНачала"		, "Дата время начала"		, ТаблицаСлотов[0].ДатаВремяНачала		, Отказ);
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаФормы("ДатаВремяОкончания"	, "Дата время окончания"	, ТаблицаСлотов[0].ДатаВремяОкончания	, Отказ);
		БоР_ОбщийМодуль.ПроверитьЗаполнениеРеквизитаФормы("Продолжительность"	, "Продолжительность"		, ТаблицаСлотов[0].Продолжительность	, Отказ);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// БоР :  25.08.2017 3:55:32
&НаСервереБезКонтекста
Функция ПолучитьИтоговуюИнформацию(ПараметрыДанных) Экспорт
	
	//ИтоговаяИнформация = Новый Структура;
	//ИтоговаяИнформация.Вставить("Пакет_ЗаголовокГруппы"			, "Нет данных");
	//ИтоговаяИнформация.Вставить("Пакет_ВсегоЧасов"				, 0);
	//ИтоговаяИнформация.Вставить("Пакет_Выполнено"				, 0);
	//ИтоговаяИнформация.Вставить("Пакет_ОсталосьВыполнить"		, 0);
	//ИтоговаяИнформация.Вставить("Пакет_Запланировано"			, 0);
	//ИтоговаяИнформация.Вставить("Пакет_НеЗапланировано"			, 0);
	
	Контрагент	= ПараметрыДанных.Контрагент;
	//ПакетЧасов	= ПараметрыДанных.ПакетЧасов;
	//Если Не ЗначениеЗаполнено(Контрагент) Тогда
	//	ВозВрат ИтоговаяИнформация;
	//КонецЕсли;
	
	
	//СхемаОтчета		= Отчеты.ОтчетПоПакетамЧасов.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	//ВариантОтчета	= БоР_ОбщийМодуль.ПолучитьВариантКомпоновки(СхемаОтчета, "Для_ИтоговойИИнформации");
	//НастройкиОтчета = ВариантОтчета.Настройки;
	//БоР_ОбщийМодульКлиентСервер.ДобавитьЭлементОтбора(НастройкиОтчета.Отбор, "ПакетЧасов.Контрагент", ВидСравненияКомпоновкиДанных.Равно, Контрагент, Истина, Истина, "Отбор по Контрагенту", Истина);
	//Если ЗначениеЗаполнено(ПакетЧасов) Тогда
	//	БоР_ОбщийМодульКлиентСервер.ДобавитьЭлементОтбора(НастройкиОтчета.Отбор, "ПакетЧасов", ВидСравненияКомпоновкиДанных.Равно, ПакетЧасов, Истина, Истина, "Отбор по Контрагенту", Истина);
	//КонецЕсли;
	//
	//ТаблицаДанных = БоР_ОбщийМодуль.ПолучитьРезультатКомпоновкиКакТЗ(СхемаОтчета, НастройкиОтчета);
	//Если ТаблицаДанных.Количество() = 0 Тогда
	//	ВозВрат ИтоговаяИнформация;
	//КонецЕсли;
	//СтрокаИтога = ТаблицаДанных[0];
	//
	//Если ЗначениеЗаполнено(ПакетЧасов) Тогда
	//	ЗаголовокГруппы = "По пакету часов:";
	//Иначе
	//	ЗаголовокГруппы = "По контрагенту: всего пакетов часов " + БоР_ОбщийМодульКлиентСервер.ВЧисло(СтрокаИтога.ВсегоПакетов) + "";
	//КонецЕсли;
	//ИтоговаяИнформация.Вставить("Пакет_ЗаголовокГруппы"			, ЗаголовокГруппы);
	//ИтоговаяИнформация.Вставить("Пакет_ВсегоЧасов"				, БоР_ОбщийМодульКлиентСервер.ВЧисло(СтрокаИтога.ВсегоЧасов));
	//ИтоговаяИнформация.Вставить("Пакет_Выполнено"				, БоР_ОбщийМодульКлиентСервер.ВЧисло(СтрокаИтога.Выполнено) + БоР_ОбщийМодульКлиентСервер.ВЧисло(СтрокаИтога.ВыполненоПоЛУРВ));
	//ИтоговаяИнформация.Вставить("Пакет_ОсталосьВыполнить"		, БоР_ОбщийМодульКлиентСервер.ВЧисло(СтрокаИтога.НеВыполнено));
	//ИтоговаяИнформация.Вставить("Пакет_Запланировано"			, БоР_ОбщийМодульКлиентСервер.ВЧисло(СтрокаИтога.Запланировано));
	//ИтоговаяИнформация.Вставить("Пакет_НеЗапланировано"			, БоР_ОбщийМодульКлиентСервер.ВЧисло(СтрокаИтога.НеЗапланировано));

	////ЗаполнитьЗначенияСвойств(ИтоговаяИнформация, ВыборкаДетальныеЗаписи);
	//
	//ВозВрат ИтоговаяИнформация;
	//
КонецФункции

#Область Убрал
//&НаСервереБезКонтекста
//Функция ПолучитьИтоговуюИнформацию(ПараметрыДанных) Экспорт
//	
//	ИтоговаяИнформация = Новый Структура;
//	ИтоговаяИнформация.Вставить("Пакет_ЗаголовокГруппы"			, "Нет данных");
//	ИтоговаяИнформация.Вставить("Пакет_ВсегоЧасов"				, 0);
//	ИтоговаяИнформация.Вставить("Пакет_Выполнено"				, 0);
//	ИтоговаяИнформация.Вставить("Пакет_ОсталосьВыполнить"		, 0);
//	ИтоговаяИнформация.Вставить("Пакет_Запланировано"			, 0);
//	ИтоговаяИнформация.Вставить("Пакет_НеЗапланировано"			, 0);
//	
//	Задание		= ПараметрыДанных.Задание;
//	Контрагент	= ПараметрыДанных.Контрагент;
//	ПакетЧасов	= ПараметрыДанных.ПакетЧасов;
//	Если Не ЗначениеЗаполнено(Контрагент) Тогда
//		ВозВрат ИтоговаяИнформация;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	
//	Запрос.Текст = 
//	#Область Запрос
//	"ВЫБРАТЬ
//	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
//	|	РасписаниеКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
//	|	РасписаниеКонсультацийСрезПоследних.Состояние КАК Состояние,
//	|	РасписаниеКонсультацийСрезПоследних.Продолжительность/60 КАК Продолжительность
//	|ПОМЕСТИТЬ ВТ_ЗаписиПоПакету
//	|ИЗ
//	|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних КАК РасписаниеКонсультацийСрезПоследних
//	|ГДЕ
//	|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
//	|	И (РасписаниеКонсультацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Запланировано)
//	|			ИЛИ РасписаниеКонсультацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Выполнено))
//	|	И РасписаниеКонсультацийСрезПоследних.ПакетЧасов = &ПакетЧасов
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	Состояние,
//	|	ДатаВремяНачала,
//	|	Сотрудник
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	СУММА(ВТ_ЗаписиПоПакету.Продолжительность) КАК Продолжительность
//	|ПОМЕСТИТЬ ВТ_Запланировано
//	|ИЗ
//	|	ВТ_ЗаписиПоПакету КАК ВТ_ЗаписиПоПакету
//	|ГДЕ
//	|	ВТ_ЗаписиПоПакету.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Запланировано)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВТ_ЗаписиПоПакету.ДатаВремяНачала КАК ДатаВремяНачала,
//	|	ВТ_ЗаписиПоПакету.Сотрудник КАК Сотрудник
//	|ПОМЕСТИТЬ ВТ_ЗаписиВыполнено
//	|ИЗ
//	|	ВТ_ЗаписиПоПакету КАК ВТ_ЗаписиПоПакету
//	|ГДЕ
//	|	ВТ_ЗаписиПоПакету.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.выполнено)
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	ДатаВремяНачала,
//	|	Сотрудник
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	СУММА(РезультатыКонсультацийСрезПоследних.Продолжительность)/60 КАК Продолжительность
//	|ПОМЕСТИТЬ ВТ_Выполнено
//	|ИЗ
//	|	РегистрСведений.РезультатыКонсультаций.СрезПоследних(
//	|			,
//	|			(ДатаВремяНачала, Сотрудник) В
//	|				(ВЫБРАТЬ
//	|					ВТ_ЗаписиВыполнено.ДатаВремяНачала,
//	|					ВТ_ЗаписиВыполнено.Сотрудник
//	|				ИЗ
//	|					ВТ_ЗаписиВыполнено КАК ВТ_ЗаписиВыполнено)) КАК РезультатыКонсультацийСрезПоследних
//	|ГДЕ
//	|	НЕ РезультатыКонсультацийСрезПоследних.НеДействует
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	&ВсегоЧасов КАК Пакет_ВсегоЧасов,
//	|	ЕСТЬNULL(ВТ_Выполнено.Продолжительность, 0) КАК Пакет_Выполнено,
//	|	&ВсегоЧасов - ЕСТЬNULL(ВТ_Выполнено.Продолжительность, 0) КАК Пакет_ОсталосьВыполнить,
//	|	ЕСТЬNULL(ВТ_Запланировано.Продолжительность, 0) КАК Пакет_Запланировано,
//	|	&ВсегоЧасов - ЕСТЬNULL(ВТ_Выполнено.Продолжительность, 0) - ЕСТЬNULL(ВТ_Запланировано.Продолжительность, 0) КАК Пакет_НеЗапланировано
//	|ИЗ
//	|	ВТ_Запланировано КАК ВТ_Запланировано,
//	|	ВТ_Выполнено КАК ВТ_Выполнено";
//	#КонецОбласти
//	
//	Запрос.УстановитьПараметр("ПакетЧасов"		, ПакетЧасов);
//	Запрос.УстановитьПараметр("ВсегоЧасов"		, ПакетЧасов.КоличествоЧасов);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	ВыборкаДетальныеЗаписи.Следующий();
//	ЗаполнитьЗначенияСвойств(ИтоговаяИнформация, ВыборкаДетальныеЗаписи);
//	
//	ВозВрат ИтоговаяИнформация;
//	
//КонецФункции
#КонецОбласти

&НаКлиенте
Процедура ОК(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		ВозВрат;
	КонецЕсли;
	Если Не СоздатьДокументыНаСервере() Тогда
		ВозВрат;
	КонецЕсли;
	Если ВводНаОсновании Тогда
		Оповестить("Обработка_РасписаниеЛК_Форма_Обновить");
		Если ЭтоАдресВременногоХранилища(Адрес_ДанныеСлотов) Тогда
			УдалитьИзВременногоХранилища(Адрес_ДанныеСлотов);
		КонецЕсли;
	КонецЕсли;
	СтруктураВозВрата = Новый Структура;
	СтруктураВозВрата.Вставить("РезультатОткрытия"			, Истина);
	Закрыть(СтруктураВозВрата);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(ЭтаФорма)
	ЭтаФорма.Элементы.ТаблицаСлотов		.Видимость = ЭтаФорма.Списком;
	ЭтаФорма.Элементы.ГруппаДанныеСлота	.Видимость = Не ЭтаФорма.Списком;
	РаботаПоля = БоР_ОбщийМодуль.ПолучитьПоляОбъекта(ЭтаФорма.Работа, "ТребуетУказанияКонтрагента, Отсутствие");
	ТребуетУказанияКонтрагента = РаботаПоля.ТребуетУказанияКонтрагента;
	БоР_ОбщийМодульКлиентСервер.НастроитьОбязательностьРеквизита(ЭтаФорма.Элементы.Контрагент		, ТребуетУказанияКонтрагента	, ЭтаФорма.Контрагент);
	БоР_ОбщийМодульКлиентСервер.НастроитьОбязательностьРеквизита(ЭтаФорма.Элементы.КонтактноеЛицо	, ТребуетУказанияКонтрагента	, ЭтаФорма.КонтактноеЛицо);
	БоР_ОбщийМодульКлиентСервер.НастроитьОбязательностьРеквизита(ЭтаФорма.Элементы.Проект			, НЕ РаботаПоля.Отсутствие		, ЭтаФорма.Проект);
	//ЭтаФорма.Элементы.Задание		.Доступность = Не ЭтаФорма.СоздатьЗадания;
КонецПроцедуры

#Область Заполнение_конфликтов

// БоР :  18.07.2017 22:14:39
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПараметрыСлота(ДанныеДляЗаполнения) Экспорт
	Если ДанныеДляЗаполнения = Неопределено Тогда
		ВозВрат Неопределено;
	КонецЕсли;
	ПараметрыСлота = Новый Структура;
	ПараметрыСлота.Вставить("Сотрудник"				, ДанныеДляЗаполнения.Сотрудник);
	ПараметрыСлота.Вставить("ДатаВремяНачала"		, ДанныеДляЗаполнения.ДатаВремяНачала);
	ПараметрыСлота.Вставить("ДатаВремяОкончания"	, ДанныеДляЗаполнения.ДатаВремяОкончания);
	ВозВрат ПараметрыСлота;
КонецФункции

&НаКлиенте
Процедура ОбновитьТаблицуКонфликтовНаСервере() Экспорт
	Если Списком Тогда
		ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
	ИначеЕсли ТаблицаСлотов.Количество() = 0 Тогда
		ТекущиеДанные = Неопределено;
	Иначе
		ТекущиеДанные = ТаблицаСлотов[0];
	КонецЕсли;
	ПараметрыСлота = ПолучитьПараметрыСлота(ТекущиеДанные);
	
	ТаблицаРасписания.Очистить();
	ТаблицаРасписанияНаСервер = ТаблицаРасписания; // странно, что это работает ...
	ЗаполнитьТаблицуКонфликтовНаСервере(ПараметрыСлота, ТаблицаРасписанияНаСервер);
	Для каждого СтрокаРасписания Из ТаблицаРасписанияНаСервер Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаРасписания.Добавить(), СтрокаРасписания);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуКонфликтовНаСервере(ПараметрыСлота, ТаблицаРасписания)
	
	Если ПараметрыСлота = Неопределено Тогда
		ТаблицаРасписания.Очистить();
		ВозВрат;
	КонецЕсли;
	ТекущаяДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ
	|	РасписаниеКонсультацийСрезПоследних.Регистратор,
	|	РасписаниеКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	РасписаниеКонсультацийСрезПоследних.Работа КАК Работа,
	|	РасписаниеКонсультацийСрезПоследних.Проект КАК Проект,
	//|	РасписаниеКонсультацийСрезПоследних.Задание КАК Задание,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
	|	РасписаниеКонсультацийСрезПоследних.Контрагент,
	|	РасписаниеКонсультацийСрезПоследних.КонтактноеЛицо,
	|	РасписаниеКонсультацийСрезПоследних.НеДействует,
	|	РасписаниеКонсультацийСрезПоследних.Состояние,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РасписаниеКонсультацийСрезПоследних.Продолжительность,
	|	РасписаниеКонсультацийСрезПоследних.ВидУслуги,
	|	РасписаниеКонсультацийСрезПоследних.ТемаВопроса,
	|	РасписаниеКонсультацийСрезПоследних.КомментарийЗаписи
	|ПОМЕСТИТЬ ВТТекущееРасписание
	|ИЗ
	|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних(
	|			&Момент,
	|			Сотрудник = &Сотрудник
	|				И ДатаВремяНачала >= &НачалоПериода
	|				И ДатаВремяНачала <= &КонецПериода) КАК РасписаниеКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
	|	И РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала < &ДатаВремяОкончания
	|	И РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания > &ДатаВремяНачала
	|	И РасписаниеКонсультацийСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Свободно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВремяНачала,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыКонсультацийСрезПоследних.Регистратор КАК Регистратор,
	|	РезультатыКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	РезультатыКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
	|	РезультатыКонсультацийСрезПоследних.Контрагент,
	|	РезультатыКонсультацийСрезПоследних.КонтактноеЛицо,
	|	РезультатыКонсультацийСрезПоследних.Результат,
	|	РезультатыКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РезультатыКонсультацийСрезПоследних.Продолжительность,
	|	РезультатыКонсультацийСрезПоследних.ВидУслуги,
	|	РезультатыКонсультацийСрезПоследних.ТемаВопроса,
	|	РезультатыКонсультацийСрезПоследних.ВопросКлиента,
	|	РезультатыКонсультацийСрезПоследних.ОтветСотрудника
	|ПОМЕСТИТЬ ВТТекущиеРезультаты
	|ИЗ
	|	РегистрСведений.РезультатыКонсультаций.СрезПоследних(
	|			&Момент,
	|			Сотрудник = &Сотрудник
	|				И ДатаВремяНачала В
	|					(ВЫБРАТЬ
	|						ВТТекущееРасписание.ДатаВремяНачала
	|					ИЗ
	|						ВТТекущееРасписание)) КАК РезультатыКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РезультатыКонсультацийСрезПоследних.НеДействует
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВремяНачала,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТекущееРасписание.Регистратор КАК РегистраторЗаписи,
	|	ВТТекущееРасписание.Сотрудник КАК Сотрудник,
	|	ВТТекущееРасписание.Работа КАК Работа,
	|	ВТТекущееРасписание.Проект КАК Проект,
	//|	ВТТекущееРасписание.Задание КАК Задание,
	|	ВТТекущееРасписание.ДатаВремяНачала КАК ДатаВремяНачала,
	|	ВТТекущееРасписание.Контрагент,
	|	ВТТекущееРасписание.КонтактноеЛицо,
	|	ВТТекущееРасписание.НеДействует,
	|	ВТТекущееРасписание.Состояние,
	|	ВТТекущееРасписание.ДатаВремяОкончания,
	|	ВТТекущееРасписание.Продолжительность,
	|	ВТТекущееРасписание.ВидУслуги,
	|	ВТТекущееРасписание.ТемаВопроса,
	|	ВТТекущееРасписание.КомментарийЗаписи,
	|	ЕСТЬNULL(ВТТекущиеРезультаты.Результат, ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ПустаяСсылка)) КАК Результат,
	|	ЕСТЬNULL(ВТТекущиеРезультаты.Регистратор, НЕОПРЕДЕЛЕНО) КАК РегистраторРезультата,
	|	ВЫБОР
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.ОказанаКонсультация)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ОказанаКонсультация)
	|		КОГДА ВТТекущиеРезультаты.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыКонсультации.НеОказанаКонсультация)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.НеОказанаКонсультация)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Свободно)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Свободно)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Запланировано)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Запланировано)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.ЗаписанКлиент)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ЗаписанКлиент)
	|		КОГДА ВТТекущееРасписание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Блокировка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.Блокировка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИтоговыеСтатусыРасписанияЛК.ПустаяСсылка)
	|	КОНЕЦ КАК ИтоговыйСтатус
	|ИЗ
	|	ВТТекущееРасписание КАК ВТТекущееРасписание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеРезультаты КАК ВТТекущиеРезультаты
	|		ПО ВТТекущееРасписание.Сотрудник = ВТТекущиеРезультаты.Сотрудник
	|			И ВТТекущееРасписание.ДатаВремяНачала = ВТТекущиеРезультаты.ДатаВремяНачала
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаВремяНачала";
	#КонецОбласти
	
	Момент = Неопределено;
	
	#Область Пока_убрал
	
	//ДР = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьДоступностьРолей();
	//ДоступностьПодчиненныхПодразделенийЛК	= Истина;
	//ДоступностьСвоегоПодразделенияЛК		= Истина;
	//ДоступностьВсегоДляПП					= БоР_ОбщийМодульКлиентСервер.ВБулево(БоР_ОбщийМодульКлиентСервер.ПолучитьНастройку("ЛК_ПолнымПравамДоступныВсеСотрудники"));
	//Если ЗначениеЗаполнено(Сотрудник) Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотруднику", "Сотрудник = &Сотрудник");
	//	Запрос.УстановитьПараметр("Сотрудник"		, Сотрудник);
	//ИначеЕсли ДР.ПолныеПрава И ДоступностьВсегоДляПП Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотруднику", "ИСТИНА");
	//Иначе // все доступные
	//	// возможно, надо заменить "В" на соединения с ВТ, но при малом объеме списка - и так неплохо
	//	МассивСотрудников = РегистрыСведений.РолиСотрудниковЛК.ПолучитьМассивДоступныхСотрудников(ДоступностьПодчиненныхПодразделенийЛК, ДоступностьСвоегоПодразделенияЛК);
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотруднику", "Сотрудник В (&МассивСотрудников)");
	//	Запрос.УстановитьПараметр("МассивСотрудников"			, МассивСотрудников);
	//КонецЕсли;
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Момент"				, Момент);
	Запрос.УстановитьПараметр("Сотрудник"			, ПараметрыСлота.Сотрудник);
	Запрос.УстановитьПараметр("ДатаВремяНачала"		, ПараметрыСлота.ДатаВремяНачала);
	Запрос.УстановитьПараметр("ДатаВремяОкончания"	, ПараметрыСлота.ДатаВремяОкончания);
	Запрос.УстановитьПараметр("НачалоПериода"		, НачалоДня(ПараметрыСлота.ДатаВремяНачала));
	Запрос.УстановитьПараметр("КонецПериода"		, КонецДня(ПараметрыСлота.ДатаВремяНачала));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	
	ТаблицаРасписанияТЗ = РезультатЗапроса.Выгрузить();
	ТаблицаРасписания.Загрузить(ТаблицаРасписанияТЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонфликтующиеЗаписи()
	ЭтаФорма.ПодключитьОбработчикОжидания("ОбновитьТаблицуКонфликтовНаСервере", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция СоздатьДокументыНаСервере() Экспорт
	
	ТекущаяДата = ТекущаяДата();
	ТекущийПользователь			= ПараметрыСеанса.ТекущийПользователь;
	//ОрганизацияПользователя		= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяОрганизация");

	//ТипЗадания = Справочники.франТипыЗаданий.НайтиПоНаименованию("Работа по договору оплачиваемая клиентом");
	
	Если Списком Тогда
		ТаблицаДляЗаполнения = ТаблицаСлотов.Выгрузить();
		ТаблицаДляЗаполнения.Сортировать("Сотрудник, ДатаВремяНачала");
	Иначе
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТаблицаСлотов[0]);
		//ТаблицаДляЗаполнения = ТаблицаСлотов.Выгрузить(МассивСтрок);
		ТаблицаДляЗаполнения = МассивСтрок;
	КонецЕсли;
	
	Если ТаблицаДляЗаполнения.Количество() > 1 Тогда
		БоР_ОбщийМодуль.ПронумероватьТЗ(ТаблицаДляЗаполнения);
		Если Не ПроверитьСамопересечения(ТаблицаДляЗаполнения) Тогда
			ВозВрат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	
	#Область Перепланирование_через_отмену
	//Если Перепланирование Тогда
	//	Если ЭтоАдресВременногоХранилища(Адрес_ДанныеСлотов) Тогда
	//		ДанныеСлотов = ПолучитьИзВременногоХранилища(Адрес_ДанныеСлотов);
	//		Если ТипЗнч(ДанныеСлотов) = Тип("Массив") Тогда
	//			Для каждого СтрокаСотрудника Из ДанныеСлотов Цикл
	//				Для каждого СтрокаСлота Из СтрокаСотрудника.Слоты Цикл
	//					ДокументОбъект = Документы.ОтменаПланированияЗагрузкиЗаПериодЛК.СоздатьДокумент();
	//					ДокументОбъект.Дата					= ТекущаяДата;
	//					ДокументОбъект.ИсточникСоздания		= "РасписаниеЛК";
	//					ДокументОбъект.Сотрудник			= СтрокаСлота.Сотрудник;
	//					ДокументОбъект.ДатаВремяНачала		= СтрокаСлота.ДатаВремяНачала;
	//					ДокументОбъект.ДатаВремяОкончания	= СтрокаСлота.ДатаВремяОкончания;
	//					ДокументОбъект.Продолжительность	= (СтрокаСлота.ДатаВремяОкончания - СтрокаСлота.ДатаВремяНачала) / 60;
	//					МассивДокументов.Добавить(ДокументОбъект);
	//				КонецЦикла;
	//			КонецЦикла;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	#КонецОбласти
	
	ОчереднойСотрудник = Неопределено;
	Для каждого СтрокаТаблицаДляЗаполнения Из ТаблицаДляЗаполнения Цикл
		Если ОчереднойСотрудник <> СтрокаТаблицаДляЗаполнения.Сотрудник Тогда
			ДокументОбъект = Документы.ПланированиеЗагрузкиЛК.СоздатьДокумент();
			ДокументОбъект.Дата					= ТекущаяДата;
			ДокументОбъект.ИсточникСоздания		= "РасписаниеЛК";
			ДокументОбъект.Замещение			= Замещение;
			ДокументОбъект.Сотрудник			= СтрокаТаблицаДляЗаполнения.Сотрудник;
			МассивДокументов.Добавить(ДокументОбъект);
			Сведения = РегистрыСведений.СведенияОПользователях.СведенияОПользователе(ДокументОбъект.Сотрудник);
			ОрганизацияПользователя = Сведения.ОбслуживающаяОрганизация;
		КонецЕсли;
		СтрокаРаботы = ДокументОбъект.Работы.Добавить();
		СтрокаРаботы.ДатаВремяНачала	= СтрокаТаблицаДляЗаполнения.ДатаВремяНачала;
		СтрокаРаботы.ДатаВремяОкончания	= СтрокаТаблицаДляЗаполнения.ДатаВремяОкончания;
		СтрокаРаботы.Продолжительность	= СтрокаТаблицаДляЗаполнения.Продолжительность;
		СтрокаРаботы.Работа				= СтрокаТаблицаДляЗаполнения.Работа;
		СтрокаРаботы.Проект				= СтрокаТаблицаДляЗаполнения.Проект;
		//СтрокаРаботы.ПакетЧасов			= СтрокаТаблицаДляЗаполнения.ПакетЧасов;
		СтрокаРаботы.Событие			= СтрокаТаблицаДляЗаполнения.Событие;
		СтрокаРаботы.КрайнийСрок		= СтрокаТаблицаДляЗаполнения.КрайнийСрок;
		СтрокаРаботы.Контрагент			= СтрокаТаблицаДляЗаполнения.Контрагент;
		СтрокаРаботы.КонтактноеЛицо		= СтрокаТаблицаДляЗаполнения.КонтактноеЛицо;
		СтрокаРаботы.ЗапретитьЗамещение	= ЗапретитьЗамещение;
		СтрокаРаботы.ОписаниеXML		= СтрокаТаблицаДляЗаполнения.ОписаниеXML;
		//СтрокаРаботы.ОписаниеТекст		= СтрокаТаблицаДляЗаполнения.ОписаниеТекст;
		//Если СоздатьЗадания Тогда
		//	ДокументОбъект_Задание = Документы.франЗадание.СоздатьДокумент();
		//	ДокументОбъект_Задание.Дата					= ТекущаяДата;
		//	ДокументОбъект_Задание.Организация			= ОрганизацияПользователя;
		//	ДокументОбъект_Задание.Контрагент			= СтрокаТаблицаДляЗаполнения.Контрагент;
		//	ДокументОбъект_Задание.КонтактноеЛицо		= СтрокаТаблицаДляЗаполнения.КонтактноеЛицо;
		//	ДокументОбъект_Задание.ТипЗадания			= ТипЗадания;
		//	ДокументОбъект_Задание.Наименование			= "Запланированная работа";
		//	ДокументОбъект_Задание.Содержание			= СтрокаТаблицаДляЗаполнения.ОписаниеТекст;
		//	ДокументОбъект_Задание.Ответственный		= ТекущийПользователь;
		//	ДокументОбъект_Задание.ПакетЧасов			= СтрокаТаблицаДляЗаполнения.ПакетЧасов;
		//	ДокументОбъект_Задание.Проект				= СтрокаТаблицаДляЗаполнения.Проект;
		//	//ПодразделениеСотрудника = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(СтрокаТаблицаДляЗаполнения.Сотрудник, "ОсновноеПодразделение");
		//	ПодразделениеСотрудника = СотрудникиСервер.ТекущаяСтавкаСотрудникаДолжностьПодразделени(СтрокаТаблицаДляЗаполнения.Сотрудник,ТекущаяДата,Неопределено);
		//	Если ТипЗнч(ПодразделениеСотрудника) = Тип("СправочникСсылка.Подразделения") Тогда
		//		ДокументОбъект_Задание.Подразделение        	= ПодразделениеСотрудника..Родитель; // БоР : непонятная мне вещь :) 28.08.2017 14:57:01
		//	КонецЕсли;
		//	ДокументОбъект_Задание.Сотрудник	        	= СтрокаТаблицаДляЗаполнения.Сотрудник.ФизЛицо;
		//	ДокументОбъект_Задание.ДатаНач					= СтрокаТаблицаДляЗаполнения.ДатаВремяНачала;
		//	ДокументОбъект_Задание.ДатаКон					= СтрокаТаблицаДляЗаполнения.ДатаВремяОкончания;
		//	ДокументОбъект_Задание.КрайнийСрок				= ПакетЧасов.КрайнийСрок;
		//	//ПланируемыйВидРабот		= Справочники.франВидыРабот.НайтиПоНаименованию("АО");
		//	ДокументОбъект_Задание.Трудоемкость				= СтрокаТаблицаДляЗаполнения.Продолжительность / 60;
		//	ДокументОбъект_Задание.Состояние				= Перечисления.франСостоянияЗаданий.Запланировано;
		//	Если ЗначениеЗаполнено(СтрокаТаблицаДляЗаполнения.Событие) Тогда
		//		ДокументОбъект_Задание.Основание = СтрокаТаблицаДляЗаполнения.Событие;
		//	КонецЕсли;
		//	
		//	СсылкаНаЗадание = БоР_ОбщийМодуль.СоздатьИПолучитьСсылкуОбъекта(ДокументОбъект_Задание);
		//	//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, Пользователь);
		//	МассивДокументов.Добавить(ДокументОбъект_Задание);
		//	СтрокаРаботы.Задание			= СсылкаНаЗадание;
		//Иначе
		//	СтрокаРаботы.Задание			= СтрокаТаблицаДляЗаполнения.Задание;
		//КонецЕсли;
	КонецЦикла;
	
	Если Перепланирование И МассивДокументов.Количество() > 0 Тогда
		Если ЭтоАдресВременногоХранилища(Адрес_ДанныеСлотов) Тогда
			ДокументОбъект = МассивДокументов[0];
			ДокументОбъект.Перепланирование = Истина;
			ДанныеСлотов = ПолучитьИзВременногоХранилища(Адрес_ДанныеСлотов);
			Если ТипЗнч(ДанныеСлотов) = Тип("Массив") Тогда
				Для каждого СтрокаСотрудника Из ДанныеСлотов Цикл
					Для каждого СтрокаСлота Из СтрокаСотрудника.Слоты Цикл
						СтрокаОтмены = ДокументОбъект.ОтменяемыеПланы.Добавить();
						СтрокаОтмены.Сотрудник			= СтрокаСлота.Сотрудник;
						СтрокаОтмены.ДатаВремяНачала	= СтрокаСлота.ДатаВремяНачала;
						СтрокаОтмены.ДатаВремяОкончания	= СтрокаСлота.ДатаВремяОкончания;
						СтрокаОтмены.Продолжительность	= (СтрокаСлота.ДатаВремяОкончания - СтрокаСлота.ДатаВремяНачала) / 60;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	#Область Проведение_документов
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		Попытка
			Если ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
				РежимЗаписи = РежимЗаписиДокумента.Запись;
				РежимПроведения = Неопределено;
			ИначеЕсли ДокументОбъект.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Запретить Тогда
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
				РежимПроведения = РежимПроведенияДокумента.Неоперативный;
			Иначе
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
				РежимПроведения = РежимПроведенияДокумента.Оперативный;
			КонецЕсли;
			ДокументОбъект.Записать(РежимЗаписи, РежимПроведения);
		Исключение
			ОтменитьТранзакцию();
			#Область Вывод_сообщений
			СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
			Если СообщенияПользователю.Количество() > 0 Тогда // есть что сказать
				ТекстОшибки = "";
				Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
					ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + СообщениеПользователю.Текст;
				КонецЦикла;
				Сообщить(ТекстОшибки);
			Иначе
				ТекстОшибки = "Ошибка при создании документа " + ДокументОбъект.Метаданные().Синоним + "" + Символы.ПС;
				Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			#КонецОбласти
			ВозВрат Ложь;
		КонецПопытки;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	#КонецОбласти
	
	ВозВрат Истина;

КонецФункции

&НаСервере
Функция ПроверитьСамопересечения(ТаблицаДляЗаполнения) Экспорт
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ
	|	ТаблицаДляЗаполнения.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДляЗаполнения.ДатаВремяНачала КАК ДатаВремяНачала,
	|	ТаблицаДляЗаполнения.ДатаВремяОкончания КАК ДатаВремяОкончания,
	|	ТаблицаДляЗаполнения.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТРаботы
	|ИЗ
	|	&ТаблицаДляЗаполнения КАК ТаблицаДляЗаполнения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВремяНачала,
	|	ДатаВремяОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРаботы.НомерСтроки КАК НомерСтроки1,
	|	ВТРаботы.ДатаВремяНачала КАК ДатаВремяНачала,
	|	ВТРаботы.ДатаВремяОкончания КАК ДатаВремяОкончания,
	|	ВТРаботы.Сотрудник КАК Сотрудник,
	|	ВТРаботы2.НомерСтроки КАК НомерСтроки2,
	|	ВТРаботы2.ДатаВремяНачала КАК П_ДатаВремяНачала,
	|	ВТРаботы2.ДатаВремяОкончания КАК П_ДатаВремяОкончания
	|ИЗ
	|	ВТРаботы КАК ВТРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаботы КАК ВТРаботы2
	|		ПО ВТРаботы.ДатаВремяНачала < ВТРаботы2.ДатаВремяОкончания
	|			И ВТРаботы.ДатаВремяОкончания > ВТРаботы2.ДатаВремяНачала
	|			И ВТРаботы.НомерСтроки < ВТРаботы2.НомерСтроки
	|			И ВТРаботы.Сотрудник = ВТРаботы2.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки1,
	|	НомерСтроки2
	|ИТОГИ
	|	МАКСИМУМ(ДатаВремяНачала),
	|	МАКСИМУМ(ДатаВремяОкончания),
	|	МАКСИМУМ(Сотрудник)
	|ПО
	|	НомерСтроки1";
	#КонецОбласти	

	Запрос.УстановитьПараметр("ТаблицаДляЗаполнения"		, ТаблицаДляЗаполнения);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатСамоПересечения = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	ВыборкаСтрок = РезультатСамоПересечения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтрок.Следующий() Цикл
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Сообщение_Поле"		, "ТаблицаСлотов[" + (ВыборкаСтрок.НомерСтроки1 - 1) + "].ДатаВремяНачала");
		ПараметрыСообщения.Вставить("ДатаВремяНачала"		, ВыборкаСтрок.ДатаВремяНачала);
		ПараметрыСообщения.Вставить("ДатаВремяОкончания"	, ВыборкаСтрок.ДатаВремяОкончания);
		ПараметрыСообщения.Вставить("Сотрудник"				, ВыборкаСтрок.Сотрудник);
		ПараметрыСообщения.Вставить("НомерСтроки1"			, ВыборкаСтрок.НомерСтроки1);
		ШаблонСообщения = "Строка &НомерСтроки1 [&Сотрудник, &ДатаВремяНачала - &ДатаВремяОкончания] конфликтует с другими строками:";
		БоР_ОбщийМодуль.Сообщить_С(ШаблонСообщения, ПараметрыСообщения);
		
		ВыборкаДетали = ВыборкаСтрок.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			ПараметрыСообщения.Вставить("Сообщение_Поле"		, "ТаблицаСлотов[" + (ВыборкаДетали.НомерСтроки2 - 1) + "].ДатаВремяНачала");
			ПараметрыСообщения.Вставить("П_ДатаВремяНачала"		, ВыборкаДетали.П_ДатаВремяНачала);
			ПараметрыСообщения.Вставить("П_ДатаВремяОкончания"	, ВыборкаДетали.П_ДатаВремяОкончания);
			ПараметрыСообщения.Вставить("НомерСтроки2"			, ВыборкаДетали.НомерСтроки2);
			ШаблонСообщения = "	Строка &НомерСтроки2 [&Сотрудник, &П_ДатаВремяНачала - &П_ДатаВремяОкончания]";
			БоР_ОбщийМодуль.Сообщить_С(ШаблонСообщения, ПараметрыСообщения);
			Отказ = Истина;
		КонецЦикла;
	КонецЦикла;
	
	ВозВрат Не Отказ;

	//ЗаполнитьТаблицуКонфликтовНаСервере();
	
КонецФункции

#Область Подбор_задания
&НаКлиенте
Процедура ПодобратьЗадание(Команда)
	//Если Списком Тогда
	//	Сотрудник = Неопределено;
	//	Для каждого СтрокаТаблицаСлотов Из ТаблицаСлотов Цикл
	//		Если Сотрудник <> СтрокаТаблицаСлотов.Сотрудник И Сотрудник <> Неопределено Тогда // если в ТЧ разные сотрудники, отбора не будет. Корявенько, но пока сойдет
	//			Сотрудник = Неопределено;
	//			Прервать;
	//		КонецЕсли;
	//		Сотрудник = СтрокаТаблицаСлотов.Сотрудник;
	//	КонецЦикла;
	//Иначе
	//	Сотрудник = ТаблицаСлотов[0].Сотрудник;
	//КонецЕсли;
	//
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки"	, ПутьКМетаданнымОбработки);
	//ПараметрыФормы.Вставить("Сотрудник"					, Сотрудник);
	//ПараметрыФормы.Вставить("Контрагент"				, Контрагент);
	//ПараметрыФормы.Вставить("КонтактноеЛицо"			, КонтактноеЛицо);
	//ПараметрыФормы.Вставить("Проект"					, Проект);
	////ПараметрыФормы.Вставить("ПакетЧасов"				, ПакетЧасов);
	//ВызватьФормуПодбораЗадания(ПараметрыФормы, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовЗаданиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
	//СтандартнаяОбработка = Ложь;
	//
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки"	, ПутьКМетаданнымОбработки);
	//ПараметрыФормы.Вставить("Сотрудник"					, ТекущиеДанные.Сотрудник);
	//ПараметрыФормы.Вставить("Контрагент"				, ТекущиеДанные.Контрагент);
	//ПараметрыФормы.Вставить("КонтактноеЛицо"			, ТекущиеДанные.КонтактноеЛицо);
	//ПараметрыФормы.Вставить("Проект"					, ТекущиеДанные.Проект);
	////ПараметрыФормы.Вставить("ПакетЧасов"				, ТекущиеДанные.ПакетЧасов);
	//ВызватьФормуПодбораЗадания(ПараметрыФормы, ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ВызватьФормуПодбораЗадания(ПараметрыФормы, СтрокаТаблицаСлотов = Неопределено)
	
	//// вызывается в дпух вариантах: Для "шапки" и для конкретной строки, тогда определено значение СтрокаТаблицаСлотов
	//
	//ДополнительныеПараметры = Новый Структура;
	//ДополнительныеПараметры.Вставить("СтрокаТаблицаСлотов", СтрокаТаблицаСлотов);
	//ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаВыбораЗадания";
	//БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ПодобратьЗадание_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьЗадание_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	//Если Результат = Неопределено Тогда
	//	ВозВрат;
	//КонецЕсли;
	//Если ТипЗнч(Результат) <> Тип("Структура") Тогда
	//	ВозВрат;
	//КонецЕсли;
	//СтрокаТаблицаСлотов = Неопределено;
	//ДополнительныеПараметры.Свойство("СтрокаТаблицаСлотов", СтрокаТаблицаСлотов);
	//
	//ДанныеЗадания = БоР_ОбщийМодуль.ПолучитьПоляОбъекта(Результат.Задание, "ПакетЧасов,Проект,Контрагент,КонтактноеЛицо,КрайнийСрок");
	//Если СтрокаТаблицаСлотов <> Неопределено Тогда
	//	СтрокаТаблицаСлотов.Задание = Результат.Задание;
	//	ЗаполнитьСтрокуПоЗаданию(ЭтаФорма, СтрокаТаблицаСлотов, Результат.Задание, ДанныеЗадания);
	//Иначе
	//	Задание			= Результат.Задание;
	//	СоздатьЗадания	= Ложь;
	//	ЗаполнитьДанныеПоЗаданию(ЭтаФорма, Результат.Задание);
	//КонецЕсли;
	//ЭтаФорма.ТекущийЭлемент = Элементы.Проект;
	//УстановитьВидимостьДоступность(ЭтаФорма);
КонецПроцедуры
#КонецОбласти

#Область Подбор_пакета_часов
&НаКлиенте
Процедура ПодобратьПакетЧасов(Команда)
	//Если Списком Тогда
	//	Сотрудник = Неопределено;
	//	Для каждого СтрокаТаблицаСлотов Из ТаблицаСлотов Цикл
	//		Если Сотрудник <> СтрокаТаблицаСлотов.Сотрудник И Сотрудник <> Неопределено Тогда // если в ТЧ разные сотрудники, отбора не будет. Корявенько, но пока сойдет
	//			Сотрудник = Неопределено;
	//			Прервать;
	//		КонецЕсли;
	//		Сотрудник = СтрокаТаблицаСлотов.Сотрудник;
	//	КонецЦикла;
	//Иначе
	//	Сотрудник = ТаблицаСлотов[0].Сотрудник;
	//КонецЕсли;
	//
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки"	, ПутьКМетаданнымОбработки);
	////ПараметрыФормы.Вставить("Сотрудник"					, Сотрудник);
	//ПараметрыФормы.Вставить("Контрагент"				, Контрагент);
	//ПараметрыФормы.Вставить("КонтактноеЛицо"			, КонтактноеЛицо);
	//ПараметрыФормы.Вставить("Проект"					, Проект);
	//ПараметрыФормы.Вставить("Работа"					, Работа);
	//ВызватьФормуПодбораПакетаЧасов(ПараметрыФормы, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовПакетЧасовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
	//СтандартнаяОбработка = Ложь;
	//
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки"	, ПутьКМетаданнымОбработки);
	//ПараметрыФормы.Вставить("Сотрудник"					, ТекущиеДанные.Сотрудник);
	//ПараметрыФормы.Вставить("Контрагент"				, ТекущиеДанные.Контрагент);
	//ПараметрыФормы.Вставить("КонтактноеЛицо"			, ТекущиеДанные.КонтактноеЛицо);
	//ПараметрыФормы.Вставить("Проект"					, ТекущиеДанные.Проект);
	//ПараметрыФормы.Вставить("Работа"					, ТекущиеДанные.Работа);
	//ВызватьФормуПодбораПакетаЧасов(ПараметрыФормы, ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ВызватьФормуПодбораПакетаЧасов(ПараметрыФормы, СтрокаТаблицаСлотов = Неопределено)
	
	//// вызывается в дпух вариантах: Для "шапки" и для конкретной строки, тогда определено значение СтрокаТаблицаСлотов
	//
	//ДополнительныеПараметры = Новый Структура;
	//ДополнительныеПараметры.Вставить("СтрокаТаблицаСлотов", СтрокаТаблицаСлотов);
	//ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаВыбораПакетаЧасов";
	//БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ПодобратьПакетЧасов_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПакетЧасов_Завершение(Результат, ДополнительныеПараметры) Экспорт
	//
	//Если Результат = Неопределено Тогда
	//	ВозВрат;
	//КонецЕсли;
	//Если ТипЗнч(Результат) <> Тип("Структура") Тогда
	//	ВозВрат;
	//КонецЕсли;
	//СтрокаТаблицаСлотов = Неопределено;
	//ДополнительныеПараметры.Свойство("СтрокаТаблицаСлотов", СтрокаТаблицаСлотов);
	//
	//ДанныеПакетаЧасов = БоР_ОбщийМодуль.ПолучитьПоляОбъекта(Результат.ПакетЧасов, "Проект,Работа,Контрагент,КонтактноеЛицо,КрайнийСрок");
	//Если СтрокаТаблицаСлотов <> Неопределено Тогда
	//	СтрокаТаблицаСлотов.ПакетЧасов = Результат.ПакетЧасов;
	//	ЗаполнитьСтрокуПоПакетуЧасов(ЭтаФорма, СтрокаТаблицаСлотов, Результат.ПакетЧасов, ДанныеПакетаЧасов);
	//Иначе
	//	ПакетЧасов	= Результат.ПакетЧасов;
	//	ЗаполнитьДанныеПоПакетуЧасов(ЭтаФорма, Результат.ПакетЧасов);
	//КонецЕсли;
	//ЭтаФорма.ТекущийЭлемент = Элементы.Проект;

КонецПроцедуры
#КонецОбласти

#Область Подбор_события

&НаКлиенте
Процедура ПодобратьСобытие(Команда)
	Если Списком Тогда
		Сотрудник = Неопределено;
		Для каждого СтрокаТаблицаСлотов Из ТаблицаСлотов Цикл
			Если Сотрудник <> СтрокаТаблицаСлотов.Сотрудник И Сотрудник <> Неопределено Тогда // если в ТЧ разные сотрудники, отбора не будет. Корявенько, но пока сойдет
				Сотрудник = Неопределено;
				Прервать;
			КонецЕсли;
			Сотрудник = СтрокаТаблицаСлотов.Сотрудник;
		КонецЦикла;
	Иначе
		Сотрудник = ТаблицаСлотов[0].Сотрудник;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки"	, ПутьКМетаданнымОбработки);
	ПараметрыФормы.Вставить("Сотрудник"					, Сотрудник);
	ПараметрыФормы.Вставить("Контрагент"				, Контрагент);
	ПараметрыФормы.Вставить("КонтактноеЛицо"			, КонтактноеЛицо);
	ПараметрыФормы.Вставить("Проект"					, Проект);
	ВызватьФормуПодбораСобытия(ПараметрыФормы, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовСобытиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьКМетаданнымОбработки"	, ПутьКМетаданнымОбработки);
	ПараметрыФормы.Вставить("Сотрудник"					, ТекущиеДанные.Сотрудник);
	ПараметрыФормы.Вставить("Контрагент"				, ТекущиеДанные.Контрагент);
	ПараметрыФормы.Вставить("КонтактноеЛицо"			, ТекущиеДанные.КонтактноеЛицо);
	ПараметрыФормы.Вставить("Проект"					, ТекущиеДанные.Проект);
	ВызватьФормуПодбораСобытия(ПараметрыФормы, ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ВызватьФормуПодбораСобытия(ПараметрыФормы, СтрокаТаблицаСлотов = Неопределено)
	
	// вызывается в дпух вариантах: Для "шапки" и для конкретной строки, тогда определено значение СтрокаТаблицаСлотов
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаТаблицаСлотов", СтрокаТаблицаСлотов);
	ИмяФормыДляОткрытия = ПутьКМетаданнымОбработки + ".Форма.ФормаВыбораСобытия";
	БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ПодобратьСобытие_Завершение", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСобытие_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	СтрокаТаблицаСлотов = Неопределено;
	ДополнительныеПараметры.Свойство("СтрокаТаблицаСлотов", СтрокаТаблицаСлотов);
	
	ДанныеСобытия = БоР_ОбщийМодуль.ПолучитьПоляОбъекта(Результат.Событие, "Проект,Контрагент,КонтактноеЛицо");
	Если СтрокаТаблицаСлотов <> Неопределено Тогда
		СтрокаТаблицаСлотов.Событие = Результат.Событие;
		ЗаполнитьСтрокуПоСобытию(ЭтаФорма, СтрокаТаблицаСлотов, Результат.Событие, ДанныеСобытия);
	Иначе
		Событие	= Результат.Событие;
		ЗаполнитьДанныеПоСобытию(ЭтаФорма, Результат.Событие);
	КонецЕсли;
	ЭтаФорма.ТекущийЭлемент = Элементы.Проект;

КонецПроцедуры
#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьНепустым(Значение, НовоеЗначение) Экспорт
	Если ЗначениеЗаполнено(НовоеЗначение) Тогда
		Значение = НовоеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеФДПриИзменении(Элемент)
	Если Списком Тогда
		ТекущиеДанные = Элементы.ТаблицаСлотов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			БоР_ОбщийМодульКлиентСервер.ЗавернутьФорматированныйДокументВ_XML(ОписаниеФД, ТекущиеДанные.ОписаниеXML, , ТекущиеДанные.ОписаниеТекст);
			//ТекущиеДанные.ОписаниеXML = БоР_ОбщийМодуль.ЗначениеВXML(ОписаниеФД);
			//ТекущиеДанные.ОписаниеТекст = ОписаниеФД.ПолучитьТекст();
		КонецЕсли;
	ИначеЕсли ТаблицаСлотов.Количество() > 0 Тогда
		БоР_ОбщийМодульКлиентСервер.ЗавернутьФорматированныйДокументВ_XML(ОписаниеФД, ТаблицаСлотов[0].ОписаниеXML, , ТаблицаСлотов[0].ОписаниеТекст);
		//ТаблицаСлотов[0].ОписаниеXML = БоР_ОбщийМодуль.ЗначениеВXML(ОписаниеФД);
		//ТаблицаСлотов[0].ОписаниеТекст = ОписаниеФД.ПолучитьТекст();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТаблицаСлотовОписаниеТекст" Тогда
		РедактируемаяСтрока = ТаблицаСлотов.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если РедактируемаяСтрока = Неопределено Тогда
			ВозВрат;
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОписаниеXML"					, РедактируемаяСтрока.ОписаниеXML);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
		
		ИмяФормыДляОткрытия = "Обработка.РасписаниеЛК.Форма.ФормаВводаОписания";
		БоР_ОбщийМодульКлиент.ОткрытьБлокирующуюФорму(ЭтаФорма, ИмяФормыДляОткрытия, ПараметрыФормы, "ТаблицаСлотовВыбор_Завершение", ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлотовВыбор_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ВозВрат;
	КонецЕсли;
	ВыбраннаяСтрока = Неопределено;
	ДополнительныеПараметры.Свойство("ВыбраннаяСтрока", ВыбраннаяСтрока);
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		РедактируемаяСтрока = ТаблицаСлотов.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если РедактируемаяСтрока = Неопределено Тогда
			ВозВрат;
		КонецЕсли;
		РедактируемаяСтрока.ОписаниеXML		= Результат.ОписаниеXML;
		РедактируемаяСтрока.ОписаниеТекст	= Результат.ОписаниеТекст;
		БоР_ОбщийМодульКлиентСервер.РазвернутьФорматированныйДокументИзXML(РедактируемаяСтрока.ОписаниеXML, ОписаниеФД, , );
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура Пакет_ВсегоЧасовНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ПоказатьОтчетПоПакетамЧасов();
КонецПроцедуры

&НаКлиенте
Процедура Пакет_ВыполненоНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ПоказатьОтчетПоПакетамЧасов();
КонецПроцедуры

&НаКлиенте
Процедура Пакет_ОсталосьВыполнитьНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ПоказатьОтчетПоПакетамЧасов();
КонецПроцедуры

&НаКлиенте
Процедура Пакет_ЗапланированоНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ПоказатьОтчетПоПакетамЧасов();
КонецПроцедуры

&НаКлиенте
Процедура Пакет_НеЗапланированоНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ПоказатьОтчетПоПакетамЧасов();
КонецПроцедуры

// БоР :  25.08.2017 13:00:37
&НаКлиенте
Процедура ПоказатьОтчетПоПакетамЧасов() Экспорт
	//
	////Если Не ЗначениеЗаполнено(ПакетЧасов) Тогда
	////	ВозВрат;
	////КонецЕсли;
	//
	//
	//ОтборОтчета = Новый Структура;
	//Если ЗначениеЗаполнено(Контрагент) Тогда
	//	ОтборОтчета.Вставить("Контрагент", Контрагент);
	//КонецЕсли;
	//Если ЗначениеЗаполнено(ПакетЧасов) Тогда
	//	ОтборОтчета.Вставить("ПакетЧасов", ПакетЧасов);
	//КонецЕсли;
	//
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("Отбор"							, ОтборОтчета);
	//ПараметрыФормы.Вставить("СформироватьПриОткрытии"		, Истина);
	//ПараметрыФормы.Вставить("КлючВарианта"					, "Основной");
	//ПараметрыФормы.Вставить("КлючНазначенияИспользования"	, "Основной_КонтекстныйВызов");
	//ОткрытьФорму("Отчет.ОтчетПоПакетамЧасов.Форма", ПараметрыФормы, ЭтаФорма, , , , , );//РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаданияПриИзменении(Элемент)
	//УстановитьВидимостьДоступность(ЭтаФорма);
	//Если СоздатьЗадания Тогда
	//	Задание = Неопределено;
	//	Для каждого СтрокаТаблицаСлотов Из ЭтаФорма.ТаблицаСлотов Цикл
	//		//СтрокаТаблицаСлотов.Задание		= Неопределено;
	//		СтрокаТаблицаСлотов.КрайнийСрок	= Неопределено;
	//	КонецЦикла;
	//КонецЕсли;
КонецПроцедуры

//Лобашова 07.03.2019 81724 +
&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", СписокПользователей(Этаформа.ЭтотОбъект.Контрагент));
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.КонтактноеЛицо.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Функция СписокПользователей(Абонент)
    
   Запрос = Новый Запрос;
   Запрос.Текст =
   "ВЫБРАТЬ РАЗЛИЧНЫЕ
   |	ПользователиАбонентов.ПользовательСервиса КАК ПользовательСервиса
   |ИЗ
   |	РегистрСведений.ПользователиАбонентов КАК ПользователиАбонентов
   |ГДЕ
   |	ПользователиАбонентов.Абонент = &Абонент"
   ;
   Запрос.УстановитьПараметр("Абонент", Абонент);
   Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПользовательСервиса");
    
КонецФункции

//Лобашова 07.03.2019 81724 -

