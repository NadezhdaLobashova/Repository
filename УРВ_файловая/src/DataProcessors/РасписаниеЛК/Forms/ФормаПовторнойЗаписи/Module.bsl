
&НаКлиенте
Процедура ОК(Команда)
	
	ВыбраннаяСтрока = Элементы.ТаблицаРасписания.ТекущиеДанные;
	Если ВыбраннаяСтрока = Неопределено Тогда
		ВозВрат;
	КонецЕсли;
	ОбработатьВыборСтроки(ВыбраннаяСтрока)
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасписанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьВыборСтроки(Элементы.ТаблицаРасписания.ДанныеСтроки(ВыбраннаяСтрока));
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработатьВыборСтроки(ВыбраннаяСтрока)
	Если Не ПроверитьЗаполнение() Тогда
		ВозВрат;
	КонецЕсли;
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Сотрудник"			, ВыбраннаяСтрока.Сотрудник);
	СтруктураСтроки.Вставить("ДатаВремяНачала"		, ВыбраннаяСтрока.ДатаВремяНачала);

	ТекстОшибки = "";
	Если Не СоздатьДокументыНаСервере(СтруктураСтроки, ТекстОшибки) Тогда
		ВозВрат;
	КонецЕсли;
	
	СтруктураВозВрата = Новый Структура;
	СтруктураВозВрата.Вставить("РезультатОткрытия"			, Истина);
	Закрыть(СтруктураВозВрата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРасписанияНаСервере()
	
	ТекущаяДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ
	|	РасписаниеКонсультацийСрезПоследних.Сотрудник КАК Сотрудник,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала КАК ДатаВремяНачала,
	|	РасписаниеКонсультацийСрезПоследних.ДатаВремяОкончания,
	|	РасписаниеКонсультацийСрезПоследних.Продолжительность,
	|	РасписаниеКонсультацийСрезПоследних.Работа КАК Работа,
	|	РасписаниеКонсультацийСрезПоследних.Проект КАК Проект
	|ПОМЕСТИТЬ ВТСвободныеЗаписи
	|ИЗ
	|	РегистрСведений.РасписаниеКонсультаций.СрезПоследних(
	|			&Момент,
	|			&УсловиеПоСотруднику
	|				И ДатаВремяНачала >= &ДатаНачала
	|				И ДатаВремяНачала <= &ДатаОкончания) КАК РасписаниеКонсультацийСрезПоследних
	|ГДЕ
	|	НЕ РасписаниеКонсультацийСрезПоследних.НеДействует
	|	И РасписаниеКонсультацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭлементаРасписанияЛК.Запланировано)
	|	И РасписаниеКонсультацийСрезПоследних.Работа = &Работа
	|	И РасписаниеКонсультацийСрезПоследних.Проект = &Проект
	|	И НЕ(РасписаниеКонсультацийСрезПоследних.ДатаВремяНачала = &ДатаВремяНачала
	|				И РасписаниеКонсультацийСрезПоследних.Сотрудник = &ИсходныйСотрудник)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаВремяНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСвободныеЗаписи.Сотрудник,
	|	ВТСвободныеЗаписи.ДатаВремяНачала,
	|	ВТСвободныеЗаписи.ДатаВремяОкончания,
	|	ВТСвободныеЗаписи.Продолжительность,
	|	ВТСвободныеЗаписи.Работа КАК Работа,
	|	ВТСвободныеЗаписи.Проект КАК Проект,
	|	ЕСТЬNULL(СвойстваЭлементовРасписанияЛК.ДоступноДляСамозаписи, ЛОЖЬ) КАК ДоступноДляСамозаписи
	|ИЗ
	|	ВТСвободныеЗаписи КАК ВТСвободныеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЭлементовРасписанияЛК КАК СвойстваЭлементовРасписанияЛК
	|		ПО ВТСвободныеЗаписи.ДатаВремяНачала = СвойстваЭлементовРасписанияЛК.ДатаВремяНачала
	|			И ВТСвободныеЗаписи.Сотрудник = СвойстваЭлементовРасписанияЛК.Сотрудник
	|			И (СвойстваЭлементовРасписанияЛК.ДоступноДляСамозаписи)
	|ГДЕ
	|	&УсловиеСамозаписи";
	#КонецОбласти
	
	Момент = Неопределено;
	
	ДР = Бор_ПовторноеИспользованиеКлиентСервер.ПолучитьДоступностьРолей();
	ДоступностьПодчиненныхПодразделенийЛК	= Истина;
	ДоступностьСвоегоПодразделенияЛК		= Истина;
	ДоступностьВсегоДляПП					= БоР_ОбщийМодульКлиентСервер.ВБулево(БоР_ОбщийМодуль.ПолучитьНастройку("ЛК_ПолнымПравамДоступныВсеСотрудники"));
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотруднику", "Сотрудник = &Сотрудник");
		Запрос.УстановитьПараметр("Сотрудник"		, Сотрудник);
	ИначеЕсли ДР.ПолныеПрава И ДоступностьВсегоДляПП Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотруднику", "ИСТИНА");
	Иначе // все доступные
		// возможно, надо заменить "В" на соединения с ВТ, но при малом объеме списка - и так неплохо
		МассивСотрудников = РегистрыСведений.РолиСотрудниковЛК.ПолучитьМассивДоступныхСотрудников(ДоступностьПодчиненныхПодразделенийЛК, ДоступностьСвоегоПодразделенияЛК);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСотруднику", "Сотрудник В (&МассивСотрудников)");
		Запрос.УстановитьПараметр("МассивСотрудников"			, МассивСотрудников);
	КонецЕсли;
	Если ПоказатьСамозапись Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСамозаписи", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСамозаписи", "НЕ ЕСТЬNULL(СвойстваЭлементовРасписанияЛК.ДоступноДляСамозаписи, ЛОЖЬ)");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Момент"				, Момент);
	Запрос.УстановитьПараметр("ИсходныйСотрудник"	, ИсходныйСотрудник);
	Запрос.УстановитьПараметр("ДатаВремяНачала"		, ДатаВремяНачала);
	Запрос.УстановитьПараметр("ДатаНачала"			, НачалоДня(Дата));
	Запрос.УстановитьПараметр("ДатаОкончания"		, КонецДня(Дата));
	Запрос.УстановитьПараметр("Работа"				, Работа);
	Запрос.УстановитьПараметр("Проект"				, Проект);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	
	ТаблицаРасписания.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	БоР_ОбщийМодуль.ЗаполнитьРеквизитыИзПараметров(ЭтаФорма, Неопределено);
	Дата				= ИсходнаяСтруктура.ДатаВремяНачала;
	ИсходныйСотрудник	= ИсходнаяСтруктура.Сотрудник;
	ЗаполнитьТаблицуРасписанияНаСервере();
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Телефон = ПолучитьТелефоны(Контрагент, КонтактноеЛицо);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	ЗаполнитьТаблицуРасписанияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ЗаполнитьТаблицуРасписанияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСамозаписьПриИзменении(Элемент)
	ЗаполнитьТаблицуРасписанияНаСервере();
КонецПроцедуры

&НаСервере
Функция СоздатьДокументыНаСервере(ВыбраннаяСтрока, ТекстОшибки = Неопределено) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	МассивДокументов = Новый Массив;
	
	ДокументОбъект = Документы.ЗаписьНаЛК.СоздатьДокумент();
	ДокументОбъект.Дата					= ТекущаяДата;
	ДокументОбъект.ИсточникСоздания		= "РасписаниеЛК";
	ДокументОбъект.Сотрудник			= ВыбраннаяСтрока.Сотрудник;
	ДокументОбъект.ДатаВремяНачала		= ВыбраннаяСтрока.ДатаВремяНачала;
	ДокументОбъект.Контрагент			= Контрагент;
	ДокументОбъект.КонтактноеЛицо		= КонтактноеЛицо;
	ДокументОбъект.ВидУслуги			= ВидУслуги;
	ДокументОбъект.ТемаВопроса			= ТемаВопроса;
	ДокументОбъект.КомментарийЗаписи	= КомментарийЗаписи;
	ДокументОбъект.ТипЗаписи			= Перечисления.ТипыЗаписейЛК.Обычная;
	ДокументОбъект.СрочнаяЗапись		= СрочнаяЗапись;
	ДокументОбъект.КонтактныеТелефоны	= КонтактныеТелефоны;
	МассивДокументов.Добавить(ДокументОбъект);

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			ОтменитьТранзакцию();
			#Область Вывод_сообщений
			СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
			Если СообщенияПользователю.Количество() > 0 Тогда // есть что сказать
				ТекстОшибки = "";
				Для каждого СообщениеПользователю Из СообщенияПользователю Цикл
					ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") + СообщениеПользователю.Текст;
				КонецЦикла;
				Сообщить(ТекстОшибки);
			Иначе
				ТекстОшибки = "Ошибка при создании документа " + ДокументОбъект.Метаданные().Синоним + "" + Символы.ПС;
				Сообщить(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			#КонецОбласти
			ВозВрат Ложь;
		КонецПопытки;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	ВозВрат Истина;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТелефоны(Контрагент, КонтактноеЛицо)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	#Область Запрос
	"ВЫБРАТЬ
		|	ПользователиАбонентов.ПользовательСервиса.Наименование КАК Наименование,
		|	ПользователиАбонентов.ПользовательСервиса.Код КАК Код,
		|	ПользователиАбонентов.ПользовательСервиса.Ссылка КАК КонтактноеЛицо,
		|	ПользователиАбонентов.ПользовательСервиса КАК ПользовательСервиса
		|ПОМЕСТИТЬ ВТКонтактныеЛица
		|ИЗ
		|	РегистрСведений.ПользователиАбонентов КАК ПользователиАбонентов
		|ГДЕ
		|	ПользователиАбонентов.Абонент = &Контрагент
		|	И НЕ ПользователиАбонентов.ПользовательСервиса.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КонтактноеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ПользователиСервисовКонтактнаяИнформация.Представление, """""""") КАК Представление
		|ИЗ
		|	ВТКонтактныеЛица КАК ВТКонтактныеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПользователиСервисов.КонтактнаяИнформация КАК ПользователиСервисовКонтактнаяИнформация
		|		ПО ВТКонтактныеЛица.КонтактноеЛицо = ПользователиСервисовКонтактнаяИнформация.Ссылка
		|			И (ПользователиСервисовКонтактнаяИнформация.Тип = &ТипКонтактнойИнформации)
		|ГДЕ
		|	ПользователиСервисовКонтактнаяИнформация.Тип = &ТипКонтактнойИнформации";
	#КонецОбласти
	Запрос.УстановитьПараметр("Контрагент"				, Контрагент);
	Запрос.УстановитьПараметр("КонтактноеЛицо"			, КонтактноеЛицо);
	Запрос.УстановитьПараметр("ТипКонтактнойИнформации"	, Перечисления.ТипыКонтактнойИнформации.Телефон);

	ТаблицаКонтактнойИнформации = Запрос.Выполнить().Выгрузить();
	СтрокаТелефонов = "";
	Для каждого СтрокаКИ Из ТаблицаКонтактнойИнформации Цикл
		СтрокаТелефонов = СтрокаТелефонов + ?(ЗначениеЗаполнено(СтрокаТелефонов), ";", "") + СтрокаКИ.Представление;
	КонецЦикла;
	
	ВозВрат СтрокаТелефонов;
	
КонецФункции
