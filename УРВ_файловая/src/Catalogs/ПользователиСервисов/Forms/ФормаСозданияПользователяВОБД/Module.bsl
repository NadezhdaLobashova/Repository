
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЧасовыеПояса = ОбщегоНазначенияУСП.ПолучитьЧасовыеПояса();
	Для каждого Строка Из ЧасовыеПояса Цикл
		Элементы.ЧасовойПояс.СписокВыбора.Добавить(Строка.Идентификатор, Строка.Идентификатор + " (" + Строка.Представление +")");
	КонецЦикла;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Отображение контактной информации
	Если Не (РольДоступна(Метаданные.Роли.ЧтениеИзменениеКонтактнойИнформации) Или Пользователи.ЭтоПолноправныйПользователь()) Тогда
		Элементы.ГруппаКонтактнаяИнформация.Видимость = Ложь;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Элементы.Наименование.ТолькоПросмотр = Ложь;
		Элементы.Владелец.ТолькоПросмотр = Ложь;
		Элементы.Код.ТолькоПросмотр = Ложь;
		Элементы.ЧасовойПояс.ТолькоПросмотр = Ложь;
	КонецЕсли; 
	
	неОтправлятьДанныеВОБД = Ложь;
	Объект.GUIDОБД = Неопределено;
	
	//+astyul, 72353, 30.10.2018
	Если Параметры.Свойство("Владелец") Тогда
		Объект.Владелец = Параметры.Владелец;
	КонецЕсли;
	Если Параметры.Свойство("Абонент") Тогда
		Абонент = Параметры.Абонент;
	КонецЕсли;
	//-astyul, 72353, 30.10.2018
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	////+astyul, 72353, 30.10.2018   //01.11.2018. shevchenko	Перенес эту проверку в  ПередЗаписью (на клиенте), что бы жта проверка осуществлялась перед отправкой пользователя в ОБД
	//Отказ = ПроверитьНаДублированиеПользователейСервиса();
	//Если Отказ Тогда
	//	Сообщить("Найден пользователь с идентичными данными ФИО, телефон, E-mail. Запись невозможна");
	//КонецЕсли;	
	////-astyul, 72353, 30.10.2018
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	новаяЗапись = РегистрыСведений.ПользователиАбонентов.СоздатьМенеджерЗаписи();
	новаяЗапись.Абонент = Абонент;
	новаяЗапись.Сервис = объект.Владелец;
	новаяЗапись.ПользовательСервиса = объект.Ссылка;
	новаяЗапись.Записать();
	
КонецПроцедуры

#Область СтандартныеПодсистемы_КонтактнаяИнформация

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка(ЭтотОбъект, Элемент.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда(ЭтотОбъект, Команда.Имя);
	ОбновитьКонтактнуюИнформацию(Результат);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуВводаАдреса(ЭтотОбъект, Результат);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьКонтактнуюИнформацию(Результат = Неопределено)
	
	Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецФункции

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)

	ПозицииПробелов = ОпределитьПозицииПробелов();

	Если ПозицииПробелов[0] > 0 Тогда
		ФамилияИзНаименования = Сред(Объект.Наименование, 1, (ПозицииПробелов[0] - 1));
		Объект.Наименование = СокрЛП(Фамилия) + Сред(Объект.Наименование, ПозицииПробелов[0]);
	Иначе
		Объект.Наименование = СокрЛП(Фамилия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьПозицииПробелов()
	
	Пробелы = Новый Массив;
	
	Для а = 1 По 2 Цикл
		Пробелы.Добавить(0);
	КонецЦикла; 
	
	КолПробелов = 0;
	
	Для а = 1 По СтрДлина(Объект.Наименование) Цикл
		Если Сред(Объект.Наименование, а, 1) = " " Тогда
			Пробелы[КолПробелов] = а;
			КолПробелов = КолПробелов + 1;
		КонецЕсли; 
		Если КолПробелов = 2 Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Пробелы;
	
КонецФункции

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	ПозицииПробелов = ОпределитьПозицииПробелов();
	Если ПозицииПробелов[0] > 0 И ПозицииПробелов[1] > 0 Тогда
		ИмяИзНаименования = Сред(Объект.Наименование, (ПозицииПробелов[0] + 1), (ПозицииПробелов[1] - ПозицииПробелов[0] - 1));
		Объект.Наименование = Сред(Объект.Наименование, 1, ПозицииПробелов[0]) + СокрЛП(имя) + Сред(Объект.Наименование, ПозицииПробелов[1]);
	ИначеЕсли ПозицииПробелов[0] > 0 Тогда
		ИмяИзНаименования = Сред(Объект.Наименование, (ПозицииПробелов[0] + 1));
		Объект.Наименование = Сред(Объект.Наименование, 1, ПозицииПробелов[0]) + СокрЛП(имя);
	Иначе
		Если НЕ ПустаяСтрока(Объект.Наименование) Тогда
			Объект.Наименование = Объект.Наименование + " " + СокрЛП(имя);
		Иначе
			Объект.Наименование = " " + СокрЛП(имя);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	ПозицииПробелов = ОпределитьПозицииПробелов();
	Если ПозицииПробелов[1] > 0 Тогда
		ОтчествоИзНаименования = Сред(Объект.Наименование, (ПозицииПробелов[1] + 1));
		Объект.Наименование = Сред(Объект.Наименование, 1, ПозицииПробелов[1]) + СокрЛП(Отчество);
	Иначе
		Если НЕ ПустаяСтрока(Объект.Наименование) Тогда
			Объект.Наименование = Объект.Наименование + " " + СокрЛП(Отчество);
		Иначе
			Объект.Наименование = "  " + СокрЛП(Отчество);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Отказ = ПроверитьНаДублированиеПользователейСервиса();
	Если Отказ Тогда
		Сообщить("Найден пользователь с идентичными данными ФИО, телефон, E-mail. Запись невозможна");
		Возврат;
	КонецЕсли;
	
	ОбменСНСИ = ПолучитьИспользоватьОбменДаннымиНСИ20();	
	Если Не ОбменСНСИ Тогда
	//}rarus kruser 09082019 91127

	//Лобашова 30.04.2019 85255 +
	//Эсли это копия информационной базы, то не выполняем обмен
	ПараметрыБлокировки = ПолучитьПараметрыБлокировкиРаботыСВнешнимиРесурсами();
	Если НЕ(ПараметрыБлокировки.Свойство("РаботаСВнешнимиРесурсамиЗаблокирована")
		И ПараметрыБлокировки.Свойство("РазделениеВключено")
		И ПараметрыБлокировки.РаботаСВнешнимиРесурсамиЗаблокирована 
		И Не ПараметрыБлокировки.РазделениеВключено)  Тогда
	//Лобашова 30.04.2019 85255 -

			Если Не неОтправлятьДанныеВОБД Тогда
				Попытка
					отправленоВОБД = ОтправитьДанныеВОБД();
				Исключение
					отправленоВОБД = Ложь;
				КонецПопытки;
				Если отправленоВОБД Тогда 
					отказ = Ложь;
				Иначе
					отказ = Истина;
					ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект), "Ошибка отправки данных в ОБД." + Символы.ПС + "Записать пользователя без отправки в ОБД?", РежимДиалогаВопрос.ДаНет); 		
				КонецЕсли;
			КонецЕсли;
	 //Лобашова 30.04.2019 85255 +
	КонецЕсли;
	//Лобашова 30.04.2019 85255 -
	//{rarus kruser 09082019 91127		
	КонецЕсли;
	//}rarus kruser 09082019 91127

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыБлокировкиРаботыСВнешнимиРесурсами()
	Возврат Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.получить().получить();
КонецФункции	
	
&НаСервереБезКонтекста
Функция ПолучитьИспользоватьОбменДаннымиНСИ20()
	Возврат Константы.ИспользоватьОбменДаннымиНСИ20.Получить();
КонецФункции	

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		неОтправлятьДанныеВОБД = Истина;
		Записать();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОтправитьДанныеВОБД()
	
	СтруктураЗапроса = Новый Структура(	"GUIDАбонент,GUIDПользователя,Представление," +
										"Фамилия, Имя, Отчество, ДатаРождения, Должность,"+
										"Телефон1,Телефон1КодСтраны,Телефон1КодГорода,Телефон1Номер,Телефон1Добавочный," +
										"Телефон2,Телефон2КодСтраны,Телефон2КодГорода,Телефон2Номер,Телефон2Добавочный," +
										"Почта1,Почта2");

	ТЗ_КонтактнаяИнформация = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить();
	СтруктураЗапроса.GUIDАбонент = Строка(Абонент.GUIDОБД);
	СтруктураЗапроса.GUIDПользователя = ?(ЗначениеЗаполнено(Объект.GUIDОБД),Строка(Объект.GUIDОБД), "");
	СтруктураЗапроса.Представление = Объект.Наименование;
	СтруктураЗапроса.Фамилия = Фамилия;
	СтруктураЗапроса.Имя = Имя;
	СтруктураЗапроса.Отчество = Отчество;
	СтруктураЗапроса.ДатаРождения = ДатаРождения;
	СтруктураЗапроса.Должность = Должность;
	Телефон1Строки = ТЗ_КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонПользователяСервиса));
	Если Телефон1Строки.Количество() И ЗначениеЗаполнено(Телефон1Строки[0].ЗначенияПолей) Тогда 
		ЗначенияПолей = Телефон1Строки[0].ЗначенияПолей;
		отказ = Истина;
		РезультатыЧтения = Новый Структура;
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Телефон, РезультатыЧтения);
		СтруктураЗапроса.Телефон1 = Телефон1Строки[0].Представление; 
		СтруктураЗапроса.Телефон1КодСтраны = XDTOКонтактная.Состав.КодСтраны;
		СтруктураЗапроса.Телефон1КодГорода = XDTOКонтактная.Состав.КодГорода;
		СтруктураЗапроса.Телефон1Номер = XDTOКонтактная.Состав.Номер;
		СтруктураЗапроса.Телефон1Добавочный = XDTOКонтактная.Состав.Добавочный;
	КонецЕсли;
	Телефон2Строки = ТЗ_КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ДополнительныйТелефонПользователяСервиса));
	Если Телефон2Строки.Количество() И ЗначениеЗаполнено(Телефон2Строки[0].ЗначенияПолей) Тогда 
		ЗначенияПолей = Телефон2Строки[0].ЗначенияПолей;
		отказ = Истина;
		РезультатыЧтения = Новый Структура;
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Телефон, РезультатыЧтения);
		СтруктураЗапроса.Телефон2 = Телефон2Строки[0].Представление; 
		СтруктураЗапроса.Телефон2КодСтраны = XDTOКонтактная.Состав.КодСтраны;
		СтруктураЗапроса.Телефон2КодГорода = XDTOКонтактная.Состав.КодГорода;
		СтруктураЗапроса.Телефон2Номер = XDTOКонтактная.Состав.Номер;
		СтруктураЗапроса.Телефон2Добавочный = XDTOКонтактная.Состав.Добавочный;
	КонецЕсли;
	Почта1Строки = ТЗ_КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EmailПользователяСервиса));
	Если Почта1Строки.Количество() И ЗначениеЗаполнено(Почта1Строки[0].Представление) Тогда 
		СтруктураЗапроса.Почта1 = Почта1Строки[0].Представление; 
	КонецЕсли;
	Почта2Строки = ТЗ_КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.ДополнительныйEmailПользователяСервиса));
	Если Почта2Строки.Количество() И ЗначениеЗаполнено(Почта2Строки[0].Представление) Тогда 
		СтруктураЗапроса.Почта2 = Почта2Строки[0].Представление; 
	КонецЕсли;
	//СтруктураЗапроса.Телефон2 = 
	//СтруктураЗапроса.Телефон2КодСтраны = 
	//СтруктураЗапроса.Телефон2КодГорода = 
	//СтруктураЗапроса.Телефон2Номер = 
	//СтруктураЗапроса.Телефон2Добавочный = 
	//СтруктураЗапроса.Почта1 = 
	//СтруктураЗапроса.Почта2 = 
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса);
	ЗапросJSON = ЗаписьJSON.Закрыть();
	
	НастройкиИнтеграции = УРВСервер.ПолучитьНастройкиИнтеграции(Перечисления.Интеграции.СозданиеКонтактныхЛицВОБД);
	//ИмяПользователя 	= "Администратор"; 
	//Пароль 				= ""; 
	//АдресПодключения 	= "/hs/ExchangeOBD/setPartner/";
	//Порт                = "8080";
	//ИмяБазы             = "URV";
	//Сервер              = "localhost";
	ИмяПользователя 	= НастройкиИнтеграции.Пользователь; 
	Пароль 				= НастройкиИнтеграции.Пароль; 
	АдресПодключения 	= НастройкиИнтеграции.АдресПодключения;
	//Порт                = НастройкиИнтеграции.;
	ИмяБазы             = НастройкиИнтеграции.ИмяБазы;
	Сервер              = НастройкиИнтеграции.Сервер;
	
	тСоединение = Новый HTTPСоединение(Сервер,, ИмяПользователя, Пароль);
	тHTTPЗапрос	= Новый HTTPЗапрос;
	тHTTPЗапрос.АдресРесурса = ИмяБазы + АдресПодключения;
	Попытка
		Если ТипЗнч(ЗапросJSON) = Тип("ДвоичныеДанные") Тогда
			тHTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ЗапросJSON);
		Иначе
			тHTTPЗапрос.УстановитьТелоИзСтроки(ЗапросJSON);
		КонецЕсли;
		тHTTPОтвет = тСоединение.ОтправитьДляОбработки(тHTTPЗапрос);
		ЗапросJSON = тHTTPОтвет.ПолучитьТелоКакСтроку();
		Если тHTTPОтвет.КодСостояния = 200 Тогда 
			Объект.GUIDОБД = Новый УникальныйИдентификатор(ЗапросJSON);
			Возврат Истина;
		Иначе
			ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ПользователиСервисов.Отправка в ОБД'"),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					"Ошибка отправки контактного лица в ОБД. Код ошибки = " +  тHTTPОтвет.КодСостояния + Символы.ПС + ЗапросJSON);
			Сообщить("Ошибка отправки контактного лица в ОБД. Код ошибки = " +  тHTTPОтвет.КодСостояния + Символы.ПС + ЗапросJSON);
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ПользователиСервисов.Отправка в ОБД'"),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					"Ошибка отправки контактного лица в ОБД. " + Символы.ПС + ОписаниеОшибки());
		Сообщить(ОписаниеОшибки());
		Возврат Ложь; 
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции


#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//+astyul, 72353, 30.10.2018
Функция ПроверитьНаДублированиеПользователейСервиса()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПользователиСервисов.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ПользователиСервисов КАК ПользователиСервисов
	                      |ГДЕ
	                      |	ПользователиСервисов.Наименование ПОДОБНО &ФИО");
	Запрос.УстановитьПараметр("ФИО", СокрЛП(Объект.Наименование));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	тзКонтактнаяИнформация = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий()Цикл
		
		ДубльПоЗначениюТелефон = Ложь;
	    ДубльПоЗначениюEMail   = Ложь;
		
		Для Каждого СтрокаКИ Из Выборка.Ссылка.КонтактнаяИнформация Цикл
			Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				Для Каждого строкаТЗКонтактная Из тзКонтактнаяИнформация Цикл
					Если строкаТЗКонтактная.Тип = СтрокаКИ.Тип И СокрЛП(строкаТЗКонтактная.Представление) = СокрЛП(СтрокаКИ.Представление) Тогда
						ДубльПоЗначениюТелефон = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				Для Каждого строкаТЗКонтактная Из тзКонтактнаяИнформация Цикл
					Если строкаТЗКонтактная.Тип = СтрокаКИ.Тип И СокрЛП(строкаТЗКонтактная.Представление) = СокрЛП(СтрокаКИ.Представление) Тогда
						ДубльПоЗначениюEMail = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;		
		КонецЦикла;
		Если ДубльПоЗначениюТелефон ИЛИ ДубльПоЗначениюEMail Тогда
			Возврат Истина
		КонецЕсли;	
	КонецЦикла;
	Возврат Ложь
КонецФункции
//-astyul, 72353, 30.10.2018

#КонецОбласти








