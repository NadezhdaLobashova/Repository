#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
/// Для БоР  (ЗАГОТОВКА, БЕЗ ПРОВЕРКИ)
//Обработка ОбработкаПросроченныхРезервов Модуль
//в Функция ПолучитьРезервы() Экспорт
//в запросе
//	|	КОЛИЧЕСТВО(ПраздничныеДни.Дата) КАК КоличествоПраздников,
//	|	РАЗНОСТЬДАТ(ВТРезервы.ДатаПостановки, &ТекущаяДата, ДЕНЬ) КАК КоличествоДнейРезерва
//	|ПОМЕСТИТЬ ВТРезервыИКоличествоДней
//	|ИЗ
//	|	ВТРезервы КАК ВТРезервы
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПраздничныеДни КАК ПраздничныеДни
//	|		ПО ВТРезервы.ДатаПостановки < ПраздничныеДни.Дата
//	|			И (ПраздничныеДни.Дата <= &ТекущаяДата)
//заменить на 
//	|	КОЛИЧЕСТВО(ПраздничныеВыходныеДни.Дата) КАК КоличествоПраздников,
//	|	РАЗНОСТЬДАТ(ВТРезервы.ДатаПостановки, &ТекущаяДата, ДЕНЬ) КАК КоличествоДнейРезерва
//	|ПОМЕСТИТЬ ВТРезервыИКоличествоДней
//	|ИЗ
//	|	ВТРезервы КАК ВТРезервы
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПраздничныеВыходныеДни КАК ПраздничныеВыходныеДни
//	|		ПО ВТРезервы.ДатаПостановки < ПраздничныеВыходныеДни.Дата
//	|			И (ПраздничныеВыходныеДни.Дата <= &ТекущаяДата)
//	|			И (ПраздничныеВыходныеДни.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейКалендаря.Праздник))

////***** Вариант из РегистрСведений.ПраздничныеДни *****
//Функция ПолучитьДатуОкончанияСУчетомПраздников(Знач ДатаНачала, Знач КоличествоДней) Экспорт
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ПраздничныеДни.Дата
//	|ИЗ
//	|	РегистрСведений.ПраздничныеДни КАК ПраздничныеДни
//	|ГДЕ
//	|	ПраздничныеДни.Дата >= &ДатаНачала";
//	
//	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
//	
//	ТаблицаПраздников = Запрос.Выполнить().Выгрузить();
//	
//	ДатаОкончания = НачалоДня(ДатаНачала);
//	Пока КоличествоДней > 0 Цикл
//		Если ТаблицаПраздников.Найти(ДатаОкончания, "Дата") = Неопределено Тогда
//			ДатаОкончания = ДатаОкончания + 86400;
//			КоличествоДней = КоличествоДней - 1;
//		КонецЕсли;
//	КонецЦикла;
//	ВозВрат ДатаОкончания;
//КонецФункции

//---------------------------------------------------------------------------------------------------------------

Функция ПолучитьДатуОкончанияСУчетомПраздников(Знач ДатаНачала, Знач КоличествоДней) Экспорт
	
	ВидыДнейКалендаря	= Новый СписокЗначений;
	ВидыДнейКалендаря.Добавить(Перечисления.ВидыДнейКалендаря.Праздник);
	
	Возврат ПолучитьДатуОкончанияСУчетомНеРабочихДней(ДатаНачала, КоличествоДней, ВидыДнейКалендаря);
КонецФункции


Функция ПолучитьДатуОкончанияСУчетомПраздниковВыходных(Знач ДатаНачала, Знач КоличествоДней) Экспорт
	
	ВидыДнейКалендаря	= Новый СписокЗначений;
	ВидыДнейКалендаря.Добавить(Перечисления.ВидыДнейКалендаря.Праздник);
	ВидыДнейКалендаря.Добавить(Перечисления.ВидыДнейКалендаря.Выходной);
	
	Возврат ПолучитьДатуОкончанияСУчетомНеРабочихДней(ДатаНачала, КоличествоДней, ВидыДнейКалендаря);
КонецФункции


Функция ПолучитьДатуОкончанияСУчетомНеРабочихДней(ДатаНачала, КоличествоДней, ВидыДнейКалендаря)
	
	ДлительностьДня		= 86400;
	
	// На сколько дней вперед просматриваем праздники и выходные?
	// С запасом: 30 (январь) или КоличествоДней * 3
	ДнейПросматриваем	= Макс(30, КоличествоДней * 3);
	ДатаГоризонта 		= НачалоДня(ДатаНачала) + ДнейПросматриваем * ДлительностьДня;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПраздничныеВыходныеДни.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ПраздничныеВыходныеДни КАК ПраздничныеВыходныеДни
	|ГДЕ
	|	ПраздничныеВыходныеДни.ВидДня В(&ВидыДнейКалендаря)
	|	И ПраздничныеВыходныеДни.Дата МЕЖДУ &ДатаНачала И &ДатаГоризонта
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	Запрос.УстановитьПараметр("ДатаНачала", 		ДатаНачала);
	Запрос.УстановитьПараметр("ДатаГоризонта", 		ДатаГоризонта);
	Запрос.УстановитьПараметр("ВидыДнейКалендаря", 	ВидыДнейКалендаря);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ДатаОкончания = НачалоДня(ДатаНачала) + (КоличествоДней * ДлительностьДня);
	Пока 1=1 Цикл
		Если ТЗ.Количество() = 0 Тогда
			Прервать;		// Нет больше нерабочих дней
		КонецЕсли;
		
		строкаТЗ = ТЗ[0]; 	// Первая строка с самой маленькой датой
		
		Если строкаТЗ.Дата > ДатаОкончания Тогда
			Прервать;
			
		Иначе
			ДатаОкончания = ДатаОкончания + ДлительностьДня;	// Добавляем день к дате окончания
			ТЗ.Удалить(строкаТЗ);								// Учли этот нерабочий день
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ДатаОкончания;
КонецФункции


Функция ПолучитьКоличествоРабочихДнейСУчетомПраздниковВыходных(Знач ДатаНачала, Знач ДатаОкончания) Экспорт
	
	ВидыДнейКалендаря	= Новый СписокЗначений;
	ВидыДнейКалендаря.Добавить(Перечисления.ВидыДнейКалендаря.Праздник);
	ВидыДнейКалендаря.Добавить(Перечисления.ВидыДнейКалендаря.Выходной);
	
	Возврат ПолучитьКоличествоРабочихДней(ДатаНачала, ДатаОкончания, ВидыДнейКалендаря);
КонецФункции


Функция ПолучитьКоличествоРабочихДней(ДатаНачала, ДатаОкончания, ВидыДнейКалендаря)
	
	ДлительностьДня		= 86400;
	
	// На сколько дней вперед просматриваем праздники и выходные?
	// С запасом: 30 (январь) или КоличествоДней * 3
	//ДнейПросматриваем	= Макс(30, КоличествоДней * 3);
	ДатаГоризонта 		= ДатаОкончания;//НачалоДня(ДатаНачала) + ДнейПросматриваем * ДлительностьДня;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПраздничныеВыходныеДни.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ПраздничныеВыходныеДни КАК ПраздничныеВыходныеДни
	|ГДЕ
	|	ПраздничныеВыходныеДни.ВидДня НЕ В(&ВидыДнейКалендаря)
	|	И ПраздничныеВыходныеДни.Дата МЕЖДУ &ДатаНачала И &ДатаГоризонта
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	Запрос.УстановитьПараметр("ДатаНачала", 		ДатаНачала);
	Запрос.УстановитьПараметр("ДатаГоризонта", 		ДатаГоризонта);
	Запрос.УстановитьПараметр("ВидыДнейКалендаря", 	ВидыДнейКалендаря);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	КоличествоДней = ?(ТЗ.Количество() > 0, ТЗ.Количество() - 1, 0); 
	Возврат КоличествоДней;
	
	//ДатаОкончания = ДатаГоризонта;//НачалоДня(ДатаНачала) + (КоличествоДней * ДлительностьДня);
	//Пока 1=1 Цикл
	//	Если ТЗ.Количество() = 0 Тогда
	//		Прервать;		// Нет больше нерабочих дней
	//	КонецЕсли;
	//	
	//	строкаТЗ = ТЗ[0]; 	// Первая строка с самой маленькой датой
	//	
	//	Если строкаТЗ.Дата > ДатаОкончания Тогда
	//		Прервать;
	//		
	//	Иначе
	//		ДатаОкончания = ДатаОкончания + ДлительностьДня;	// Добавляем день к дате окончания
	//		ТЗ.Удалить(строкаТЗ);								// Учли этот нерабочий день
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла; 
	//
	//Возврат ДатаОкончания;
КонецФункции
	

//---------------------------------------------------------------------------------------------------------------
// Для заполнения календаря по умолчанию
//---------------------------------------------------------------------------------------------------------------

Функция ЕстьЗаполненныеДниВГоду(НомерГода) Экспорт
	
	ПервоеЯнваря = Дата(НомерГода, 1, 1);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПраздничныеВыходныеДни.Дата,
	|	ПраздничныеВыходныеДни.ВидДня
	|ИЗ
	|	РегистрСведений.ПраздничныеВыходныеДни КАК ПраздничныеВыходныеДни
	|ГДЕ
	|	ПраздничныеВыходныеДни.Дата МЕЖДУ &НачалоГода И &КонецГода";
	Запрос.УстановитьПараметр("НачалоГода",	НачалоГода(ПервоеЯнваря));
	Запрос.УстановитьПараметр("КонецГода", 	КонецГода(ПервоеЯнваря));
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();

КонецФункции // ()

Процедура ВыполнитьЗаполнениеПоГоду(НомерГода) Экспорт
	
	Если РегистрыСведений.ПраздничныеВыходныеДни.ЕстьЗаполненныеДниВГоду(НомерГода) Тогда
		Возврат;
	КонецЕсли;
	
	
	ТЗ_Календарь	= РезультатЗаполненияКалендаряПоУмолчанию(НомерГода);
	ВидДняРабочий	= Перечисления.ВидыДнейКалендаря.Рабочий;
	
	НаборЗаписей = РегистрыСведений.ПраздничныеВыходныеДни.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого строкаТЗ_Календарь Из ТЗ_Календарь Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, строкаТЗ_Календарь);
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
	
КонецПроцедуры

// Из БП 3.0 с изменениями
Функция РезультатЗаполненияКалендаряПоУмолчанию(НомерГода)
	
	ВидДняРабочий	= Перечисления.ВидыДнейКалендаря.Рабочий;
	ДлинаСуток 		= 24 * 3600;
	
	ДанныеКалендаря = Новый ТаблицаЗначений;
	ДанныеКалендаря.Колонки.Добавить("Дата",			Новый ОписаниеТипов("Дата"));
	ДанныеКалендаря.Колонки.Добавить("ВидДня",			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДнейКалендаря"));
	ДанныеКалендаря.Колонки.Добавить("ДатаПереноса", 	Новый ОписаниеТипов("Дата"));
	
	
	// Если нет - заполняем праздники и переносы
	ДниПраздников = ДниПраздниковПроизводственногоКалендаря(НомерГода);
	
	ВидыДней = Новый Соответствие;
	
	ДатаДня = Дата(НомерГода, 1, 1);
	Пока ДатаДня <= Дата(НомерГода, 12, 31) Цикл
		// "Непраздничный" день - определяем в соответствии с днем недели
		НомерДняНедели = ДеньНедели(ДатаДня);
		Если НомерДняНедели <= 5 Тогда
			ВидыДней.Вставить(ДатаДня, ВидДняРабочий);
		Иначе
			ВидыДней.Вставить(ДатаДня, Перечисления.ВидыДнейКалендаря.Выходной);
		КонецЕсли;
		ДатаДня = ДатаДня + ДлинаСуток;
	КонецЦикла;
	
	// При совпадении выходного и нерабочего праздничного дней 
	// выходной день переносится на следующий после праздничного рабочий день 
	// за исключением выходных дней, совпадающих с нерабочими праздничными днями 
	// в период Новогодних каникул и Рождества Христова.	
	
	ПереносыДней = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ДниПраздников Цикл
		ПраздничныйДень = СтрокаТаблицы.Дата;
		Если ВидыДней[ПраздничныйДень] <> ВидДняРабочий 
			И СтрокаТаблицы.ПереноситьВыходной Тогда
			// Если праздничный день выпадает на выходной, 
			// и выходной, на который выпадает этот праздник, переносится - 
			// переносим выходной на ближайший рабочий день
			ДатаДня = ПраздничныйДень;
			Пока Истина Цикл
				ДатаДня = ДатаДня + ДлинаСуток;
				Если 	ВидыДней[ДатаДня] = ВидДняРабочий И 
						ДниПраздников.Найти(ДатаДня, "Дата") = Неопределено Тогда
					ВидыДней.Вставить(ДатаДня, ВидыДней[ПраздничныйДень]);
					ПереносыДней.Вставить(ДатаДня, ПраздничныйДень);
					ПереносыДней.Вставить(ПраздничныйДень, ДатаДня);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ВидыДней.Вставить(ПраздничныйДень, Перечисления.ВидыДнейКалендаря.Праздник);
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ВидыДней Цикл
		НоваяСтрока = ДанныеКалендаря.Добавить();
		НоваяСтрока.Дата = КлючИЗначение.Ключ;
		НоваяСтрока.ВидДня = КлючИЗначение.Значение;
		ДатаПереноса = ПереносыДней[НоваяСтрока.Дата];
		Если ДатаПереноса <> Неопределено Тогда
			НоваяСтрока.ДатаПереноса = ДатаПереноса;
		КонецЕсли;
	КонецЦикла;
	
	//*******************************************************************************************
	// Особенности по каждому году
	
	Если НомерГода = 2014 Тогда
		//ПРАВИТЕЛЬСТВО РОССИЙСКОЙ ФЕДЕРАЦИИ
		//П О С Т А Н О В Л Е Н И Е от 28 мая 2013 г. № 444 
		//О переносе выходных дней в 2014 году
		//В целях рационального использования работниками выходных 
		//и нерабочих праздничных дней Правительство Российской Федерации 
		//п о с т а н о в л я е т :
		//Перенести в 2014 году следующие выходные дни:
		//с субботы 4 января на пятницу 2 мая;
		//с воскресенья 5 января на пятницу 13 июня;
		//с понедельника 24 февраля на понедельник 3 ноября.

		СтрокаДанныеКалендаря = ДанныеКалендаря.Найти('20140502', "Дата"); 			// С 04/01/2014 Праздник+Выходной
		СтрокаДанныеКалендаря.ВидДня	= Перечисления.ВидыДнейКалендаря.Выходной;

		СтрокаДанныеКалендаря = ДанныеКалендаря.Найти('20140613', "Дата");			// С 05/01/2014 Праздник+Выходной
		СтрокаДанныеКалендаря.ВидДня	= Перечисления.ВидыДнейКалендаря.Выходной;

		СтрокаДанныеКалендаря = ДанныеКалендаря.Найти('20141103', "Дата");			// С 24/02/2014 Перенесенный автоматически выходной
		СтрокаДанныеКалендаря.ВидДня	= Перечисления.ВидыДнейКалендаря.Выходной;
		СтрокаДанныеКалендаря = ДанныеКалендаря.Найти('20140224', "Дата");			// Возвращаем статус рабочего дня
		СтрокаДанныеКалендаря.ВидДня	= ВидДняРабочий;
		
		
	ИначеЕсли НомерГода = 2015 Тогда
		//Постановление Правительства РФ от 27 августа 2014 г. N 860 "О переносе выходных дней в 2015 году"
		//В целях рационального использования работниками выходных и нерабочих
		//праздничных дней Правительство Российской Федерации постановляет:
		//Перенести в 2015 году следующие выходные дни:
		//с субботы 3 января на пятницу 9 января;
		//с воскресенья 4 января на понедельник 4 мая.
		//ГАРАНТ.РУ: http://www.garant.ru/hotlaw/federal/562540/#ixzz3F0bHOkEV
		
		СтрокаДанныеКалендаря = ДанныеКалендаря.Найти('20150109', "Дата"); 			// С 03/01/2014 Праздник+Выходной
		СтрокаДанныеКалендаря.ВидДня	= Перечисления.ВидыДнейКалендаря.Выходной;

		СтрокаДанныеКалендаря = ДанныеКалендаря.Найти('20150504', "Дата");			// С 04/01/2014 Праздник+Выходной
		СтрокаДанныеКалендаря.ВидДня	= Перечисления.ВидыДнейКалендаря.Выходной;
		
		
	КонецЕсли;
	
	
	ДанныеКалендаря.Сортировать("Дата");
	
	Возврат ДанныеКалендаря;
	
КонецФункции

// Функция заполняет массив дат праздничных дней по производственному календарю 
// для конкретного календарного года
//
Функция ДниПраздниковПроизводственногоКалендаря(НомерГода)
	
	ДниПраздников = Новый ТаблицаЗначений;
	ДниПраздников.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ДниПраздников.Колонки.Добавить("ПереноситьВыходной", Новый ОписаниеТипов("Булево"));
	
	// 1, 2, 3, 4, 5, 6 и 8 января - Новогодние каникулы
	ДобавитьПраздничныйДень(ДниПраздников, "01.01", НомерГода, Ложь);
	ДобавитьПраздничныйДень(ДниПраздников, "02.01", НомерГода, Ложь);
	ДобавитьПраздничныйДень(ДниПраздников, "03.01", НомерГода, Ложь);
	ДобавитьПраздничныйДень(ДниПраздников, "04.01", НомерГода, Ложь);
	ДобавитьПраздничныйДень(ДниПраздников, "05.01", НомерГода, Ложь);
	ДобавитьПраздничныйДень(ДниПраздников, "06.01", НомерГода, Ложь);
	ДобавитьПраздничныйДень(ДниПраздников, "08.01", НомерГода, Ложь);
		
	// 7 января - Рождество Христово
	ДобавитьПраздничныйДень(ДниПраздников, "07.01", НомерГода, Ложь);
		
	// 23 февраля - День защитника Отечества
	ДобавитьПраздничныйДень(ДниПраздников, "23.02", НомерГода);
		
	// 8 марта - Международный женский день
	ДобавитьПраздничныйДень(ДниПраздников, "08.03", НомерГода);
		
	// 1 мая - Праздник Весны и Труда
	ДобавитьПраздничныйДень(ДниПраздников, "01.05", НомерГода);
		
	// 9 мая - День Победы
	ДобавитьПраздничныйДень(ДниПраздников, "09.05", НомерГода);
		
	// 12 июня - День России
	ДобавитьПраздничныйДень(ДниПраздников, "12.06", НомерГода);
		
	// 4 ноября - День народного единства
	ДобавитьПраздничныйДень(ДниПраздников, "04.11", НомерГода);
		
	Возврат ДниПраздников;
	
КонецФункции

Процедура ДобавитьПраздничныйДень(ДниПраздников, ПраздничныйДень, НомерГода, ПереноситьВыходной = Истина)
	
	ДеньМесяц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПраздничныйДень, ".");
	
	НоваяСтрока = ДниПраздников.Добавить();
	НоваяСтрока.Дата = Дата(НомерГода, ДеньМесяц[1], ДеньМесяц[0]);
	НоваяСтрока.ПереноситьВыходной = ПереноситьВыходной;
	
КонецПроцедуры

#КонецЕсли