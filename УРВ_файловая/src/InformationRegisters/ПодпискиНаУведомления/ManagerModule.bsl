#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура добавляет подписку в регистр сведений
Процедура ДобавитьПодпискуНаУведомления(ВидСобытия, ОбъектПодписки, Пользователь, ПодпискаАктивна) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ПодпискиНаУведомления.СоздатьМенеджерЗаписи();
	Запись.ВидСобытия = ВидСобытия;
	Запись.ОбъектПодписки = ОбъектПодписки;
	Запись.Пользователь = Пользователь;
	Запись.Прочитать();
	
	Запись.ВидСобытия = ВидСобытия;
	Запись.ОбъектПодписки = ОбъектПодписки;
	Запись.Пользователь = Пользователь;
	Запись.ПодпискаАктивна = ПодпискаАктивна;
	Запись.Записать(Истина);
	
КонецПроцедуры

// Процедура удаляет подписки по объекту для пользователя из регистра сведений
Процедура УдалитьПодпискуНаУведомления(ВидСобытия, ОбъектПодписки, Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПодпискиНаУведомления.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидСобытия.Установить(ВидСобытия);
	НаборЗаписей.Отбор.ОбъектПодписки.Установить(ОбъектПодписки);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает значение активности подписки на уведомления
Функция ПодпискаАктивна(ВидСобытия, ОбъектПодписки, Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запись = РегистрыСведений.ПодпискиНаУведомления.СоздатьМенеджерЗаписи();
	Запись.ВидСобытия = ВидСобытия;
	Запись.ОбъектПодписки = ОбъектПодписки;
	Запись.Пользователь = Пользователь;
	Запись.Прочитать();
	
	Если Не Запись.Выбран() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Запись.ПодпискаАктивна;
	
КонецФункции

// Возвращает пользователей, подписанных на данный вид бизнес-события и объект подписки.
Функция ПолучитьМассивПодписчиковПоОбъекту(ВидСобытия, ОбъектПодписки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивПодписчиков = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодпискиНаУведомления.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
		|ГДЕ
		|	ПодпискиНаУведомления.ВидСобытия = &ВидСобытия
		|	И ПодпискиНаУведомления.ОбъектПодписки = &ОбъектПодписки
		|	И ПодпискиНаУведомления.ПодпискаАктивна = ИСТИНА");
	Запрос.УстановитьПараметр("ВидСобытия", ВидСобытия);	
	Запрос.УстановитьПараметр("ОбъектПодписки", ОбъектПодписки);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивПодписчиков.Добавить(Выборка.Пользователь);
	КонецЦикла;
	
	Возврат МассивПодписчиков
	
КонецФункции

// Функция для проверки активности подписки для пользователя по виду события.
Функция ПроверитьПодпискуПоВидуБизнесСобытия(ВидСобытия, ОбъектПодписки, Пользователь) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	ПодпискаАктивна = Ложь;
	ЕстьЗаписьВРегистре = Ложь;
	
	Набор = РегистрыСведений.ПодпискиНаУведомления.СоздатьНаборЗаписей();
	Набор.Отбор.ВидСобытия.Установить(ВидСобытия);
	Набор.Отбор.ОбъектПодписки.Установить(ОбъектПодписки);
	Набор.Отбор.Пользователь.Установить(Пользователь);
	Набор.Прочитать();
	
	Набор = РегистрыСведений.ПодпискиНаУведомления.СоздатьНаборЗаписей();
	Набор.Отбор.ВидСобытия.Установить(ВидСобытия);
	Набор.Отбор.ОбъектПодписки.Установить("");
	Набор.Отбор.Пользователь.Установить(Пользователь);
	Набор.Прочитать();
	
	Для каждого Запись Из Набор Цикл
		
		ЕстьЗаписьВРегистре = Истина;
		
		// Только для активных подписок
		Если Запись.ПодпискаАктивна Тогда
			
			ПодпискаАктивна = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкаУведомления = Новый Структура("ПодпискаАктивна, ЕстьЗаписьВРегистре", ПодпискаАктивна, ЕстьЗаписьВРегистре);
	
	Возврат НастройкаУведомления;
	
КонецФункции

// Функция для проверки активности подписки для пользователя по объекту подписки и виду бизнес-события.
Функция ПроверитьПодпискуПоОбъекту(ВидСобытия, ОбъектПодписки, Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодпискаАктивна = Ложь;
	
	Набор = РегистрыСведений.ПодпискиНаУведомления.СоздатьНаборЗаписей();
	Набор.Отбор.ВидСобытия.Установить(ВидСобытия);
	Набор.Отбор.ОбъектПодписки.Установить(ОбъектПодписки);
	Набор.Отбор.Пользователь.Установить(Пользователь);
	Набор.Прочитать();
		
	Для каждого Запись Из Набор Цикл
		// Только для активных подписок
		Если Запись.ПодпискаАктивна Тогда
			ПодпискаАктивна = Истина;
		КонецЕсли;
	КонецЦикла;
	
	НастройкаУведомления = Новый Структура("ПодпискаАктивна", ПодпискаАктивна);
	
	Возврат НастройкаУведомления;

КонецФункции

// Функция для проверки активности подписки для пользователя по объекту подписки и виду бизнес-события.
Функция ПолучитьОтказОтПодпискиПоВидуБизнесСобытия(ВидСобытия, Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПодпискиНаУведомления.ОбъектПодписки
		|ИЗ
		|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
		|ГДЕ
		|	ПодпискиНаУведомления.ВидСобытия = &ВидСобытия
		|	И ПодпискиНаУведомления.Пользователь = &Пользователь
		|	И ПодпискиНаУведомления.ПодпискаАктивна = ЛОЖЬ");
	Запрос.УстановитьПараметр("ВидСобытия", ВидСобытия);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли