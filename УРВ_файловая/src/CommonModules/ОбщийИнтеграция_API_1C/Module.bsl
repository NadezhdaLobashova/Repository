///////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// 
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция ФункцияВосстановленияЧтения(Свойство, Значение, ДополнительныеПараметры) Экспорт
    
    // при необходимости здесь нужно дописать приведение типов, например, если будет передана дата
    Если Свойство = "buyDate" 
        или Свойство = "endDate" 
        или Свойство = "startDate" Тогда 
        Возврат ПреобразоватьСтрокуВ_Дату1С(Значение);
    КонецЕсли;
    
КонецФункции // ФункцияВосстановленияЧтения()

Функция СоздатьОбъектСправочника(Менеджер, СтруктураРеквизитов)Экспорт
    
    Объект = Менеджер.СоздатьЭлемент();
    Для каждого Эл Из СтруктураРеквизитов Цикл
        Объект[Эл.Ключ] = Эл.Значение;
    КонецЦикла;
    
    Попытка
        Объект.Записать();
        Возврат Объект.Ссылка;
    Исключение
        Возврат Неопределено; 
    КонецПопытки;
    
КонецФункции    

Процедура ЗаполнитьРеквизитыОбъектаИзСтруктуры(Объект,Структура)
    
    Для каждого элСтр Из Структура Цикл
        
        Объект[элСтр.Ключ] = элСтр.Значение;
        
    КонецЦикла; 
    
КонецПроцедуры

Функция ПреобразоватьСтрокуВ_Дату1С(Значение) Экспорт
    
    Возврат Дата(СтрЗаменить(Сред(Значение, 1,СтрНайти(Значение,"T")-1),"-","")); 
    
КонецФункции

Процедура СделатьЗаписьРС_СсылкаНаЗагрузкуСпискаС_ПартнерскогоAPI_1С(Ссылка,ДанныеПолучены = Ложь) Экспорт
    
    //Смотрим, есть ли запись с этой ссылкой.
    НаборЗаписей = РегистрыСведений.СсылкаНаЗагрузкуСпискаС_ПартнерскогоAPI_1С.СоздатьНаборЗаписей();
    НаборЗаписей.Записать();    
    
    Запись = НаборЗаписей.Добавить();
    Запись.ДатаПолученияСсылки 	= ТекущаяДата();
    Запись.Ссылка       		= Ссылка;
    Запись.ДанныеПолучены       = ДанныеПолучены; 
    НаборЗаписей.Записать();
    
КонецПроцедуры

Функция ПолучитьЭлементСправочника(Имя,СтруктураПоиска) Экспорт
    
    Запрос = Новый Запрос;
    Текст = 
    "ВЫБРАТЬ
    |	Справочник.Ссылка КАК Ссылка
    |ИЗ
    |	Справочник."+Имя+" КАК Справочник
    |ГДЕ ";
    
    НомСтрокиУсловия = 1;
    КолЭлементовПоиска = СтруктураПоиска.Количество();
    Для каждого ЭлСтруктуры Из СтруктураПоиска Цикл
    
    	Если НомСтрокиУсловия > 1 Тогда 
            Текст = Текст + " и";
            
        КонецЕсли;
        
        Текст = Текст + " Справочник."+ЭлСтруктуры.Ключ +" = &" + ЭлСтруктуры.Ключ;
        Запрос.УстановитьПараметр(ЭлСтруктуры.Ключ, ЭлСтруктуры.Значение);
        НомСтрокиУсловия = 2;               
    КонецЦикла;
    
    Запрос.Текст = Текст;
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    Ссылка = Неопределено;
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
    ИначеЕсли Имя = "СервисыИТС" Тогда 
        Объект = Справочники[Имя].СоздатьЭлемент();
        ЗаполнитьЗначенияСвойств(Объект,СтруктураПоиска);
        Объект.ОбменДанными.Загрузка = Истина;
        Объект.Записать();
        Ссылка = Объект.Ссылка;
    КонецЕсли;
    
    Возврат Ссылка;
    
КонецФункции

Функция ПолучитьСсылкуВладелца() Экспорт
    
    Значение = Неопределено;
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |   Сервисы.Ссылка КАК Ссылка
    |ИЗ
    |   Справочник.Сервисы КАК Сервисы
    |
    |УПОРЯДОЧИТЬ ПО
    |   Ссылка";
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
        Значение = ВыборкаДетальныеЗаписи.Ссылка;
    КонецЕсли;
    
    Возврат Значение;
    
КонецФункции // ()

Процедура СделатьЗаписьВЖурналеРегистрации(ИмяМетода,КодСостояния,Сообщение = "") Экспорт 
    
    ИмяСобытияВЖурналеРегистрации = НСтр("ru='Доступ к сервисам API 1С'");
    Если Сообщение = "" Тогда
        ТекстНСТР = "Не выполнен метод """+ИмяМетода+""", код ошибки "+ КодСостояния;
    Иначе
        ТекстНСТР = Сообщение;
    КонецЕсли;    
    ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
    
КонецПроцедуры

Процедура СделатьЗаписьВЖурналеРегистрацииОшибокРаспарсинга(ИмяСвойства = "",Сообщение = "") Экспорт 
    
    ИмяСобытияВЖурналеРегистрации = НСтр("ru='Ошибка распарсивания полученных данных'");
    Если Сообщение = "" Тогда
        ТекстНСТР = "В полученном списке нет свойства "+ИмяСвойства+"!";
    Иначе
        ТекстНСТР = Сообщение;
    КонецЕсли;    
    ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
    
КонецПроцедуры

Процедура СделатьЗаписьВЖурналеРегистрацииДляДокумента(ИмяДокумента,Сообщение = "") Экспорт 
    
    ИмяСобытияВЖурналеРегистрации = НСтр("ru='Документ '") + ИмяДокумента + НСтр("ru=',запись или проведение.'");
    Если Сообщение = "" Тогда
        ТекстНСТР = "Документ """+ИмяДокумента+""", не был записан, по причине "+ ОписаниеОшибки();
    Иначе
        ТекстНСТР = Сообщение;
    КонецЕсли;    
    ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации, УровеньЖурналаРегистрации.Информация,,, ТекстНСТР);
    
КонецПроцедуры

Функция РасчитатьКоличествоМесяцев(ДатаОкончания,ДатаНачала) Экспорт
    
    Значение = 0;  
    МесяцОкончания = Месяц(ДатаОкончания);
    МесяцНачала    = Месяц(ДатаНачала);
    
    Если МесяцНачала > МесяцОкончания Тогда
        Значение = МесяцНачала - МесяцОкончания;
    ИначеЕсли МесяцНачала = МесяцОкончания Тогда    
        Значение = 1;
    Иначе
        Значение = МесяцОкончания - МесяцНачала;
    КонецЕсли; 
    
    Возврат Значение;
    
КонецФункции // ()

Процедура ВызватьИсключениеИСообщить(ТекстСообщения) Экспорт

	 ВызватьИсключение ТекстСообщения;

КонецПроцедуры


#КонецОбласти
