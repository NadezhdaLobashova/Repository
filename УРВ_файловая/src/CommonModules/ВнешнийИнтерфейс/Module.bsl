////////////////////////////////////////////////////////////////////////////////
// Модуль внешнего интерфейса
// Реализует функциональность веб-сервиса SDApi
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает результат обработки универсальных сообщений
// 
// Параметры:
//   Сообщение - ОбъектXDTO, потомок Request
// Возвращаемое значение:
//   ОбъектXDTO, потомок Response
// 
Функция ОбработатьУниверсальноеСообщение(Сообщение) Экспорт
	
	Попытка
		
		Если ПроверитьТип(Сообщение, "GetVersionRequest") Тогда
			Возврат Версия();
			
		ИначеЕсли ПроверитьТип(Сообщение, "GetListRequest") Тогда
			Возврат ПолучитьСписокОбъектов(Сообщение);
			
		ИначеЕсли ПроверитьТип(Сообщение, "GetSubListRequest") Тогда
			Возврат СписокПодчиненныхОбъектов(Сообщение);
			
		ИначеЕсли ПроверитьТип(Сообщение, "GetServiceUserInfoListRequest") Тогда
			Возврат СписокСведенийПользователейСервиса(Сообщение);
            
		ИначеЕсли ПроверитьТип(Сообщение, "GetRequest") Тогда
			Возврат ПолучитьОбъекты(Сообщение);
			
		ИначеЕсли ПроверитьТип(Сообщение, "GetNewRequest") Тогда
			Возврат НовыйОбъект(Сообщение);
            
        ИначеЕсли ПроверитьТип(Сообщение, "GetNewSubRequest") Тогда
			Возврат НовыйПодчиненныйОбъект(Сообщение);
			
        ИначеЕсли ПроверитьТип(Сообщение, "GetCurrentUserRequest") Тогда
			Возврат ТекущийПользователь(Сообщение);
            
        ИначеЕсли ПроверитьТип(Сообщение, "PostRequest") Тогда
			Возврат ДобавитьОбъекты(Сообщение);
				
		ИначеЕсли ПроверитьТип(Сообщение, "PostSubRequest") Тогда
			Возврат ДобавитьПодчиненныйОбъект(Сообщение);
			
		ИначеЕсли ПроверитьТип(Сообщение, "PutRequest") Тогда
			Возврат ИзменитьОбъекты(Сообщение);
			
		ИначеЕсли ПроверитьТип(Сообщение, "DeleteRequest") Тогда
			Возврат ПометитьНаУдаление(Сообщение);
			
		ИначеЕсли ПроверитьТип(Сообщение, "PutRedirectRequest") Тогда
			Возврат ПеренаправитьОбъект(Сообщение);
            
		ИначеЕсли ПроверитьТип(Сообщение, "PutCompleteTaskRequest") Тогда
			Возврат ВыполнитьЗадачу(Сообщение);
            
        КонецЕсли;
		
        Событие = НСтр("ru = 'Неизвестное сообщение'");
        Возврат ОбработкаИсключения(Событие, Строка(Сообщение.Тип())); 
		
	Исключение
		
        Событие = НСтр("ru = 'Ошибка при обработке сообщения'");
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Возвращает текущую версию интерфейса
//
// Возвращаемое значение:
//   ОбъектXDTO типа GetVersionResponse
// 
Функция Версия() Экспорт
	
	ОтветВерсия = СоздатьОбъект("GetVersionResponse");
	ОтветВерсия.version = "1.0.3";
    
	Возврат ОтветВерсия;                                            
	
КонецФункции

// Создает XDTO объект указанного типа из пространства имен XDTO Api.
// 
// Параметры:
//   ТипОбъекта - Строка - имя типа XDTO
//   ПространствоИмен - Строка - пространство имен.
// Возвращаемое значение:
//   ОбъектXDTO - созданный объект указанного типа.
//
Функция СоздатьОбъект(Знач ТипОбъекта, ПространствоИмен = Неопределено) Экспорт
    
    СтрокаНРегТипа = ВнешнийИнтерфейсПовтИсп.СоответствиеТипов(Истина).Найти(НРег(ТипОбъекта), "ИмяXDTOНРег");
    Если СтрокаНРегТипа <> Неопределено Тогда
        ТипОбъекта = СтрокаНРегТипа.ИмяXDTO;
    КонецЕсли;
    
    ПространствоИмен = ?(ПространствоИмен = Неопределено, ПространствоИмен(), ПространствоИмен);
    
    Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ТипОбъекта));
	
КонецФункции

// Проверяет тип объекта XDTO
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - проверяемый объект.
//  Тип        - Строка - имя типа XDTO
// 
// Возвращаемое значение:
//  Булево - Истина, если объект является объектом указанного типа.
//
Функция ПроверитьТип(ОбъектXDTO, Тип) Экспорт
	
	Возврат (ОбъектXDTO.Тип() = ФабрикаXDTO.Тип(ПространствоИмен(), Тип));
	
КонецФункции

// Создает объект ObjectId
//
// Параметры:
//  Тип - Строка - тип объекта XDTO.
//  ИД  - Строка(32) - идентификатор объекта XDTO.
// 
// Возвращаемое значение:
//  ОбъектXDTO - объект типа ObjectId.
//
Функция СоздатьObjectId(Тип, ИД) Экспорт 
	
	objectId = СоздатьОбъект("ObjectId");
	objectId.type = Тип;
	objectId.id = ИД;
	
	Возврат objectId;
	
КонецФункции

// Возвращает сроку пространства имен текущей версии интерфейса.
//
Функция ПространствоИмен() Экспорт
	
	Возврат "http://www.1cfresh.com/sd/api";
	
КонецФункции

// Возвращает ОбъектXDTO типа HTMLObject по переданному форматированному документу
// Параметры:
//   ФорматированныйДокумент - ФорматированныйДокумент - документ, который нужно преобразовать в ОбъектXDTO.
//   ПространствоИмен - строка - пространство имен пакета XDTO.
//
Функция ОбъектHTMLObjectИзФорматированногоДокумента(ФорматированныйДокумент, ПространствоИмен = Неопределено) Экспорт
	
	Тело = Новый Структура;
	Тело.Вставить("ТекстHTML","");
	Тело.Вставить("СтруктураВложений", Новый Структура);
	
    Если ФорматированныйДокумент = Неопределено Тогда
        ФорматированныйДокумент = Новый ФорматированныйДокумент;
    КонецЕсли; 
    
    ФорматированныйДокумент.ПолучитьHTML(Тело.ТекстHTML, Тело.СтруктураВложений);
	
	HTMLОбъектXDTO = СоздатьОбъект("HTMLObject", ПространствоИмен);
	HTMLОбъектXDTO.htmlText = Тело.ТекстHTML;
	Для каждого Элемент Из Тело.СтруктураВложений Цикл
		HTMLВложение = СоздатьОбъект("HTMLObjectImage", ПространствоИмен);
		HTMLВложение.name = Элемент.Ключ;
		HTMLВложение.data = Элемент.Значение.ПолучитьДвоичныеДанные(); 
		HTMLОбъектXDTO.images.Добавить(HTMLВложение);
	КонецЦикла;
	
	Возврат HTMLОбъектXDTO;
	
КонецФункции

#КонецОбласти

#Область ОбработкаЗапросов

// Возвращает объекты, доступные для выбора по запросу GetListRequest
//
// Параметры:
//   Сообщение - ОбъектXDTO типа GetListRequest
// Возвращаемое значение:
//   ОбъектXDTO типа GetListResponse
// 
Функция ПолучитьСписокОбъектов(Сообщение)
	
	ТипыОбъектовXDTO = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Сообщение.type, ";", Истина);
	
	Ответ = Неопределено;
	
	Для Каждого ТипОбъектаXDTO Из ТипыОбъектовXDTO Цикл
		
		ИмяТипа = ИмяТипа(НРег(СокрЛП(ТипОбъектаXDTO)));
	
		Если Найти(ИмяТипа, "Перечисление.") Тогда 
			Результат = СписокПеречисления(Сообщение, Ответ, ИмяТипа);
		ИначеЕсли Найти(ИмяТипа, "БизнесПроцесс.") И Найти(ИмяТипа, ".Точки") Тогда 
			Результат = СписокТочекМаршрута(Сообщение, Ответ, ИмяТипа);
		Иначе
			Результат = СписокОбъектов(Сообщение, Ответ, ИмяТипа);
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Если ПроверитьТип(Результат, "Error") Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения перечисления по запросу GetListRequest
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа GetListRequest
// Возвращаемое значение:
//   ОбъектXDTO типа GetListResponse
//
Функция СписокПеречисления(Сообщение, Ответ, ИмяТипа)
	
	Если Ответ = Неопределено Тогда
		Ответ = СоздатьОбъект("GetListResponse");
	КонецЕсли;
	
	ИмяТипа = СтрЗаменить(ИмяТипа, "Перечисление.", "");
	
	Отбор = Новый Структура;
	Если Сообщение.query <> Неопределено Тогда
		Для Каждого Условие Из Сообщение.query.filter Цикл
			Если ВРег(Условие.property) = ВРег("Name") Тогда
				Отбор.Вставить("Наименование", Условие.value);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления[ИмяТипа].ЗначенияПеречисления Цикл
		
		ОтборПройден = Истина;
		Для Каждого СтрокаОтбора Из Отбор Цикл
			Если СтрокаОтбора.Ключ = "Наименование" Тогда 
				Если Найти(НРег(ЗначениеПеречисления.Синоним), НРег(СтрокаОтбора.Значение)) = 0 Тогда 
					ОтборПройден = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ОтборПройден Тогда 
			Продолжить;
		КонецЕсли;
		
		Элемент = СоздатьОбъект("ListItem");
		Элемент.object = СоздатьОбъект("Object");
		
		Элемент.object.objectId = СоздатьОбъект("ObjectId");
		Элемент.object.objectId.view = ЗначениеПеречисления.Синоним;
		Элемент.object.objectId.id = ЗначениеПеречисления.Имя;
		Элемент.object.objectId.type = Сообщение.type;
		
		Элемент.canHaveChildren = Ложь;
		Элемент.isFolder = Ложь;
		
		Ответ.items.Добавить(Элемент);
	КонецЦикла;
		
	Возврат Ответ;
	
КонецФункции

// Возвращает значения точек маршрута по запросу GetListRequest
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа GetListRequest
// Возвращаемое значение:
//   ОбъектXDTO типа GetListResponse
//
Функция СписокТочекМаршрута(Сообщение, Ответ, ИмяТипа)
	
	Если Ответ = Неопределено Тогда
		Ответ = СоздатьОбъект("GetListResponse");
	КонецЕсли;
	
	ИмяТипа = СтрЗаменить(ИмяТипа, "Перечисление.", "");
    ПроцессМенеджер = ВнешнийИнтерфейсПовтИсп.МенеджерОбъекта(СтрЗаменить(ИмяТипа,".Точки",""));
    
	Отбор = Новый Структура;
	Если Сообщение.query <> Неопределено Тогда
		Для Каждого Условие Из Сообщение.query.filter Цикл
			Если ВРег(Условие.property) = ВРег("Name") Тогда
				Отбор.Вставить("Наименование", Условие.value);
			КонецЕсли;
		КонецЦикла;                                                  
	КонецЕсли;
	
	Для Каждого ТочкаМаршрута Из ПроцессМенеджер.ТочкиМаршрута Цикл
		
		ОтборПройден = Истина;
		Для Каждого СтрокаОтбора Из Отбор Цикл
			Если СтрокаОтбора.Ключ = "Наименование" Тогда 
				Если Найти(НРег(ТочкаМаршрута.НаименованиеЗадачи), НРег(СтрокаОтбора.Значение)) = 0 Тогда 
					ОтборПройден = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ОтборПройден Тогда 
			Продолжить;
		КонецЕсли;
		
		Элемент = СоздатьОбъект("ListItem");
		Элемент.object = СоздатьОбъект("Object");
		
		Элемент.object.objectId = СоздатьОбъект("ObjectId");
		Элемент.object.objectId.id = ТочкаМаршрута.Имя;
		Элемент.object.objectId.type = Сообщение.type;
        Если ТочкаМаршрута.Вид = ВидТочкиМаршрутаБизнесПроцесса.Действие Тогда
    		Элемент.object.objectId.view = ТочкаМаршрута.НаименованиеЗадачи;
        Иначе
    		Элемент.object.objectId.view = Строка(ТочкаМаршрута);
        КонецЕсли;
		
		Элемент.canHaveChildren = Ложь;
		Элемент.isFolder = Ложь;
		
		Ответ.items.Добавить(Элемент);
	КонецЦикла;
		
	Возврат Ответ;
	
КонецФункции

// Возвращает элементы справочника по запросу GetListRequest
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа GetListRequest
//   Ответ - неявно возвращаемый параметр, ОбъектXDTO типа GetListResponse
//   ИмяТипа - полное имя типа
//
// Возвращаемое значение:
//   ОбъектXDTO типа GetListResponse или Error
//
Функция СписокОбъектов(Сообщение, Ответ, ИмяТипа)
	
	Попытка
        
        Если Не ЕстьПравоНаЧтение(ИмяТипа) Тогда                                               
            ВызватьИсключение СтрШаблон(НСтр("ru='Нет доступа на чтение объектов класса %1'"), ТРег(Сообщение.type));
        КонецЕсли;
        
        ТипXDTO = НРег(Сообщение.type);
        
		ВыбранныйЭлемент = Неопределено;
		ВключатьПомеченныеНаУдаление = Ложь;
		
		СвойстваИРеквизиты = ВнешнийИнтерфейсПовтИсп.СоответствиеСвойств(ТипXDTO);
		
		УсловияОтбора = Новый ТаблицаЗначений;
		УсловияОтбора.Колонки.Добавить("Поле");
		УсловияОтбора.Колонки.Добавить("ОператорСравнения");
		УсловияОтбора.Колонки.Добавить("Значение");
        
        // Соберем запрос для получения списка со всеми полями и условиями
        Запрос = Новый Запрос;
        
        // Если есть фильтры, добавим их в текст запроса
		Если Сообщение.query <> Неопределено Тогда 
			
		    // Строка соединений с другими таблицами, если требуется соединение с другими таблицами.
            ТекстСоединений = ""; 
			
			// Соберем условия в таблицу, уточнив операторы сравнения и значения.
			Для Каждого Условие Из Сообщение.query.filter Цикл
				ОператорСравнения = ?(Условие.Установлено("comparisonOperator"), Условие.comparisonOperator, "");
                
                Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Условие.property) Тогда
                    ДинамическийРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор(Условие.property));
                    ДобавитьУсловиеОтбора(УсловияОтбора, "Т.ДополнительныеРеквизиты.Свойство", "=", ДинамическийРеквизит);
					Значение = ?(ТипЗнч(Условие.value) = Тип("ОбъектXDTO"), СсылкаПоObjectId(Условие.value), Условие.value);
                    ДобавитьУсловиеОтбора(УсловияОтбора, "Т.ДополнительныеРеквизиты.Значение", ОператорСравнения, Значение);
                    
                ИначеЕсли ВРег(Условие.property) = ВРег("parent") Тогда
					ДобавитьУсловиеОтбора(УсловияОтбора, "Т.Родитель", ОператорСравнения, СсылкаПоObjectId(Условие.value));
					
				ИначеЕсли ВРег(Условие.property) = ВРег("DynamicAttribute") 
					И (Сообщение.Type = "DynamicAttributeValue" Или Сообщение.Type = "DynamicAttributeValueHierarchy") Тогда
					ДобавитьУсловиеОтбора(УсловияОтбора, "Т.Владелец", ОператорСравнения, СсылкаПоObjectId(Условие.value));
                    
                ИначеЕсли ВРег(Условие.property) = ВРег("objectId.view") Тогда
					ДобавитьУсловиеОтбора(УсловияОтбора, "Т.Наименование", ОператорСравнения, Условие.value);
					
				ИначеЕсли ВРег(Условие.property) = ВРег("SelectedItem") Тогда
					ВыбранныйЭлемент = СсылкаПоObjectId(Условие.value);
					
				ИначеЕсли ВРег(Условие.property) = ВРег("ignoreDeletionMark") Тогда
					ВключатьПомеченныеНаУдаление = Условие.value;
                    
                ИначеЕсли ТипXDTO = НРег("Incident") 
                    И СтрРазделить(НРег("onMe,onMyLine,onMyColleagues,deadline,hasNewInteractions"), ",", Ложь).Найти(НРег(Условие.property)) <> Неопределено Тогда 
                    Если НРег(Условие.property) = НРег("onMe") Тогда
                        ДобавитьУсловиеОтбора(УсловияОтбора, "Т.Исполнитель", "=", Пользователи.АвторизованныйПользователь());
                        ДобавитьУсловиеОтбора(УсловияОтбора, "Т.Состояние", "<>", Перечисления.СостоянияОбращений.Закрыто);
                        
                    ИначеЕсли НРег(Условие.property) = НРег("onMyLine") Тогда
                        Сведения = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
                        ДобавитьУсловиеОтбора(УсловияОтбора, "Т.Исполнитель", "=", Сведения.ЛинияПоддержки);
                        ДобавитьУсловиеОтбора(УсловияОтбора, "Т.Состояние", "<>", Перечисления.СостоянияОбращений.Закрыто);
                    ИначеЕсли НРег(Условие.property) = НРег("onMyColleagues") Тогда
                        Сведения = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
                        ПользователиЛинии = РаботаСПользователями.ПользователиЛинииПоддержки(Сведения.ЛинияПоддержки, Истина);
                        ДобавитьУсловиеОтбора(УсловияОтбора, "Т.Исполнитель", "<>", Пользователи.АвторизованныйПользователь());
                        ДобавитьУсловиеОтбора(УсловияОтбора, "Т.Исполнитель", "IN", ПользователиЛинии);
                        ДобавитьУсловиеОтбора(УсловияОтбора, "Т.Состояние", "<>", Перечисления.СостоянияОбращений.Закрыто);
                    ИначеЕсли НРег(Условие.property) = НРег("deadline") Тогда
                        ДобавитьСоединение(ТекстСоединений, СоединениеСрокиОбращений()); 
                        ДобавитьУсловиеОтбора(УсловияОтбора, "СрокиПоОбращениям.СрокОбработки", ОператорСравнения, Условие.value);
                    ИначеЕсли НРег(Условие.property) = НРег("hasNewInteractions") Тогда
                        ДобавитьСоединение(ТекстСоединений, СоединениеРассмотрение());
                        ДобавитьУсловиеОтбора(УсловияОтбора, "ВЫБОР КОГДА ЕСТЬNULL(Рассмотрение.КоличествоНеРассмотрено, 0) > 0
                                                             |  ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ",
                                                             ОператорСравнения, Условие.value);
                    КонецЕсли;
                    
                ИначеЕсли ТипXDTO = НРег("IncomingEmail") 
                      Или ТипXDTO = НРег("OutgoingEmail") 
                      Или ТипXDTO = НРег("ServiceUserComment") 
                      Или ТипXDTO = НРег("PhoneCall") Тогда
                    Если СтрРазделить(НРег("considered,target"), "," , Ложь).Найти(НРег(Условие.property)) <> Неопределено Тогда
                        ДобавитьСоединение(ТекстСоединений, СоединениеПредметыПапкиВзаимодействий());
                        Если НРег(Условие.property) = НРег("considered") Тогда
                            Если ТипЗнч(Условие.value) = Тип("Строка") Тогда
                                Условие.value = XMLЗначение(Тип("Булево"), Условие.value);
                            КонецЕсли;
                            ДобавитьУсловиеОтбора(УсловияОтбора, "ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, Ложь)",
                                                             ОператорСравнения, Условие.value);
                        ИначеЕсли НРег(Условие.property) = НРег("target") Тогда
                            ДобавитьУсловиеОтбора(УсловияОтбора, "ЕСТЬNULL(ПредметыПапкиВзаимодействий.Предмет, НЕОПРЕДЕЛЕНО)", ОператорСравнения, СсылкаПоObjectId(Условие.value));
                        КонецЕсли;
                    КонецЕсли;
                ИначеЕсли ТипXDTO <> НРег("DynamicAttribute") И СтрРазделить(НРег("services,components,sections"), "," , Ложь).Найти(НРег(Условие.property)) <> Неопределено Тогда
                    ДобавитьУсловиеОтбора(УсловияОтбора, СтрШаблон("Т.%1.%2", 
                            СоответствиеСвойствИТабличныхЧастей().Получить(НРег(Условие.property)),
                            СоответствиеСвойствИКолонок().Получить(НРег(Условие.property))),
                        ОператорСравнения, СсылкаПоObjectId(Условие.value));
                        
                ИначеЕсли ТипXDTO = НРег("SupportLine") И НРег(Условие.property) = НРег("interactionEnabled") Тогда
                    Запрос.УстановитьПараметр("РазрешенныеЛинии", РегистрыСведений.РазрешенныеВзаимодействияЛинийПоддержки.РазрешенныеЛинииПоддержки());
                    Если ТипЗнч(Условие.value) = Тип("Строка") Тогда
                        Условие.value = XMLЗначение(Тип("Булево"), Условие.value);
                    КонецЕсли;
                    ДобавитьУсловиеОтбора(УсловияОтбора, "(Ссылка В (&РазрешенныеЛинии))", ОператорСравнения, Условие.value);
                    
                ИначеЕсли ТипXDTO = НРег("Partner") И НРег(Условие.property) = НРег("interactionEnabled")Тогда
                    Запрос.УстановитьПараметр("РазрешенныеОрганизации", РегистрыСведений.РазрешенныеВзаимодействияЛинийПоддержки.РазрешенныеОбслуживающиеОрганизации());
                    Если ТипЗнч(Условие.value) = Тип("Строка") Тогда
                        Условие.value = XMLЗначение(Тип("Булево"), Условие.value);
                    КонецЕсли;
                    ДобавитьУсловиеОтбора(УсловияОтбора, "(Ссылка В (&РазрешенныеОрганизации))", ОператорСравнения, Условие.value);
                    
                ИначеЕсли ТипXDTO = НРег("User") И СтрРазделить(НРег("supportLine,partner,interactionEnabled"), "," , Ложь).Найти(НРег(Условие.property)) <> Неопределено Тогда
                    ДобавитьСоединение(ТекстСоединений, СоединениеСведенияОПользователях());
                    Если НРег(Условие.property) = НРег("supportLine") Тогда
                        ДобавитьУсловиеОтбора(УсловияОтбора, "Сведения.ЛинияПоддержки", ОператорСравнения, СсылкаПоObjectId(Условие.value));
                    ИначеЕсли НРег(Условие.property) = НРег("partner") Тогда
                        ДобавитьУсловиеОтбора(УсловияОтбора, "Сведения.ОбслуживающаяОрганизация", ОператорСравнения, СсылкаПоObjectId(Условие.value));
                    ИначеЕсли НРег(Условие.property) = НРег("interactionEnabled") Тогда
                        // Пользователь может взаимодействовать только с сотрудниками своей линии
                        Сведения = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
                        Если Сведения.ОбслуживающаяОрганизация <> Справочники.ОбслуживающиеОрганизации.СлужбаПоддержки Тогда
                            Запрос.УстановитьПараметр("ОрганизацияПользователя", Сведения.ОбслуживающаяОрганизация);
                            Если ТипЗнч(Условие.value) = Тип("Строка") Тогда
                                Условие.value = XMLЗначение(Тип("Булево"), Условие.value);
                            КонецЕсли;
                            ДобавитьУсловиеОтбора(УсловияОтбора, "(Сведения.ОбслуживающаяОрганизация = &ОрганизацияПользователя)", ОператорСравнения, Условие.value);
                        КонецЕсли;
                    КонецЕсли;
                    
                ИначеЕсли ТипXDTO = НРег("Subscriber") И НРег(Условие.property) = НРег("serviceUser")Тогда
                    ДобавитьСоединение(ТекстСоединений, СоединениеПользователиАбонентов());
                    ДобавитьУсловиеОтбора(УсловияОтбора, "ПользователиАбонентов.ПользовательСервиса", ОператорСравнения, СсылкаПоObjectId(Условие.value));
                    
                ИначеЕсли ТипXDTO = НРег("Task") И НРег(Условие.property) = НРег("myTask") Тогда
                    ДобавитьСоединение(ТекстСоединений, СоединениеЗадачиПоИсполнителю());
	                Запрос.УстановитьПараметр("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
                    Если ТипЗнч(Условие.value) = Тип("Строка") Тогда
                        Условие.value = XMLЗначение(Тип("Булево"), Условие.value);
                    КонецЕсли;
                    ДобавитьУсловиеОтбора(УсловияОтбора, "(Не ЗадачиПоИсполнителю.Ссылка Есть NULL)", ОператорСравнения, Условие.value);
                    
                ИначеЕсли СвойстваИРеквизиты.Свойство(Условие.property) Тогда
					Значение = ?(ТипЗнч(Условие.value) = Тип("ОбъектXDTO"), СсылкаПоObjectId(Условие.value), Условие.value);
					ДобавитьУсловиеОтбора(УсловияОтбора, "Т." + СвойстваИРеквизиты[Условие.property], ОператорСравнения, Значение);
                    
                ИначеЕсли ТипXDTO = НРег("DynamicAttribute") И НРег(Условие.property) = НРег("usedIn") Тогда
                    Запрос.УстановитьПараметр("Набор", ВнешнийИнтерфейсПовтИсп.НаборДополнительныхРевизитовПоТипуXDTO(Условие.value));
                    ДобавитьУсловиеОтбора(УсловияОтбора, "ВЫБОР КОГДА Т.Ссылка В (ВЫБРАТЬ Наборы.Свойство
                            |ИЗ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Наборы
                            |ГДЕ Наборы.Ссылка = &Набор) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ", ОператорСравнения, Истина);
                ИначеЕсли ТипXDTO = НРег("DynamicAttribute") И НРег(Условие.property) = НРег("services") Тогда
                    Запрос.УстановитьПараметр("Сервис", СсылкаПоObjectId(Условие.value));
                    ДобавитьУсловиеОтбора(УсловияОтбора, "ВЫБОР КОГДА Т.Ссылка В (ВЫБРАТЬ Т1.ДополнительныйРеквизит
                            |ИЗ РегистрСведений.ДополнительныеРеквизитыОбъектовПоСервисам КАК Т1
                            |ГДЕ Т1.Сервис = &Сервис) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ", ОператорСравнения, Истина);
                Иначе
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестное поле в условии отбора: %1.'"), Условие.property);
                    
                КонецЕсли;
				
			КонецЦикла;
			
			ПредельноеКоличествоВыбираемыхОбъектов = ?(Сообщение.query.Установлено("limit"), Сообщение.query.limit, 0);
            НаборКолонок = МассивИзСпискаXDTO(Сообщение.query.columns);
			
		Иначе
			ПредельноеКоличествоВыбираемыхОбъектов = 0;
			НаборКолонок = Новый Массив;
			
		КонецЕсли;
		
		ЭтоСправочник = Найти(ИмяТипа, "Справочник.") <> 0;
        ЭтоДокумент = Найти(ИмяТипа, "Документ.") <> 0;

        Если ЭтоСправочник Тогда 
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяТипа);
			Иерархический = ОбъектМетаданных.Иерархический;
			ВидИерархииСправочника = ОбъектМетаданных.ВидИерархии;
		Иначе
			Иерархический = Ложь;
			ВидИерархииСправочника = Неопределено;
		КонецЕсли;
		
		Если Не Иерархический Тогда 
			ВыбранныйЭлемент = Неопределено;
		КонецЕсли;
		
		Если ЭтоСправочник Тогда
			ПолеНаименования = "Т.Наименование";
			ПолеОтбора = "Т.Наименование";
		Иначе
			ПолеНаименования = "Представление(Т.Ссылка)";
			ПолеОтбора = "Т.Номер";
		КонецЕсли;
		
		// выбираем на один объект больше, чем затребовали
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ?(ЗначениеЗаполнено(ПредельноеКоличествоВыбираемыхОбъектов),
			" ПЕРВЫЕ " + Формат(ПредельноеКоличествоВыбираемыхОбъектов + 1, "ЧГ=0"), "") + "
			|	" + ПолеНаименования + " КАК Наименование,
			|	Т.Ссылка,
			|	Т.ПометкаУдаления";
            
        Если НаборКолонок.Количество() = 1 И НаборКолонок[0] = "*" Тогда
            ДоступныеСвойства = ВнешнийИнтерфейсПовтИсп.СоответствиеСвойств(ТипXDTO);
            НаборКолонок = Новый Массив; 
            Для каждого Свойство Из ДоступныеСвойства Цикл
                НаборКолонок.Добавить(Свойство.Ключ);    
            КонецЦикла; 
            ОсобыеСвойства = Новый Массив;
            Если ТипXDTO = НРег("Incident") Тогда
                ОсобыеСвойства = СтрРазделить(НРег("deadline,hasNewInteractions"), ",", Ложь);
            ИначеЕсли ТипXDTO = НРег("User") Тогда   
                ОсобыеСвойства = СтрРазделить(НРег("supportLine,partner,interactionEnabled"), ",", Ложь);
            ИначеЕсли ТипXDTO = НРег("SupportLine") Тогда
                ОсобыеСвойства = СтрРазделить(НРег("interactionEnabled"), ",", Ложь);
            ИначеЕсли ТипXDTO = НРег("Partner") Тогда
                ОсобыеСвойства = СтрРазделить(НРег("interactionEnabled"), ",", Ложь);
            ИначеЕсли ТипXDTO = НРег("ServiceUser") Тогда
                ОсобыеСвойства = СтрРазделить(НРег("phone"), ",", Ложь);
            ИначеЕсли ТипXDTO = НРег("Order") Тогда
                ОсобыеСвойства = СтрРазделить(НРег("performer,reviewer"), ",", Ложь);
            ИначеЕсли ТипXDTO = НРег("Task") Тогда
                ОсобыеСвойства = СтрРазделить(НРег("performer,myTask"), ",", Ложь);
            ИначеЕсли ТипXDTO = НРег("DynamicAttribute") Тогда
                ОсобыеСвойства = СтрРазделить(НРег("usedIn,valueTypes,services"), ",", Ложь);
            ИначеЕсли ТипXDTO = НРег("IncomingEmail") 
                  Или ТипXDTO = НРег("OutgoingEmail") 
                  Или ТипXDTO = НРег("ServiceUserComment") 
                  Или ТипXDTO = НРег("PhoneCall") Тогда
                ОсобыеСвойства = СтрРазделить(НРег("considered,target"), ",", Ложь);
            КонецЕсли;
            Для каждого Свойство Из ОсобыеСвойства Цикл
                НаборКолонок.Добавить(Свойство);    
            КонецЦикла; 
        КонецЕсли; 
        
		Для каждого ИмяСвойства из НаборКолонок Цикл
            // Специальные поля по типам объектов для удобства использования API
            Если ТипXDTO = НРег("Incident") 
               И СтрРазделить(НРег("deadline,hasNewInteractions"), ",", Ложь).Найти(НРег(ИмяСвойства)) <> Неопределено Тогда
                Если НРег(ИмяСвойства) = НРег("deadline") Тогда
                    ДобавитьСоединение(ТекстСоединений, СоединениеСрокиОбращений());
                    Запрос.Текст = Запрос.Текст + ",
                        |	СрокиПоОбращениям.СрокОбработки КАК  " + ИмяСвойства;
                    Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяУниверсальнаяДата());
                    Запрос.УстановитьПараметр("СостояниеЗакрыто", Перечисления.СостоянияОбращений.Закрыто);
                ИначеЕсли НРег(ИмяСвойства) = НРег("hasNewInteractions") Тогда
                    ДобавитьСоединение(ТекстСоединений, СоединениеРассмотрение());
   				    Запрос.Текст = Запрос.Текст + ",
    				    |   ВЫБОР КОГДА ЕСТЬNULL(Рассмотрение.КоличествоНеРассмотрено, 0) > 0
                        |     ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК  " + ИмяСвойства;
                КонецЕсли;
            ИначеЕсли (ТипXDTO = НРег("IncomingEmail")
                  Или ТипXDTO = НРег("OutgoingEmail") 
                  Или ТипXDTO = НРег("ServiceUserComment") 
                  Или ТипXDTO = НРег("PhoneCall"))
                    И СтрРазделить(НРег("considered,target"), ",", Ложь).Найти(НРег(ИмяСвойства)) <> Неопределено Тогда
                ДобавитьСоединение(ТекстСоединений, СоединениеПредметыПапкиВзаимодействий());
                Если НРег(ИмяСвойства) = НРег("considered") Тогда
                    Запрос.Текст = Запрос.Текст + ",
                        |	ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ) КАК " + ИмяСвойства;
                ИначеЕсли НРег(ИмяСвойства) = НРег("target") Тогда
                    Запрос.Текст = Запрос.Текст + ",
                       |	ЕСТЬNULL(ПредметыПапкиВзаимодействий.Предмет, НЕОПРЕДЕЛЕНО) КАК " + ИмяСвойства;
                КонецЕсли;
            ИначеЕсли ТипXDTO = НРег("User") Тогда
                ДобавитьСоединение(ТекстСоединений, СоединениеСведенияОПользователях());
                Если НРег(ИмяСвойства) = НРег("supportLine") Тогда
    				Запрос.Текст = Запрос.Текст + ",
    				|	Сведения.ЛинияПоддержки КАК  " + ИмяСвойства;
                ИначеЕсли НРег(ИмяСвойства) = НРег("partner") Тогда
    				Запрос.Текст = Запрос.Текст + ",
    				|	Сведения.ОбслуживающаяОрганизация КАК " + ИмяСвойства;
                ИначеЕсли НРег(ИмяСвойства) = НРег("interactionEnabled") Тогда
                    Сведения = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
                    Если Сведения.ОбслуживающаяОрганизация = Справочники.ОбслуживающиеОрганизации.СлужбаПоддержки Тогда
        				Запрос.Текст = Запрос.Текст + ",
        				|	Истина КАК  " + ИмяСвойства;
                    Иначе
                        Запрос.УстановитьПараметр("ОрганизацияПользователя", Сведения.ОбслуживающаяОрганизация);
        				Запрос.Текст = Запрос.Текст + ",
        				|	Сведения.ОбслуживающаяОрганизация = &ОрганизацияПользователя КАК  " + ИмяСвойства;
                    КонецЕсли;
                КонецЕсли;
            ИначеЕсли ТипXDTO = НРег("SupportLine") И НРег(ИмяСвойства) = НРег("interactionEnabled") Тогда
                Если Не Запрос.Параметры.Свойство("РазрешенныеЛинии") Тогда
                    Запрос.УстановитьПараметр("РазрешенныеЛинии", РегистрыСведений.РазрешенныеВзаимодействияЛинийПоддержки.РазрешенныеЛинииПоддержки());
                КонецЕсли;
                Запрос.Текст = Запрос.Текст + ",
                    |	Ссылка В (&РазрешенныеЛинии) КАК "+ ИмяСвойства;
            ИначеЕсли ТипXDTO = НРег("Partner") И НРег(ИмяСвойства) = НРег("interactionEnabled") Тогда
                Если Не Запрос.Параметры.Свойство("РазрешенныеОрганизации") Тогда
                    Запрос.УстановитьПараметр("РазрешенныеОрганизации", 
                        РегистрыСведений.РазрешенныеВзаимодействияЛинийПоддержки.РазрешенныеОбслуживающиеОрганизации());
                КонецЕсли;
                Запрос.Текст = Запрос.Текст + ",
                    |	Ссылка В (&РазрешенныеОрганизации) КАК "+ ИмяСвойства;
            ИначеЕсли ТипXDTO = НРег("ServiceUser") И НРег(ИмяСвойства) = НРег("phone") Тогда
                ДобавитьСоединение(ТекстСоединений, СоединениеТелефонПользователяСервиса());
	            Запрос.УстановитьПараметр("ТелефонПользователя", Справочники.ВидыКонтактнойИнформации.ТелефонПользователяСервиса);
                Запрос.Текст = Запрос.Текст + ",
		            |	КИТелефон.Представление КАК "+ ИмяСвойства;
            ИначеЕсли ТипXDTO = НРег("Task") И СтрРазделить(НРег("performer,myTask"), ",", Ложь).Найти(НРег(ИмяСвойства)) <> Неопределено Тогда
                Если НРег(ИмяСвойства) = НРег("myTask") Тогда
                    ДобавитьСоединение(ТекстСоединений, СоединениеЗадачиПоИсполнителю());
	                Запрос.УстановитьПараметр("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
                    Запрос.Текст = Запрос.Текст + ",
    		            |	НЕ ЗадачиПоИсполнителю.Ссылка Есть NULL КАК "+ ИмяСвойства;
                ИначеЕсли НРег(ИмяСвойства) = НРег("performer") Тогда
                    Запрос.Текст = Запрос.Текст + СтрШаблон(",
    		            |	Т.Исполнитель КАК %1_user,
    		            |	Т.РольИсполнителя КАК %1_role,
    		            |	Т.ОсновнойОбъектАдресации КАК %1_mainAddressingObject,
    		            |	Т.ДополнительныйОбъектАдресации КАК %1_secondaryAddressingObject", ИмяСвойства);
                КонецЕсли;
            ИначеЕсли ТипXDTO = НРег("Order") И СтрРазделить(НРег("performer,reviewer"), ",", Ложь).Найти(НРег(ИмяСвойства)) <> Неопределено Тогда
                Если НРег(ИмяСвойства) = НРег("performer") Тогда
                    Запрос.Текст = Запрос.Текст + СтрШаблон(",
        		            |	ВЫРАЗИТЬ(Т.Исполнитель КАК Справочник.Пользователи) %1_user,
        		            |	ВЫРАЗИТЬ(Т.Исполнитель КАК Справочник.РолиИсполнителей) %1_role,
        		            |	Т.ОсновнойОбъектАдресации КАК %1_mainAddressingObject,
        		            |	Т.ДополнительныйОбъектАдресации КАК %1_secondaryAddressingObject", ИмяСвойства);
                ИначеЕсли НРег(ИмяСвойства) = НРег("reviewer") Тогда
                    Запрос.Текст = Запрос.Текст + СтрШаблон(",
        		            |	ВЫРАЗИТЬ(Т.Проверяющий КАК Справочник.Пользователи) КАК %1_user,
        		            |	ВЫРАЗИТЬ(Т.Проверяющий КАК Справочник.РолиИсполнителей) КАК %1_role,
        		            |	Т.ОсновнойОбъектАдресацииПроверяющего КАК %1_mainAddressingObject,
        		            |	Т.ДополнительныйОбъектАдресацииПроверяющего КАК %1_secondaryAddressingObject", ИмяСвойства);
                КонецЕсли;
            ИначеЕсли ТипXDTO = НРег("DynamicAttribute") 
                И (НРег(ИмяСвойства) = НРег("valueTypes") Или НРег(ИмяСвойства) = НРег("usedIn") Или НРег(ИмяСвойства) = НРег("services")) Тогда
                Продолжить;
            // Поля по реквизитам объектов
            ИначеЕсли СвойстваИРеквизиты.Свойство(ИмяСвойства) Тогда
				ИмяРеквизита = СвойстваИРеквизиты[ИмяСвойства];
				Запрос.Текст = Запрос.Текст + ",
				|	Т." + ИмяРеквизита + " КАК " + ИмяСвойства;
            Иначе
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестное имя свойства: %1.'"), ИмяСвойства);
            КонецЕсли                                                 
        КонецЦикла;
			
		Если Иерархический Тогда
			// Для иерархических справочников условие на родителя необходимо, чтобы получить
			// группы и элементы нужного уровня.
			Если УсловияОтбора.Найти("Т.Родитель", "Поле") = Неопределено И ВыбранныйЭлемент <> Неопределено Тогда
				ИмяВида = Сред(ИмяТипа, СтрДлина("Справочник.") + 1);
                ДобавитьУсловиеОтбора(УсловияОтбора, "Т.Родитель", "=", Справочники[ИмяВида].ПустаяСсылка());
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ", 
				|	Т.Родитель";
			
			Если ВидИерархииСправочника = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				Запрос.Текст = Запрос.Текст + ", 
					|	Т.ЭтоГруппа";
			КонецЕсли;
		КонецЕсли;	   
		
		Запрос.Текст = Запрос.Текст + Символы.ПС + "ИЗ" + Символы.ПС + Символы.Таб + ИмяТипа + " КАК Т
    		|%ТекстСоединений%
    		|ГДЕ 
    		|	" + ?(ВключатьПомеченныеНаУдаление, "ИСТИНА", "НЕ Т.ПометкаУдаления");
		
		Для каждого УсловиеОтбора из УсловияОтбора Цикл
			
			Если УсловиеОтбора.Поле = "Т.Родитель" Тогда 
				Если Не Иерархический Тогда
					Продолжить;
				КонецЕсли;
				ИмяПараметра = "Родитель";
			Иначе
				ИмяПараметра = "Параметр" + Формат(УсловияОтбора.Индекс(УсловиеОтбора), "ЧГ=0");
			КонецЕсли;
			
			ИмяСрезаСостояний = "СрезСостояний" + Формат(УсловияОтбора.Индекс(УсловиеОтбора), "ЧГ=0");
			ОператорСравнения = УсловиеОтбора.ОператорСравнения;
			Значение = УсловиеОтбора.Значение;

			// Определим оператор сравнения по умолчанию.
			Если УсловиеОтбора.Поле = "Т.Наименование" Тогда 
				Если Не ЗначениеЗаполнено(ОператорСравнения) Или ОператорСравнения = "LIKE" Тогда
					ОператорСравнения = "LIKE";
					Значение = "%" + Значение + "%";
				КонецЕсли;
			ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Или ТипЗнч(Значение) = Тип("СписокЗначений") Тогда 
				Если Не ЗначениеЗаполнено(ОператорСравнения) Тогда
					ОператорСравнения = "IN";
				КонецЕсли;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОператорСравнения) Тогда
				ОператорСравнения = "=";
			КонецЕсли;
			Если ОператорСравнения = "LIKE" Тогда
				Запрос.Текст = Запрос.Текст + " И " + УсловиеОтбора.Поле + " ПОДОБНО &" + ИмяПараметра + "
    				|";
			ИначеЕсли ОператорСравнения = "IN" Тогда
				Запрос.Текст = Запрос.Текст + " И " + УсловиеОтбора.Поле + " В (&" + ИмяПараметра + ")
    				|";
			ИначеЕсли ОператорСравнения = "IN HIERARCHY" Тогда
				Запрос.Текст = Запрос.Текст + " И " + УсловиеОтбора.Поле + " В ИЕРАРХИИ(&" + ИмяПараметра + ")
    				|";
			Иначе
				Запрос.Текст = Запрос.Текст + " И " + УсловиеОтбора.Поле + " " + ОператорСравнения + " &" + ИмяПараметра + "
    				|";
			КонецЕсли;
			Запрос.УстановитьПараметр(ИмяПараметра, Значение);
		КонецЦикла;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстСоединений%", ТекстСоединений);
		
		Если ЭтоСправочник Тогда
			Если Иерархический и ВидИерархииСправочника = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				Запрос.Текст = Запрос.Текст + "
					|УПОРЯДОЧИТЬ ПО 
					|	Т.ЭтоГруппа УБЫВ, Наименование";
			Иначе
				Запрос.Текст = Запрос.Текст + "
					|УПОРЯДОЧИТЬ ПО 
					|	Т.Наименование";
            КонецЕсли;
        ИначеЕсли ЭтоДокумент Тогда
            Запрос.Текст = Запрос.Текст + "
                |УПОРЯДОЧИТЬ ПО 
                |	Т.Дата";
		КонецЕсли;
		
		Если Ответ = Неопределено Тогда
			Ответ = СоздатьОбъект("GetListResponse");
		КонецЕсли;
		
		Если ВыбранныйЭлемент = Неопределено Тогда
			ЗаполнитьОтветИзРезультатаЗапроса(Ответ, Запрос, ПредельноеКоличествоВыбираемыхОбъектов, НаборКолонок, 
				ТипXDTO, ЭтоСправочник, Иерархический, ВидИерархииСправочника);
		Иначе
		
			// Если есть SelectedItem и справочник иерархический - сперва строим до корня списка, 
			// затем для каждого уровня получаем список и заполняем массив возврата.
			// Вернем список списков - соседние ветки каждого уровня от текущего до самого верхнего.
			
			МассивРодителей = Новый Массив;
			ТекущийЭлемент = ВыбранныйЭлемент;
			
			Пока НЕ ТекущийЭлемент.Родитель.Пустая() Цикл
				ТекущийЭлемент = ТекущийЭлемент.Родитель;
				МассивРодителей.Добавить(ТекущийЭлемент);
			КонецЦикла;
			
			// запрос без Родителя - для корневых папок
			ЗаполнитьОтветИзРезультатаЗапроса(Ответ, Запрос, ПредельноеКоличествоВыбираемыхОбъектов, НаборКолонок, 
				ТипXDTO, ЭтоСправочник, Иерархический, ВидИерархииСправочника);
			
			Для Каждого ТекущийЭлемент Из МассивРодителей Цикл
				Запрос.УстановитьПараметр("Родитель", ТекущийЭлемент);
				ЗаполнитьОтветИзРезультатаЗапроса(Ответ, Запрос, ПредельноеКоличествоВыбираемыхОбъектов, НаборКолонок, 
					ТипXDTO, ЭтоСправочник, Иерархический, ВидИерархииСправочника);
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
        
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'списка'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Возвращает элементы справочника по запросу GetSubListRequest
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа GetSubListRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа GetSubListResponse или Error
//
Функция СписокПодчиненныхОбъектов(Сообщение)
	
    Если НРег(Сообщение.type) = НРег("File") Тогда
        Возврат СписокФайлов(Сообщение);
			
    ИначеЕсли ЭтоТипВзаимодействия(Сообщение.type) Или НРег(Сообщение.type) = НРег("Interaction") Тогда
        Возврат СписокВзаимодействий(Сообщение);
          
    ИначеЕсли НРег(Сообщение.type) = НРег("ActualWork") Тогда
        Возврат СписокФактическихТрудозатрат(Сообщение);
        
    КонецЕсли;
    
    Событие = НСтр("ru = 'Неизвестное сообщение'");
    Возврат ОбработкаИсключения(Событие, Строка(Сообщение.Тип())); 
	
КонецФункции
 
// Получает объекты по запросу GetRequest
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа GetRequest - запрос на получение.
// Возвращаемое значение:
//   ОбъектXDTO типа GetResponse или Error
// 
Функция ПолучитьОбъекты(Сообщение)
	
	Попытка 
		
		Ответ = СоздатьОбъект("GetResponse");
        ЗаполняемыеСвойства = МассивИзСпискаXDTO(Сообщение.columns);
        
        Для Каждого ОбъектИд Из Сообщение.objectIds Цикл
			Если НРег(ОбъектИд.type) = НРег("Incident") Тогда
				Объект = ПолучитьОбращение(ОбъектИд, ЗаполняемыеСвойства);
				
			ИначеЕсли НРег(ОбъектИд.type) = НРег("Consultation") Тогда
				Объект = ПолучитьКонсультацию(ОбъектИд, ЗаполняемыеСвойства);
				
			ИначеЕсли НРег(ОбъектИд.type) = НРег("Problem") Тогда
				Объект = ПолучитьОшибку(ОбъектИд, ЗаполняемыеСвойства);
				
			ИначеЕсли НРег(ОбъектИд.type) = НРег("Suggestion") Тогда
				Объект = ПолучитьПожелание(ОбъектИд, ЗаполняемыеСвойства);
				
			ИначеЕсли НРег(ОбъектИд.type) = НРег("File") Тогда
				Объект = ПолучитьКарточкуФайла(ОбъектИд.id, ЗаполняемыеСвойства);
				
			ИначеЕсли НРег(ОбъектИд.type) = НРег("PhoneCall") Тогда
				Объект = ПолучитьТелефонныйЗвонок(ОбъектИд, ЗаполняемыеСвойства);
				
			ИначеЕсли НРег(ОбъектИд.type) = НРег("ServiceUserComment") Тогда
				Объект = ПолучитьКомментарийПользователя(ОбъектИд, ЗаполняемыеСвойства);
				
			ИначеЕсли НРег(ОбъектИд.type) = НРег("IncomingEMail") Тогда
				Объект = ПолучитьВходящееПисьмо(ОбъектИд, ЗаполняемыеСвойства);
				
			ИначеЕсли НРег(ОбъектИд.type) = НРег("OutgoingEMail") Тогда
				Объект = ПолучитьИсходящееПисьмо(ОбъектИд, ЗаполняемыеСвойства);
                
            ИначеЕсли НРег(ОбъектИд.type) = НРег("User") Тогда
				Объект = ПолучитьПользователя(ОбъектИд, ЗаполняемыеСвойства);
                
            ИначеЕсли НРег(ОбъектИд.type) = НРег("Subscriber") Тогда
				Объект = ПолучитьАбонента(ОбъектИд, ЗаполняемыеСвойства);
                
            ИначеЕсли НРег(ОбъектИд.type) = НРег("ServiceUser") Тогда
				Объект = ПолучитьПользователяСервиса(ОбъектИд, ЗаполняемыеСвойства);
                
            ИначеЕсли НРег(ОбъектИд.type) = НРег("SupportLine") Тогда
				Объект = ПолучитьЛиниюПоддержки(ОбъектИд, ЗаполняемыеСвойства);
				
            ИначеЕсли НРег(ОбъектИд.type) = НРег("Partner") Тогда
				Объект = ПолучитьОбслуживающуюОрганизацию(ОбъектИд, ЗаполняемыеСвойства);
                
            ИначеЕсли НРег(ОбъектИд.type) = НРег("Order") Тогда
				Объект = ПолучитьПоручение(ОбъектИд, ЗаполняемыеСвойства);
                
            ИначеЕсли НРег(ОбъектИд.type) = НРег("Task") Тогда
				Объект = ПолучитьЗадачу(ОбъектИд, ЗаполняемыеСвойства);

            ИначеЕсли НРег(ОбъектИд.type) = НРег("DynamicAttribute") Тогда
				Объект = ПолучитьДинамическийРеквизит(ОбъектИд, ЗаполняемыеСвойства);
                
            Иначе
				Объект = ПолучитьБазовыйОбъект(ОбъектИД, ЗаполняемыеСвойства);
				
			КонецЕсли;
			
			Если ПроверитьТип(Объект, "Error") Тогда 
				Возврат Объект
			КонецЕсли;
			
			Ответ.records.Добавить(Объект);
			
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'объектов'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции	

// Получает новый объект XDTO заданного типа
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа GetNewRequest - запрос на создание.
// Возвращаемое значение:
//   ОбъектXDTO заданного типа или Error
// 
Функция НовыйОбъект(Сообщение)
	
    Ответ = СоздатьОбъект("GetNewResponse");
    
    ЗаполняемыеСвойства = МассивИзСпискаXDTO(Сообщение.columns);
    
	Если НРег(Сообщение.type) = НРег("Incident") Тогда 
        ОбъектXDTO = НовоеОбращение(ЗаполняемыеСвойства);
		
	ИначеЕсли НРег(Сообщение.type) = НРег("Consultation") Тогда 
		ОбъектXDTO  = НоваяКонсультацию(ЗаполняемыеСвойства);
		
	ИначеЕсли НРег(Сообщение.type) = НРег("Suggestion") Тогда 
		ОбъектXDTO  = НовоеПожелание(ЗаполняемыеСвойства);
        
	Иначе
        Событие = СобытиеОшибкаПриСоздании(СтрШаблон(НСтр("ru = 'объекта типа %1'"),Сообщение.type));
        Описание = НСтр("ru = 'Операции с указанным типом объектов не поддерживаются в данной версии.'");
        Возврат ОбработкаИсключения(Событие, Описание); 
        
    КонецЕсли;
	
    Если ПроверитьТип(ОбъектXDTO, "Error") Тогда
        Возврат ОбъектXDTO;
    КонецЕсли;
    
    Ответ.record  = ОбъектXDTO;
    
    Возврат Ответ;
	
КонецФункции

// Получает новый подчиненный объект XDTO заданного типа
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа GetNewSubRequest - запрос на создание.
// Возвращаемое значение:
//   ОбъектXDTO - значение типа GetNewSubResponse или Error
// 
Функция НовыйПодчиненныйОбъект(Сообщение)
    
    Ответ = СоздатьОбъект("GetNewSubResponse");
    
    Если ЭтоТипВзаимодействия(Сообщение.type) Или НРег(Сообщение.type) = НРег("Interaction") Тогда   
        Объект = НовоеВзаимодействие(Сообщение);
        
    ИначеЕсли НРег(Сообщение.type) = НРег("ActualWork") Тогда
        Объект =  НоваяЗаписьФактическихТрудозатрат(Сообщение);
        
    ИначеЕсли НРег(Сообщение.type) = НРег("Order") Тогда
        Объект =  НовоеПоручение(Сообщение, Сообщение.targetId);
        
    Иначе
        Событие = НСтр("ru = 'Неизвестный тип подчиненного объекта'");
        Возврат ОбработкаИсключения(Событие, Сообщение.type); 
        
    КонецЕсли;
    
    Если ПроверитьТип(Объект, "Error") Тогда
        Ответ = Объект;
    Иначе
        Ответ.record = Объект;
    КонецЕсли;
    
    Возврат Ответ;
    
КонецФункции

// Изменяет объекты по данным объектов XDTO и возвращает измененные объекты
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа PutRequest - запрос на запись.
// Возвращаемое значение:
//   ОбъектXDTO типа PutResponse или Error
//
Функция ИзменитьОбъекты(Сообщение)
	
	Ответ = СоздатьОбъект("PutResponse");
	
	Для Каждого ОбъектXDTO Из Сообщение.objects Цикл
		
		Если ПроверитьТип(ОбъектXDTO, "Incident") Тогда
			ОбъектXDTO = ИзменитьОбращение(ОбъектXDTO);
			
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "Consultation") Тогда
			ОбъектXDTO = ИзменитьКонсультацию(ОбъектXDTO);
			
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "Suggestion") Тогда
			ОбъектXDTO = ИзменитьПожелание(ОбъектXDTO);
			
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "PhoneCall") Тогда
			ОбъектXDTO = ИзменитьТелефонныйЗвонок(ОбъектXDTO, Сообщение.action);
            
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "OutgoingEMail") Тогда
			ОбъектXDTO = ИзменитьИсходящееПисьмо(ОбъектXDTO, Сообщение.action);
            
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "IncomingEMail") Тогда
			ОбъектXDTO = ИзменитьВходящееПисьмо(ОбъектXDTO, Сообщение.action);
            
		ИначеЕсли ПроверитьТип(ОбъектXDTO, "ServiceUserComment") Тогда
			ОбъектXDTO = ИзменитьКомментарийПользователя(ОбъектXDTO, Сообщение.action);
            
        ИначеЕсли ПроверитьТип(ОбъектXDTO, "Task") Тогда
			ОбъектXDTO = ИзменитьЗадачу(ОбъектXDTO);
            
        Иначе
            Событие = СобытиеОшибкаПриИзменении();
            Описание = СтрШаблон(НСтр("ru='Изменение объектов класса %1 не поддерживается'"), Строка(ОбъектXDTO.Тип().Имя));
            Возврат ОбработкаИсключения(Событие, Описание); 
    		
        КонецЕсли;
		
		Если ПроверитьТип(ОбъектXDTO, "Error") Тогда 
			Возврат ОбъектXDTO;
		КонецЕсли;
		
		Ответ.objects.Добавить(ОбъектXDTO);
		
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Добавляет объект по указанному типу объекта XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа PostRequest - запрос на добавление.
// Возвращаемое значение:
//   ОбъектXDTO типа PostResponse или Error
// 
Функция ДобавитьОбъекты(Сообщение)
	
	Ответ = СоздатьОбъект("PostResponse");
	
    Для каждого НовыйОбъектXDTO Из Сообщение.objects Цикл
        
        Если ПроверитьТип(НовыйОбъектXDTO, "Incident") Тогда
    		ОбъектXDTO = ДобавитьОбращение(НовыйОбъектXDTO);
    		
    	ИначеЕсли ПроверитьТип(НовыйОбъектXDTO, "Consultation") Тогда
    		ОбъектXDTO = ДобавитьКонсультацию(НовыйОбъектXDTO);
    		
    	ИначеЕсли ПроверитьТип(НовыйОбъектXDTO, "Suggestion") Тогда
    		ОбъектXDTO = ДобавитьПожелание(НовыйОбъектXDTO);
    		
    	ИначеЕсли ПроверитьТип(НовыйОбъектXDTO, "PhoneCall") Тогда
    		ОбъектXDTO = ДобавитьТелефонныйЗвонок(НовыйОбъектXDTO);
            
    	ИначеЕсли ПроверитьТип(НовыйОбъектXDTO, "OutgoingEMail") Тогда
    		ОбъектXDTO = ДобавитьИсходящееПисьмо(НовыйОбъектXDTO);
                        
        ИначеЕсли ПроверитьТип(НовыйОбъектXDTO, "Order") Тогда
    		ОбъектXDTO = ДобавитьПоручение(НовыйОбъектXDTO, Сообщение.action);
            
        Иначе
    		
            Событие = СтрШаблон(НСтр("ru = 'Добавление объектов типа %1 не поддерживается'"), НовыйОбъектXDTO.Тип().Имя);
            Описание = Строка(НовыйОбъектXDTO.Тип());
            Возврат ОбработкаИсключения(Событие, Описание); 
    		
    	КонецЕсли;
        
        Если ПроверитьТип(ОбъектXDTO, "Error") Тогда 
    		Возврат ОбъектXDTO
    	КонецЕсли;
        
        Ответ.objects.Добавить(ОбъектXDTO);
    	
    КонецЦикла; 
	
    Возврат Ответ;
	
КонецФункции

// Добавляет подсиненный объект по указанному типу объекта XDTO
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа PostSubRequest - запрос на добавление.
// Возвращаемое значение:
//   ОбъектXDTO типа PostSubResponse или Error
// 
Функция ДобавитьПодчиненныйОбъект(Сообщение)
    
    Ответ = СоздатьОбъект("PostSubResponse");
    
    Если ПроверитьТип(Сообщение.record, "File") Тогда
        Объект = ДобавитьФайл(Сообщение);
    ИначеЕсли ПроверитьТип(Сообщение.record, "ActualWork") Тогда
        Объект = ДобавитьЗаписьФактическихТрудозатрат(Сообщение);
    ИначеЕсли ПроверитьТип(Сообщение.record, "IncidentComment") Или ПроверитьТип(Сообщение.record, "ArticleComment") Тогда
        Объект = ДобавитьКомментарий(Сообщение);
    Иначе
        Событие = НСтр("ru = 'Неизвестный тип подчиненного объекта'");
        Возврат ОбработкаИсключения(Событие, Сообщение.type); 
    КонецЕсли;    
	
    Если ПроверитьТип(Объект, "Error") Тогда
        Ответ = Объект;
    Иначе
        Ответ.record = Объект;
    КонецЕсли;
    
    Возврат Ответ;
	
КонецФункции

// В транзакции помечает на удаление объекты
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа DeleteRequest - запрос на удаление.
// Возвращаемое значение:
//   ОбъектXDTO типа DeleteResponse или Error
// 
Функция ПометитьНаУдаление(Сообщение)
	
	Попытка 
		
		Ответ = СоздатьОбъект("DeleteResponse");
		
		НачатьТранзакцию();
		Попытка
		
			Для Каждого ОбъектИд Из Сообщение.objectIds Цикл
				
				Если ОбъектИд.type <> "File" Тогда
					ВызватьИсключение НСтр("ru = 'Изменение пометки удаления не поддерживается для объектов этого типа.'");
				КонецЕсли;
				
				Ссылка = СсылкаПоObjectId(ОбъектИд);
				Если Не ЗначениеЗаполнено(Ссылка) Тогда
					ВызватьИсключение НСтр("ru = 'Объект не найден.'");
				КонецЕсли;
				
				ЗаблокироватьДанныеДляРедактирования(Ссылка);
				Объект = Ссылка.ПолучитьОбъект();
				Объект.УстановитьПометкуУдаления(Не Объект.ПометкаУдаления);
				РазблокироватьДанныеДляРедактирования(Ссылка);
				
			КонецЦикла;
		
			ЗафиксироватьТранзакцию();
		Исключение
		     ОтменитьТранзакцию();
		     ВызватьИсключение;
		КонецПопытки;
		
		Возврат Ответ;
		
	Исключение
		
        Событие = НСтр("ru = 'Ошибка при установке пометки удаления'");
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Выполняет перенаправление объекта по запросу
//
// Параметры:
//   Сообщение - ОбъектXDTO типа PutRedirectRequest - запрос на перенаправление объекта.
// Возвращаемое значение:
//   ОбъектXDTO типа OK или Error
//
Функция ПеренаправитьОбъект(Сообщение)
	
    Попытка
        
        Объекты = Новый Массив;
        Объекты.Добавить(СсылкаПоObjectId(Сообщение.targetId));
        Исполнитель = СсылкаПоObjectId(Сообщение.query.performerId);
        Комментарий = СокрЛП(Сообщение.query.comment);
        Сведения = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
        
        Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
            Если Исполнитель = Пользователи.АвторизованныйПользователь() Тогда
                Обслуживание.ПринятьОбъектыВРаботу(Объекты);  	
            Иначе
                Параметры = Новый Структура("Исполнитель, Комментарий", Исполнитель, Комментарий);
                Если Не ЗначениеЗаполнено(Комментарий) Тогда
                    ВызватьИсключение НСтр("ru='Комментарий должен быть заполнен.'"); 
                КонецЕсли;
                ОбслуживаниеВызовСервера.ПеренаправитьОбъекты(Объекты, Параметры);
            КонецЕсли; 
        ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.ЛинииПоддержки") Тогда
            Если Исполнитель = Сведения.ЛинияПоддержки И Не ЗначениеЗаполнено(Комментарий) Тогда
                Обслуживание.ПеревестиОбъектыНаЛинию(Объекты);
            Иначе
                Параметры = Новый Структура("Исполнитель, Комментарий", Исполнитель, Комментарий);
                Если Не ЗначениеЗаполнено(Комментарий) Тогда
                    ВызватьИсключение НСтр("ru='Комментарий должен быть заполнен.'"); 
                КонецЕсли;
                ОбслуживаниеВызовСервера.ПеренаправитьОбъекты(Объекты, Параметры);
            КонецЕсли;
        Иначе
            ВызватьИсключение НСтр("ru='Не поддерживаемый адресат перенаправления.'"); 
        КонецЕсли; 
        
        Возврат СоздатьОбъект("OK");
        
    Исключение
		
        Событие = НСтр("ru = 'Ошибка при перенаправлении объекта'");
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

#Область Обращения

// Возвращает объект XDTO Обращения по ObjectId.
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                       - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа Incident или Error.
// 
Функция ПолучитьОбращение(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
	
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
    
    Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектИд);
		ОбъектXDTO = СоздатьОбъект(ОбъектИд.type);
		ЗаполнитьОбъектXDTOИзОбращения(Ссылка, ОбъектXDTO, ЗаполняемыеСвойства);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'обращения'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Получает объект XDTO для нового Обращения
// 
// Параметры:
//   ЗаполняемыеСвойства - Массив - массив имен свойств к заполнению.
//
// Возвращаемое значение:
//   ОбъектXDTO типа Incident или Error
//
Функция НовоеОбращение(ЗаполняемыеСвойства) 
	
	Попытка
		
		Объект = Документы.Обращение.СоздатьДокумент();
		Объект.Заполнить(Неопределено);
	
		ОбъектXDTO = СоздатьОбъект("Incident");
		ЗаполнитьОбъектXDTOИзОбращения(Объект, ОбъектXDTO, ЗаполняемыеСвойства);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'нового обращения'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Обращения
//
// Параметры:
//   Объект - ДокументОбъект.Обращение, ДокументСсылка.Обращение - ссылка или объект обращения.
//   ОбъектXDTO - ОбъектXDTO типа Incident
//   ЗаполняемыеСвойства - Массив - массив имен свойств к заполнению
//                       - Неопределено - требование заполнить все свойства.
//
Процедура ЗаполнитьОбъектXDTOИзОбращения(Объект, ОбъектXDTO, ЗаполняемыеСвойства)
    
	СвойстваОбъекта = Новый Структура;
	ДобавитьСвойстваПоСоответствию(Объект, ОбъектXDTO, СвойстваОбъекта);	
    
    ТекущиеСроки = РегистрыСведений.СрокиОбращенийПоСоглашениям.ТекущиеСрокиОбращения(Объект.Ссылка);
    ДанныеВзаимодействий = ВзаимодействияУСП.ДанныеВзаимодействий(Объект.Ссылка);
    
	СвойстваОбъекта.Вставить("deadline", ТекущиеСроки.СрокОбработки);
	СвойстваОбъекта.Вставить("hasNewInteractions", ДанныеВзаимодействий.КоличествоНеРассмотрено > 0);
		
	ЗаполнитьСвойстваОбъектаXDTOИзЗначений(ОбъектXDTO, СвойстваОбъекта, ЗаполняемыеСвойства);
    ЗаполнитьКомментарии(Объект, ОбъектXDTO.comments, ЗаполняемыеСвойства);
    
    ПолучатьВсеСвойства = (ЗаполняемыеСвойства.Количество() = 0);
    
    // Дополнительные реквизиты
   	Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег("dynamicAttributes")) <> Неопределено Тогда 
   		ЗаполнитьДополнительныеСвойстваОбъектаXDTO(ОбъектXDTO, Объект);
   	КонецЕсли;
    
    ОбъектXDTO.objectId = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
	
КонецПроцедуры

// Добавляет Обращение из объекта XDTO
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - добавляемый объект типа Incident.
//
// Возвращаемое значение:
//   ОбъектXDTO типа Incident или Error
//
Функция ДобавитьОбращение(ОбъектXDTO)
	
	Попытка 
		
		Объект = Документы.Обращение.СоздатьДокумент();
		Ошибка = ВнешнийИнтерфейс.СоздатьОбъект("Error");
		
		Если Не ЗаписатьДанныеОбращения(Объект, ОбъектXDTO, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
		Возврат ПолучитьОбращение(ОбъектИд);
		
	Исключение
		
        Событие = СобытиеОшибкаПриСоздании(НСтр("ru = 'обращения'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Заполняет Обращение по объекту XDTO и записывает его
//
// Параметры:
//	Объект - ДокументОбъект.Обращение - заполняемый объект.
//	ОбъектXDTO - ОбъектXDTO типа Incident - источник данных заполнения.
//	Ошибка - ОбъектXDTO типа Error - неявно возвращаемое значение для сообщения об ошибке.
//
// Возвращаемое значение:
//  Булево - Истина, если операция завершена успешно, и Ложь в противном случае.
//
Функция ЗаписатьДанныеОбращения(Объект, ОбъектXDTO, Ошибка)
	
	Блокировать = ЗначениеЗаполнено(Объект.Ссылка);
	Если Блокировать Тогда 
		Объект.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьОбращениеИзОбъектаXDTO(Объект, ОбъектXDTO);
	
	Если Не ПроверитьЗаполнение(Объект, Ошибка, НСтр("ru = 'обращения'")) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
	Если Блокировать Тогда 
		Объект.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет Обращение по объекту XDTO
//
// Параметры:
//	Объект - ДокументОбъект.Обращение - заполняемый объект.
//	ОбъектXDTO - ОбъектXDTO типа Incident - источник данных заполнения.
//
Процедура ЗаполнитьОбращениеИзОбъектаXDTO(Объект, ОбъектXDTO)
	
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Тема, ОбъектXDTO, "subject");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Важность, ОбъектXDTO, "importance");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.ТипОбращения, ОбъектXDTO, "type");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Состояние, ОбъектXDTO, "status");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Инициатор, ОбъектXDTO, "initiator");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.АдресДляПереписки, ОбъектXDTO, "eMailForCorrespondence");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.ОбслуживающаяОрганизация, ОбъектXDTO, "partner");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Абонент, ОбъектXDTO, "subscriber");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.АбонентОбслуживающейОрганизации, ОбъектXDTO, "subscriberPartner");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.ЛинияПоддержки, ОбъектXDTO, "supportLine");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Исполнитель, ОбъектXDTO, "responsible");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Сервис, ОбъектXDTO, "service");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Компонент, ОбъектXDTO, "component");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Раздел, ОбъектXDTO, "section");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.КаналПолучения, ОбъектXDTO, "recievingChannel");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.КарточкаБазыЗнаний, ОбъектXDTO, "knowledgeBaseArticle");
    
    Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
        Объект.Дата = ТекущаяУниверсальнаяДата();
    КонецЕсли; 
    
    Описание = ФорматированныйДокументИзHTMLObject(ОбъектXDTO.descriptionHTML);
	
	Объект.ОписаниеХранилище = Новый ХранилищеЗначения(Описание);
	Объект.Описание = Описание.ПолучитьТекст();
    
    ЗаполнитьДополнительныеРеквизитыОбъекта(Объект, ОбъектXDTO);
    
КонецПроцедуры

// Изменяет Обращение по объекту XDTO
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - объект XDTO изменяемого документа типа Incident
//
// Возвращаемое значение:
//   ОбъектXDTO типа Incident или Error
//
Функция ИзменитьОбращение(ОбъектXDTO)
	
	Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектXDTO.objectId);
        ПроверитьВерсиюДанных(Ссылка, ОбъектXDTO);
        
		Документ = Ссылка.ПолучитьОбъект();
		
		Ошибка = СоздатьОбъект("Error");
		Если Не ЗаписатьДанныеОбращения(Документ, ОбъектXDTO, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ПолучитьObjectIdПоСсылке(Документ.Ссылка);
		Возврат ПолучитьОбращение(ОбъектИд);
		
	Исключение
		
        Событие = СобытиеОшибкаПриИзменении(НСтр("ru = 'обращения'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

Функция ДобавитьКомментарий(Сообщение)
	
	Попытка 
		
	    Источник = СсылкаПоObjectId(Сообщение.targetId);
                
		СвойстваОбъекта = Новый Структура;
        
        НовыйКомментарий = Справочники.Комментарии.СоздатьЭлемент();
		НовыйКомментарий.ВладелецКомментария = Источник;
 	    ЗаполнитьРеквизитИзСвойстваXDTO(НовыйКомментарий.Комментарий, Сообщение.record, "comment");
        Если Сообщение.record.Установлено("author") И РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
            Автор = СсылкаПоObjectId(Сообщение.record.author.objectId);
        Иначе
            Автор = Пользователи.АвторизованныйПользователь();
        КонецЕсли;
        
        Сведения = РегистрыСведений.СведенияОПользователях.СведенияОПользователе(Автор);
          
	    НовыйКомментарий.Дата = ТекущаяДатаСеанса();
	    НовыйКомментарий.Автор = Автор;
	    НовыйКомментарий.ЛинияПоддержки = Сведения.ЛинияПоддержки;
        
        НовыйКомментарий.Записать();
        
        СвойстваОбъекта = Новый Структура;
        
        Если ТипЗнч(Источник) = Тип("ДокументСсылка.Обращение") Тогда
            КомментарийXDTO = СоздатьОбъект("IncidentComment");
        Иначе
            КомментарийXDTO = СоздатьОбъект("ArticleComment");
        КонецЕсли;    
        
    	СвойстваОбъекта.Вставить("date", НовыйКомментарий.Дата);
    	СвойстваОбъекта.Вставить("comment", НовыйКомментарий.Комментарий);
    	СвойстваОбъекта.Вставить("author", НовыйКомментарий.Автор);
    	СвойстваОбъекта.Вставить("supportLine", НовыйКомментарий.ЛинияПоддержки);
		
    	ЗаполнитьСвойстваОбъектаXDTOИзЗначений(КомментарийXDTO, СвойстваОбъекта);
        
        Возврат КомментарийXDTO;
	
	Исключение
		
        Событие = СобытиеОшибкаПриИзменении(НСтр("ru = 'комментария к обращению'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
        
	КонецПопытки;
	
КонецФункции
 
#КонецОбласти

#Область КарточкиБазыЗнаний

#Область Консультации

// Возвращает объект XDTO Консультации по ObjectId
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа Consultation или Error
// 
Функция ПолучитьКонсультацию(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
	
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
    
    Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектИд);
		ОбъектXDTO = ПолучитьБазовыйОбъект(ОбъектИд, ЗаполняемыеСвойства);
        ЗаполнитьКомментарии(Ссылка, ОбъектXDTO.comments, ЗаполняемыеСвойства);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'карточки консультации'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Получает объект XDTO для новой Консультации
// 
// Параметры:
//   ЗаполняемыеСвойства - Массив - массив имен свойств к заполнению.
//
// Возвращаемое значение:
//   ОбъектXDTO типа Consultation или Error
//
Функция НоваяКонсультацию(ЗаполняемыеСвойства) 
	
	Попытка
		
		Объект = Справочники.Консультации.СоздатьЭлемент();
		Объект.Заполнить(Неопределено);
	
		ОбъектXDTO = СоздатьОбъект("Consultation");
		
		СвойстваОбъекта = Новый Структура;
		ДобавитьСвойстваКарточкиБазыЗнаний(СвойстваОбъекта, Объект);
		
		ЗаполнитьСвойстваОбъектаXDTOИзЗначений(ОбъектXDTO, СвойстваОбъекта, ЗаполняемыеСвойства);
		ОбъектXDTO.objectId = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'новой консультации'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Добавляет Консультацию из объекта XDTO
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - добавляемый объект.
//
// Возвращаемое значение:
//   ОбъектXDTO типа Consultation или Error
//
Функция ДобавитьКонсультацию(ОбъектXDTO)
	
	Попытка 
		
		Объект = Справочники.Консультации.СоздатьЭлемент();
		Ошибка = СоздатьОбъект("Error");
		
		Если Не ЗаписатьДанныеКонсультации(Объект, ОбъектXDTO, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
		Возврат ПолучитьКонсультацию(ОбъектИд);
		
	Исключение
		
        Событие = СобытиеОшибкаПриСоздании(НСтр("ru = 'консультации'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Заполняет Консультацию по объекту XDTO и записывает ее
//
// Параметры:
//	Объект - СправочникОбъект.Консультации - заполняемый объект.
//	ОбъектXDTO - ОбъектXDTO типа Consultation - источник данных заполнения.
//	Ошибка - ОбъектXDTO типа Error - неявно возвращаемое значение для сообщения об ошибке.
//
// Возвращаемое значение:
//  Булево - Истина, если операция завершена успешно, и Ложь в противном случае.
//
Функция ЗаписатьДанныеКонсультации(Объект, ОбъектXDTO, Ошибка)
	
	Блокировать = ЗначениеЗаполнено(Объект.Ссылка);
	Если Блокировать Тогда 
		Объект.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьКонсультациюИзОбъектаXDTO(Объект, ОбъектXDTO);
	
	ТекстСообщения = "";
	
	Если Не ПроверитьЗаполнение(Объект, Ошибка, НСтр("ru = 'консультации'")) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Объект.Записать();
	
	Если Блокировать Тогда 
		Объект.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет Консультацию по объекту XDTO
//
// Параметры:
//	Объект - СправочникОбъект.Консультации - заполняемый объект.
//	ОбъектXDTO - ОбъектXDTO типа Consultation - источник данных заполнения.
//
Процедура ЗаполнитьКонсультациюИзОбъектаXDTO(Объект, ОбъектXDTO)
	
	ЗаполнитьОбщиеСвойстваКарточкиБазыЗнанийИзОбъектаXDTO(Объект, ОбъектXDTO);
	
КонецПроцедуры

// Изменяет Консультацию по объекту XDTO
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - объект XDTO изменяемого объекта типа Consultation.
//
// Возвращаемое значение:
//   ОбъектXDTO - Consultation или Error.
//
Функция ИзменитьКонсультацию(ОбъектXDTO)
	
	Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектXDTO.objectId);
        ПроверитьВерсиюДанных(Ссылка, ОбъектXDTO);
		
		Объект = Ссылка.ПолучитьОбъект();
		
		Ошибка = СоздатьОбъект("Error");
		Если Не ЗаписатьДанныеКонсультации(Объект, ОбъектXDTO, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
		Возврат ПолучитьКонсультацию(ОбъектИд);
		
	Исключение
		
        Событие = СобытиеОшибкаПриИзменении(НСтр("ru = 'консультации'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область Ошибки

// Возвращает объект XDTO ошибки по ObjectId
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа Problem или Error.
// 
Функция ПолучитьОшибку(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
	
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
    
    Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектИд);
		ОбъектXDTO = ПолучитьБазовыйОбъект(ОбъектИд, ЗаполняемыеСвойства);
        ЗаполнитьКомментарии(Ссылка, ОбъектXDTO.comments, ЗаполняемыеСвойства);
        
        Возврат ОбъектXDTO;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'карточки ошибки'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти 

#Область Пожелания

// Возвращает объект XDTO Пожелания по ObjectId
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа Suggestion или Error
// 
Функция ПолучитьПожелание(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
	
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
    
    Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектИд);
		ОбъектXDTO = ПолучитьБазовыйОбъект(ОбъектИд, ЗаполняемыеСвойства);
        ЗаполнитьКомментарии(Ссылка, ОбъектXDTO.comments, ЗаполняемыеСвойства);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'карточки пожелания'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Получает объект XDTO для нового Пожелания
// 
// Параметры:
//   ЗаполняемыеСвойства - Массив - массив имен свойств к заполнению.
//
// Возвращаемое значение:
//   ОбъектXDTO типа Suggestion или Error
//
Функция НовоеПожелание(ЗаполняемыеСвойства) 
	
	Попытка
		
		Объект = Справочники.Пожелания.СоздатьЭлемент();
		Объект.Заполнить(Неопределено);
	
		ОбъектXDTO = СоздатьОбъект("Suggestion");
		
		СвойстваОбъекта = Новый Структура;
		ДобавитьСвойстваКарточкиБазыЗнаний(СвойстваОбъекта, Объект);
		
		ЗаполнитьСвойстваОбъектаXDTOИзЗначений(ОбъектXDTO, СвойстваОбъекта, ЗаполняемыеСвойства);
		ОбъектXDTO.objectId = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'нового пожелания'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Добавляет Пожелание из объекта XDTO
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - добавляемый объект.
//
// Возвращаемое значение:
//   ОбъектXDTO типа Suggestion или Error
//
Функция ДобавитьПожелание(ОбъектXDTO)
	
	Попытка 
		
		Объект = Справочники.Пожелания.СоздатьЭлемент();
    	Ошибка = СоздатьОбъект("Error");
		
		Если Не ЗаписатьДанныеПожелания(Объект, ОбъектXDTO, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
		Возврат ПолучитьПожелание(ОбъектИд);
		
	Исключение
        
        Событие = СобытиеОшибкаПриСоздании(НСтр("ru = 'пожелания'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Заполняет Пожелание по объекту XDTO и записывает ее
//
// Параметры:
//	Объект - СправочникОбъект.Пожелания - заполняемый объект.
//	ОбъектXDTO - ОбъектXDTO типа Suggestion - источник данных заполнения.
//	Ошибка - ОбъектXDTO типа Error - неявно возвращаемое значение для сообщения об ошибке.
//
// Возвращаемое значение:
//  Булево - Истина, если операция завершена успешно, и Ложь в противном случае.
//
Функция ЗаписатьДанныеПожелания(Объект, ОбъектXDTO, Ошибка)
	
	Блокировать = ЗначениеЗаполнено(Объект.Ссылка);
	Если Блокировать Тогда 
		Объект.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьПожеланиеИзОбъектаXDTO(Объект, ОбъектXDTO);
	
	ТекстСообщения = "";
	
	Если Не ПроверитьЗаполнение(Объект, Ошибка, НСтр("ru = 'пожелания'")) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Объект.Записать();
	
	Если Блокировать Тогда 
		Объект.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет Пожелание по объекту XDTO
//
// Параметры:
//	Объект - СправочникОбъект.Пожелания - заполняемый объект.
//	ОбъектXDTO - ОбъектXDTO типа Suggestion - источник данных заполнения.
//
Процедура ЗаполнитьПожеланиеИзОбъектаXDTO(Объект, ОбъектXDTO)
	
	ЗаполнитьОбщиеСвойстваКарточкиБазыЗнанийИзОбъектаXDTO(Объект, ОбъектXDTO);
	
КонецПроцедуры

// Изменяет Пожелание по объекту XDTO
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - объект XDTO изменяемого объекта типа Suggestion.
//
// Возвращаемое значение:
//   ОбъектXDTO - Suggestion или Error
//
Функция ИзменитьПожелание(ОбъектXDTO)
	
	Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектXDTO.objectId);
        ПроверитьВерсиюДанных(Ссылка, ОбъектXDTO);
		
		Объект = Ссылка.ПолучитьОбъект();
		
		Ошибка = СоздатьОбъект("Error");
		Если Не ЗаписатьДанныеПожелания(Объект, ОбъектXDTO, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
		Возврат ПолучитьПожелание(ОбъектИд);
		
	Исключение
		
        Событие = СобытиеОшибкаПриИзменении(НСтр("ru = 'пожелания'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти 

Процедура ДобавитьСвойстваКарточкиБазыЗнаний(СвойстваОбъекта, Ссылка)
    
	СвойстваОбъекта.Вставить("code", Ссылка.Код);
	СвойстваОбъекта.Вставить("name", Ссылка.Наименование);
	СвойстваОбъекта.Вставить("creationDate", Ссылка.ДатаРегистрации);
	СвойстваОбъекта.Вставить("status", Ссылка.Состояние);
	СвойстваОбъекта.Вставить("services", Ссылка.Сервисы.ВыгрузитьКолонку("Сервис"));
	СвойстваОбъекта.Вставить("components", Ссылка.Компоненты.ВыгрузитьКолонку("Компонент"));
	СвойстваОбъекта.Вставить("sections", Ссылка.Разделы.ВыгрузитьКолонку("Раздел"));
	СвойстваОбъекта.Вставить("description", Ссылка.Описание);
	СвойстваОбъекта.Вставить("descriptionHTML", Ссылка.ОписаниеХранилище.Получить());
	
КонецПроцедуры

#КонецОбласти 

#Область Взаимодействия

Функция СписокВзаимодействий(Сообщение) 
	
	Попытка
		
		Предмет = СсылкаПоObjectId(Сообщение.targetId, Истина);
		
		Ответ = СоздатьОбъект("GetSubListResponse");
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
            |   Взаимодействия.Ссылка,
            |   Взаимодействия.Дата,
            |   Взаимодействия.Участники,
            |   Взаимодействия.Описание,
            |   Взаимодействия.Тип,
            |   Взаимодействия.Входящий,
            |   Взаимодействия.СтатусИсходящегоПисьма,
            |   Взаимодействия.Автор,
            |   ПредметыВзаимодействий.Предмет,
            |   ПредметыВзаимодействий.Рассмотрено,
            |   Взаимодействия.Ссылка.ОтправительПредставление КАК Отправитель,
            |   Взаимодействия.Ссылка.СписокПолучателейПисьма КАК СписокПолучателей,
            |   ВЫБОР
            |       КОГДА Взаимодействия.Входящий = ИСТИНА
            |           ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправлениеВзаимодействия.Входящее)
            |       КОГДА Взаимодействия.Входящий = ЛОЖЬ
            |           ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправлениеВзаимодействия.Исходящее)
            |       КОГДА Взаимодействия.Ссылка ССЫЛКА Документ.ЭлектронноеПисьмоВходящее
            |           ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправлениеВзаимодействия.Входящее)
            |       КОГДА Взаимодействия.Ссылка ССЫЛКА Документ.ЭлектронноеПисьмоИсходящее
            |           ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправлениеВзаимодействия.Исходящее)
            |       КОГДА Взаимодействия.Ссылка ССЫЛКА Документ.КомментарийПользователя
            |           ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправлениеВзаимодействия.Входящее)
            |   КОНЕЦ КАК НаправлениеВзаимодействия,
            |   Взаимодействия.Ссылка.АбонентКонтакт КАК АбонентКонтакт,
            |   Взаимодействия.Ссылка.ЕстьВложения КАК ЕстьВложения
            |ИЗ
            |   ЖурналДокументов.Взаимодействия КАК Взаимодействия
            |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыВзаимодействий
            |       ПО Взаимодействия.Ссылка = ПредметыВзаимодействий.Взаимодействие
            |ГДЕ
            |   НЕ Взаимодействия.ПометкаУдаления
            |   И ПредметыВзаимодействий.Предмет = &Предмет
            |   И ВЫБОР
            |           КОГДА &ОтборПоТипу
            |               ТОГДА ТИПЗНАЧЕНИЯ(Взаимодействия.Ссылка) = &ТипОбъекта
            |           ИНАЧЕ ИСТИНА
            |       КОНЕЦ";
        
        Запрос.УстановитьПараметр("Предмет", Предмет);
        Запрос.УстановитьПараметр("ОтборПоТипу", Истина);
        
        Если НРег(Сообщение.type) = НРег("PhoneCall") Тогда
            Запрос.УстановитьПараметр("ТипОбъекта", Тип("ДокументСсылка.ТелефонныйЗвонок"));
        ИначеЕсли НРег(Сообщение.type) = НРег("ServiceUserComment") Тогда
            Запрос.УстановитьПараметр("ТипОбъекта", Тип("ДокументСсылка.КомментарийПользователя"));
        ИначеЕсли НРег(Сообщение.type) = НРег("IncomingEMail") Тогда
            Запрос.УстановитьПараметр("ТипОбъекта", Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
        ИначеЕсли НРег(Сообщение.type) = НРег("OutgoingEMail") Тогда
            Запрос.УстановитьПараметр("ТипОбъекта", Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
        Иначе
            Запрос.УстановитьПараметр("ТипОбъекта", Тип("ДокументСсылка.ТелефонныйЗвонок"));
            Запрос.УстановитьПараметр("ОтборПоТипу", Ложь);
        КонецЕсли;
        
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбъектXDTO = СоздатьОбъект(ИмяТипаСсылки(Выборка.Ссылка));
			
			ОбъектXDTO.ObjectId = ПолучитьObjectIdПоСсылке(Выборка.Ссылка);
			
			ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "creationDate", Выборка.Дата); 
			ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "considered", Выборка.Рассмотрено); 
			ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "target", Выборка.Предмет);
			
			Если Выборка.Тип = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "recipients", Выборка.СписокПолучателей);
				ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "sender", Выборка.Отправитель );
			    ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "body", Выборка.Описание); 
			    ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "containsAttachments", Выборка.ЕстьВложения); 

            ИначеЕсли Выборка.Тип = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "status", Выборка.СтатусИсходящегоПисьма);
				ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "recipients", Выборка.СписокПолучателей);
			    ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "body", Выборка.Описание); 
			    ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "containsAttachments", Выборка.ЕстьВложения); 
				
			ИначеЕсли Выборка.Тип = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
				ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "incoming", Выборка.Входящий);
				ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "contact", Выборка.АбонентКонтакт);
			    ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "description", Выборка.Описание); 
				
			ИначеЕсли Выборка.Тип = Тип("ДокументСсылка.КомментарийПользователя") Тогда
				ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "author", Выборка.Автор);
			    ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, "description", Выборка.Описание); 
			КонецЕсли;
			
			Ответ.records.Добавить(ОбъектXDTO);
			
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'списка взаимодействий по предмету'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Получает новый объект XDTO заданного типа
// 
// Параметры:
//   Сообщение - ОбъектXDTO типа GetNewInteractionRequest - запрос на создание.
// Возвращаемое значение:
//   ОбъектXDTO заданного типа или Error
// 
Функция НовоеВзаимодействие(Сообщение)
    
    ЗаполняемыеСвойства = МассивИзСпискаXDTO(Сообщение.columns);
    
    Если НРег(Сообщение.type) = НРег("PhoneCall") Тогда 
        Возврат НовыйТелефонныйЗвонок(ЗаполняемыеСвойства, Сообщение.targetId);
		
    ИначеЕсли НРег(Сообщение.type) = НРег("OutgoingEMail") Тогда 
        Возврат НовоеИсходящееПисьмо(ЗаполняемыеСвойства, Сообщение.targetId, Сообщение.action);
        
    Иначе
        Событие = НСтр("ru = 'Ошибка при обработке сообщения'");
        Описание = НСтр("ru = 'Операции с указанным типом объектов не поддерживаются в данной версии.'");
        Возврат ОбработкаИсключения(Событие, Описание); 
        
    КонецЕсли;
	
КонецФункции

#Область ТелефонныйЗвонок

// Возвращает объект XDTO Телефонный звонок по ObjectId.
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO - типа PhoneCall или Error
// 
Функция ПолучитьТелефонныйЗвонок(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
    
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
    ПолучатьВсеСвойства = (ЗаполняемыеСвойства.Количество() = 0);
    
    Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектИд);
		ОбъектXDTO = ПолучитьБазовыйОбъект(ОбъектИд, ЗаполняемыеСвойства);
        РеквизитыВзаимодействия = Взаимодействия.СтруктураРеквизитовВзаимодействия(Ссылка);
        
		СвойстваОбъекта = Новый Структура;
		СвойстваОбъекта.Вставить("target", РеквизитыВзаимодействия.Предмет);
		СвойстваОбъекта.Вставить("considered", РеквизитыВзаимодействия.Рассмотрено);
        
		Для каждого Свойство Из СвойстваОбъекта Цикл
			Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег(Свойство.Ключ)) <> Неопределено Тогда 
				ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, Свойство.Ключ, Свойство.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Возврат ОбъектXDTO;
        
    Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'телефонного звонка'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Получает объект XDTO для нового Телефонного звонка
// 
// Параметры:
//   ЗаполняемыеСвойства - Массив - массив имен свойств к заполнению.
//   ПредметId - ОбъектXDTO - объект ObjectId предмета
//
// Возвращаемое значение:
//   ОбъектXDTO типа PhoneCall или Error
//
Функция НовыйТелефонныйЗвонок(ЗаполняемыеСвойства, ПредметId) 
	
	Попытка
		
		Объект = Документы.ТелефонныйЗвонок.СоздатьДокумент();
        ПредметСсылка = СсылкаПоObjectId(ПредметID, Истина);
        
        Объект.Заполнить(ПредметСсылка);
	
		ОбъектXDTO = СоздатьОбъект("PhoneCall");
		
        СвойстваОбъекта = Новый Структура;
    	СвойстваОбъекта.Вставить("target", ПредметСсылка);
    	СвойстваОбъекта.Вставить("creationDate", Объект.Дата);
    	СвойстваОбъекта.Вставить("subject", Объект.Тема);
    	СвойстваОбъекта.Вставить("description", Объект.Описание);
    	СвойстваОбъекта.Вставить("considered", Истина);
    	СвойстваОбъекта.Вставить("incoming", Объект.Входящий);
    	СвойстваОбъекта.Вставить("internal", Объект.ВнутренняяПереписка);
    	СвойстваОбъекта.Вставить("contact", Объект.АбонентКонтакт);
    	СвойстваОбъекта.Вставить("callCode", Объект.КодЗвонка);
        
		ЗаполнитьСвойстваОбъектаXDTOИзЗначений(ОбъектXDTO, СвойстваОбъекта, ЗаполняемыеСвойства);
		ОбъектXDTO.objectId = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'нового телефонного звонка'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецФункции

// Добавляет Телефонный звонок из объекта XDTO
//
// Параметры:
//	Сообщение - ОбъектXDTO - сообщение типа PostRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа PhoneCall или Error
//
Функция ДобавитьТелефонныйЗвонок(ОбъектXDTO)
	
	Попытка 
		
		Объект = Документы.ТелефонныйЗвонок.СоздатьДокумент();
        Объект.УстановитьСсылкуНового(Документы.ТелефонныйЗвонок.ПолучитьСсылку(Новый УникальныйИдентификатор));
        
		Ошибка = СоздатьОбъект("Error");
		Если Не ЗаписатьДанныеТелефонногоЗвонка(Объект, ОбъектXDTO, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
		Возврат ПолучитьТелефонныйЗвонок(ОбъектИд);
		
	Исключение
		
        Событие = СобытиеОшибкаПриСоздании(НСтр("ru = 'телефонного звонка'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Заполняет Телефонный звонок по объекту XDTO и записывает ее
//
// Параметры:
//	Объект - ДокументОбъект.ТелефонныйЗвонок - заполняемый объект.
//	ОбъектXDTO - ОбъектXDTO типа PhoneCall - источник данных заполнения
//	Ошибка - ОбъектXDTO типа Error - неявно возвращаемое значение для сообщения об ошибке.
//
// Возвращаемое значение:
//  Булево - Истина, если операция завершена успешно, и Ложь в противном случае.
//
Функция ЗаписатьДанныеТелефонногоЗвонка(Объект, ОбъектXDTO, Ошибка)
	
	Блокировать = ЗначениеЗаполнено(Объект.Ссылка);
	Если Блокировать Тогда 
		Объект.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьТелефонныйЗвонокИзОбъектаXDTO(Объект, ОбъектXDTO);
	
	ТекстСообщения = "";
	
	Если Не ПроверитьЗаполнение(Объект, Ошибка, НСтр("ru = 'телефонного звонка'")) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Объект.Записать();
	
	Если Блокировать Тогда 
		Объект.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет Телефонный звонок по объекту XDTO
//
// Параметры:
//	Объект - ДокументОбъект.ТелефонныйЗвонок - заполняемый объект.
//	ОбъектXDTO - ОбъектXDTO типа PhoneCall - источник данных заполнения.
//
Процедура ЗаполнитьТелефонныйЗвонокИзОбъектаXDTO(Объект, ОбъектXDTO)
	
    Если Объект.Ссылка.Пустая() Тогда
        Ссылка = Объект.ПолучитьСсылкуНового();
    Иначе   
        Ссылка = Объект.Ссылка;
    КонецЕсли;
    
    ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Дата, ОбъектXDTO, "creationDate");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Тема, ОбъектXDTO, "subject");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Описание, ОбъектXDTO, "description");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Входящий, ОбъектXDTO, "incoming");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.ВнутренняяПереписка, ОбъектXDTO, "internal");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.АбонентКонтакт, ОбъектXDTO, "contact");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.КодЗвонка, ОбъектXDTO, "callCode");
    
    Взаимодействия.УстановитьПредмет(Ссылка, СсылкаПоObjectId(ОбъектXDTO.target.objectId), Ложь);
    
    Если ОбъектXDTO.Установлено("considered") Тогда
        Объекты = Новый Массив;
        Объекты.Добавить(Ссылка);
        Взаимодействия.УстановитьПризнакРассмотрено(Объекты,ОбъектXDTO.considered, Истина);
    КонецЕсли;
	
КонецПроцедуры

// Изменяет Телефонный звонок по объекту XDTO
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - объект XDTO изменяемого объекта типа PhoneCall.
//
// Возвращаемое значение:
//   ОбъектXDTO - PhoneCall или Error.
//
Функция ИзменитьТелефонныйЗвонок(ОбъектXDTO, Действие = Неопределено)
	
	Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектXDTO.objectId);
        Если НРег(Действие) = НРег("Consider") Тогда
            Объекты = Новый Массив;
            Объекты.Добавить(Ссылка);
            Взаимодействия.УстановитьПризнакРассмотрено(Объекты, Истина, Истина);
		    ОбъектИд = ПолучитьObjectIdПоСсылке(Ссылка);
        Иначе    
            ПроверитьВерсиюДанных(Ссылка, ОбъектXDTO);
    		Объект = Ссылка.ПолучитьОбъект();
    		Ошибка = СоздатьОбъект("Error");
    		Если Не ЗаписатьДанныеТелефонногоЗвонка(Объект, ОбъектXDTO, Ошибка) Тогда 
    			Возврат Ошибка;
    		КонецЕсли;
		    ОбъектИд = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
        КонецЕсли;
		
		Возврат ПолучитьТелефонныйЗвонок(ОбъектИд);
		
	Исключение
		
        Событие = СобытиеОшибкаПриИзменении(НСтр("ru = 'телефонного звонка'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область КомментарийПользователя

// Возвращает объект XDTO Комментарий пользователя по ObjectId
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO - типа ServiceUserComment или Error
// 
Функция ПолучитьКомментарийПользователя(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
    
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
	ПолучатьВсеСвойства = (ЗаполняемыеСвойства.Количество() = 0);
    
    Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектИд);
        РеквизитыВзаимодействия = Взаимодействия.СтруктураРеквизитовВзаимодействия(Ссылка);
        ОбъектXDTO = ПолучитьБазовыйОбъект(ОбъектИд, ЗаполняемыеСвойства);
		
		СвойстваОбъекта = Новый Структура;
		СвойстваОбъекта.Вставить("target", РеквизитыВзаимодействия.Предмет);
		СвойстваОбъекта.Вставить("considered", РеквизитыВзаимодействия.Рассмотрено);
	    СвойстваОбъекта.Вставить("descriptionHTML", Ссылка.ОписаниеХранилище.Получить());
		
		Для каждого Свойство Из СвойстваОбъекта Цикл
			Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег(Свойство.Ключ)) <> Неопределено Тогда 
				ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, Свойство.Ключ, Свойство.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Возврат ОбъектXDTO;
        
    Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'комментария пользователя'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Изменяет Комментарий пользователя по объекту XDTO
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - объект XDTO изменяемого объекта типа ServiceUserComment.
//
// Возвращаемое значение:
//   ОбъектXDTO - ServiceUserComment или Error
//
Функция ИзменитьКомментарийПользователя(ОбъектXDTO, Действие = Неопределено)
	
	Попытка 
        
        Если Действие = "Consider" Тогда
    		Ссылка = СсылкаПоObjectId(ОбъектXDTO.objectId);
            Объекты = Новый Массив;
            Объекты.Добавить(Ссылка);
            Взаимодействия.УстановитьПризнакРассмотрено(Объекты, Истина, Истина);
    		ОбъектИд = ПолучитьObjectIdПоСсылке(Ссылка);
    		Возврат ПолучитьКомментарийПользователя(ОбъектИд);
        Иначе
    		ВызватьИсключение НСтр("ru='Изменение данных комментариев пользователей не поддерживается.'");
        КонецЕсли;
		
	Исключение
		
        Событие = СобытиеОшибкаПриИзменении(НСтр("ru = 'комментария пользователя'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти 

#Область ВходящееПисьмо

// Возвращает объект XDTO Входящего письмо по ObjectId
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO - типа IncomingEMail или Error
// 
Функция ПолучитьВходящееПисьмо(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
    
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
	ПолучатьВсеСвойства = (ЗаполняемыеСвойства.Количество() = 0);
    
    Попытка 
        
        Ссылка = СсылкаПоObjectId(ОбъектИд);
        ОбъектXDTO = ПолучитьБазовыйОбъект(ОбъектИд, ЗаполняемыеСвойства);
        РеквизитыВзаимодействия = Взаимодействия.СтруктураРеквизитовВзаимодействия(Ссылка);
        
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег("considered")) <> Неопределено Тогда  
            ОбъектXDTO.considered = РеквизитыВзаимодействия.Рассмотрено;
        КонецЕсли;
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег("recipients")) <> Неопределено Тогда  
            ОбъектXDTO.recipients = ПолучитьПредставлениеАдресатов(Ссылка.ПолучателиПисьма);
        КонецЕсли;
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег("recipientsOfCopies")) <> Неопределено Тогда  
            ОбъектXDTO.recipientsOfCopies = ПолучитьПредставлениеАдресатов(Ссылка.ПолучателиКопий);
        КонецЕсли;
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег("bodyHTML")) <> Неопределено Тогда  
            ОбъектXDTO.bodyHTML = ОбъектHTMLObjectИзФорматированногоДокумента(ВзаимодействияУСП.ФорматированныйДокументИзТекстаПисьма(Ссылка));
        КонецЕсли;
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег("target")) <> Неопределено Тогда  
            ПредметXDTO = СоздатьОбъект("Object");
            ПредметXDTO.objectId = ПолучитьObjectIDПоСсылке(РеквизитыВзаимодействия.Предмет, Ложь);
            ОбъектXDTO.target = ПредметXDTO;
        КонецЕсли;
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег("attachments")) <> Неопределено Тогда  
            ЗаполнитьВложения(ОбъектXDTO.attachments, Ссылка);
        КонецЕсли;
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег("sender")) <> Неопределено Тогда  
            Если ЗначениеЗаполнено(Ссылка.ОтправительПредставление) Тогда
                ОбъектXDTO.sender = Строка(Ссылка.ОтправительПредставление);
            Иначе
                ОбъектXDTO.sender = Строка(Ссылка.ОтправительКонтакт) + " <" + НРег(Ссылка.ОтправительАдрес) + ">";
            КонецЕсли;
        КонецЕсли;
        
        Возврат ОбъектXDTO;
        
    Исключение
        
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'входящего письма'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
        
    КонецПопытки;
    
КонецФункции

// Изменяет Входящее письмо по объекту XDTO
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - объект XDTO изменяемого объекта типа IncomingEmail.
//
// Возвращаемое значение:
//   ОбъектXDTO - IncomingEmail или Error
//
Функция ИзменитьВходящееПисьмо(ОбъектXDTO, Действие = Неопределено)
	
	Попытка 
		
        Если Действие = "Consider" Тогда
    		Ссылка = СсылкаПоObjectId(ОбъектXDTO.objectId);
            Объекты = Новый Массив;
            Объекты.Добавить(Ссылка);
            Взаимодействия.УстановитьПризнакРассмотрено(Объекты, Истина, Истина);
    		ОбъектИд = ПолучитьObjectIdПоСсылке(Ссылка);
    		Возврат ПолучитьВходящееПисьмо(ОбъектИд);
        Иначе
    		ВызватьИсключение НСтр("ru='Изменение данных входящих писем не поддерживается.'");
        КонецЕсли;
		
	Исключение
		
        Событие = СобытиеОшибкаПриИзменении(НСтр("ru = 'входящего письма'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ИсходящееПисьмо

// Возвращает объект XDTO Исходящего письмо по ObjectId
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO - типа OutgoingEMail или Error
// 
Функция ПолучитьИсходящееПисьмо(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
    
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
	ПолучатьВсеСвойства = (ЗаполняемыеСвойства.Количество() = 0);
    
    Попытка 
        
        Ссылка = СсылкаПоObjectId(ОбъектИд);
        ОбъектXDTO = ПолучитьБазовыйОбъект(ОбъектИд, ЗаполняемыеСвойства);
        РеквизитыВзаимодействия = Взаимодействия.СтруктураРеквизитовВзаимодействия(Ссылка);
        
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег("recipients")) <> Неопределено Тогда  
            ОбъектXDTO.recipients = ПолучитьПредставлениеАдресатов(Ссылка.ПолучателиПисьма);
        КонецЕсли;
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег("recipientsOfCopies")) <> Неопределено Тогда  
            ОбъектXDTO.recipientsOfCopies = ПолучитьПредставлениеАдресатов(Ссылка.ПолучателиКопий);
        КонецЕсли;
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег("recipientsOfBlindCopies")) <> Неопределено Тогда  
            ОбъектXDTO.recipientsOfBlindCopies = ПолучитьПредставлениеАдресатов(Ссылка.ПолучателиСкрытыхКопий);
        КонецЕсли;
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег("bodyHTML")) <> Неопределено Тогда  
            ОбъектXDTO.bodyHTML = ОбъектHTMLObjectИзФорматированногоДокумента(ВзаимодействияУСП.ФорматированныйДокументИзТекстаПисьма(Ссылка));
        КонецЕсли;
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег("target")) <> Неопределено Тогда  
            ПредметXDTO = СоздатьОбъект("Object");
            ПредметXDTO.objectId = ПолучитьObjectIDПоСсылке(РеквизитыВзаимодействия.Предмет, Ложь);
            ОбъектXDTO.target = ПредметXDTO;
        КонецЕсли;
        
        ЗаполнитьВложения(ОбъектXDTO.attachments, Ссылка);
        
        Возврат ОбъектXDTO;
        
    Исключение
        
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'входящего письма'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
        
    КонецПопытки;
    
КонецФункции

// Получает объект XDTO для нового Исходящего письма
// 
// Параметры:
//   ЗаполняемыеСвойства - Массив - массив имен свойств к заполнению.
//   ПредметId - ОбъектXDTO - объект ObjectId предмета
//   Действие - Строка - выполняемое действие GetNewSubActions
//
// Возвращаемое значение:
//   ОбъектXDTO типа OutgoingEmail или Error
//
Функция НовоеИсходящееПисьмо(ЗаполняемыеСвойства, ПредметId, Действие) 
	
	Попытка
		
		Объект = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
        ПредметСсылка = СсылкаПоObjectId(ПредметId, Истина);
        
        Объект.Заполнить(ПредметСсылка);
        Адресаты = ПолучитьПредставлениеАдресатов(Объект.ПолучателиПисьма);
        Если ТипЗнч(ПредметСсылка) = Тип("ДокументСсылка.Обращение") Тогда
            АдресДляПереписки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметСсылка, "АдресДляПереписки");
            Если ЗначениеЗаполнено(АдресДляПереписки) Тогда
                Адресаты = АдресДляПереписки;
            КонецЕсли; 
        КонецЕсли; 
	
		ОбъектXDTO = СоздатьОбъект("OutgoingEMail");
		ОбъектXDTO.objectId = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
		
        СвойстваОбъекта = Новый Структура;
    	ДобавитьСвойстваПоСоответствию(Объект, ОбъектXDTO, СвойстваОбъекта);
        СвойстваОбъекта.Вставить("recipients", Адресаты);
        СвойстваОбъекта.Вставить("target", ПредметСсылка);
        СвойстваОбъекта.Вставить("recipientsOfCopies", ПолучитьПредставлениеАдресатов(Объект.ПолучателиКопий));
        СвойстваОбъекта.Вставить("recipientsOfBlindCopies", ПолучитьПредставлениеАдресатов(Объект.ПолучателиСкрытыхКопий));
        СвойстваОбъекта.Вставить("bodyType", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
        СвойстваОбъекта.Вставить("considered", Истина);
        
        ТекстПисьма = ВзаимодействияУСП.ФорматированныйДокументИзТекстаПисьма(Объект);
        
        Если ТипЗнч(ПредметСсылка) = Тип("ДокументСсылка.Обращение") Тогда
            Если Не ЗначениеЗаполнено(Действие) Тогда
                ЗаполнитьВложения(ОбъектXDTO.attachments, ПредметСсылка);
                ТекстОписания = ПредметСсылка.ОписаниеХранилище.Получить();
                ВзаимодействияУСП.ДобавитьФорматированныйДокументКФорматированномуДокументу(ТекстОписания, ТекстПисьма);
                ТекстПисьма = ТекстОписания;
                СвойстваОбъекта.Вставить("subject", СтрШаблон("%1 %2%3)", 
                    ПредметСсылка.Тема, 
                    ВзаимодействияУСП.НачалоКлючаОбращения(), 
                    СокрЛП(ПредметСсылка.НомерСокращенный)));
                
            ИначеЕсли НРег(Действие) = НРег("FillFromArticle") Тогда
                ЗаполнитьВложения(ОбъектXDTO.attachments, ПредметСсылка);
                Если ТипЗнч(ПредметСсылка.КарточкаБазыЗнаний) <> Тип("СправочникСсылка.Ошибки") Тогда
                    ЗаполнитьВложения(ОбъектXDTO.attachments, ПредметСсылка.КарточкаБазыЗнаний);
                КонецЕсли;
                Если ЗначениеЗаполнено(ПредметСсылка.КарточкаБазыЗнаний) Тогда
                    Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПредметСсылка.КарточкаБазыЗнаний);
                    ТекстПисьма = Менеджер.ФорматированноеОписание(ПредметСсылка.КарточкаБазыЗнаний);
                КонецЕсли;
                СвойстваОбъекта.Вставить("subject", СтрШаблон("%1 %2%3)", 
                    ПредметСсылка.КарточкаБазыЗнаний.Наименование,
                    ВзаимодействияУСП.НачалоКлючаОбращения(), 
                    СокрЛП(ПредметСсылка.НомерСокращенный)));
            
            КонецЕсли; 
            
        КонецЕсли; 
        
        СвойстваОбъекта.Вставить("bodyHTML", ТекстПисьма);
    		
		ЗаполнитьСвойстваОбъектаXDTOИзЗначений(ОбъектXDTO, СвойстваОбъекта, ЗаполняемыеСвойства);
        
		Возврат ОбъектXDTO;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'нового исходящего письма'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецФункции

// Добавляет Исходящее письмо из объекта XDTO
//
// Параметры:
//	Сообщение - ОбъектXDTO - сообщение типа PostRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа OutgoingEmail или Error
//
Функция ДобавитьИсходящееПисьмо(ОбъектXDTO)
	
	Попытка 
		
		Объект = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
        Объект.УстановитьСсылкуНового(Документы.ЭлектронноеПисьмоИсходящее.ПолучитьСсылку(Новый УникальныйИдентификатор));
        
		Ошибка = СоздатьОбъект("Error");
		Если Не ЗаписатьДанныеИсходящегоПисьма(Объект, ОбъектXDTO, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
		Возврат ПолучитьИсходящееПисьмо(ОбъектИд);
		
	Исключение
		
        Событие = СобытиеОшибкаПриСоздании(НСтр("ru = 'исходящего письма'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Заполняет Исходящее письмо по объекту XDTO и записывает ее
//
// Параметры:
//	Объект - ДокументОбъект.ЭлектронноеПисьмоИсходящее - заполняемый объект.
//	ОбъектXDTO - ОбъектXDTO типа OutgoingEmail - источник данных заполнения.
//	Ошибка - ОбъектXDTO типа Error - неявно возвращаемое значение для сообщения об ошибке.
//
// Возвращаемое значение:
//  Булево - Истина, если операция завершена успешно, и Ложь в противном случае.
//
Функция ЗаписатьДанныеИсходящегоПисьма(Объект, ОбъектXDTO, Ошибка)
	
	Блокировать = ЗначениеЗаполнено(Объект.Ссылка);
	Если Блокировать Тогда 
		Объект.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьИсходящееПисьмоИзОбъектаXDTO(Объект, ОбъектXDTO);
	
	ТекстСообщения = "";
    
    Если Не ПроверитьЗаполнение(Объект, Ошибка, НСтр("ru = 'исходящего письма'")) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Объект.Записать();
	
	Если Блокировать Тогда 
		Объект.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет Электронное письмо по объекту XDTO
//
// Параметры:
//	Объект - ДокументОбъект.ЭлектронноеПисьмоИсходящее - заполняемый объект.
//	ОбъектXDTO - ОбъектXDTO типа OutgoingEmail - источник данных заполнения
//
Процедура ЗаполнитьИсходящееПисьмоИзОбъектаXDTO(Объект, ОбъектXDTO)
    
    Если Объект.Ссылка.Пустая() Тогда
        Ссылка = Объект.ПолучитьСсылкуНового();
    Иначе   
        Ссылка = Объект.Ссылка;
    КонецЕсли;
    
    Предмет = СсылкаПоObjectId(ОбъектXDTO.target.objectId);
    
    АдресаИнициатора = Новый Массив;
    ВнутренняяПереписка = Истина;

	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.Обращение") И ЗначениеЗаполнено(Предмет) Тогда
		РеквизитыИнициатора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, "Инициатор");
		ИнициаторОбращения = РеквизитыИнициатора.Инициатор;
		ДанныеАдресов = КонтактнаяИнформацияУСП.ВсеЭлектронныеАдресаПользователяСервиса(ИнициаторОбращения);
		Для каждого ДанныеАдреса Из ДанныеАдресов Цикл
			АдресаИнициатора.Добавить(ВРег(ДанныеАдреса.Адрес));
		КонецЦикла; 
	КонецЕсли;
    
    ЗаполнитьАдресатов(Объект.ПолучателиПисьма, ОбъектXDTO.recipients, АдресаИнициатора, ВнутренняяПереписка);
    ЗаполнитьАдресатов(Объект.ПолучателиКопий, ОбъектXDTO.recipientsOfCopies, АдресаИнициатора, ВнутренняяПереписка);
    ЗаполнитьАдресатов(Объект.ПолучателиСкрытыхКопий, ОбъектXDTO.recipientsOfBlindCopies, АдресаИнициатора, ВнутренняяПереписка);
    
    Если Объект.ПолучателиПисьма.Количество() = 0 Тогда
        ВызватьИсключение НСтр("ru='Необходимо указать хотя бы одного получателя письма.'");
    КонецЕсли;
    
    Объект.ВнутренняяПереписка = ВнутренняяПереписка;
    
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.УчетнаяЗапись, ОбъектXDTO, "account");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Дата, ОбъектXDTO, "creationDate");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Тема, ОбъектXDTO, "subject");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Важность, ОбъектXDTO, "importance");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.ТипТекста, ОбъектXDTO, "bodyType");
    ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Текст, ОбъектXDTO, "body");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.СтатусПисьма, ОбъектXDTO, "status");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.ИдентификаторОснования, ОбъектXDTO, "baseId");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.СписокПолучателейПисьма, ОбъектXDTO, "recipients");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.СписокПолучателейКопий, ОбъектXDTO, "recipientsOfCopies");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.СписокПолучателейСкрытыхКопий, ОбъектXDTO, "recipientsOfBlindCopies");
    Объект.ОтправительПредставление = Объект.УчетнаяЗапись;
    
    Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Или
        Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
        ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
    Иначе
        ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
    КонецЕсли;   
    
    // Обработка текста писем
    УдаленныеВложения = Новый СписокЗначений;
    УстановитьПривилегированныйРежим(Истина);
	
	// Добавим в список удаленных вложений ранее сохраненные картинки, 
    // отображаемые в теле форматированного документа.
	ТаблицаВложенийКартинокФорматированногоДокумента = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Ссылка);
	Для каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
		УдаленныеВложения.Добавить(Ссылка);
	КонецЦикла;
	
	// Удалим удаленные вложения
	Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
		ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	
	УдаленныеВложения.Очистить();
    
    Вложения = Новый Структура;
    ТекстHTML = "";
    ФорматированныйДокумент = ФорматированныйДокументИзHTMLObject(ОбъектXDTO.bodyHTML);
    ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, Вложения);
    Объект.ТекстHTML = ТекстHTML;
    Если Не ЗначениеЗаполнено(Объект.Текст) Тогда
        Объект.Текст = ФорматированныйДокумент.ПолучитьТекст();
    КонецЕсли;
    
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		Для каждого Вложение Из Вложения Цикл
			ДвоичныеДанныеКартинки = Вложение.Значение.ПолучитьДвоичныеДанные();
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки);
			ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			                     Ссылка, АдресКартинкиВоВременномХранилище, "_" + СтрЗаменить(Вложение.Ключ, "-", "_"),
			                     ДвоичныеДанныеКартинки.Размер());
			
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.Ключ;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
    КонецЕсли;
    
    Если ОбъектXDTO.Установлено("attachments") Тогда
        Объект.ЕстьВложения = Истина;
        Для каждого ФайлXDTO Из ОбъектXDTO.attachments Цикл
            Если Не ФайлXDTO.Установлено("objectId") Или Не ЗначениеЗаполнено(ФайлXDTO.objectId.id) Тогда
                АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ФайлXDTO.binaryData);
                АдресВременногоХранилищаТекста = "";
                
                Если ФайлXDTO.Установлено("text") Тогда
                    АдресВременногоХранилищаТекста = Новый ХранилищеЗначения(ФайлXDTO.text);
                КонецЕсли;
                РасширениеБезТочки = ФайлXDTO.extension;
                Если Лев(РасширениеБезТочки, 1) = "." Тогда
                    РасширениеБезТочки = Сред(РасширениеБезТочки, 2);
                КонецЕсли;
                ФайлСсылка = ПрисоединенныеФайлы.ДобавитьФайл(
                    Ссылка,
                    ФайлXDTO.name,
                    ФайлXDTO.extension,
                    МестноеВремя(ФайлXDTO.modificationDateUniversal),
                    ФайлXDTO.modificationDateUniversal,
                    АдресВременногоХранилищаФайла,
                    АдресВременногоХранилищаТекста);
            Иначе
                Вложение = СсылкаПоObjectId(ФайлXDTO.objectId);
                ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Вложение);
                
                ФайлСсылка = ПрисоединенныеФайлы.ДобавитьФайл(
                    Ссылка,
                    ДанныеФайла.Наименование,
                    ДанныеФайла.Расширение,
                    МестноеВремя(ДанныеФайла.ДатаМодификацииУниверсальная),
                    ДанныеФайла.ДатаМодификацииУниверсальная,
                    ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
            КонецЕсли;
        КонецЦикла; 
    Иначе
        Объект.ЕстьВложения = Ложь;
    КонецЕсли;
        
    Взаимодействия.УстановитьПредмет(Ссылка, Предмет, Ложь);
    Если ОбъектXDTO.Установлено("considered") Тогда
        Объекты = Новый Массив;
        Объекты.Добавить(Ссылка);
        Взаимодействия.УстановитьПризнакРассмотрено(Объекты,ОбъектXDTO.considered, Истина);
    КонецЕсли;
    
КонецПроцедуры

// Изменяет Исходящее письмо по объекту XDTO
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - объект XDTO изменяемого объекта типа OutgoingEmail.
//
// Возвращаемое значение:
//   ОбъектXDTO - OutgoingEmail или Error
//
Функция ИзменитьИсходящееПисьмо(ОбъектXDTO, Действие = Неопределено)
	
	Попытка 
        
        Если Действие = "Consider" Тогда
    		Ссылка = СсылкаПоObjectId(ОбъектXDTO.objectId);
            Объекты = Новый Массив;
            Объекты.Добавить(Ссылка);
            Взаимодействия.УстановитьПризнакРассмотрено(Объекты, Истина, Истина);
    		ОбъектИд = ПолучитьObjectIdПоСсылке(Ссылка);
    		Возврат ПолучитьИсходящееПисьмо(ОбъектИд);
        Иначе
    		ВызватьИсключение НСтр("ru='Изменение данных исходящих писем не поддерживается.'");
        КонецЕсли;
		
	Исключение
		
        Событие = СобытиеОшибкаПриИзменении(НСтр("ru = 'исходящего письма'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Файлы

// Возвращает список файлов владельца по запросу GetSubListRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO типа GetSubListRequest 
// Возвращаемое значение:
//   ОбъектXDTO типа GetSubListResponse или Error
// 
Функция СписокФайлов(Сообщение)
	
	Попытка 
		
		Ответ = СоздатьОбъект("GetSubListResponse");
        ЗаполняемыеСвойства = МассивИзСпискаXDTO(Сообщение.columns);
		
    	ВладелецФайла = СсылкаПоObjectId(Сообщение.targetId, Истина);
		Если НЕ ЗначениеЗаполнено(ВладелецФайла) Тогда
			ВызватьИсключение НСтр("ru = 'Объект не найден.'");
		КонецЕсли;
		
		МассивФайлов = Новый Массив;
		
		ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(ВладелецФайла, МассивФайлов);
	
		ДанныеФайлов = ЗаполнитьСписокФайлов(МассивФайлов, ЗаполняемыеСвойства);
		ЗаполнитьСписокФайловИзМассива(Ответ.records, ДанныеФайлов, ЗаполняемыеСвойства);
		
		Возврат Ответ;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'списка файлов по предмету'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Заполняет список файлов из массива структур, содержащих их реквизиты.
//
// Параметры:
//   СписокXDTO - заполняемый список, неявно возвращаемое значение.
//   ДанныеФайлов - Массив - массива структур, содержащих реквизиты файлов.
//   НаборКолонок - Массив - массив имен реквизитов к заполнению.
//
Процедура ЗаполнитьСписокФайловИзМассива(СписокXDTO, ДанныеФайлов, НаборКолонок)
	
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		ОбъектXDTO = ВнешнийИнтерфейс.СоздатьОбъект("File");
		ЗаполнитьФайлXDTO(ОбъектXDTO, ДанныеФайла, НаборКолонок, Ложь);
        
        СписокXDTO.Добавить(ОбъектXDTO);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает объект XDTO, соответствующий файлу, по переданной структуре.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO типа File - заполняемый объект, неявно возвращаемое значение.
//   ФайлСтруктура - Структура - значения реквизитов, источник данных заполнения.
//   НаборКолонок - Массив - набор имен реквизитов к заполнению.
//
Процедура ЗаполнитьФайлXDTO(ОбъектXDTO, ФайлСтруктура, НаборКолонок, ВключатьНавигационнуюСсылку = Истина)

	//  Обязательное поле
	ОбъектXDTO.objectId = ПолучитьObjectIdПоСсылке(ФайлСтруктура.Ссылка, ВключатьНавигационнуюСсылку);
	ОбъектXDTO.name = ФайлСтруктура.Наименование;
	
	Для Каждого КлючИЗначение Из ФайлСтруктура Цикл
		
		Если КлючИЗначение.Ключ = "Расширение" Тогда
			ОбъектXDTO.extension  = ФайлСтруктура.Расширение;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "Описание" Тогда
			ОбъектXDTO.description = ФайлСтруктура.Описание;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "Размер" Тогда
			ОбъектXDTO.size = ФайлСтруктура.Размер;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ДатаСоздания" Тогда
			ОбъектXDTO.creationDate = ФайлСтруктура.ДатаСоздания;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ДатаМодификацииУниверсальная" Тогда
			ОбъектXDTO.modificationDateUniversal = ФайлСтруктура.ДатаМодификацииУниверсальная;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ВладелецФайла" Тогда
			ОбъектXDTO.owner = СоздатьОбъект("Object");
			ОбъектXDTO.owner.objectId = ПолучитьObjectIdПоСсылке(ФайлСтруктура.ВладелецФайла);
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "Автор" Тогда
			ОбъектXDTO.author = ВнешнийИнтерфейс.СоздатьОбъект("User");
			ОбъектXDTO.author.objectId = ПолучитьObjectIdПоСсылке(ФайлСтруктура.Автор); 
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ПометкаУдаления" Тогда
			ОбъектXDTO.deletionMark = ФайлСтруктура.ПометкаУдаления;
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = "ДвоичныеДанные" Тогда
			ОбъектXDTO.binaryData = ФайлСтруктура.ДвоичныеДанные;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает массив структур с реквизитами файлов по массиву ссылок на файлы.
//
// Параметры:
//   МассивФайлов - Массив - содержит элементы типа СправочникСсылка.<ИмяОбъекта>присоединенныеФайлы.
//   НаборКолонок - Массив - содержит имена реквизитов к получению
//
// Возвращаемое значение:
//   Массив - содержит элементы типа 
//     * Структура, ключи которой - имена реквизитов файла, а значения - значения этих реквизитов.
//
Функция ЗаполнитьСписокФайлов(МассивФайлов, НаборКолонок)
	
	ДанныеФайлов = Новый Массив;
	
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		РеквизитыФайла = ЗаполнитьСтруктуруФайла(ФайлСсылка, НаборКолонок);
		ДанныеФайлов.Добавить(РеквизитыФайла);
		
	КонецЦикла;
	
	Возврат ДанныеФайлов;
	
КонецФункции

// Заполняет структуру данными файла
//
// Параметры:
//   ФайлСсылка - СправочникСсылка.Файлы - файл, данные которого подлежат получению.
//   НаборКолонок - Массив - массив имен реквизитов к получению
//
// Возвращаемое значение:
//   Структура, ключи которой - имена реквизитов файла, а значения - значения этих реквизитов.
//
Функция ЗаполнитьСтруктуруФайла(ФайлСсылка, НаборКолонок)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("size", "Размер");
	СтруктураРеквизитов.Вставить("creationDate", "ДатаСоздания");
	СтруктураРеквизитов.Вставить("author", "Автор");
	СтруктураРеквизитов.Вставить("extension", "Расширение");
	СтруктураРеквизитов.Вставить("description", "Описание");
	СтруктураРеквизитов.Вставить("owner", "ВладелецФайла");
	СтруктураРеквизитов.Вставить("deletionMark", "ПометкаУдаления");
	СтруктураРеквизитов.Вставить("modificationDateUniversal", "ДатаМодификацииУниверсальная");
	
	ИменаРеквизитовМассив = Новый Массив;
	ПолучатьДвоичныеДанные = Ложь;
	
	Для каждого КлючИЗначение из СтруктураРеквизитов Цикл
		Для каждого ИмяКолонки из НаборКолонок Цикл
			ПолучатьДвоичныеДанные = ПолучатьДвоичныеДанные или (НРег(ИмяКолонки) = НРег("binaryData"));
			Если НРег(ИмяКолонки) = НРег(КлючИЗначение.Ключ) Тогда
				ИменаРеквизитовМассив.Добавить(КлючИЗначение.Значение);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ИменаРеквизитов = СтрСоединить(ИменаРеквизитовМассив, ", ");
	
	РеквизитыФайла = Новый Структура;
	
	ИменаРеквизитов = ИменаРеквизитов + ?(ПустаяСтрока(ИменаРеквизитов),"",", ") + "Ссылка, Наименование"; // нужны всегда
	
	Если НЕ ПустаяСтрока(ИменаРеквизитов) Тогда
		
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, ИменаРеквизитов);
		
		// Получение собственно файла.
		Если ПолучатьДвоичныеДанные Тогда
			
			РеквизитыФайла.Вставить("ДвоичныеДанные", ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ФайлСсылка));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РеквизитыФайла;
	
КонецФункции

// Получает объект XDTO, соответствующий файлу, по переданному идентификатору.
//
// Параметры:
//   ИдентификаторФайла - Строка - идентификатор файла.
//   НаборКолонок - Массив - набор имен реквизитов файла к получению.
//
// Возвращаемое значение:
//   ОбъектXDTO типа File
//
Функция ПолучитьКарточкуФайла(ИдентификаторФайла, НаборКолонок)
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторФайла);
	
	ХранилищаФайлов = СтрРазделить("Обращение, Консультации, Ошибки, Пожелания, ЭлектронноеПисьмоВходящее, ЭлектронноеПисьмоИсходящее, ТелефонныйЗвонок, КомментарийПользователя", ", ", Ложь);
	Для каждого Хранилище Из ХранилищаФайлов Цикл
		ФайлСсылка = Справочники[Хранилище + "ПрисоединенныеФайлы"].ПолучитьСсылку(УникальныйИдентификатор);
		Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ВладелецФайла")) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	Если Не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ВладелецФайла")) Тогда
		ФайлСсылка = Справочники.Файлы.ПолучитьСсылку(УникальныйИдентификатор);
		Если Не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ВладелецФайла")) Тогда
			ВызватьИсключение "Файл не найден";
		КонецЕсли;
	КонецЕсли;
	
	ОбъектXDTO = ВнешнийИнтерфейс.СоздатьОбъект("File");
	
	Если НаборКолонок = Неопределено Тогда
		НоборКолонок = СтрРазделить("size, creationDate, author, extension, description, owner, deletionMark, modificationDateUniversal, binaryData", ", ", Ложь);
	КонецЕсли;

	ФайлСтруктура = ЗаполнитьСтруктуруФайла(ФайлСсылка, НаборКолонок);
	ЗаполнитьФайлXDTO(ОбъектXDTO, ФайлСтруктура, НаборКолонок);
	
	Возврат ОбъектXDTO;
	
КонецФункции	

// Добавляет файл с двоичными или текстовыми данными из объекта XDTO
//
// Параметры:
//   Сообщение - ОбъектXDTO типа PostSubRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа PostSubResponse или Error
//
Функция ДобавитьФайл(Сообщение)
	
	Попытка 
		
		ПредметСсылка = СсылкаПоObjectId(Сообщение.targetId, Истина);
        ОбъектXDTO = Сообщение.record;
        
		АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ОбъектXDTO.binaryData);
		АдресВременногоХранилищаТекста = "";
		
		Если ОбъектXDTO.Установлено("text") Тогда
			АдресВременногоХранилищаТекста = Новый ХранилищеЗначения(ОбъектXDTO.Text);
		КонецЕсли;
		
        РасширениеБезТочки = ОбъектXDTO.extension;
        Если Лев(РасширениеБезТочки, 1) = "." Тогда
            РасширениеБезТочки = Сред(РасширениеБезТочки, 2);
        КонецЕсли;
        
        ФайлСсылка = ПрисоединенныеФайлы.ДобавитьФайл(
			ПредметСсылка,
			ОбъектXDTO.name,
			РасширениеБезТочки,
			МестноеВремя(ОбъектXDTO.modificationDateUniversal),
			ОбъектXDTO.modificationDateUniversal,
			АдресВременногоХранилищаФайла,
			АдресВременногоХранилищаТекста,
			ОбъектXDTO.description);
			
		Объект = ВнешнийИнтерфейс.СоздатьОбъект("File");
		Объект.objectId = ПолучитьObjectIdПоСсылке(ФайлСсылка);
		
		Возврат Объект;
		
	Исключение
		
        Событие = СобытиеОшибкаПриИзменении(НСтр("ru = 'файла с диска'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
        
	КонецПопытки;
	
КонецФункции	

#КонецОбласти

#Область Трудозатраты

// Возвращает список записей о фактических трудозатратах по заданным условиям
//
// Параметры:
//	Сообщение - ОбъектXDTO - сообщение типа GetSubListRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа GetSubListResponse или Error
//
Функция СписокФактическихТрудозатрат(Сообщение)
	
	Попытка 
		
		Отбор = Новый Структура;
        Источник = СсылкаПоObjectId(Сообщение.targetId, Истина);
		
		СоответствиеСвойств = Новый Соответствие;
		СоответствиеСвойств.Вставить("ДатаРаботы", "addDate");
		СоответствиеСвойств.Вставить("ОписаниеРаботы", "description");
		СоответствиеСвойств.Вставить("Длительность", "duration");
		СоответствиеСвойств.Вставить("Пользователь", "user#User");
		СоответствиеСвойств.Вставить("ЛинияПоддержки", "supportLine#SupportLine");
		СоответствиеСвойств.Вставить("ОбслуживающаяОрганизация", "partner#Partner");
		СоответствиеСвойств.Вставить("Источник", "source#Object");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НомерДобавления";
		
		Для Каждого ЭлементСоответствия Из СоответствиеСвойств Цикл
			Запрос.Текст = Запрос.Текст + 
				",
				|	" + ЭлементСоответствия.Ключ;
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + " ИЗ " + ИмяТипа(Сообщение.type);
        
        Запрос.Текст = Запрос.Текст + " ГДЕ Источник В (&Источник) И Источник <> Неопределено";
        Запрос.УстановитьПараметр("Источник",  Источник);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		ОтветXDTO = ВнешнийИнтерфейс.СоздатьОбъект("GetSubListResponse");
		ЗаполняемыеСвойства = МассивИзСпискаXDTO(Сообщение.columns);
        
		Пока Выборка.Следующий() Цикл
			ЗаписьXDTO = ВнешнийИнтерфейс.СоздатьОбъект("ActualWork");
			ЗаполнитьСвойстваXDTOПоСоответствию(ЗаписьXDTO, Выборка, СоответствиеСвойств, ЗаполняемыеСвойства);
			ОтветXDTO.records.Добавить(ЗаписьXDTO);
		КонецЦикла;
		
		Возврат ОтветXDTO;
		
	Исключение
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'списка фактических трудозатрат по предмету'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Возвращает объект XDTO для новой записи фактических трудозатрат
//
// Параметры:
//	НаборКолонок - Массив - набор колонок для отбора заполняемых реквизитов.
//
// Возвращаемое значение:
//   ОбъектXDTO типа ActualWork или Error
//
Функция НоваяЗаписьФактическихТрудозатрат(Сообщение)
	
	Попытка
		
		ТекущаяДата = ТекущаяДатаСеанса();
		
		ОбъектXDTO = ВнешнийИнтерфейс.СоздатьОбъект("ActualWork");
		Предмет = СсылкаПоObjectId(Сообщение.targetId, Истина);
    	СвойстваОбъекта = Новый Структура;
    		
		СвойстваОбъекта.Вставить("source", Предмет);
		СвойстваОбъекта.Вставить("addDate",ТекущаяДатаСеанса());
		СвойстваОбъекта.Вставить("duration", 0);
		СвойстваОбъекта.Вставить("user", ПараметрыСеанса.ТекущийПользователь);
		СвойстваОбъекта.Вставить("description",	СтрШаблон(НСтр("ru = 'Работа над ""%1""'"), Предмет));
        
        Сведения = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
        
		СвойстваОбъекта.Вставить("supportLine", Сведения.ЛинияПоддержки);
		СвойстваОбъекта.Вставить("partner", Сведения.ОбслуживающаяОрганизация);
		
        ЗаполняемыеСвойства = МассивИзСпискаXDTO(Сообщение.columns);
    	ЗаполнитьСвойстваОбъектаXDTOИзЗначений(ОбъектXDTO, СвойстваОбъекта, ЗаполняемыеСвойства);
        
        Возврат ОбъектXDTO;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'новой записи о фактических трудозатратах'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Добавляет запись о фактических трудозатратах из объекта XDTO
//
// Параметры:
//	Сообщение - ОбъектXDTO - сообщение типа PostSubRequest
//
// Возвращаемое значение:
//   ОбъектXDTO типа ActualWork или Error
//
Функция ДобавитьЗаписьФактическихТрудозатрат(Сообщение)
	
	Попытка
		
		ПараметрыОповещения = Неопределено;
		
		ЗаписьXDTO = Сообщение.record;
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("ДатаРаботы", ЗаписьXDTO.addDate);
		ПараметрыОтчета.Вставить("ОписаниеРаботы", ЗаписьXDTO.description);
		ПараметрыОтчета.Вставить("Длительность", ЗаписьXDTO.duration);
		ПараметрыОтчета.Вставить("Источник");
    
		ЗаполнитьРеквизитИзСвойстваXDTO(ПараметрыОтчета.Источник, ЗаписьXDTO, "source");
		
		Если ЗаписьXDTO.Установлено("user") Тогда
			ПараметрыОтчета.Вставить("Пользователь");
			ЗаполнитьРеквизитИзСвойстваXDTO(ПараметрыОтчета.Пользователь, ЗаписьXDTO, "user");
		КонецЕсли;
			
		УчетВремени.ДобавитьВОтчет(ПараметрыОтчета, ПараметрыОповещения);
	
		Возврат ЗаписьXDTO;
		
	Исключение
		
        Событие = СобытиеОшибкаПриИзменении(НСтр("ru = 'записи о фактических трудозатратах'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти 

#Область БизнесПроцессыИЗадачи

#Область Поручение

// Возвращает объект XDTO Поручения по ObjectId
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа Order или Error
// 
Функция ПолучитьПоручение(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
	
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
    
    Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектИд);
		ОбъектXDTO = СоздатьОбъект(ОбъектИд.type);
		ЗаполнитьОбъектXDTOИзПоручения(Ссылка, ОбъектXDTO, ЗаполняемыеСвойства);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru='поручения'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Получает объект XDTO для нового Поручения
// 
// Параметры:
//   ЗаполняемыеСвойства - Массив - массив имен свойств к заполнению.
//
// Возвращаемое значение:
//   ОбъектXDTO типа Order или Error
//
Функция НовоеПоручение(Сообщение, ПредметId) 
	
	Попытка
		
		Объект = БизнесПроцессы.Поручение.СоздатьБизнесПроцесс();
        ПредметСсылка = СсылкаПоObjectId(ПредметID, Истина);
		Объект.Заполнить(ПредметСсылка);
        
        ОбъектXDTO = СоздатьОбъект("Order");
        
		ЗаполнитьОбъектXDTOИзПоручения(Объект, ОбъектXDTO);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'нового обращения'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Добавляет Поручение из объекта XDTO
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - добавляемый объект типа Order.
//
// Возвращаемое значение:
//   ОбъектXDTO типа Order или Error
//
Функция ДобавитьПоручение(ОбъектXDTO, Действие = Неопределено)
	
	Попытка 
		
		Объект = БизнесПроцессы.Поручение.СоздатьБизнесПроцесс();
		Ошибка = ВнешнийИнтерфейс.СоздатьОбъект("Error");
		
		Если Не ЗаписатьДанныеПоручения(Объект, ОбъектXDTO, Ошибка) Тогда 
			Возврат Ошибка;
        КонецЕсли;
        
        Если НРег(Действие) = НРег("StartProcess") И Не Объект.Стартован Тогда
            Объект.Старт();
        КонецЕсли;
		
		ОбъектИд = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
		Возврат ПолучитьПоручение(ОбъектИд);
		
	Исключение
		
        Событие = СобытиеОшибкаПриСоздании(НСтр("ru = 'поручения'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Обращения
//
// Параметры:
//   Объект - БизнесПроцессОбъект.Поручение, БизнесПроцессСсылка.Поручение - ссылка или объект поручения.
//   ОбъектXDTO - ОбъектXDTO типа Order
//   ЗаполняемыеСвойства - Массив - массив имен свойств к заполнению.
//                - Неопределено - требование заполнить все свойства.
//
Процедура ЗаполнитьОбъектXDTOИзПоручения(Объект, ОбъектXDTO, ЗаполняемыеСвойства = Неопределено)
    
	СвойстваОбъекта = Новый Структура;
	ДобавитьСвойстваПоСоответствию(Объект, ОбъектXDTO, СвойстваОбъекта);	
		
	ЗаполнитьСвойстваОбъектаXDTOИзЗначений(ОбъектXDTO, СвойстваОбъекта, ЗаполняемыеСвойства);
    ОбъектXDTO.performer = НовыйTaskPerformer(Объект.Исполнитель, Объект.Исполнитель, 
        Объект.ОсновнойОбъектАдресации, Объект.ДополнительныйОбъектАдресации);
    ОбъектXDTO.reviewer = НовыйTaskPerformer(Объект.Проверяющий, Объект.Проверяющий, 
        Объект.ОсновнойОбъектАдресацииПроверяющего, Объект.ДополнительныйОбъектАдресацииПроверяющего);
    
    ОбъектXDTO.objectId = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
	
КонецПроцедуры

// Заполняет Поручение по объекту XDTO и записывает его
//
// Параметры:
//	Объект - БизнесПроцессОбъект.Поручение - заполняемый объект.
//	ОбъектXDTO - ОбъектXDTO типа Order - источник данных заполнения.
//	Ошибка - ОбъектXDTO типа Error - неявно возвращаемое значение для сообщения об ошибке.
//
// Возвращаемое значение:
//  Булево - Истина, если операция завершена успешно, и Ложь в противном случае.
//
Функция ЗаписатьДанныеПоручения(Объект, ОбъектXDTO, Ошибка)
	
	Блокировать = ЗначениеЗаполнено(Объект.Ссылка);
	Если Блокировать Тогда 
		Объект.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьПоручениеИзОбъектаXDTO(Объект, ОбъектXDTO);
	
	Если Не ПроверитьЗаполнение(Объект, Ошибка, НСтр("ru = 'поручения'")) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Объект.Записать();
	
	Если Блокировать Тогда 
		Объект.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет Поручение по объекту XDTO
//
// Параметры:
//	Объект - БизнесПроцессОбъект.Поручение - заполняемый объект.
//	ОбъектXDTO - ОбъектXDTO типа Order - источник данных заполнения.
//
Процедура ЗаполнитьПоручениеИзОбъектаXDTO(Объект, ОбъектXDTO)
	
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Наименование, ОбъектXDTO, "name");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Автор, ОбъектXDTO, "author");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Важность, ОбъектXDTO, "importance");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.СрокИсполнения, ОбъектXDTO, "deadline");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.СрокПроверки, ОбъектXDTO, "reviewPeriod");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Предмет, ОбъектXDTO, "target");
    
    Если ОбъектXDTO.Установлено("performer") Тогда
        Если ОбъектXDTO.performer.Установлено("user") Тогда
       	    ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Исполнитель, ОбъектXDTO.performer, "user");
        Иначе
       	    ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Исполнитель, ОбъектXDTO.performer, "role");
        КонецЕсли;    
	    ЗаполнитьРеквизитИзСвойстваXDTO(Объект.ОсновнойОбъектАдресации, ОбъектXDTO.performer, "mainAddressingObject");
	    ЗаполнитьРеквизитИзСвойстваXDTO(Объект.ДополнительныйОбъектАдресации, ОбъектXDTO.performer, "secondaryAddressingObject");
    КонецЕсли;
        
    Если ОбъектXDTO.Установлено("reviewer") Тогда
        Если ОбъектXDTO.reviewer.Установлено("user") Тогда
       	    ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Проверяющий, ОбъектXDTO.reviewer, "user");
        Иначе
       	    ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Проверяющий, ОбъектXDTO.reviewer, "role");
        КонецЕсли;    
	    ЗаполнитьРеквизитИзСвойстваXDTO(Объект.ОсновнойОбъектАдресацииПроверяющего, ОбъектXDTO.reviewer, "mainAddressingObject");
	    ЗаполнитьРеквизитИзСвойстваXDTO(Объект.ДополнительныйОбъектАдресацииПроверяющего, ОбъектXDTO.reviewer, "secondaryAddressingObject");
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
        Объект.Дата = ТекущаяДатаСеанса();
    КонецЕсли;
    
	Содержание = ФорматированныйДокументИзHTMLObject(ОбъектXDTO.descriptionHTML);
	
	Объект.СодержаниеХранилище = Новый ХранилищеЗначения(Содержание);
	Объект.Содержание = Содержание.ПолучитьТекст();
	
КонецПроцедуры

#КонецОбласти 

#Область ЗадачаИсполнителя

// Возвращает объект XDTO Задачи по ObjectId
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO типа Task или Error.
// 
Функция ПолучитьЗадачу(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
	
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
    
    Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектИд);
		ОбъектXDTO = СоздатьОбъект(ОбъектИд.type);
		ЗаполнитьОбъектXDTOИзЗадачи(Ссылка, ОбъектXDTO, ЗаполняемыеСвойства);
		
		Возврат ОбъектXDTO;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru='задачи'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Заполняет объект XDTO по данным объекта Задачи исполнителя
//
// Параметры:
//   Объект - ЗадачаОбъект.ЗадачаИсполнителя, ЗадачаСсылка.ЗадачаИсполнителя - ссылка или объект задачи.
//   ОбъектXDTO - ОбъектXDTO типа Task
//   ЗаполняемыеСвойства - Массив - массив имен свойств к заполнению.
//                - Неопределено - требование заполнить все свойства.
//
Процедура ЗаполнитьОбъектXDTOИзЗадачи(Объект, ОбъектXDTO, ЗаполняемыеСвойства)
    
    ОбъектXDTO.objectId = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
    
    СвойстваОбъекта = Новый Структура;
	ДобавитьСвойстваПоСоответствию(Объект, ОбъектXDTO, СвойстваОбъекта);	
	ЗаполнитьСвойстваОбъектаXDTOИзЗначений(ОбъектXDTO, СвойстваОбъекта, ЗаполняемыеСвойства);
    
    ОбъектXDTO.myTask = ЭтоМояЗадача(Объект.Ссылка);    
    ОбъектXDTO.performer = НовыйTaskPerformer(Объект.Исполнитель, Объект.РольИсполнителя, 
        Объект.ОсновнойОбъектАдресации, Объект.ДополнительныйОбъектАдресации);
        
    Если ОбъектXDTO.Установлено("process") Тогда
        ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO.process, "description", Объект.БизнесПроцесс.Содержание);
        ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO.process, "descriptionHTML", Объект.БизнесПроцесс.СодержаниеХранилище);
        ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO.process, "runtimeComments", Объект.БизнесПроцесс.РезультатВыполнения);
    КонецЕсли;
    
КонецПроцедуры

// Заполняет Задачу исполнителя по объекту XDTO.
//
// Параметры:
//	Объект - ЗадачаОбъект.ЗадачаИсполнителя - заполняемый объект.
//	ОбъектXDTO - ОбъектXDTO типа Task - источник данных заполнения.
//
Процедура ЗаполнитьЗадачуИзОбъектаXDTO(Объект, ОбъектXDTO)
	
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Важность, ОбъектXDTO, "importance");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.ДатаНачала, ОбъектXDTO, "startDate");
	
КонецПроцедуры

// Заполняет Задачу исполнителя по объекту XDTO и записывает его.
//
// Параметры:
//	Объект - ЗадачаОбъект.ЗадачаИсполнителя - заполняемый объект.
//	ОбъектXDTO - ОбъектXDTO - типа Task, источник данных заполнения.
//	Ошибка - ОбъектXDTO типа Error - неявно возвращаемое значение для сообщения об ошибке.
//
// Возвращаемое значение:
//  Булево - Истина, если операция завершена успешно, и Ложь в противном случае.
//
Функция ЗаписатьДанныеЗадачи(Объект, ОбъектXDTO, Ошибка)
	
	Блокировать = ЗначениеЗаполнено(Объект.Ссылка);
	Если Блокировать Тогда 
		Объект.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьЗадачуИзОбъектаXDTO(Объект, ОбъектXDTO);
	
	ТекстСообщения = "";
	
	Если Не ПроверитьЗаполнение(Объект, Ошибка, НСтр("ru = 'задачи'")) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Объект.Записать();
	
	Если Блокировать Тогда 
		Объект.Разблокировать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Изменяет Задачу по объекту XDTO
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - объект XDTO изменяемого объекта типа Task
//
// Возвращаемое значение:
//   ОбъектXDTO типа Task или Error
//
Функция ИзменитьЗадачу(ОбъектXDTO)
	
	Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектXDTO.objectId);
        ПроверитьВерсиюДанных(Ссылка, ОбъектXDTO);
        
		Объект = Ссылка.ПолучитьОбъект();
		
		Ошибка = СоздатьОбъект("Error");
		Если Не ЗаписатьДанныеЗадачи(Объект, ОбъектXDTO, Ошибка) Тогда 
			Возврат Ошибка;
		КонецЕсли;
		
		ОбъектИд = ПолучитьObjectIdПоСсылке(Объект.Ссылка);
		Возврат ПолучитьЗадачу(ОбъектИд);
		
	Исключение
		
        Событие = СобытиеОшибкаПриИзменении(НСтр("ru = 'задачи'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Выполняет задачу исполнителя по запросу PutCompleteTaskRequest
// При удачном выполнении возвращает OK, при ошибке возвращает Error
//
Функция ВыполнитьЗадачу(Сообщение)
    
	Попытка 
		
	    Источник = СсылкаПоObjectId(Сообщение.targetId);
        
        Если Сообщение.Установлено("action") Тогда
            БизнесПроцессОбъект = Источник.БизнесПроцесс.ПолучитьОбъект();
            Если НРег(Сообщение.action) = НРег("ReturnOnCompletion") Тогда
                БизнесПроцессОбъект.Подтверждено = Ложь;
                БизнесПроцессОбъект.Выполнено = Ложь;
            ИначеЕсли НРег(Сообщение.action) = НРег("CancelOrder") Тогда
                БизнесПроцессОбъект.Подтверждено = Истина;
                БизнесПроцессОбъект.Выполнено = Ложь;
            Иначе
                БизнесПроцессОбъект.Подтверждено = Истина;
                БизнесПроцессОбъект.Выполнено = Истина;
            КонецЕсли;
            
            БизнесПроцессОбъект.Записать();
            
        КонецЕсли;
        
        БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Источник);
    
        Возврат СоздатьОбъект("OK");
        
    Исключение
		
        Событие = НСтр("ru = 'Ошибка при выполнении задачи'");
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
        
	КонецПопытки;
    
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область НСИ

// Возвращает объект XDTO Пользователя по ObjectId.
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId.
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO - типа User или Error.
// 
Функция ПолучитьПользователя(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
    
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
    
    Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектИд);
		ОбъектXDTO = ПолучитьБазовыйОбъект(ОбъектИд, ЗаполняемыеСвойства);
        
		СвойстваОбъекта = Новый Структура;
        
		ПолучатьВсеСвойства = (ЗаполняемыеСвойства.Количество() = 0);
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег("supportLine")) <> 0 Или ЗаполняемыеСвойства.Найти(НРег("partner")) <> 0 Тогда
            Сведения = РегистрыСведений.СведенияОПользователях.СведенияОПользователе(Ссылка);
            СвойстваОбъекта.Вставить("supportLine", Сведения.ЛинияПоддержки);
            СвойстваОбъекта.Вставить("partner", Сведения.ОбслуживающаяОрганизация);
        КонецЕсли;
		
		Для каждого Свойство Из СвойстваОбъекта Цикл
			Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег(Свойство.Ключ)) <> Неопределено Тогда 
				ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, Свойство.Ключ, Свойство.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Возврат ОбъектXDTO;
        
    Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'пользователя'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Возвращает объект XDTO Пользователя сервиса по ObjectId.
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO - типа ServiceUser или Error.
// 
Функция ПолучитьПользователяСервиса(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
    
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
    
    Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектИд);
		ОбъектXDTO = ПолучитьБазовыйОбъект(ОбъектИд, ЗаполняемыеСвойства);
        СтрокаТелефона = Ссылка.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ТелефонПользователяСервиса);
        
		СвойстваОбъекта = Новый Структура;
        Если СтрокаТелефона <> Неопределено Тогда
            СвойстваОбъекта.Вставить("phone", СтрокаТелефона.Представление);
        КонецЕсли;
        
		ПолучатьВсеСвойства = (ЗаполняемыеСвойства.Количество() = 0);
        Для каждого Свойство Из СвойстваОбъекта Цикл
			Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег(Свойство.Ключ)) <> Неопределено Тогда 
				ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, Свойство.Ключ, Свойство.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Возврат ОбъектXDTO;
        
    Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'пользователя сервиса'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Возвращает объект XDTO Абонента сервиса по ObjectId.
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO - типа ServiceUser или Error.
// 
Функция ПолучитьАбонента(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
    
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
    
    Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектИд);
		ОбъектXDTO = ПолучитьБазовыйОбъект(ОбъектИд, ЗаполняемыеСвойства);
		ПолучатьВсеСвойства = (ЗаполняемыеСвойства.Количество() = 0);
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти("serviceusers") <> Неопределено Тогда
            СписокПользователи = РегистрыСведений.ПользователиАбонентов.ПользователиАбонента(Ссылка);
            Для каждого Пользователь Из СписокПользователи Цикл
                ПользовательXDTO = СоздатьОбъект("ServiceUser");
                ПользовательXDTO.objectId = ПолучитьObjectIdПоСсылке(Пользователь);
                ОбъектXDTO.serviceUsers.Добавить(ПользовательXDTO);
            КонецЦикла;
        КонецЕсли;
		СвойстваОбъекта = Новый Структура;
        Для каждого Свойство Из СвойстваОбъекта Цикл
			Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег(Свойство.Ключ)) <> Неопределено Тогда 
				ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, Свойство.Ключ, Свойство.Значение);
			КонецЕсли;
		КонецЦикла;
        
    	// Дополнительные реквизиты
    	Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег("dynamicAttributes")) <> Неопределено Тогда 
    		ЗаполнитьДополнительныеСвойстваОбъектаXDTO(ОбъектXDTO, Ссылка);
    	КонецЕсли;
        
		Возврат ОбъектXDTO;
        
    Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'абонента'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Возвращает объект XDTO Дополнительного реквизита или сведения  ObjectId.
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO - типа DynamicAttribute.
// 
Функция ПолучитьДинамическийРеквизит(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
    
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
    Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектИд);
		ОбъектXDTO = ПолучитьБазовыйОбъект(ОбъектИд, ЗаполняемыеСвойства);
		ПолучатьВсеСвойства = (ЗаполняемыеСвойства.Количество() = 0);
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти("valueTypes") <> Неопределено Тогда
		    ЗаполнитьТипыXDTOДополнительногоСвойства(ОбъектXDTO, Ссылка);
        КонецЕсли;
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти("usedIn") <> Неопределено Тогда
            ЗаполнитьТипыXDTOОбъектовИспользованияДополнительногоСвойства(ОбъектXDTO, Ссылка);
        КонецЕсли;
        Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти("services") <> Неопределено Тогда
            ЗаполнитьСервисыДополнительногоСвойства(ОбъектXDTO, Ссылка);
        КонецЕсли;
        
        Возврат ОбъектXDTO;
        
    Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'динамического реквизита'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
КонецФункции

Функция ТипXDTOПоНаборуДополнительныхРеквизитов(Набор)
    
	ОбъектТипXDTO = СоздатьОбъект("Type");
    Если Набор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_Обращение Тогда
        ОбъектТипXDTO.xdtoClassName = "Incident";
        ОбъектТипXDTO.presentation = НСтр("ru = 'Обращение'");
    ИначеЕсли Набор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ТелефонныйЗвонок Тогда
        ОбъектТипXDTO.xdtoClassName = "PhoneCall";
        ОбъектТипXDTO.presentation = НСтр("ru = 'Телефонный звонок'");
    ИначеЕсли Набор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_КомментарийПользователя Тогда
        ОбъектТипXDTO.xdtoClassName = "ServiceUserComment";
        ОбъектТипXDTO.presentation = НСтр("ru = 'КомментарийПользователя'");
    ИначеЕсли Набор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЭлектронноеПисьмоВходящее Тогда
        ОбъектТипXDTO.xdtoClassName = "IncomingEMail";
        ОбъектТипXDTO.presentation = НСтр("ru = 'Электронное письмо входящее'");
    ИначеЕсли Набор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЭлектронноеПисьмоИсходящее Тогда
        ОбъектТипXDTO.xdtoClassName = "OutgoingEMail";
        ОбъектТипXDTO.presentation = НСтр("ru = 'Электронное письмо исходящее'");
    ИначеЕсли Набор = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Абоненты Тогда
        ОбъектТипXDTO.xdtoClassName = "Subscriber";
        ОбъектТипXDTO.presentation = НСтр("ru = 'Абонент'");
    Иначе 
        Возврат Неопределено;
    КонецЕсли; 
    
    Возврат ОбъектТипXDTO;
    
КонецФункции

Функция СписокСведенийПользователейСервиса(Сообщение)
    
    Ответ = СоздатьОбъект("GetServiceUserInfoListResponse");
    
    Попытка
        
        Сервис = СсылкаПоObjectId(Сообщение.serviceId);
        
        ПараметрыОтбора = Новый Структура;
        ПараметрыОтбора.Вставить("НомерАбонента", Сообщение.subscriberCode);
        ПараметрыОтбора.Вставить("НомерОбласти", Строка(Сообщение.applicationCode));
        ПараметрыОтбора.Вставить("Логин", Строка(Сообщение.serviceUserLogin));
        ПараметрыОтбора.Вставить("EMail", Строка(Сообщение.serviceUserEMail));
        
        ИменаПараметров = СтрРазделить("НомерАбонента,НомерОбласти,Логин,EMail", ",", Ложь);
        Для каждого ИмяПараметра Из ИменаПараметров Цикл
            ПараметрыОтбора.Вставить("Использовать" + ИмяПараметра, ЗначениеЗаполнено(ПараметрыОтбора[ИмяПараметра]));
        КонецЦикла;
        
        ДопПараметрыОтбора = Новый ТаблицаЗначений;
        ДопПараметрыОтбора.Колонки.Добавить("Свойство");
        ДопПараметрыОтбора.Колонки.Добавить("Значение");
        ЗаполнитьДополнительныеРеквизитыОбъекта(ДопПараметрыОтбора, Сообщение);
        
        СвойстваПользователей = Справочники.ПользователиСервисов.СвойстваПользователей(Сервис, ПараметрыОтбора, ДопПараметрыОтбора);
        
        Для Каждого Строка Из СвойстваПользователей Цикл
            
            ОбъектXDTO = СоздатьОбъект("ServiceUserInfoItem");
            
            СвойстваОбъекта = Новый Структура;
            СвойстваОбъекта.Вставить("subscriber", Строка.Абонент);
            СвойстваОбъекта.Вставить("subscriberPartner", Строка.ОбслуживающаяОрганизация);
            СвойстваОбъекта.Вставить("serviceUser", Строка.ПользовательСервиса);
            СвойстваОбъекта.Вставить("applicationsCodes", Строка.ПредставлениеПриложений);
            
    		Для каждого Свойство Из СвойстваОбъекта Цикл
    			ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, Свойство.Ключ, Свойство.Значение);
            КонецЦикла;
            
            Если ОбъектXDTO.Установлено("subscriberPartner") Тогда
                ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO.subscriberPartner, "code", Строка.ОбслуживающаяОрганизацияКод);
                ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO.subscriberPartner, "service", Строка.Сервис);
            КонецЕсли;
            
            Если ОбъектXDTO.Установлено("subscriber") Тогда
                ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO.subscriber, "code", Строка.АбонентКод);
                ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO.subscriber, "service", Строка.Сервис);
            КонецЕсли;
            
            ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO.serviceUser, "eMails", Строка.Email);
            ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO.serviceUser, "login", Строка.Код);
            ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO.serviceUser, "phone", Строка.Телефон);
            ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO.serviceUser, "fullName", Строка.Наименование);
            ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO.serviceUser, "service", Строка.Сервис);
            
            Ответ.items.Добавить(ОбъектXDTO);
            
        КонецЦикла;
        
        Возврат Ответ;
        
    Исключение
        
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'списка сведений пользователей сервиса'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
        
    КонецПопытки
    
КонецФункции

// Возвращает объект XDTO Пользователя по ObjectId
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO - типа SupportLine или Error
// 
Функция ПолучитьЛиниюПоддержки(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
    
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
    
    Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектИд);
        ОбъектXDTO = ПолучитьБазовыйОбъект(ОбъектИд, ЗаполняемыеСвойства);
        Сведения = РегистрыСведений.СведенияОПользователях.СведенияОПользователе(Ссылка);
        
		СвойстваОбъекта = Новый Структура;
        СвойстваОбъекта.Вставить("interactionEnabled", 
            РегистрыСведений.РазрешенныеВзаимодействияЛинийПоддержки.РазрешеноВзаимодействие(Сведения.ЛинияПоддержки, Ссылка));
        
		ПолучатьВсеСвойства = (ЗаполняемыеСвойства.Количество() = 0);
		Для каждого Свойство Из СвойстваОбъекта Цикл
			Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег(Свойство.Ключ)) <> Неопределено Тогда 
				ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, Свойство.Ключ, Свойство.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Возврат ОбъектXDTO;
        
    Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'линии поддержки'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

// Возвращает объект XDTO Пользователя по ObjectId
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
//   ЗаполняемыеСвойства - Массив - массив имен реквизитов к получению.
//                - Неопределено - требование получить все реквизиты.
//
// Возвращаемое значение:
//   ОбъектXDTO - типа Partner или Error
// 
Функция ПолучитьОбслуживающуюОрганизацию(ОбъектИд, ЗаполняемыеСвойства = Неопределено)
    
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
    
    Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектИд);
		ОбъектXDTO = ПолучитьБазовыйОбъект(ОбъектИд, ЗаполняемыеСвойства);
        Сведения = РегистрыСведений.СведенияОПользователях.СведенияОПользователе(Ссылка);
        
		СвойстваОбъекта = Новый Структура;
        СвойстваОбъекта.Вставить("interactionEnabled",
            РегистрыСведений.РазрешенныеВзаимодействияЛинийПоддержки.РазрешеноВзаимодействие(Сведения.ОбслуживающаяОрганизация, Ссылка));
        
		ПолучатьВсеСвойства = (ЗаполняемыеСвойства.Количество() = 0);
		Для каждого Свойство Из СвойстваОбъекта Цикл
			Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег(Свойство.Ключ)) <> Неопределено Тогда 
				ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, Свойство.Ключ, Свойство.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Возврат ОбъектXDTO;
        
    Исключение
		
        Событие = СобытиеОшибкаПриПолучении(НСтр("ru = 'линии поддержки'"));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

Функция ТекущийПользователь(Сообщение)
    
    ТекущийПользователь = Пользователи.АвторизованныйПользователь();
    Сведения = РегистрыСведений.СведенияОПользователях.СведенияОПользователе();
    
	СвойстваОбъекта = Новый Структура;
	СвойстваОбъекта.Вставить("supportLine", Сведения.ЛинияПоддержки);
	СвойстваОбъекта.Вставить("partner", Сведения.ОбслуживающаяОрганизация);
		
    Ответ = СоздатьОбъект("User");
    Ответ.objectId = ПолучитьObjectIdПоСсылке(ТекущийПользователь);
    ЗаполнитьСвойстваОбъектаXDTOИзЗначений(Ответ, СвойстваОбъекта);
    
    Возврат Ответ;
    
КонецФункции

// Возвращает объект XDTO типа Object по его ID
//
// Параметры:
//   ОбъектИд - ОбъектXDTO типа ObjectId
// Возвращаемое значение:
//   ОбъектXDTO типа Object или Error
// 
Функция ПолучитьБазовыйОбъект(ОбъектИд, ЗаполняемыеСвойства)
	
	Попытка 
		
		Ссылка = СсылкаПоObjectId(ОбъектИд);
		
		ОбъектXDTO = СоздатьОбъект(ОбъектИд.type);
		ОбъектXDTO.objectId = ПолучитьObjectIdПоСсылке(Ссылка);
		
    	СвойстваОбъекта = Новый Структура;
    	ДобавитьСвойстваПоСоответствию(Ссылка, ОбъектXDTO, СвойстваОбъекта);	
    		
    	ЗаполнитьСвойстваОбъектаXDTOИзЗначений(ОбъектXDTO, СвойстваОбъекта, ЗаполняемыеСвойства);
        
        Возврат ОбъектXDTO;
		
	Исключение
		
        Событие = СобытиеОшибкаПриПолучении(СтрШаблон(НСтр("ru = 'объекта класса %1'"), ОбъектИд.type));
        Возврат ОбработкаИсключения(Событие, ИнформацияОбОшибке());
        
	КонецПопытки;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область СоединенияПриПолученииСпискаОбъектов

Процедура ДобавитьСоединение(Соединения, НовоеСоединение)
    
    Если Найти(Соединения, НовоеСоединение) = 0 Тогда
        Соединения = Соединения + НовоеСоединение;
    КонецЕсли;
    
КонецПроцедуры

Функция СоединениеСведенияОПользователях()
	
    Возврат "
            |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК Сведения
            |ПО Т.Ссылка = Сведения.Пользователь
            |";
	
КонецФункции

Функция СоединениеПользователиАбонентов()
	
    Возврат "
            |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиАбонентов КАК ПользователиАбонентов
            |ПО Т.Ссылка = ПользователиАбонентов.Абонент
            |";
	
КонецФункции

Функция СоединениеСрокиОбращений()
	
    Возврат "
            |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиОбращенийПоСоглашениям.СрезПоследних КАК СрокиПоОбращениям
            |ПО Т.Ссылка = СрокиПоОбращениям.Обращение
            |";

КонецФункции

Функция СоединениеРассмотрение()
	
    Возврат "
            |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПредметовВзаимодействий КАК Рассмотрение
            |ПО Т.Ссылка = Рассмотрение.Предмет
            |";

КонецФункции

Функция СоединениеТелефонПользователяСервиса()
	
    Возврат "
    		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПользователиСервисов.КонтактнаяИнформация КАК КИТелефон
    		|ПО Т.Ссылка = КИТелефон.Ссылка
    		|И (КИТелефон.Вид = &ТелефонПользователя)";

КонецФункции

Функция СоединениеЗадачиПоИсполнителю()
    
    Возврат "
            |ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(&АвторизованныйПользователь, ) КАК ЗадачиПоИсполнителю
            |ПО Т.Ссылка = ЗадачиПоИсполнителю.Ссылка 
            |";

КонецФункции

Функция СоединениеПредметыПапкиВзаимодействий()
    
    Возврат "
            |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
            |ПО Т.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
            |";
    
КонецФункции

#КонецОбласти 

#Область СобытияОшибок

// Возвращает текст ошибки при неудачном получении объекта.
//
Функция СобытиеОшибкаПриПолучении(ПредставлениеОбъекта = Неопределено)
    
    Если ПредставлениеОбъекта = Неопределено Тогда
    	ПредставлениеОбъекта = НСтр("ru='объекта'"); 
    КонецЕсли; 
    
    Возврат СтрШаблон(НСтр("ru = 'Ошибка при получении %1'"), ПредставлениеОбъекта);	
	
КонецФункции

// Возвращает текст ошибки при неудачном изменении объекта.
//
Функция СобытиеОшибкаПриИзменении(ПредставлениеОбъекта = Неопределено)
    
    Если ПредставлениеОбъекта = Неопределено Тогда
    	ПредставлениеОбъекта = НСтр("ru='объекта'"); 
    КонецЕсли; 
    
    Возврат СтрШаблон(НСтр("ru = 'Ошибка при изменении %1'"), ПредставлениеОбъекта);	
	
КонецФункции

// Возвращает текст ошибки при неудачном добавлении объекта.
//
Функция СобытиеОшибкаПриСоздании(ПредставлениеОбъекта = Неопределено)
    
    Если ПредставлениеОбъекта = Неопределено Тогда
    	ПредставлениеОбъекта = НСтр("ru='объекта'"); 
    КонецЕсли; 
    
    Возврат СтрШаблон(НСтр("ru = 'Ошибка при создании %1'"), ПредставлениеОбъекта);	
	
КонецФункции
   
#КонецОбласти 

Функция ЭтоТочкаМаршрута(Ссылка)
    
    Возврат ТипЗнч(Ссылка) = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.Поручение");
    
КонецФункции

Функция ЭтоМояЗадача(Задача)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = 
    	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ЗадачиПоИсполнителю.Ссылка
        |ИЗ
        |   Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(&АвторизованныйПользователь, ) КАК ЗадачиПоИсполнителю
        |ГДЕ
        |   ЗадачиПоИсполнителю.Ссылка = &Задача";
    
    Запрос.УстановитьПараметр("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
    Запрос.УстановитьПараметр("Задача", Задача);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли;
    
КонецФункции

Функция ЭтоТипВзаимодействия(ИмяТипаXDTO) 
    
 Возврат НРег(ИмяТипаXDTO) = НРег("PhoneCall") 
         Или НРег(ИмяТипаXDTO) = НРег("ServiceUserComment")  
         Или НРег(ИмяТипаXDTO) = НРег("OutgoingEMail") 
         Или НРег(ИмяТипаXDTO) = НРег("IncomingEMail");
    
КонецФункции

Функция НовыйTaskPerformer(Пользователь = Неопределено, Роль = Неопределено, 
    ОсновнойОбъектАдресации = Неопределено, ДополнительныйОбъектАдресации = Неопределено) 
    
    НовыйTaskPerformer = СоздатьОбъект("TaskPerformer");
    Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
        ЗаполнитьСвойствоXDTOИзРеквизита(НовыйTaskPerformer, "user", Пользователь);
    КонецЕсли;
    Если ТипЗнч(Роль) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
        ЗаполнитьСвойствоXDTOИзРеквизита(НовыйTaskPerformer, "role", Роль);
    КонецЕсли;
    ЗаполнитьСвойствоXDTOИзРеквизита(НовыйTaskPerformer, "mainAddressingObject", ОсновнойОбъектАдресации);
    ЗаполнитьСвойствоXDTOИзРеквизита(НовыйTaskPerformer, "secondaryAddressingObject", ДополнительныйОбъектАдресации);
    
    Возврат НовыйTaskPerformer;
    
КонецФункции

Процедура ПроверитьВерсиюДанных(Объект, ОбъектXDTO)
    
    Если Объект.ВерсияДанных <> ОбъектXDTO.objectVersion Тогда
        ВызватьИсключение НСтр("ru='Данные были изменены или удалены другим пользователем'");
    КонецЕсли;
	
КонецПроцедуры

// Получает набор дополнительных реквизитов и их значений для объекта
//
// Параметры:
//   Объект - Произвольный - объект  
//   ОбъектXDTO - заполняемый объект XDTO
// 
Процедура ЗаполнитьДополнительныеСвойстваОбъектаXDTO(ОбъектXDTO, Объект)
    
	Результат = Новый СписокЗначений;
    
    НаборСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Объект);
    
    НаборСвойствОбъекта = Новый Массив;
    
    Для Каждого Элемент Из НаборСвойств Цикл
        Для Каждого ДопРеквизит Из Элемент.Набор.ДополнительныеРеквизиты Цикл
            Если НаборСвойствОбъекта.Найти(ДопРеквизит.Свойство) = Неопределено Тогда
                НаборСвойствОбъекта.Добавить(ДопРеквизит.Свойство);
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;
    
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        НаборЗначенийСвойствОбъекта = УправлениеСвойствами.ПолучитьЗначенияСвойств(
        Объект.Ссылка, Истина, Ложь, НаборСвойствОбъекта);
    ИначеЕсли Объект.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено Тогда
        НаборЗначенийСвойствОбъекта = Объект.ДополнительныеРеквизиты;
    Иначе
        Возврат;
    КонецЕсли;
    
    Для Каждого ДопРеквизит Из НаборСвойствОбъекта Цикл
        ДанныеОДополнительномРеквизите = Новый Структура;
        ДанныеОДополнительномРеквизите.Вставить("Свойство", ДопРеквизит);
        СтрокаТаблицыЗначений = НаборЗначенийСвойствОбъекта.Найти(ДопРеквизит, "Свойство");
        Если СтрокаТаблицыЗначений <> Неопределено Тогда
            ДанныеОДополнительномРеквизите.Вставить("Значение", СтрокаТаблицыЗначений.Значение);
        Иначе
            ДанныеОДополнительномРеквизите.Вставить("Значение", "");
        КонецЕсли;
        ДанныеОДополнительномРеквизите.Вставить("ТипРеквизита", ДопРеквизит.ТипЗначения);
        Результат.Добавить(ДанныеОДополнительномРеквизите);
    КонецЦикла;
    
	Для Каждого Элемент Из Результат Цикл
		
		ДополнительноеСвойство = СоздатьОбъект("DynamicAttribute");
		ДополнительноеСвойство.objectId = ПолучитьObjectIDПоСсылке(Элемент.Значение.Свойство, Ложь);
		ЗаполнитьТипыXDTOДополнительногоСвойства(ДополнительноеСвойство, Элемент.Значение.Свойство);
		
		Если ЗначениеЗаполнено(Элемент.Значение.Значение) Тогда
			Если ТипЗнч(Элемент.Значение.Значение) = Тип("Дата") 
			 Или ТипЗнч(Элемент.Значение.Значение) = Тип("Число") 
			 Или ТипЗнч(Элемент.Значение.Значение) = Тип("Строка") 
			 Или ТипЗнч(Элемент.Значение.Значение) = Тип("Булево") Тогда
				
				ДополнительноеСвойство.simpleValue = Элемент.Значение.Значение;
			Иначе
				ОбъектЗначениеXDTO = СоздатьОбъект("Object");
				ОбъектЗначениеXDTO.objectId = ПолучитьObjectIDПоСсылке(Элемент.Значение.Значение, Ложь);
				
				ДополнительноеСвойство.objectValue = ОбъектЗначениеXDTO;
								
			КонецЕсли;
		КонецЕсли;
		
		ОбъектXDTO.dynamicAttributes.Добавить(ДополнительноеСвойство);
		
	КонецЦикла;
    
КонецПроцедуры

// Записывает набор дополнительных реквизитов и их значения у объекта из объекта XDTO
// 
// Параметры:
//   Объект - Произвольный - объект, чьи дополнительные реквизиты подлежат заполнению.
//   ОбъектXDTO - связанный объект XDTO, по данным которого заполняются дополнительные реквизиты.
// 
Процедура ЗаполнитьДополнительныеРеквизитыОбъекта(Объект, ОбъектXDTO) Экспорт
	
	Для Каждого ДополнительныйРеквизит Из ОбъектXDTO.dynamicAttributes Цикл
		
		ОбъектСвойство = СсылкаПоObjectID(ДополнительныйРеквизит.objectId);
		
		Если ЗначениеЗаполнено(ОбъектСвойство) Тогда
			
			ЗначениеСвойства = Неопределено;
			Если ДополнительныйРеквизит.Установлено("simpleValue") Тогда
				ЗначениеСвойства = ДополнительныйРеквизит.simpleValue;
			ИначеЕсли ДополнительныйРеквизит.Установлено("objectValue") Тогда
				ЗначениеСвойстваXDTO = ДополнительныйРеквизит.objectValue;
				ЗначениеСвойства = СсылкаПоObjectID(ЗначениеСвойстваXDTO.objectId);
			КонецЕсли;
            Если ТипЗнч(Объект) = Тип("ТаблицаЗначений") Тогда
                ТаблицаРеквизитов = Объект;
            Иначе
                ТаблицаРеквизитов = Объект.ДополнительныеРеквизиты;
            КонецЕсли;
			Строка = ТаблицаРеквизитов.Найти(ОбъектСвойство, "Свойство");
			Если Строка <> Неопределено Тогда
				Строка.Значение = ЗначениеСвойства;
			ИначеЕсли ДополнительныйРеквизит.Установлено("simpleValue") 
				ИЛИ ДополнительныйРеквизит.Установлено("objectValue") Тогда
				НоваяСтрока = ТаблицаРеквизитов.Добавить();
				НоваяСтрока.Свойство = ОбъектСвойство;
				НоваяСтрока.Значение = ЗначениеСвойства;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьАдресатов(Адресаты, СтрокаАдресатов, АдресаИнициатора, ВнутренняяПереписка)

    Адресаты.Очистить();
    
    Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаАдресатов);
    Для каждого ДанныеАдреса Из Результат Цикл
        НоваяСтрока = Адресаты.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеАдреса); 
        Если АдресаИнициатора.Найти(ВРег(ДанныеАдреса.Адрес)) <> Неопределено Тогда
            ВнутренняяПереписка = Ложь;
        КонецЕсли;
    КонецЦикла; 

КонецПроцедуры
 
// Заполняет свойства объекта ListItem из результата запроса.
//
// Параметры:
//   Ответ - неявно возвращаемое значение, ОбъектXDTO типа ListItem.
//   Запрос - Запрос, выбирающий реквизиты объекта.
//   ПредельноеКоличествоЭлементов - Число - если указано, вернуть не больше указанного количества.
//   ИменаСвойств - СписокXDTO - имена свойств объекта XDTO, подлежащих заполнению помимо стандартных.
//   ИмяТипа - Строка - имя типа XDTO
//   ЭтоСправочник - Булево - Истина, если заполняемый объект - справочник
//   Иерархический - Булево - Истина, если справочник иерархический.
//   ВидИерархииСправочника - ВидИерархии - вид иерархии справочника.
// 
Процедура ЗаполнитьОтветИзРезультатаЗапроса(Ответ, Запрос, ПредельноеКоличествоЭлементов, ИменаСвойств, ИмяТипа,
		ЭтоСправочник, Иерархический, ВидИерархииСправочника)
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// возможно, в выборке больше элементов, чем запрашивалось?
		Если ПредельноеКоличествоЭлементов <> 0 И Ответ.items.Количество() >= ПредельноеКоличествоЭлементов Тогда
			Ответ.tooManyObjects = Истина;
			Прервать;
		КонецЕсли;
		
		Элемент = СоздатьОбъект("ListItem");
		
		Элемент.object = СоздатьОбъект(ИмяТипа);
		Элемент.object.objectId = ПолучитьObjectIdПоСсылке(Выборка.Ссылка, Ложь);
		
        Для каждого ИмяСвойства из ИменаСвойств Цикл
            Если (НРег(ИмяТипа) = НРег("Task") И НРег(ИмяСвойства) = НРег("performer")) Или 
                (НРег(ИмяТипа) = НРег("Order") И (НРег(ИмяСвойства) = НРег("performer") Или НРег(ИмяСвойства) = НРег("reviewer"))) Тогда
                Свойство = СоздатьОбъект("TaskPerformer");
                Элемент.object[ИмяСвойства] = Свойство;
                ЗаполнитьСвойствоXDTOИзРеквизита(Элемент.object[ИмяСвойства], "user", Выборка[ИмяСвойства+"_user"]);
                ЗаполнитьСвойствоXDTOИзРеквизита(Элемент.object[ИмяСвойства], "role", Выборка[ИмяСвойства+"_role"]);
                ЗаполнитьСвойствоXDTOИзРеквизита(Элемент.object[ИмяСвойства], "mainAddressingObject", Выборка[ИмяСвойства+"_mainAddressingObject"]);
                ЗаполнитьСвойствоXDTOИзРеквизита(Элемент.object[ИмяСвойства], "secondaryAddressingObject", Выборка[ИмяСвойства+"_secondaryAddressingObject"]);
                Продолжить;
            КонецЕсли;
            Если НРег(ИмяТипа) = НРег("DynamicAttribute") И ВРег(ИмяСвойства) = ВРег("usedIn") Тогда
                ЗаполнитьТипыXDTOОбъектовИспользованияДополнительногоСвойства(Элемент.object, Выборка.Ссылка);
                Продолжить;
            КонецЕсли; 
            Если НРег(ИмяТипа) = НРег("DynamicAttribute") И ВРег(ИмяСвойства) = ВРег("valueTypes") Тогда
    		    ЗаполнитьТипыXDTOДополнительногоСвойства(Элемент.object, Выборка.Ссылка);
                Продолжить;
            КонецЕсли;
            Если НРег(ИмяТипа) = НРег("DynamicAttribute") И ВРег(ИмяСвойства) = ВРег("services") Тогда
                ЗаполнитьСервисыДополнительногоСвойства(Элемент.object, Выборка.Ссылка);
                Продолжить;
            КонецЕсли;
            
			ЗначениеРеквизита = Выборка[ИмяСвойства];
			Если ТипЗнч(ЗначениеРеквизита) = Тип("ХранилищеЗначения") Тогда
				ЗначениеРеквизита = ЗначениеРеквизита.Получить();
			ИначеЕсли ЗначениеРеквизита = Тип("РезультатЗапроса") Тогда
				Продолжить;	
            КонецЕсли;
			ЗаполнитьСвойствоXDTOИзРеквизита(Элемент.object, ИмяСвойства, ЗначениеРеквизита);
		КонецЦикла;
		
		Элемент.canHaveChildren = Ложь;
		Элемент.isFolder = Ложь;
		
		Если ЭтоСправочник Тогда 
			
			Если Иерархический Тогда
				Элемент.parentId = ПолучитьObjectIdПоСсылке(Выборка.Родитель, Ложь);
				Если ВидИерархииСправочника = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов Тогда
					Элемент.canHaveChildren = Истина;
				Иначе	
					Элемент.isFolder = Выборка.ЭтоГруппа;
					Элемент.canHaveChildren = Выборка.ЭтоГруппа;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Ответ.items.Добавить(Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет свойства объекта XDTO согласно набора по структуре значений свойств.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - заполняемый объект. 
//  ЗаполняемыеСвойства	- Массив - имена свойств объекта XDTO, которые нужно заполнить. 
//  ЗначенияСвойств	- Структура - значения свойств:
//		              * Ключ - имя свойства.
//		              * Значение - значение свойства.
//
Процедура ЗаполнитьСвойстваОбъектаXDTOИзЗначений(ОбъектXDTO, ЗначенияСвойств, ЗаполняемыеСвойства = Неопределено)
	
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
	ПолучатьВсеСвойства = (ЗаполняемыеСвойства.Количество() = 0);
	
	Для каждого Свойство Из ЗначенияСвойств Цикл
		Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег(Свойство.Ключ)) <> Неопределено Тогда 
			ЗаполнитьСвойствоXDTOизРеквизита(ОбъектXDTO, Свойство.Ключ, Свойство.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет свойство объекта XDTO из значения
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект, свойство которого требуется заполнить.
//   ИмяСвойстваXDTO - Строка - имя свойства, значение которого заполняется.
//   Значение - Произвольный - значение заполнения.
// 
Процедура ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, ИмяСвойстваXDTO, Знач Значение, ТипXDTO = Неопределено)
    
    Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
        Значение = Значение.Получить();
    КонецЕсли;
        
	Если ТипЗнч(Значение) = Тип("ФорматированныйДокумент") Тогда
		ОбъектXDTO[ИмяСвойстваXDTO] = ОбъектHTMLObjectИзФорматированногоДокумента(Значение);
        
	ИначеЕсли ЗначениеЗаполнено(Значение) Тогда 
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда 
			
			Если ТипXDTO = Неопределено Тогда
				ТипСвойства = ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойстваXDTO).Тип;
				Если ТипСвойства.Абстрактный Тогда 
					ТипСвойства = ФабрикаXDTO.Тип(ПространствоИмен(), ИмяТипаСсылки(Значение));
				КонецЕсли;
			Иначе
				ТипСвойства = ФабрикаXDTO.Тип(ПространствоИмен(), ТипXDTO)
			КонецЕсли;
			
			ЗначениеСвойства = ФабрикаXDTO.Создать(ТипСвойства);
			ЗначениеСвойства.objectId = ПолучитьObjectIdПоСсылке(Значение, Ложь);
			
			ОбъектXDTO[ИмяСвойстваXDTO] = ЗначениеСвойства;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
			Для каждого Элемент Из Значение Цикл
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Элемент)) Тогда
					Если ТипXDTO = Неопределено Тогда
						ТипСвойства = ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойстваXDTO).Тип;
					Иначе
						ТипСвойства = ФабрикаXDTO.Тип(ПространствоИмен(), ТипXDTO)
					КонецЕсли;
					ЗначениеСвойства = ФабрикаXDTO.Создать(ТипСвойства);
					ЗначениеСвойства.objectId = ПолучитьObjectIdПоСсылке(Элемент, Ложь);
					ОбъектXDTO[ИмяСвойстваXDTO].Добавить(ЗначениеСвойства);
				Иначе
					ОбъектXDTO[ИмяСвойстваXDTO].Добавить(Элемент);
				КонецЕсли;
			КонецЦикла; 
			
        ИначеЕсли ВнешнийИнтерфейсПовтИсп.ЭтоОсобоеСвойство(ИмяСвойстваXDTO) Тогда
            ОбработатьОсобоеСвойство(ОбъектXDTO, ИмяСвойстваXDTO, Значение);
            
        Иначе
			ОбъектXDTO[ИмяСвойстваXDTO] = Значение;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит объекта информационной базы из свойства объекта XDTO.
//
// Параметры:
//   Реквизит - Произвольный - реквизит объекта, подлежащий заполнению.
//   ОбъектXDTO - ОбъектXDTO - объект, свойство которого соответствует заполняемому реквизиту.
//   ИмяСвойстваXDTO - Строка - имя свойства, значение которого переносится в реквизит.
// 
Процедура ЗаполнитьРеквизитИзСвойстваXDTO(Реквизит, ОбъектXDTO, ИмяСвойстваXDTO)
	
	Если ОбъектXDTO.Установлено(ИмяСвойстваXDTO) Тогда  
		ЗначениеСвойстваXDTO = ОбъектXDTO[ИмяСвойстваXDTO];
		Если ТипЗнч(ЗначениеСвойстваXDTO) = Тип("ОбъектXDTO") Тогда  
			Тип = ЗначениеСвойстваXDTO.objectId.type;
			ID  = ЗначениеСвойстваXDTO.objectId.id;
			НовоеЗначение = СсылкаПоObjectId(ЗначениеСвойстваXDTO.objectId);
		Иначе
			НовоеЗначение = ЗначениеСвойстваXDTO;
		КонецЕсли;
		
		Если Реквизит <> НовоеЗначение Тогда
			Реквизит = НовоеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на объект по ObjectId
//
// Параметры:
//   objectId - ОбъектXDTO типа ObjectId
//   ВызыватьИсключение - Булево - признак вызова исключения в случае отсутствия ссылки.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на объект.
// 
Функция СсылкаПоObjectId(objectId, ВызыватьИсключение = Ложь)
    
    ЗаголовокОшибки = СобытиеОшибкаПриПолучении(НСтр("ru='ссылки по objectId'")); 
    
	Если objectId = Неопределено Тогда 
		Ссылка = Неопределено;
        Если ВызыватьИсключение Тогда
            ВызватьИсключение СтрШаблон("%1: %2", ЗаголовокОшибки, НСтр("ru='не заполнен objectId'")); 
		КонецЕсли;
	ИначеЕсли objectId.type = "" И objectId.id = "" Тогда 
		Ссылка = Неопределено;
        Если ВызыватьИсключение Тогда
            ВызватьИсключение СтрШаблон("%1: %2", ЗаголовокОшибки, НСтр("ru='не заполнен objectId'")); 
		КонецЕсли;
	ИначеЕсли objectId.type <> "" Тогда 
		Ссылка = Неопределено;
		
		ИмяТипа = ИмяТипа(НРег(objectId.type));
		
        Если objectId.id = "" Тогда
            Ссылка = ВнешнийИнтерфейсПовтИсп.МенеджерОбъекта(ИмяТипа).ПустаяСсылка();
            Если ВызыватьИсключение Тогда
                ВызватьИсключение СтрШаблон("%1: %2", ЗаголовокОшибки, НСтр("ru='не заполнен objectId.id'")); 
    		КонецЕсли;
		Иначе	
			Если Найти(ИмяТипа, "Перечисление.") Тогда 
                Ссылка = ВнешнийИнтерфейсПовтИсп.МенеджерОбъекта(ИмяТипа)[objectId.id];
			ИначеЕсли Найти(ИмяТипа, "БизнесПроцесс.") И Найти(ИмяТипа, ".Точки") Тогда 
                ПроцессМенеджер = ВнешнийИнтерфейсПовтИсп.МенеджерОбъекта(СтрЗаменить(ИмяТипа,".Точки",""));
                Ссылка = ПроцессМенеджер.ТочкиМаршрута[objectId.id];   
            Иначе
                Ссылка = ВнешнийИнтерфейсПовтИсп.МенеджерОбъекта(ИмяТипа).ПолучитьСсылку(Новый УникальныйИдентификатор(objectId.id));
            КонецЕсли;
            Если ЕстьПравоНаЧтение(ИмяТипа) Тогда
    			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 1 ИЗ " + ИмяТипа + " ГДЕ Ссылка = &Ссылка");
    			Запрос.УстановитьПараметр("Ссылка", Ссылка);
    			Если Запрос.Выполнить().Пустой() Тогда
                    Ссылка = ВнешнийИнтерфейсПовтИсп.МенеджерОбъекта(ИмяТипа).ПустаяСсылка();
                    Если ВызыватьИсключение Тогда
                        ВызватьИсключение СтрШаблон("%1: %2", ЗаголовокОшибки, НСтр("ru='не найдена ссылка по objectId'")); 
            		КонецЕсли;
                КонецЕсли; 
            Иначе
                ВызватьИсключение СтрШаблон("%1: %2", ЗаголовокОшибки, 
                    СтрШаблон(НСтр("ru='нет доступа на чтение объектов класса %1'"), objectId.type));
            КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

// Возвращает ObjectId по ссылке на объект 
//
// Параметры:
//   Ссылка - ЛюбаяСсылка - ссылка на объект.
// Возвращаемое значение:
//   ОбъектXDTO типа ObjectId
// 
Функция ПолучитьObjectIdПоСсылке(Ссылка, ВключатьНавигационнуюСсылку = Истина) 
	
	ОбъектИД = СоздатьОбъект("ObjectId");
	ОбъектИД.type = ИмяТипаСсылки(Ссылка);
    
    Если ЭтоТочкаМаршрута(Ссылка) Тогда
        ОбъектИД.id = Ссылка.Имя;
        ОбъектИд.view = Строка(Ссылка);
    Иначе
    	Если Ссылка.Пустая() Тогда 
    		ОбъектИД.id =  "";
        Иначе
            Тип = ТипЗнч(Ссылка); 
        	Если Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда 
        		ОбъектИД.id =  ОбщегоНазначения.ИмяЗначенияПеречисления(Ссылка);
        	Иначе	
        		ОбъектИД.id =  Строка(Ссылка.УникальныйИдентификатор());
            КонецЕсли;	
        КонецЕсли;
        
        Если Не Ссылка.Пустая() И ВключатьНавигационнуюСсылку Тогда
            ОбъектИД.navRef = ПолучитьНавигационнуюСсылку(Ссылка);
        КонецЕсли;
    	Если Ссылка.Пустая() Тогда
    		ОбъектИД.view = Ссылка.Метаданные().Синоним;
    	Иначе
    		ОбъектИД.view = Строка(Ссылка);
        КонецЕсли;
    КонецЕсли;    
	
	Возврат ОбъектИД;
	
КонецФункции

// Возвращает имя типа XDTO по ссылке на объект
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - ссылка на объект.
// 
// Возвращаемое значение:
//  Строка - имя типа XDTO
//
Функция ИмяТипаСсылки(Ссылка)
    
    Если ЭтоТочкаМаршрута(Ссылка) Тогда
        Для каждого Процесс Из Метаданные.БизнесПроцессы Цикл
            ПроцессМенеджер = ВнешнийИнтерфейсПовтИсп.МенеджерОбъекта(Процесс.ПолноеИмя());	
            Если ПроцессМенеджер.ТочкиМаршрута.Индекс(Ссылка) <> Неопределено Тогда
                ИмяТипа = "БизнесПроцесс." + Процесс.Имя + ".Точки";
                Прервать;
            КонецЕсли;
        КонецЦикла;     
    Иначе
    	ИмяТипа = Ссылка.Метаданные().ПолноеИмя();
    КонецЕсли;
    
    ИмяТипаXDTO = ИмяТипаXDTO(ИмяТипа);
    
	Если ИмяТипаXDTO = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Попытка получить имя типа ссылки для неизвестного типа: %1.'"), ИмяТипа);
	Иначе
		Возврат ИмяТипаXDTO;
	КонецЕсли;
	
КонецФункции

// Проверяет заполнение реквизитов. 
// Для реквизитов, у которых при конфигурировании свойство "Проверка заполнения" установлено 
// в значение "Показывать ошибку" и реквизит не заполнен, будет сформировано сообщение об ошибке.
//
// Параметры:
//   Объект - Произвольный - проверяемый объект.
//   ТекстСообщения - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
// Возвращаемое значение:
//   Булево - Истина, если обязательные реквизиты заполнены, и Ложь в противном случае.
//
Функция ПроверитьЗаполнение(Объект, Ошибка, ИмяОбъекта)
    
    ТекстСообщения = "";
    
    Если Не Объект.ПроверитьЗаполнение() Тогда 
		Сообщения = ПолучитьСообщенияПользователю(Истина);
		ТекстСообщения = "";
		Для Каждого Сообщение Из Сообщения Цикл 
			ТекстСообщения = ТекстСообщения + Сообщение.Текст + Символы.ПС;
        КонецЦикла;
        
        Ошибка = СоздатьОбъект("Error");
        Ошибка.subject = СтрШаблон(НСтр("ru = 'Ошибка при записи %1'"), ИмяОбъекта);
        Ошибка.description = ТекстСообщения;
        
        Возврат Ложь;
        
    КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает объект Error по информации об ошибке.
//
Функция ОбработкаИсключения(Событие, ИнформацияОбОшибке)
    
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	ТекстСообщения = "";
	Для Каждого Сообщение Из Сообщения Цикл 
		ТекстСообщения = ТекстСообщения + Сообщение.Текст + Символы.ПС;
    КонецЦикла;
    Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
        ПредставлениеОшибки = ИнформацияОбОшибке;
    Иначе
        Если ВнешнийИнтерфейсПовтИсп.РежимОтладки() Тогда
	        ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
        Иначе
            ПредставлениеОшибки = ИнформацияОбОшибке.Описание;
        КонецЕсли;
    	Если Не ПустаяСтрока(ИнформацияОбОшибке.Описание) И ПустаяСтрока(ПредставлениеОшибки) Тогда
    		ПредставлениеОшибки = ИнформацияОбОшибке.Описание;
    	КонецЕсли;
    	
    КонецЕсли;
	
    Ошибка = СоздатьОбъект("Error");
    Ошибка.subject = Событие;
    Ошибка.description = ПредставлениеОшибки + ?(ПредставлениеОшибки + ТекстСообщения = "", "", Символы.ПС) + ТекстСообщения;
    
    Возврат Ошибка;

КонецФункции

// Возвращает имя типа объекта по имени типа XDTO
//
// Параметры:
//  ИмяТипаXDTO - Строка - имя типа XDTO
// 
// Возвращаемое значение:
//  Строка - имя типа
//
Функция ИмяТипа(ИмяТипаXDTO) Экспорт
    
    СоответствиеТипов = ВнешнийИнтерфейсПовтИсп.СоответствиеТипов(Истина);
	Строка = СоответствиеТипов.Найти(СокрЛП(ИмяТипаXDTO), "ИмяXDTO");
    Если Строка = Неопределено Тогда
        Строка = СоответствиеТипов.Найти(СокрЛП(ИмяТипаXDTO), "ИмяXDTOНРег");
    КонецЕсли;
    Если Строка = Неопределено Тогда
        Возврат Неопределено;
    Иначе
        ИмяТипаXDTO = Строка.ИмяXDTO;
        Возврат Строка.Имя;
    КонецЕсли;
    
КонецФункции

// Возвращает имя типа XDTO по имени типа объекта.
//
// Параметры:
//  ИмяТипаXDTO - Строка - имя типа объекта.
// 
// Возвращаемое значение:
//  Строка - имя типа XDTO
//
Функция ИмяТипаXDTO(ИмяТипа)
    
    СоответствиеТипов = ВнешнийИнтерфейсПовтИсп.СоответствиеТипов(Истина);
	Строка = СоответствиеТипов.Найти(СокрЛП(ИмяТипа), "Имя");
    Если Строка = Неопределено Тогда
        Возврат Неопределено;
    Иначе
        Возврат Строка.ИмяXDTO;
    КонецЕсли;
    
КонецФункции

// Заполняет форматированный документ из объекта XDTO типа HTMLObject.
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - ОбъектXDTO типа HTMLObject.
//
Функция ФорматированныйДокументИзHTMLObject(ОбъектXDTO)
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	
	Если Не ОбъектXDTO = Неопределено Тогда
		Если Не ПроверитьТип(ОбъектXDTO, "HTMLObject") Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='Ожидается тип {%1}HTMLObject.'"), ПространствоИмен());
		КонецЕсли; 
		
		Если ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
			ТекстHTML = ОбъектXDTO.htmlText;
			СтруктураВложений = Новый Структура;
			Для каждого ВложениеXDTO Из ОбъектXDTO.images Цикл
				СтруктураВложений.Вставить(ВложениеXDTO.name, новый Картинка(ВложениеXDTO.data, Истина));
			КонецЦикла; 
			ФорматированныйДокумент.УстановитьHTML(ТекстHTML, СтруктураВложений);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФорматированныйДокумент;
	
КонецФункции

Процедура ЗаполнитьОбщиеСвойстваКарточкиБазыЗнанийИзОбъектаXDTO(Объект, ОбъектXDTO)
	
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Код, ОбъектXDTO, "code");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Наименование, ОбъектXDTO, "name");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.ДатаРегистрации, ОбъектXDTO, "creationDate");
	ЗаполнитьРеквизитИзСвойстваXDTO(Объект.Состояние, ОбъектXDTO, "status");
	
	Объект.Сервисы.Очистить();
	Для каждого Элемент Из ОбъектXDTO.services Цикл
		НоваяСтрока = Объект.Сервисы.Добавить();
		НоваяСтрока.Сервис = СсылкаПоObjectId(Элемент.objectId);
	КонецЦикла; 
	
	Объект.Компоненты.Очистить();
	Для каждого Элемент Из ОбъектXDTO.components Цикл
		НоваяСтрока = Объект.Компоненты.Добавить();
		НоваяСтрока.Компонент = СсылкаПоObjectId(Элемент.objectId);
	КонецЦикла; 
	
	Объект.Разделы.Очистить();
	Для каждого Элемент Из ОбъектXDTO.sections Цикл
		НоваяСтрока = Объект.Разделы.Добавить();
		НоваяСтрока.Раздел = СсылкаПоObjectId(Элемент.objectId);
	КонецЦикла; 
	
	Описание = ФорматированныйДокументИзHTMLObject(ОбъектXDTO.descriptionHTML);
	
	Объект.ОписаниеХранилище = Новый ХранилищеЗначения(Описание);
	Объект.Описание = Описание.ПолучитьТекст();
	
КонецПроцедуры

// Возвращает строку адресатов, разделенных ";" в виде "Адресат <АдресАдресата>".
//
// Параметры:
//   ТаблицаПолучателей - ТаблицаЗначений с колонкой Адресат.
//
// Возвращаемое значение:
//   Строка, содержащая перечень представлений адресатов.
//
Функция ПолучитьПредставлениеАдресатов(ТаблицаПолучателей)
	
	СтрокаКВозврату = "";
	Для каждого Получатель Из ТаблицаПолучателей Цикл
		ПредставлениеАдресата = ?(ЗначениеЗаполнено(Получатель.Контакт), 
            СокрЛП(Получатель.Контакт), СокрЛП(Получатель.Представление)) + 
            ?(ЗначениеЗаполнено(Получатель.Адрес) И Найти(Получатель.Представление, Получатель.Адрес) = 0," <" + НРег(Получатель.Адрес) + ">","");
		СтрокаКВозврату =  СтрокаКВозврату + ?(Найти(ПредставлениеАдресата, "@"), ПредставлениеАдресата + "; ", "");
    КонецЦикла;
    
	Возврат Лев(СтрокаКВозврату, СтрДлина(СтрокаКВозврату) - 2);
	
КонецФункции

Процедура ДобавитьСвойстваПоСоответствию(Объект, ОбъектXDTO, СвойстваОбъекта)
    
    СоответствиеСвойств = ВнешнийИнтерфейсПовтИсп.СоответствиеСвойств(ОбъектXDTO.Тип().Имя);
    Для каждого Соответствие Из СоответствиеСвойств Цикл
        СвойстваОбъекта.Вставить(Соответствие.Ключ, Объект[Соответствие.Значение])
    КонецЦикла; 

КонецПроцедуры

// Заполняет свойства объекта XDTO по соответствию
//
// Параметры:
//	ОбъектXDTO - ОбъектXDTO - заполняемый объект.
//	ОбъектВыборка - ДокументОбъект, ВыборкаИзРезультатаЗапроса - источник данных заполнения.
//	СоответствиеРеквизитов - Соответствие - соответствие реквизитов объекта конфигурации и свойств XDTO
//							 для ссылочных реквизитов указывается суффикс "#<ТипXDTO>", например "user#User".
//
Процедура ЗаполнитьСвойстваXDTOПоСоответствию(ОбъектXDTO, ОбъектВыборка, СоответствиеРеквизитов, ЗаполняемыеСвойства = Неопределено)
    
    ЗаполняемыеСвойства = ?(ЗаполняемыеСвойства = Неопределено, Новый Массив, ЗаполняемыеСвойства);
	ПолучатьВсеСвойства = (ЗаполняемыеСвойства.Количество() = 0);
     
	Для Каждого ЭлементСоответствия Из СоответствиеРеквизитов Цикл
		РазделительСвойства = Найти(ЭлементСоответствия.Значение, "#");
        Свойство = ЭлементСоответствия.Ключ;
        Если РазделительСвойства <> 0 Тогда
            СвойствоXDTO = Лев(ЭлементСоответствия.Значение, РазделительСвойства - 1);
            ТипXDTO = Прав(ЭлементСоответствия.Значение, СтрДлина(ЭлементСоответствия.Значение) - РазделительСвойства);
        Иначе
            СвойствоXDTO = ЭлементСоответствия.Значение;
            ТипXDTO = Неопределено;
        КонецЕсли;
		Если ПолучатьВсеСвойства Или ЗаполняемыеСвойства.Найти(НРег(СвойствоXDTO)) <> Неопределено Тогда 
            ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, СвойствоXDTO, ОбъектВыборка[Свойство], ТипXDTO)
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКомментарии(Объект, КомментарииXDTO, ЗаполняемыеСвойства);
	
	Если ЗаполняемыеСвойства.Количество() = 0 Или ЗаполняемыеСвойства.Найти(НРег("comments")) <> Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Комментарии.Ссылка КАК Ссылка,
		|	Комментарии.ПометкаУдаления КАК ПометкаУдаления,
		|	Комментарии.Код КАК Код,
		|	Комментарии.Дата КАК Дата,
		|	Комментарии.Комментарий КАК Комментарий,
		|	Комментарии.ВнутренняяПереписка КАК ВнутренняяПереписка,
		|	Комментарии.ЛинияПоддержки КАК ЛинияПоддержки,
		|	Комментарии.Автор КАК Автор
		|ИЗ
		|	Справочник.Комментарии КАК Комментарии
		|ГДЕ
		|	Комментарии.ВладелецКомментария = &ВладелецКомментария";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ВладелецКомментария", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
        Пока Выборка.Следующий() Цикл
			Строка = Выборка;
        	СвойстваСтроки = Новый Структура;
        	СвойстваСтроки.Вставить("date", Строка.Дата);
        	СвойстваСтроки.Вставить("author", Строка.Автор);
        	СвойстваСтроки.Вставить("supportLine", Строка.ЛинияПоддержки);
        	СвойстваСтроки.Вставить("comment", Строка.Комментарий);
            Если ПроверитьТип(КомментарииXDTO.Владелец, "Incident") Тогда
                СтрокаXDTO = СоздатьОбъект("IncidentComment");
            Иначе
                СтрокаXDTO = СоздатьОбъект("ArticleComment");
            КонецЕсли;                
    	    ЗаполнитьСвойстваОбъектаXDTOИзЗначений(СтрокаXDTO, СвойстваСтроки);
            КомментарииXDTO.Добавить(СтрокаXDTO);
        КонецЦикла; 
    КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьУсловиеОтбора(Условия, Поле, ОператорСравнения, Значение)
    
    Условие = Условия.Добавить();
    Условие.Поле = Поле;
    Условие.ОператорСравнения = ОператорСравнения;
    Условие.Значение = Значение;
	
КонецПроцедуры

Функция МассивИзСпискаXDTO(СписокXDTO)
    
	Массив = Новый Массив;
	Если СписокXDTO <> Неопределено Тогда 
        Для Каждого Элемент Из СписокXDTO Цикл
            Значение = ?(ТипЗнч(Элемент) = Тип("Строка"), НРег(СокрЛП(Элемент)), Элемент);
			Массив.Добавить(Значение);
		КонецЦикла;
	КонецЕсли;
    
    Возврат Массив;
    
КонецФункции

Функция СоответствиеСвойствИКолонок()
    
    СоответствиеСвойствИКолонок = Новый Соответствие;
    СоответствиеСвойствИКолонок.Вставить("services","Сервис");
    СоответствиеСвойствИКолонок.Вставить("components","Компонент");
    СоответствиеСвойствИКолонок.Вставить("sections","Раздел");
    
    Возврат СоответствиеСвойствИКолонок;
    
КонецФункции

Функция СоответствиеСвойствИТабличныхЧастей()
    
    СоответствиеСвойствИКолонок = Новый Соответствие;
    СоответствиеСвойствИКолонок.Вставить("services","Сервисы");
    СоответствиеСвойствИКолонок.Вставить("components","Компоненты");
    СоответствиеСвойствИКолонок.Вставить("sections","Разделы");
    
    Возврат СоответствиеСвойствИКолонок;
    
КонецФункции

Процедура ОбработатьОсобоеСвойство(ОбъектXDTO, ИмяСвойстваXDTO, Значение)
    
    ТипСвойства = ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойстваXDTO).Тип;
    СоответствиеСвойствИКолонок = СоответствиеСвойствИКолонок();
    
    Значения = Значение.Выгрузить();
    Для каждого Строка Из Значения Цикл
		ЗначениеСвойства = ФабрикаXDTO.Создать(ТипСвойства);
		ЗначениеСвойства.objectId = ПолучитьObjectIdПоСсылке(Строка[СоответствиеСвойствИКолонок.Получить(ИмяСвойстваXDTO)], Ложь);
		ОбъектXDTO[ИмяСвойстваXDTO].Добавить(ЗначениеСвойства);
    КонецЦикла; 

КонецПроцедуры

Процедура ЗаполнитьВложения(ПриемникXDTO, Объект)

    Файлы = Новый Массив;
    Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Или
        ТипЗнч(Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
        ДанныеФайлов = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Объект);
        Если ДанныеФайлов.Количество() > 0 Тогда
            Для каждого СтрокаФайла Из ДанныеФайлов Цикл
                Если Не ЗначениеЗаполнено(СтрокаФайла.ИДФайлаЭлектронногоПисьма) Тогда
                    Файлы.Добавить(СтрокаФайла.Ссылка);	
                КонецЕсли; 	
            КонецЦикла; 
        КонецЕсли;
    Иначе
        ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(Объект, Файлы);
    КонецЕсли;

    Если Файлы.Количество() > 0 Тогда
        НаборКолонокФайлов = Новый Массив;
        НаборКолонокФайлов.Добавить("objectId");
        НаборКолонокФайлов.Добавить("name");
        НаборКолонокФайлов.Добавить("size");
        НаборКолонокФайлов.Добавить("modificationDateUniversal");
        НаборКолонокФайлов.Добавить("extension");
        
        ДанныеФайлов = ЗаполнитьСписокФайлов(Файлы, НаборКолонокФайлов);
        ЗаполнитьСписокФайловИзМассива(ПриемникXDTO, ДанныеФайлов, НаборКолонокФайлов);
    КонецЕсли;
    
КонецПроцедуры

Функция ЕстьПравоНаЧтение(ИмяТипа)
    
    Если Найти(ИмяТипа, "Перечисление.") Тогда
        Возврат Истина;
    ИначеЕсли Найти(ИмяТипа, "БизнесПроцесс.") И Найти(ИмяТипа, ".Точки") Тогда
        Возврат ПравоДоступа("Чтение", Метаданные.НайтиПоПолномуИмени(СтрЗаменить(ИмяТипа,".Точки","")));
    Иначе
        Возврат ПравоДоступа("Чтение", Метаданные.НайтиПоПолномуИмени(ИмяТипа))
    КонецЕсли;
    
КонецФункции

Процедура ЗаполнитьТипыXDTOОбъектовИспользованияДополнительногоСвойства(ОбъектXDTO, Ссылка)
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗЛИЧНЫЕ
        |   Наборы.Ссылка
        |ИЗ
        |   Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Наборы
        |ГДЕ
        |   Наборы.Свойство = &Свойство";
    
    Запрос.УстановитьПараметр("Свойство", Ссылка);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        ТипXDTO = ТипXDTOПоНаборуДополнительныхРеквизитов(Выборка.Ссылка);    
        Если ТипXDTO <> Неопределено Тогда
            ОбъектXDTO.usedIn.Добавить(ТипXDTO);
        КонецЕсли; 
    КонецЦикла;
    
КонецПроцедуры

Процедура ЗаполнитьТипыXDTOДополнительногоСвойства(ОбъектXDTO, Свойство)
    
    Для Каждого ТипРеквизита Из Свойство.ТипЗначения.Типы() Цикл
        
        ОбъектТипXDTO = СоздатьОбъект("Type");
        
        Если ТипРеквизита = Тип("Дата") Тогда
            ОбъектТипXDTO.xdtoClassName = "date";
            ОбъектТипXDTO.presentation = НСтр("ru = 'Дата'");
            
        ИначеЕсли ТипРеквизита = Тип("Число") Тогда
            ОбъектТипXDTO.xdtoClassName = "integer";
            ОбъектТипXDTO.presentation = НСтр("ru = 'Число'");
            
        ИначеЕсли ТипРеквизита = Тип("Строка") Тогда
            ОбъектТипXDTO.xdtoClassName = "string";
            ОбъектТипXDTO.presentation = НСтр("ru = 'Строка'");
            
        ИначеЕсли ТипРеквизита = Тип("Булево") Тогда
            ОбъектТипXDTO.xdtoClassName = "boolean";
            ОбъектТипXDTO.presentation = НСтр("ru = 'Логическое значение'");
            
        ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
            ОбъектТипXDTO.xdtoClassName = "DynamicAttributeValue";
            ОбъектТипXDTO.presentation = НСтр("ru = 'Дополнительное значение'");
            
        ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия") Тогда
            ОбъектТипXDTO.xdtoClassName = "DynamicAttributeValueHierarchy";
            ОбъектТипXDTO.presentation = НСтр("ru = 'Дополнительное значение (иерархия)'");
            
        ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.ПользователиСервисов") Тогда
            ОбъектТипXDTO.xdtoClassName = "ServiceUser";
            ОбъектТипXDTO.presentation = НСтр("ru = 'Пользователь сервиса'");
            
        ИначеЕсли ТипРеквизита = Тип("СправочникСсылка.Пользователи") Тогда
            ОбъектТипXDTO.xdtoClassName = "User";
            ОбъектТипXDTO.presentation = НСтр("ru = 'Пользователь'");
            
        Иначе
            ОбъектТипXDTO.xdtoClassName = "string";
            ОбъектТипXDTO.presentation = НСтр("ru = 'Строка'");
            
        КонецЕсли;
        
        ОбъектXDTO.valueTypes.Добавить(ОбъектТипXDTO);
        
    КонецЦикла
    
КонецПроцедуры

Процедура ЗаполнитьСервисыДополнительногоСвойства(ОбъектXDTO, Ссылка)

    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Т.Сервис
        |ИЗ
        |   РегистрСведений.ДополнительныеРеквизитыОбъектовПоСервисам КАК Т
        |ГДЕ
        |   Т.ДополнительныйРеквизит = &ДополнительныйРеквизит
        |   И НЕ Т.Сервис.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("ДополнительныйРеквизит", Ссылка);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        ЗначениеСвойства = СоздатьОбъект("Service");
        ЗначениеСвойства.objectId = ПолучитьObjectIdПоСсылке(Выборка.Сервис, Ложь);
        ОбъектXDTO.services.Добавить(ЗначениеСвойства);
    КонецЦикла; 
	
КонецПроцедуры
 

#КонецОбласти