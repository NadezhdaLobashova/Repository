
#Область ПрограммныйИнтерфейс
    
// Формирует таблицу соответствия типов XDTO и типов объектов информационной базы.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * ИмяXDTO - Строка - имя типа XDTO.
//     * Имя - Строка - полное имя типа УСП.
// 
Функция СоответствиеТипов(ДобавлятьНРег = Ложь) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяXDTO", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Имя", 	Новый ОписаниеТипов("Строка"));
	
	// Справочники
	ДобавитьСтроку(Таблица, "Application",       "Справочник.Приложения");
	ДобавитьСтроку(Таблица, "Consultation",      "Справочник.Консультации");
	ДобавитьСтроку(Таблица, "Problem",           "Справочник.Ошибки");
	ДобавитьСтроку(Таблица, "Suggestion",        "Справочник.Пожелания");
	ДобавитьСтроку(Таблица, "User",              "Справочник.Пользователи");
	ДобавитьСтроку(Таблица, "Subscriber",        "Справочник.Абоненты");
	ДобавитьСтроку(Таблица, "ServiceUser",       "Справочник.ПользователиСервисов");
	ДобавитьСтроку(Таблица, "SupportLine",       "Справочник.ЛинииПоддержки");
	ДобавитьСтроку(Таблица, "Partner",           "Справочник.ОбслуживающиеОрганизации");
	ДобавитьСтроку(Таблица, "Service",           "Справочник.Сервисы");
	ДобавитьСтроку(Таблица, "Component",         "Справочник.КомпонентыСервиса");
	ДобавитьСтроку(Таблица, "Section",           "Справочник.Разделы");
	ДобавитьСтроку(Таблица, "RecievingChannel",  "Справочник.КаналыПолученияОбращений");
	ДобавитьСтроку(Таблица, "EMailAccount",      "Справочник.УчетныеЗаписиЭлектроннойПочты");
	ДобавитьСтроку(Таблица, "TaskPerformerRole", "Справочник.РолиИсполнителей");
    
    // У файлов есть особенность - отдельные справочники для разных типов объектов.
	ДобавитьСтроку(Таблица, "File",             "Справочник.ОбращениеПрисоединенныеФайлы");
	ДобавитьСтроку(Таблица, "File",             "Справочник.КонсультацииПрисоединенныеФайлы");
	ДобавитьСтроку(Таблица, "File",             "Справочник.ОшибкиПрисоединенныеФайлы");
	ДобавитьСтроку(Таблица, "File",             "Справочник.ПожеланияПрисоединенныеФайлы");
	ДобавитьСтроку(Таблица, "File",             "Справочник.КомментарийПользователяПрисоединенныеФайлы");
	ДобавитьСтроку(Таблица, "File",             "Справочник.ТелефонныйЗвонокПрисоединенныеФайлы");
	ДобавитьСтроку(Таблица, "File",             "Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы");
	ДобавитьСтроку(Таблица, "File",             "Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы");
	
	// Документы
	ДобавитьСтроку(Таблица, "Incident",           "Документ.Обращение");
	ДобавитьСтроку(Таблица, "ServiceUserComment", "Документ.КомментарийПользователя");
	ДобавитьСтроку(Таблица, "PhoneCall",          "Документ.ТелефонныйЗвонок");
	ДобавитьСтроку(Таблица, "IncomingEMail",      "Документ.ЭлектронноеПисьмоВходящее");
	ДобавитьСтроку(Таблица, "OutgoingEMail",      "Документ.ЭлектронноеПисьмоИсходящее");
	
	// Перечисления
	ДобавитьСтроку(Таблица, "IncidentStatus",        "Перечисление.СостоянияОбращений");
	ДобавитьСтроку(Таблица, "ProblemStatus",         "Перечисление.СостоянияОшибок");
	ДобавитьСтроку(Таблица, "ConsultationStatus",    "Перечисление.СостоянияКонсультаций");
	ДобавитьСтроку(Таблица, "SuggestionStatus",      "Перечисление.СостоянияПожеланий");
	ДобавитьСтроку(Таблица, "IncidentType",          "Перечисление.ТипыОбращений");
	ДобавитьСтроку(Таблица, "Importance",            "Перечисление.ВариантыВажности");
	ДобавитьСтроку(Таблица, "OutgoingEMailStatus",   "Перечисление.СтатусыИсходящегоЭлектронногоПисьма");
	ДобавитьСтроку(Таблица, "InteractionImportance", "Перечисление.ВариантыВажностиВзаимодействия");
	ДобавитьСтроку(Таблица, "EMailBodyType",         "Перечисление.ТипыТекстовЭлектронныхПисем");
	ДобавитьСтроку(Таблица, "TaskImportance",        "Перечисление.ВариантыВажностиЗадачи");
	ДобавитьСтроку(Таблица, "ProcessStatus",         "Перечисление.СостоянияБизнесПроцессов");
	
	// Регистры сведений
	ДобавитьСтроку(Таблица, "ActualWork", "РегистрСведений.ФактическиеТрудозатраты");
    
	// Планы видов характеристик
	ДобавитьСтроку(Таблица, "TaskAddressingObject", "ПланВидовХарактеристик.ОбъектыАдресацииЗадач");
    
    // Бизнес-процессы
	ДобавитьСтроку(Таблица, "Order", "БизнесПроцесс.Поручение");
    
	// Точки маршрута
    ДобавитьСтроку(Таблица, "OrderRoutePoint", "БизнесПроцесс.Поручение.Точки");
    
	// Задачи
    ДобавитьСтроку(Таблица, "Task", "Задача.ЗадачаИсполнителя");
    
    // Группа объектов механики дополнительных реквизитов и сведений.
    ДобавитьСтроку(Таблица, "DynamicAttributeValue", "Справочник.ЗначенияСвойствОбъектов");
	ДобавитьСтроку(Таблица, "DynamicAttributeValueHierarchy", "Справочник.ЗначенияСвойствОбъектовИерархия");
	ДобавитьСтроку(Таблица, "DynamicAttribute", 	"ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения");
    
    // Поддержим имена объектов в нижнем регистре
    Если ДобавлятьНРег Тогда 
        КоличествоСтрок = Таблица.Количество();
    	Таблица.Колонки.Добавить("ИмяXDTOНРег", Новый ОписаниеТипов("Строка"));
        Для Индекс = 0 по КоличествоСтрок - 1 Цикл
            Строка = Таблица[Индекс];
            Строка.ИмяXDTOНРег = НРег(Строка.ИмяXDTO)
        КонецЦикла;
    КонецЕсли;
    
    Возврат Таблица;
	
КонецФункции

// Возвращает соответствие свойств XDTO и реквизитов объекта.
// 
// Параметры:
//   Тип - Строка - имя типа XDTO
//
// Возвращаемое значение:
//   Структура, где ключом является имя свойства XDTO, а значением - имя реквизита.
//
Функция СоответствиеСвойств(Знач Тип) Экспорт
    
    Тип = НРег(Тип);
	Результат = Новый Структура;
	
	Если Тип = НРег("Consultation") Или Тип = НРег("Problem") Или Тип = НРег("Suggestion") Тогда
		Результат.Вставить("objectVersion", "ВерсияДанных");
		Результат.Вставить("code", "Код");
		Результат.Вставить("name", "Наименование");
		Результат.Вставить("status", "Состояние");
		Результат.Вставить("services", "Сервисы");
		Результат.Вставить("creationDate", "ДатаРегистрации");
		Результат.Вставить("modifiedDate", "ДатаИзменения");
		Результат.Вставить("components", "Компоненты");
		Результат.Вставить("sections", "Разделы");
		Результат.Вставить("description", "Описание");
		Результат.Вставить("descriptionHTML", "ОписаниеХранилище");
		Если Тип = НРег("Problem") Тогда
			Результат.Вставить("critical", "Критичная");
			Результат.Вставить("playback", "Воспроизведение");
			Результат.Вставить("playbackHTML", "ВоспроизведениеХранилище");
			Результат.Вставить("solution", "Решение");
			Результат.Вставить("solutionHTML", "РешениеХранилище");
			Результат.Вставить("bypass", "ОбходнойПуть");
			Результат.Вставить("bypassHTML", "ОбходнойПутьХранилище");
		КонецЕсли;
        
    ИначеЕсли Тип = НРег("Incident") Тогда
		Результат.Вставить("objectVersion", "ВерсияДанных");
		Результат.Вставить("number", "НомерСокращенный");
		Результат.Вставить("date", "Дата");
		Результат.Вставить("service", "Сервис");
		Результат.Вставить("component", "Компонент");
		Результат.Вставить("section", "Раздел");
		Результат.Вставить("importance", "Важность");
		Результат.Вставить("subject", "Тема");
		Результат.Вставить("type", "ТипОбращения");
		Результат.Вставить("status", "Состояние");
		Результат.Вставить("partner", "ОбслуживающаяОрганизация");
		Результат.Вставить("supportLine", "ЛинияПоддержки");
		Результат.Вставить("responsible", "Исполнитель");
		Результат.Вставить("initiator", "Инициатор");
		Результат.Вставить("recievingChannel", "КаналПолучения");
		Результат.Вставить("knowledgeBaseArticle", "КарточкаБазыЗнаний");
		Результат.Вставить("description", "Описание");
		Результат.Вставить("descriptionHTML", "ОписаниеХранилище");
		Результат.Вставить("subscriber", "Абонент");
		Результат.Вставить("subscriberPartner", "АбонентОбслуживающейОрганизации");
		Результат.Вставить("modifiedDate", "ДатаИзменения");
        Результат.Вставить("eMailForCorrespondence", "АдресДляПереписки");
        
    ИначеЕсли Тип = НРег("SupportLine") Тогда
		Результат.Вставить("partner", "Владелец");
        
    ИначеЕсли Тип = НРег("ServiceUser") Тогда
		Результат.Вставить("service", "Владелец");
		Результат.Вставить("eMails", "СтрокаEmail");
		Результат.Вставить("login", "Код");
		Результат.Вставить("fullName", "Наименование");
        
    ИначеЕсли Тип = НРег("Subscriber") Тогда
		Результат.Вставить("service", "Владелец");
		Результат.Вставить("code", "Код");
        
    ИначеЕсли Тип = НРег("Service") Тогда
		Результат.Вставить("code", "Код");
		Результат.Вставить("tariffsEnabled", "ИспользоватьТарифы");
        
    ИначеЕсли Тип = НРег("Partner") Тогда
		Результат.Вставить("code", "Код");
		Результат.Вставить("firstSupportLine", "ПерваяЛинияПоддержки");
        
    ИначеЕсли Тип = НРег("PhoneCall") Тогда
		Результат.Вставить("objectVersion", "ВерсияДанных");
		Результат.Вставить("creationDate", "Дата");
    	Результат.Вставить("subject", "Тема");
		Результат.Вставить("description", "Описание");
		Результат.Вставить("incoming", "Входящий");
		Результат.Вставить("internal", "ВнутренняяПереписка");
		Результат.Вставить("contact", "АбонентКонтакт");
		Результат.Вставить("callCode", "КодЗвонка");
        
    ИначеЕсли Тип = НРег("IncomingEmail") Тогда
        Результат.Вставить("creationDate", "Дата");
        Результат.Вставить("subject", "Тема");
        Результат.Вставить("importance", "Важность");
        Результат.Вставить("body", "Текст");
        Результат.Вставить("bodyType", "ТипТекста");
        Результат.Вставить("internal", "ВнутренняяПереписка");
        Результат.Вставить("containsAttachments", "ЕстьВложения");
        
    ИначеЕсли Тип = НРег("OutgoingEMail") Тогда
        Результат.Вставить("creationDate", "Дата");
        Результат.Вставить("subject", "Тема");
        Результат.Вставить("importance", "Важность");
        Результат.Вставить("body", "Текст");
        Результат.Вставить("bodyType", "ТипТекста");
        Результат.Вставить("internal", "ВнутренняяПереписка");
        Результат.Вставить("status", "СтатусПисьма");
        Результат.Вставить("baseId", "ИдентификаторОснования");
        Результат.Вставить("dateSent", "ДатаОтправления");
        Результат.Вставить("containsAttachments", "ЕстьВложения");
        Результат.Вставить("account", "УчетнаяЗапись");
       
    ИначеЕсли Тип = НРег("ServiceUserComment") Тогда
		Результат.Вставить("creationDate", "Дата");
    	Результат.Вставить("subject", "Тема");
	    Результат.Вставить("description", "Описание");
		Результат.Вставить("author", "Автор");
		Результат.Вставить("responsible", "Ответственный");
        
    ИначеЕсли Тип = НРег("Component") Тогда
		Результат.Вставить("service", "Владелец");
		Результат.Вставить("code", "Код");
        
    ИначеЕсли Тип = НРег("Application") Тогда
		Результат.Вставить("service", "Владелец");
		Результат.Вставить("code", "Код");
        
    ИначеЕсли Тип = НРег("Section") Тогда
		Результат.Вставить("code", "Код");
		Результат.Вставить("services", "Сервисы");
		Результат.Вставить("components", "Компоненты");
        
    ИначеЕсли Тип = НРег("EMailAccount") Тогда
		Результат.Вставить("useForSending", "ИспользоватьДляОтправки");
		Результат.Вставить("useForReceiving", "ИспользоватьДляПолучения");
        
    ИначеЕсли Тип = НРег("Order") Тогда
		Результат.Вставить("objectVersion", "ВерсияДанных");
		Результат.Вставить("creationDate", "Дата");
		Результат.Вставить("number", "Номер");
		Результат.Вставить("name", "Наименование");
		Результат.Вставить("description", "Содержание");
		Результат.Вставить("descriptionHTML", "СодержаниеХранилище");
		Результат.Вставить("author", "Автор");
		Результат.Вставить("importance", "Важность");
		Результат.Вставить("endDate", "ДатаЗавершения");
		Результат.Вставить("deadline", "СрокИсполнения");
		Результат.Вставить("reviewPeriod", "СрокПроверки");
		Результат.Вставить("target", "Предмет");
		Результат.Вставить("status", "Состояние");
		Результат.Вставить("runtimeComments", "РезультатВыполнения");
        
    ИначеЕсли Тип = НРег("Task") Тогда
		Результат.Вставить("objectVersion", "ВерсияДанных");
		Результат.Вставить("creationDate", "Дата");
		Результат.Вставить("process", "БизнесПроцесс");
		Результат.Вставить("routePoint", "ТочкаМаршрута");
		Результат.Вставить("number", "Номер");
		Результат.Вставить("name", "Наименование");
		Результат.Вставить("done", "Выполнена");
		Результат.Вставить("importance", "Важность");
		Результат.Вставить("author", "Автор");
		Результат.Вставить("target", "Предмет");
		Результат.Вставить("description", "Описание" );
		Результат.Вставить("performerComment", "РезультатВыполнения");
		Результат.Вставить("deadline", "СрокИсполнения");
		Результат.Вставить("endDate", "ДатаИсполнения");
		Результат.Вставить("accepted", "ПринятаКИсполнению");
		Результат.Вставить("acceptDate", "ДатаПринятияКИсполнению");
		Результат.Вставить("startDate", "ДатаНачала");
		Результат.Вставить("status", "СостояниеБизнесПроцесса");
        
    ИначеЕсли Тип = НРег("DynamicAttribute") Тогда
		Результат.Вставить("tooltip", "Подсказка");
		Результат.Вставить("format", "ФорматСвойства");
		Результат.Вставить("required", "ЗаполнятьОбязательно");
		Результат.Вставить("multilineInput", "МногострочноеПолеВвода");
        
    ИначеЕсли Тип = НРег("DynamicAttributeValue") Тогда
		Результат.Вставить("owner", "Владелец");
        
    ИначеЕсли Тип = НРег("DynamicAttributeValueHierarchy") Тогда
		Результат.Вставить("owner", "Владелец");
        
    КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак особого свойства.
// К особым свойствам относятся свойства, которые обрабатываются не типовым образом, 
// например списки XDTO из табличных частей.
//
// Параметры:
//  ИмяСвойства - Строка - имя свойства для проверки.
// 
// Возвращаемое значение:
//  Булево - признак
//
Функция ЭтоОсобоеСвойство(ИмяСвойства) Экспорт
    
    Возврат СтрРазделить("services, components, sections, serviceUsers", ", ", Ложь).Найти(НРег(ИмяСвойства)) <> Неопределено;
    
КонецФункции

// Возвращает значение константы ВнешнийИнтерфейсРежимОтладки.
// 
// Возвращаемое значение:
//  Булево - значение константы ВнешнийИнтерфейсРежимОтладки.
//
Функция РежимОтладки() Экспорт

	Возврат Константы.ВнешнийИнтерфейсРежимОтладки.Получить();

КонецФункции

// Возвращает менеджер объекта по полному имени объекта.
//
// Параметры:
//  ИмяОбъекта - Строка - полное имя объекта.
// 
// Возвращаемое значение:
//   СправочникМенеджер - менеджер объекта.
//
Функция МенеджерОбъекта(ИмяОбъекта) Экспорт
    
    Возврат ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяОбъекта);
    
КонецФункции

// Возвращает набор дополнительных реквизитов по типу XDTO
//
Функция НаборДополнительныхРевизитовПоТипуXDTO(ТипXDTO) Экспорт
    
    Менеджер = Справочники.НаборыДополнительныхРеквизитовИСведений; 
    
    НаборыПоТипамXDTO = Новый Соответствие;
    НаборыПоТипамXDTO.Вставить(НРег("Subscriber"), Менеджер.Справочник_Абоненты);
    НаборыПоТипамXDTO.Вставить(НРег("Incident"), Менеджер.Документ_Обращение);
    НаборыПоТипамXDTO.Вставить(НРег("PhoneCall"), Менеджер.Документ_ТелефонныйЗвонок);
    НаборыПоТипамXDTO.Вставить(НРег("ServiceUserComment"), Менеджер.Документ_КомментарийПользователя);
    НаборыПоТипамXDTO.Вставить(НРег("IncomingEMail"), Менеджер.Документ_ЭлектронноеПисьмоВходящее);
    НаборыПоТипамXDTO.Вставить(НРег("OutgoingEMail"), Менеджер.Документ_ЭлектронноеПисьмоИсходящее);
    
    Возврат НаборыПоТипамXDTO.Получить(НРег(ТипXDTO));
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции
    
// Добавляет строку в таблицу соответствия типов
// 
Процедура ДобавитьСтроку(Таблица, ИмяXDTO, Имя)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ИмяXDTO = ИмяXDTO;
	НоваяСтрока.Имя = Имя;
	
КонецПроцедуры

#КонецОбласти 
