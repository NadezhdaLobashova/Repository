
#Область ПрограммныйИнтерфейс

// Возвращает значение константы РазрешитьИзменятьНастройкиУведомлений
//
Функция ПолучитьРазрешитьИзменятьНастройкиУведомлений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.РазрешитьИзменятьНастройкиУведомлений.Получить();
	
КонецФункции

// Получает подписку на уведомления по умолчанию
//
Функция ПолучитьНастройкуПоУмолчанию(Настройка, ВидСобытия) Экспорт
	
	Значение = РегистрыСведений.НастройкиУведомленийПоУмолчанию.ПолучитьНастройку(Настройка, ВидСобытия);
	
	Если Значение = Неопределено Тогда
		Значение = ПолучитьСтандартноеЗначениеНастройки(Настройка, ВидСобытия);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Считывает настройку срока уведомления о задачах из регистра сведений
//
Функция ПолучитьНастройкуУведомленияОЗадачах(Получатель = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		Получатель = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	НастройкаУведомлений = РегистрыСведений.НастройкиУведомленияОЗадачах.ПолучитьНастройку(Получатель);
	
	Если НастройкаУведомлений = Неопределено Тогда
		
		СрокПодошелСрокЗадачи = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.СрокУведомления,
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		ЧастотаПодошелСрокЗадачи = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.ЧастотаУведомления,
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		ЧастотаПросроченаЗадача = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.ЧастотаУведомления,
			Перечисления.СобытияУведомлений.ПросроченаЗадача);
		
		НастройкаУведомлений =
			Новый Структура("СрокПодошелСрокЗадачи, ЧастотаПодошелСрокЗадачи, ЧастотаПросроченаЗадача",
				СрокПодошелСрокЗадачи,
				ЧастотаПодошелСрокЗадачи,
				ЧастотаПросроченаЗадача);
		
	ИначеЕсли Не РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ПодпискаПодошелСрокЗадачи = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.Подписка,
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
		Если ПодпискаПодошелСрокЗадачи Тогда
			
			СрокПодошелСрокЗадачи = ПолучитьНастройкуПоУмолчанию(
				Перечисления.НастройкиУведомлений.СрокУведомления,
				Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
			НастройкаУведомлений.СрокПодошелСрокЗадачи = СрокПодошелСрокЗадачи;
			
			ЧастотаПодошелСрокЗадачи = ПолучитьНастройкуПоУмолчанию(
				Перечисления.НастройкиУведомлений.ЧастотаУведомления,
				Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
			НастройкаУведомлений.ЧастотаПодошелСрокЗадачи = ЧастотаПодошелСрокЗадачи;
			
		КонецЕсли;
		
		ПодпискаПросроченаЗадача = ПолучитьНастройкуПоУмолчанию(
			Перечисления.НастройкиУведомлений.Подписка,
			Перечисления.СобытияУведомлений.ПросроченаЗадача);
		Если ПодпискаПросроченаЗадача Тогда
			
			ЧастотаПросроченаЗадача = ПолучитьНастройкуПоУмолчанию(
				Перечисления.НастройкиУведомлений.ЧастотаУведомления,
				Перечисления.СобытияУведомлений.ПросроченаЗадача);
			НастройкаУведомлений.ЧастотаПросроченаЗадача = ЧастотаПросроченаЗадача;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкаУведомлений;
	
КонецФункции

// Считывает настройки сроков уведомления о задачах из регистра сведений для массива пользователей.
//
Функция ПолучитьНастройкиУведомленияОЗадачах(МассивПользователей)
	
	Если ТипЗнч(МассивПользователей) <> Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	
	Если РазрешитьИзменятьНастройкиУведомлений Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(НастройкиСрокПодошелСрокЗадачи.Значение, 3) КАК СрокПодошелСрокЗадачи,
			|	ЕСТЬNULL(НастройкиЧастотаПодошелСрокЗадачи.Значение, 0) КАК ЧастотаПодошелСрокЗадачи,
			|	ЕСТЬNULL(НастройкиЧастотаПросроченаЗадача.Значение, 1) КАК ЧастотаПросроченаЗадача
			|ПОМЕСТИТЬ НастройкиУведомленийПоУмолчанию
			|ИЗ
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиСрокПодошелСрокЗадачи,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиЧастотаПодошелСрокЗадачи,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиЧастотаПросроченаЗадача
			|ГДЕ
			|	НастройкиСрокПодошелСрокЗадачи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.СрокУведомления)
			|	И НастройкиСрокПодошелСрокЗадачи.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
			|	И НастройкиЧастотаПодошелСрокЗадачи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ЧастотаУведомления)
			|	И НастройкиЧастотаПодошелСрокЗадачи.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
			|	И НастройкиЧастотаПросроченаЗадача.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ЧастотаУведомления)
			|	И НастройкиЧастотаПросроченаЗадача.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь,
			|	ЕСТЬNULL(НастройкиУведомленияОЗадачах.СрокУведомления, НастройкиУведомленийПоУмолчанию.СрокПодошелСрокЗадачи) КАК СрокУведомления,
			|	ЕСТЬNULL(НастройкиУведомленияОЗадачах.ЧастотаПриближениеСрока, НастройкиУведомленийПоУмолчанию.ЧастотаПодошелСрокЗадачи) КАК ЧастотаПриближениеСрока,
			|	ЕСТЬNULL(НастройкиУведомленияОЗадачах.ЧастотаПросроченныеЗадачи, НастройкиУведомленийПоУмолчанию.ЧастотаПросроченаЗадача) КАК ЧастотаПросроченныеЗадачи
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомленияОЗадачах КАК НастройкиУведомленияОЗадачах
			|		ПО Пользователи.Ссылка = НастройкиУведомленияОЗадачах.Пользователь,
			|	НастройкиУведомленийПоУмолчанию КАК НастройкиУведомленийПоУмолчанию
			|ГДЕ
			|	Пользователи.Ссылка В(&МассивПользователей)";
		
		Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
		
		НастройкиУведомлений = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(НастройкиПодпискаПодошелСрокЗадачи.Значение, ЛОЖЬ) КАК ПодпискаПодошелСрокЗадачи,
			|	ЕСТЬNULL(НастройкиПодпискаПросроченаЗадача.Значение, ЛОЖЬ) КАК ПодпискаПросроченаЗадача,
			|	ЕСТЬNULL(НастройкиСрокПодошелСрокЗадачи.Значение, 3) КАК СрокПодошелСрокЗадачи,
			|	ЕСТЬNULL(НастройкиЧастотаПодошелСрокЗадачи.Значение, 0) КАК ЧастотаПодошелСрокЗадачи,
			|	ЕСТЬNULL(НастройкиЧастотаПросроченаЗадача.Значение, 1) КАК ЧастотаПросроченаЗадача
			|ПОМЕСТИТЬ НастройкиУведомленийПоУмолчанию
			|ИЗ
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиПодпискаПодошелСрокЗадачи,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиПодпискаПросроченаЗадача,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиСрокПодошелСрокЗадачи,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиЧастотаПодошелСрокЗадачи,
			|	РегистрСведений.НастройкиУведомленийПоУмолчанию КАК НастройкиЧастотаПросроченаЗадача
			|ГДЕ
			|	НастройкиПодпискаПодошелСрокЗадачи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
			|	И НастройкиПодпискаПодошелСрокЗадачи.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
			|	И НастройкиПодпискаПросроченаЗадача.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
			|	И НастройкиПодпискаПросроченаЗадача.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
			|	И НастройкиСрокПодошелСрокЗадачи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.СрокУведомления)
			|	И НастройкиСрокПодошелСрокЗадачи.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
			|	И НастройкиЧастотаПодошелСрокЗадачи.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ЧастотаУведомления)
			|	И НастройкиЧастотаПодошелСрокЗадачи.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
			|	И НастройкиЧастотаПросроченаЗадача.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.ЧастотаУведомления)
			|	И НастройкиЧастотаПросроченаЗадача.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь,
			|	ВЫБОР
			|		КОГДА НастройкиУведомленийПоУмолчанию.ПодпискаПодошелСрокЗадачи = ИСТИНА
			|			ТОГДА НастройкиУведомленийПоУмолчанию.СрокПодошелСрокЗадачи
			|		ИНАЧЕ ЕСТЬNULL(НастройкиУведомленияОЗадачах.СрокУведомления, НастройкиУведомленийПоУмолчанию.СрокПодошелСрокЗадачи)
			|	КОНЕЦ КАК СрокУведомления,
			|	ВЫБОР
			|		КОГДА НастройкиУведомленийПоУмолчанию.ПодпискаПодошелСрокЗадачи = ИСТИНА
			|			ТОГДА НастройкиУведомленийПоУмолчанию.ЧастотаПодошелСрокЗадачи
			|		ИНАЧЕ ЕСТЬNULL(НастройкиУведомленияОЗадачах.ЧастотаПриближениеСрока, НастройкиУведомленийПоУмолчанию.ЧастотаПодошелСрокЗадачи)
			|	КОНЕЦ КАК ЧастотаПриближениеСрока,
			|	ВЫБОР
			|		КОГДА НастройкиУведомленийПоУмолчанию.ПодпискаПросроченаЗадача = ИСТИНА
			|			ТОГДА НастройкиУведомленийПоУмолчанию.ЧастотаПросроченаЗадача
			|		ИНАЧЕ ЕСТЬNULL(НастройкиУведомленияОЗадачах.ЧастотаПросроченныеЗадачи, НастройкиУведомленийПоУмолчанию.ЧастотаПросроченаЗадача)
			|	КОНЕЦ КАК ЧастотаПросроченныеЗадачи
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомленияОЗадачах КАК НастройкиУведомленияОЗадачах
			|		ПО Пользователи.Ссылка = НастройкиУведомленияОЗадачах.Пользователь,
			|	НастройкиУведомленийПоУмолчанию КАК НастройкиУведомленийПоУмолчанию
			|ГДЕ
			|	Пользователи.Ссылка В(&МассивПользователей)";
		
		Запрос.УстановитьПараметр("МассивПользователей", МассивПользователей);
		
		НастройкиУведомлений = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат НастройкиУведомлений;
	
КонецФункции

// Устанавливает подписку на уведомления по умолчанию
//
Процедура УстановитьНастройкуПоУмолчанию(Настройка, ВидСобытия, Значение) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		СтароеЗначение = ПолучитьНастройкуПоУмолчанию(Настройка, ВидСобытия);
		
		РегистрыСведений.НастройкиУведомленийПоУмолчанию.УстановитьНастройку(Настройка, ВидСобытия, Значение);
		СкорректироватьПерсональныеНастройки(Настройка, ВидСобытия, Значение, СтароеЗначение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает значение константы РазрешитьИзменятьНастройкиУведомлений
//
Процедура УстановитьРазрешитьИзменятьНастройкиУведомлений(РазрешитьИзменятьНастройкиУведомлений) Экспорт
	
	Если РазрешитьИзменятьНастройкиУведомлений <> ПолучитьРазрешитьИзменятьНастройкиУведомлений() Тогда
		Константы.РазрешитьИзменятьНастройкиУведомлений.Установить(РазрешитьИзменятьНастройкиУведомлений);
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для обработки произошедших бизнес-событий
Процедура ОбработатьБизнесСобытие(ПроизошедшееСобытие) Экспорт 
	
	Если Не ПолучитьИспользоватьУведомления() Тогда
		Возврат;
	КонецЕсли;
	
	ВидСобытия = ПроизошедшееСобытие.ВидСобытия;
	Объект = ПроизошедшееСобытие.Источник;
	
	ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, Объект, ВидСобытия);
	
КонецПроцедуры

// Возвращает текст предупреждения об автоматической отправке
//
Функция ТекстПредупрежденияОбАвтоматическойОтправке() Экспорт
	
	Возврат НСтр("ru='Это письмо сформировано автоматически.
				|ПОЖАЛУЙСТА, НЕ ОТВЕЧАЙТЕ НА НЕГО. 
				|ПРОСЬБА ВСЕ ОТВЕТЫ ОСТАВЛЯТЬ В СИСТЕМЕ УПРАВЛЕНИЕ СЛУЖБОЙ ПОДДЕРЖКИ.'");
	
КонецФункции

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик регламентного задания КонтрольСроковЗадач
//
Процедура КонтрольСроковЗадач() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Уведомление о подходе сроков задач
	АктивныеЗадачиСПодписчиками = ВыбратьАктивныеЗадачиСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = АктивныеЗадачиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОЗадачах(МассивПодписчиков);
	
	Для Каждого СтрокаАктивныеЗадачиСПодписчиками Из АктивныеЗадачиСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаАктивныеЗадачиСПодписчиками.Подписчик, "Пользователь");
		
		СрокИсполнения = КонецДня(СтрокаАктивныеЗадачиСПодписчиками.СрокИсполнения);
		СрокЗадачиСекунды = СрокИсполнения - ТекущаяДата;
		СрокЗадачи = Окр(СрокЗадачиСекунды / (3600*24));
		
		Если СрокЗадачи > НастройкаПодписчика.СрокУведомления Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаАктивныеЗадачиСПодписчиками.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПриближениеСрока) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаАктивныеЗадачиСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПриближениеСрока Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомление(
			СтрокаАктивныеЗадачиСПодписчиками.Задача,
			СтрокаАктивныеЗадачиСПодписчиками.Подписчик,
			"",
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
			СтрокаАктивныеЗадачиСПодписчиками.ОбъектПодписки);
		
		ДобавитьОбработанноеУведомление(
			Перечисления.СобытияУведомлений.ПодошелСрокЗадачи,
			СтрокаАктивныеЗадачиСПодписчиками.Задача,
			СтрокаАктивныеЗадачиСПодписчиками.Подписчик);
		
	КонецЦикла;
	
	// Уведомление о просроченных задачах
	ПросроченныеЗадачиСПодписчиками = ВыбратьПросроченныеЗадачиСПодписчиками(ТекущаяДата);
	
	ТаблицаПодписчики = ПросроченныеЗадачиСПодписчиками.Скопировать();
	ТаблицаПодписчики.Свернуть("Подписчик");
	МассивПодписчиков = ТаблицаПодписчики.ВыгрузитьКолонку("Подписчик");
	НастройкиПодписчиков = ПолучитьНастройкиУведомленияОЗадачах(МассивПодписчиков);
	
	Для Каждого СтрокаПросроченныеЗадачиСПодписчиками Из ПросроченныеЗадачиСПодписчиками Цикл
		
		НастройкаПодписчика = НастройкиПодписчиков.Найти(СтрокаПросроченныеЗадачиСПодписчиками.Подписчик, "Пользователь");
		
		Если СтрокаПросроченныеЗадачиСПодписчиками.ДатаОбработки <> Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(НастройкаПодписчика.ЧастотаПросроченныеЗадачи) Тогда
				
				ВремяСПоследнегоУведомления = КонецДня(ТекущаяДата()) - КонецДня(СтрокаПросроченныеЗадачиСПодписчиками.ДатаОбработки);
				ВремяСПоследнегоУведомленияДней = ВремяСПоследнегоУведомления / (60*60*24);
				
				Если ВремяСПоследнегоУведомленияДней < НастройкаПодписчика.ЧастотаПросроченныеЗадачи Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомление(
			СтрокаПросроченныеЗадачиСПодписчиками.Задача,
			СтрокаПросроченныеЗадачиСПодписчиками.Подписчик,
			"",
			Перечисления.СобытияУведомлений.ПросроченаЗадача,
			СтрокаПросроченныеЗадачиСПодписчиками.ОбъектПодписки);
		
		ДобавитьОбработанноеУведомление(
			Перечисления.СобытияУведомлений.ПросроченаЗадача,
			СтрокаПросроченныеЗадачиСПодписчиками.Задача,
			СтрокаПросроченныеЗадачиСПодписчиками.Подписчик);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик регламентного задания УведомлениеПользователейОСобытиях
//
Процедура ОбработатьУведомленияВОчередиУведомлений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьИспользоватьУведомления() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация, Метаданные.РегистрыСведений.ОчередьУведомлений,,
		НСтр("ru = 'Начато регламентное уведомление о новых событиях'"));
	
	ОтправитьУведомления();
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация, Метаданные.РегистрыСведений.ОчередьУведомлений,,
		НСтр("ru = 'Завершено регламентное уведомление о новых событиях'"));

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Считывает задачи активные на указанную дату с подписчиками
//
Функция ВыбратьАктивныеЗадачиСПодписчиками(АктивныеНаДату = Неопределено)
	
	Если Не ЗначениеЗаполнено(АктивныеНаДату) Тогда
		АктивныеНаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	ПодпискаПоУмолчанию = ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
	
	Если ПодпискаПоУмолчанию И РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|		ПО (ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи))
			|			И (ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО)
			|			И Пользователи.Ссылка = ПодпискиНаУведомления.Пользователь
			|			И (ПодпискиНаУведомления.ПодпискаАктивна = ЛОЖЬ)
			|ГДЕ
			|	ПодпискиНаУведомления.ПодпискаАктивна ЕСТЬ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
		
	ИначеЕсли ПодпискаПоУмолчанию И НЕ РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
	Иначе
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	ПодпискиНаУведомления.Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|ГДЕ
			|	ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
			|	И ПодпискиНаУведомления.ПодпискаАктивна = ИСТИНА
			|	И ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПодписчиков;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.РольИсполнителя,
		|	ЗадачаИсполнителя.ОсновнойОбъектАдресации,
		|	ЗадачаИсполнителя.ДополнительныйОбъектАдресации
		|ПОМЕСТИТЬ АктивныеЗадачи
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.СрокИсполнения > &Дата
		|	И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодпискиНаУведомления.ОбъектПодписки,
		|	ПодпискиНаУведомления.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпиской
		|ИЗ
		|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
		|ГДЕ
		|	ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи)
		|	И ПодпискиНаУведомления.ПодпискаАктивна = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка КАК Задача,
		|	АктивныеЗадачи.Исполнитель КАК Подписчик,
		|	АктивныеЗадачи.СрокИсполнения,
		|	АктивныеЗадачи.Ссылка КАК ОбъектПодписки
		|ПОМЕСТИТЬ АктивныеЗадачиСПодпиской
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПользователиСПодпиской КАК ПользователиСПодпиской
		|		ПО АктивныеЗадачи.Исполнитель = ПользователиСПодпиской.Пользователь
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка,
		|	ВЫБОР
		|		КОГДА &ОтправлятьУведомленияОЗадачахНаЛиниюПоддержки
		|			ТОГДА ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|		ИНАЧЕ ИсполнителиЗадач.Исполнитель
		|	КОНЕЦ,
		|	АктивныеЗадачи.СрокИсполнения,
		|	АктивныеЗадачи.Ссылка
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РолиСПодпиской КАК РолиСПодпиской
		|		ПО АктивныеЗадачи.РольИсполнителя = РолиСПодпиской.РольИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО АктивныеЗадачи.РольИсполнителя = ИсполнителиЗадач.РольИсполнителя
		|			И АктивныеЗадачи.ОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|			И АктивныеЗадачи.ДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеЗадачи.СрокИсполнения,
		|	АктивныеЗадачи.Ссылка
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО АктивныеЗадачи.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеЗадачи.СрокИсполнения,
		|	АктивныеЗадачи.Исполнитель
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО АктивныеЗадачи.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АктивныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	АктивныеЗадачи.СрокИсполнения,
		|	ВЫБОР
		|		КОГДА &ОтправлятьУведомленияОЗадачахНаЛиниюПоддержки
		|			ТОГДА ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|		ИНАЧЕ ИсполнителиЗадач.Исполнитель
		|	КОНЕЦ
		|ИЗ
		|	АктивныеЗадачи КАК АктивныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|			ПО ИсполнителиЗадач.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|		ПО АктивныеЗадачи.ОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|			И АктивныеЗадачи.ДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|			И АктивныеЗадачи.РольИсполнителя = ИсполнителиЗадач.РольИсполнителя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеЗадачиСПодпиской.Задача,
		|	АктивныеЗадачиСПодпиской.Подписчик,
		|	АктивныеЗадачиСПодпиской.СрокИсполнения,
		|	АктивныеЗадачиСПодпиской.ОбъектПодписки
		|ПОМЕСТИТЬ АктивныеЗадачиСПодпискойСгруппированный
		|ИЗ
		|	АктивныеЗадачиСПодпиской КАК АктивныеЗадачиСПодпиской
		|
		|СГРУППИРОВАТЬ ПО
		|	АктивныеЗадачиСПодпиской.Задача,
		|	АктивныеЗадачиСПодпиской.Подписчик,
		|	АктивныеЗадачиСПодпиской.СрокИсполнения,
		|	АктивныеЗадачиСПодпиской.ОбъектПодписки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктивныеЗадачиСПодпискойСгруппированный.Задача КАК Задача,
		|	АктивныеЗадачиСПодпискойСгруппированный.Подписчик,
		|	АктивныеЗадачиСПодпискойСгруппированный.СрокИсполнения,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	АктивныеЗадачиСПодпискойСгруппированный.ОбъектПодписки КАК ОбъектПодписки
		|ИЗ
		|	АктивныеЗадачиСПодпискойСгруппированный КАК АктивныеЗадачиСПодпискойСгруппированный
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПодошелСрокЗадачи))
		|			И АктивныеЗадачиСПодпискойСгруппированный.Задача = ОбработанныеУведомления.ОбъектУведомления
		|			И АктивныеЗадачиСПодпискойСгруппированный.Подписчик = ОбработанныеУведомления.Получатель";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Дата", АктивныеНаДату);
	Запрос.УстановитьПараметр("ОтправлятьУведомленияОЗадачахНаЛиниюПоддержки", ПолучитьФункциональнуюОпцию("ОтправлятьУведомленияОЗадачахНаЛиниюПоддержки"));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗадачиСПодписчиками = Запрос.Выполнить().Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ЗадачиСПодписчиками;
	
КонецФункции

// Считывает задачи просроченные на указанную дату
//
Функция ВыбратьПросроченныеЗадачиСПодписчиками(СрокИсполнения = Неопределено)
	
	Если Не ЗначениеЗаполнено(СрокИсполнения) Тогда
		СрокИсполнения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
	ПодпискаПоУмолчанию = ПолучитьНастройкуПоУмолчанию(
		Перечисления.НастройкиУведомлений.Подписка,
		Перечисления.СобытияУведомлений.ПросроченаЗадача);
	
	Если ПодпискаПоУмолчанию И РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|		ПО (ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача))
			|			И (ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО)
			|			И Пользователи.Ссылка = ПодпискиНаУведомления.Пользователь
			|			И (ПодпискиНаУведомления.ПодпискаАктивна = ЛОЖЬ)
			|ГДЕ
			|	ПодпискиНаУведомления.ПодпискаАктивна ЕСТЬ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
	ИначеЕсли ПодпискаПоУмолчанию И НЕ РазрешитьИзменятьНастройкиУведомлений Тогда
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
	Иначе
		
		ТекстЗапросаПодписчиков =
			"ВЫБРАТЬ
			|	ПодпискиНаУведомления.Пользователь
			|ПОМЕСТИТЬ ПользователиСПодпиской
			|ИЗ
			|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
			|ГДЕ
			|	ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
			|	И ПодпискиНаУведомления.ПодпискаАктивна = ИСТИНА
			|	И ПодпискиНаУведомления.ОбъектПодписки = НЕОПРЕДЕЛЕНО
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсполнителиЗадач.РольИсполнителя
			|ПОМЕСТИТЬ РолиСПодпиской
			|ИЗ
			|	ПользователиСПодпиской КАК ПользователиСПодпиской
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО ПользователиСПодпиской.Пользователь = ИсполнителиЗадач.Исполнитель";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПодписчиков;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя,
		|	ЗадачаИсполнителя.ОсновнойОбъектАдресации,
		|	ЗадачаИсполнителя.ДополнительныйОбъектАдресации
		|ПОМЕСТИТЬ ПросроченныеЗадачи
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.СрокИсполнения <= &Дата
		|	И ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодпискиНаУведомления.ОбъектПодписки,
		|	ПодпискиНаУведомления.Пользователь КАК Подписчик
		|ПОМЕСТИТЬ ОбъектыСПодпиской
		|ИЗ
		|	РегистрСведений.ПодпискиНаУведомления КАК ПодпискиНаУведомления
		|ГДЕ
		|	ПодпискиНаУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача)
		|	И ПодпискиНаУведомления.ПодпискаАктивна = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка КАК Задача,
		|	ПросроченныеЗадачи.Исполнитель КАК Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ПросроченныеЗадачи.Ссылка КАК ОбъектПодписки
		|ПОМЕСТИТЬ ПросроченныеЗадачиСПодпиской
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПользователиСПодпиской КАК ПользователиСПодпиской
		|		ПО ПросроченныеЗадачи.Исполнитель = ПользователиСПодпиской.Пользователь
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка,
		|	ВЫБОР
		|		КОГДА &ОтправлятьУведомленияОЗадачахНаЛиниюПоддержки
		|			ТОГДА ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|		ИНАЧЕ ИсполнителиЗадач.Исполнитель
		|	КОНЕЦ,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ПросроченныеЗадачи.Ссылка
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РолиСПодпиской КАК РолиСПодпиской
		|		ПО ПросроченныеЗадачи.РольИсполнителя = РолиСПодпиской.РольИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|		ПО ПросроченныеЗадачи.РольИсполнителя = ИсполнителиЗадач.РольИсполнителя
		|			И ПросроченныеЗадачи.ОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|			И ПросроченныеЗадачи.ДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ПросроченныеЗадачи.Ссылка
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО ПросроченныеЗадачи.Ссылка = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ПросроченныеЗадачи.Исполнитель
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|		ПО ПросроченныеЗадачи.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПросроченныеЗадачи.Ссылка,
		|	ОбъектыСПодпиской.Подписчик,
		|	ПросроченныеЗадачи.СрокИсполнения,
		|	ВЫБОР
		|		КОГДА &ОтправлятьУведомленияОЗадачахНаЛиниюПоддержки
		|			ТОГДА ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|		ИНАЧЕ ИсполнителиЗадач.Исполнитель
		|	КОНЕЦ
		|ИЗ
		|	ПросроченныеЗадачи КАК ПросроченныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыСПодпиской КАК ОбъектыСПодпиской
		|			ПО ИсполнителиЗадач.Исполнитель = ОбъектыСПодпиской.ОбъектПодписки
		|		ПО ПросроченныеЗадачи.ОсновнойОбъектАдресации = ИсполнителиЗадач.ОсновнойОбъектАдресации
		|			И ПросроченныеЗадачи.ДополнительныйОбъектАдресации = ИсполнителиЗадач.ДополнительныйОбъектАдресации
		|			И ПросроченныеЗадачи.РольИсполнителя = ИсполнителиЗадач.РольИсполнителя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеЗадачиСПодпиской.Задача,
		|	ПросроченныеЗадачиСПодпиской.Подписчик,
		|	ПросроченныеЗадачиСПодпиской.СрокИсполнения,
		|	ПросроченныеЗадачиСПодпиской.ОбъектПодписки
		|ПОМЕСТИТЬ ПросроченныеЗадачиСПодпискойСгруппированный
		|ИЗ
		|	ПросроченныеЗадачиСПодпиской КАК ПросроченныеЗадачиСПодпиской
		|
		|СГРУППИРОВАТЬ ПО
		|	ПросроченныеЗадачиСПодпиской.Задача,
		|	ПросроченныеЗадачиСПодпиской.Подписчик,
		|	ПросроченныеЗадачиСПодпиской.СрокИсполнения,
		|	ПросроченныеЗадачиСПодпиской.ОбъектПодписки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПросроченныеЗадачиСПодпискойСгруппированный.Задача КАК Задача,
		|	ПросроченныеЗадачиСПодпискойСгруппированный.Подписчик,
		|	ПросроченныеЗадачиСПодпискойСгруппированный.СрокИсполнения,
		|	ЕСТЬNULL(ОбработанныеУведомления.ДатаОбработки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбработки,
		|	ПросроченныеЗадачиСПодпискойСгруппированный.ОбъектПодписки КАК ОбъектПодписки
		|ИЗ
		|	ПросроченныеЗадачиСПодпискойСгруппированный КАК ПросроченныеЗадачиСПодпискойСгруппированный
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбработанныеУведомления КАК ОбработанныеУведомления
		|		ПО (ОбработанныеУведомления.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.СобытияУведомлений.ПросроченаЗадача))
		|			И ПросроченныеЗадачиСПодпискойСгруппированный.Задача = ОбработанныеУведомления.ОбъектУведомления
		|			И ПросроченныеЗадачиСПодпискойСгруппированный.Подписчик = ОбработанныеУведомления.Получатель";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Дата", СрокИсполнения);
	Запрос.УстановитьПараметр("ОтправлятьУведомленияОЗадачахНаЛиниюПоддержки", ПолучитьФункциональнуюОпцию("ОтправлятьУведомленияОЗадачахНаЛиниюПоддержки"));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПросроченныеЗадачи = Запрос.Выполнить().Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ПросроченныеЗадачи;
	
КонецФункции

// Получает стандартное значение настройки.
//
// Параметры:
//  Настройка - ПеречислениеСсылка.НастройкиУведомлений - Настройка, значение которой нужно получить.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события,
//               по которому необходимо получить настройку.
//
// Возвращаемое значение:
//  Булево, Число - Стандартное значение настройки.
//
Функция ПолучитьСтандартноеЗначениеНастройки(Настройка, ВидСобытия)
	
	Значение = Неопределено;
	
	Если Настройка = Перечисления.НастройкиУведомлений.Подписка Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи 
			Или ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
			Значение = Истина;
		Иначе
			Значение = Ложь;
		КонецЕсли;
		
	ИначеЕсли Настройка = Перечисления.НастройкиУведомлений.СрокУведомления Тогда
		
		Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
			Значение = 3;
		КонецЕсли;
		
	ИначеЕсли Настройка = Перечисления.НастройкиУведомлений.ЧастотаУведомления Тогда
		
		Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
			Значение = 0;
		ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача Тогда
			Значение = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Записывает факт отправки уведомления по объекту в регистр сведений
//
Процедура ДобавитьОбработанноеУведомление(
	ВидСобытия,
	ОбъектУведомления,
	Получатель = Неопределено)
	
	Если Не ЗначениеЗаполнено(Получатель) Тогда
		Получатель = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	РегистрыСведений.ОбработанныеУведомления.ДобавитьОбработанноеУведомление(
		ВидСобытия,
		ОбъектУведомления,
		Получатель);
	
КонецПроцедуры

// Возвращает строку для события журнала регистрации
//
Функция СобытиеЖурналаРегистрации()
	
	СобытиеЖурналаРегистрации = НСтр("ru = 'Уведомление о новых событиях'");
	
	Возврат СобытиеЖурналаРегистрации;
	
КонецФункции

// Возвращает значение константы ИспользоватьУведомления
//
Функция ПолучитьИспользоватьУведомления()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИспользоватьУведомления.Получить();
	
КонецФункции

// Отправляет уведомления из очереди уведомлений
//
Функция ОтправитьУведомления()
	
	Уведомления = РегистрыСведений.ОчередьУведомлений.ПолучитьНеотправленныеУведомления();
	
	СформированныеУведомления = Новый ТаблицаЗначений;
	СформированныеУведомления.Колонки.Добавить("Получатель");
	СформированныеУведомления.Колонки.Добавить("ТекстУведомления");
	СформированныеУведомления.Колонки.Добавить("Уведомления");
	СформированныеУведомления.Колонки.Добавить("Файлы");
	СформированныеУведомления.Колонки.Добавить("Тема");
	СформированныеУведомления.Колонки.Добавить("ВидСобытия");
	СформированныеУведомления.Колонки.Добавить("Количество");
	
	СгруппированныеУведомления = СформированныеУведомления.Скопировать();
    
	
	ПолучателиУведомлений = Новый Массив;
	Для Каждого Уведомление Из Уведомления Цикл
		Если ПолучателиУведомлений.Найти(Уведомление.Получатель) = Неопределено Тогда
			ПолучателиУведомлений.Добавить(Уведомление.Получатель);
		КонецЕсли;
	КонецЦикла;
	
	ВидыСобытий = Новый Массив;
	ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПолученоПисьмоПоОбращению);
	ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПолученКомментарийОтПользователя);
	ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеЗадачи);
	ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи);
	ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи);
	ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса);
	ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса);
	ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокЗадачи);
	ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаЗадача);
	
	Для Каждого ПолучательУведомления Из ПолучателиУведомлений Цикл
		
		СформированныеУведомления.Очистить();
        СгруппированныеУведомления.Очистить();
        
		ОбработанныеВидыБизнесСобытий = Новый Массив;
			
		Для каждого ВидСобытия Из ВидыСобытий Цикл
			СформироватьУведомленияПоВидуБизнесСобытия(ПолучательУведомления, ВидСобытия, Уведомления, СформированныеУведомления);
			ОбработанныеВидыБизнесСобытий.Добавить(ВидСобытия);
		КонецЦикла;
		
		СформироватьУведомленияПоСобытиям(ПолучательУведомления, ОбработанныеВидыБизнесСобытий, Уведомления, СформированныеУведомления);
		
		Для Каждого СформированноеУведомление Из СформированныеУведомления Цикл
			СформированноеУведомление.Количество = 1;
		КонецЦикла;
		
		ГруппыУведомлений = СформированныеУведомления.Скопировать();
		ГруппыУведомлений.Свернуть("ВидСобытия", "Количество");
		
		Для каждого Группа Из ГруппыУведомлений Цикл
			УведомленияПоГруппе = СформированныеУведомления.НайтиСтроки(Новый Структура("ВидСобытия", Группа.ВидСобытия));
			ОбщееУведомление = СгруппированныеУведомления.Добавить();
			ОбщееУведомление.ТекстУведомления = "";
			ОбщееУведомление.Файлы = Новый Массив;
			ОбщееУведомление.Уведомления = Новый Массив;
			Для каждого СформированноеУведомление Из УведомленияПоГруппе Цикл
				Если УведомленияПоГруппе.Количество() = 1 Тогда
					ОбщееУведомление.Тема = СтрЗаменить(СтрЗаменить(СтрПолучитьСтроку(СформированноеУведомление.ТекстУведомления, 1),"<h3>",""),"</h3>","");
				Иначе
					ОбщееУведомление.Тема = СтрШаблон("%1 (%2)", ВидСобытияВоМножественномЧисле(Группа.ВидСобытия), Формат(УведомленияПоГруппе.Количество(),"ЧГ=0"));
				КонецЕсли;
				СформированноеУведомление.ТекстУведомления = СтрЗаменить(СокрЛП(СформированноеУведомление.ТекстУведомления),
					СтрПолучитьСтроку(СокрЛП(СформированноеУведомление.ТекстУведомления), 1),"");
				ОбщееУведомление.Получатель = СформированноеУведомление.Получатель;
				ОбщееУведомление.ТекстУведомления = ОбщееУведомление.ТекстУведомления + СокрЛП(СформированноеУведомление.ТекстУведомления);
				Если СформированноеУведомление.Файлы <> Неопределено Тогда
					Для каждого Файл Из СформированноеУведомление.Файлы Цикл
						ОбщееУведомление.Файлы.Добавить(Файл);
					КонецЦикла;
				КонецЕсли;
				Если СформированноеУведомление.Уведомления <> Неопределено Тогда
					Для каждого Уведомление Из СформированноеУведомление.Уведомления Цикл
						ОбщееУведомление.Уведомления.Добавить(Уведомление);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого СформированноеУведомление Из СгруппированныеУведомления Цикл
			ОтправитьУведомлениеПоПочте(СформированноеУведомление);
		КонецЦикла;
		
	КонецЦикла;
	
КонецФункции

Функция ВидСобытияВоМножественномЧисле(ВидСобытия)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеОбращения Тогда
		Возврат НСтр("ru='Перенаправления обращений'"); 
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеОшибки Тогда
		Возврат НСтр("ru='Перенаправления ошибок'"); 
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеКонсультации Тогда
		Возврат НСтр("ru='Перенаправления консультаций'"); 
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеПожелания Тогда
		Возврат НСтр("ru='Перенаправления пожеланий'"); 
		
	Иначе 
		Возврат Строка(ВидСобытия); 
		
	КонецЕсли;
	
КонецФункции

// Отправляет уведомления из очереди уведомлений по почте
//
// Параметры:
//  СформированноеУведомление     -  - 
//
Процедура ОтправитьУведомлениеПоПочте(СформированноеУведомление)
	
	Если ТипЗнч(СформированноеУведомление.Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
		АдресаПользователя = КонтактнаяИнформацияУСП.ВсеЭлектронныеАдресаПользователя(СформированноеУведомление.Получатель);
	Иначе
		АдресаПользователя = КонтактнаяИнформацияУСП.ВсеЭлектронныеАдресаЛинииПоддержки(СформированноеУведомление.Получатель);
	КонецЕсли; 
	
	АдресаЭлектроннойПочты = Новый Массив;
	
	Для каждого АдресПользователя Из АдресаПользователя Цикл
		АдресаЭлектроннойПочты.Добавить(АдресПользователя.Адрес);
	КонецЦикла; 
	
	Если АдресаЭлектроннойПочты.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			СтрШаблон(
				НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у пользователя %1.'"),
				Строка(СформированноеУведомление.Получатель)));
		ОбработатьОшибкуОтправкиУведомления(СформированноеУведомление);
		Возврат;
	КонецЕсли;
	
	// Формирование массива вложений
	Вложения = Новый Массив();
	Если ЗначениеЗаполнено(СформированноеУведомление.Файлы) Тогда
		Для каждого Вложение Из СформированноеУведомление.Файлы Цикл
			СтруктураВложения = Новый Структура;
			СтруктураВложения.Вставить(
				"Данные", ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Вложение.Ссылка));
			СтруктураВложения.Вставить("Имя", Вложение.ИмяФайла);
			СтруктураВложения.Вставить("Идентификатор", Неопределено);
			
			Вложения.Добавить(СтруктураВложения);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ПочтовыйАдресПолучателя Из АдресаЭлектроннойПочты Цикл
		
		ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
		
		ТекстПисьма = "<html lang=""ru""><head style=""font-family: sans-serif;-webkit-text-size-adjust: 100%;" 
                    + "-ms-text-size-adjust: 100%;font-size: 10px;-webkit-tap-highlight-color: rgba(0,0,0,0);""><meta charset=""UTF-8"">" 
                    + "</head><body style=""font-family: Helvetica Neue,Helvetica,Arial,sans-serif;font-size: 14px;line-height: 1.42857143;"
                    + "color: #333;background-color: #fff;"">" + СформированноеУведомление.ТекстУведомления 
                    + "<footer style=""display: block;"">" + СтрЗаменить(ТекстПредупрежденияОбАвтоматическойОтправке(),Символы.ПС, "<br>") 
                    + "</footer></body></html>";
					  
		ТемаПисьма = ОбработатьСпецСимволы(СформированноеУведомление.Тема);
		
		ТекстПисьма = ОбщегоНазначенияУСП.ЗаменитьКлассыОтображенияНаСтилиHTML(ТекстПисьма);
		
		Попытка
			
			ПараметрыПисьма = Новый Структура;
			ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
			ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
			ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
			ПараметрыПисьма.Вставить("ТипТекста", ТипТекста);
			
			Если ЗначениеЗаполнено(Вложения) Тогда
				ПараметрыПисьма.Вставить("Вложения", Новый Массив);
				Для каждого Вложение Из Вложения Цикл
					СтруктураВложения = Новый Структура("Адрес, ИмяФайла");
					СтруктураВложения.Адрес = Вложение.Данные;
					СтруктураВложения.ИмяФайла = Вложение.Имя;
					ПараметрыПисьма.Вложения.Добавить(СтруктураВложения);
				КонецЦикла;
			КонецЕсли;
				
			СообщениеОбОшибке = "";
			
			РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), ПараметрыПисьма);
			
		Исключение
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.ОчередьУведомлений,,
				СтрШаблон(
					НСтр("ru = 'Ошибка при отправке уведомления: %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			ОбработатьОшибкуОтправкиУведомления(СформированноеУведомление);
			Возврат;
		КонецПопытки;
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация, Метаданные.РегистрыСведений.ОчередьУведомлений,,
			СтрШаблон(
				НСтр("ru = 'Уведомления успешно отправлены на адрес %1.'"),
				ПочтовыйАдресПолучателя));
				
	КонецЦикла;
	
	Для Каждого Уведомление Из СформированноеУведомление.Уведомления Цикл
		УдалитьУведомлениеИзОчередиУведомлений(Уведомление);
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьСпецСимволы(Знач СтрокаHTML) Экспорт
    
    СтрокаHTML = СтрЗаменить(СтрокаHTML, "<", "&lt;");
    СтрокаHTML = СтрЗаменить(СтрокаHTML, ">", "&gt;");
    
    Возврат СтрокаHTML;
    
КонецФункции

// Формирует текст уведомления пользователя по заданному виду событий
//
Процедура СформироватьУведомленияПоВидуБизнесСобытия(ПолучательУведомления, ВидСобытия, Уведомления, СформированныеУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Получатель", ПолучательУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
		УведомленияПодписки = Новый Массив;
		ОбъектыПодписки = Новый Массив;
		ОбъектыУведомленияСПодпиской = Новый Массив;
		ОбъектыУведомленияСОтказом = Новый Массив;
		БизнесПроцессыРодители = Новый ТаблицаЗначений;
		БизнесПроцессыРодители.Колонки.Добавить("ОбъектПодписки");
		БизнесПроцессыРодители.Колонки.Добавить("Родитель");
		ОтказыОтПодписки = ПолучитьОтказыОтПодпискиПоВидуБизнесСобытия(ВидСобытия, ПолучательУведомления);
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			Если Не ЭтоПоддерживаемыйБизнесПроцесс(Уведомление.ОбъектПодписки) Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьВМассивСПроверкойПодписки(Уведомление.Объект, Уведомление.ОбъектПодписки, ОбъектыПодписки,
				БизнесПроцессыРодители, ОтказыОтПодписки, ОбъектыУведомленияСПодпиской, ОбъектыУведомленияСОтказом);
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
		КонецЦикла;
		
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЯвляетсяПотомкомОбъектовПодписки(Уведомление.ОбъектПодписки, ОбъектыПодписки, ОтказыОтПодписки) Тогда
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
			КонецЕсли;
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
		КонецЦикла;
		Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
			Отбор = Новый Структура();
			Отбор.Вставить("Получатель", ПолучательУведомления);
			Отбор.Вставить("ВидСобытия", ВидСобытия);
			Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
			УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
			ОбъектыУведомления = Новый Массив;
			Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
				Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено
					И ОбъектыУведомленияСОтказом.Найти(Уведомление.Объект) = Неопределено Тогда
					ОбъектыУведомления.Добавить(Уведомление.Объект);
				КонецЕсли;
			КонецЦикла;
			Если ОбъектыУведомления.Количество() > 0 Тогда
				ТекстУведомления = СформироватьТекстУведомленияПоОбъектамУведомления(
						ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления);
			    СформироватьУведомление(СформированныеУведомления, ПолучательУведомления, ТекстУведомления, УведомленияПодписки, ВидСобытия)
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи
		ИЛИ ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача
		ИЛИ ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи
		ИЛИ ВидСобытия = Справочники.ВидыБизнесСобытий.ПолученоПисьмоПоОбращению 
		ИЛИ ВидСобытия = Справочники.ВидыБизнесСобытий.ПолученКомментарийОтПользователя Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Получатель", ПолучательУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
		ОбъектыУведомления = Новый Массив;
		УведомленияПодписки = Новый Массив;
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
				ОбъектыУведомления.Добавить(Уведомление.Объект);
			КонецЕсли;
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
		КонецЦикла;
		Если ОбъектыУведомления.Количество() > 0 Тогда
			
            ДополнительныеОписания = Новый Соответствие;
            Для каждого Уведомление Из УведомленияПользователя Цикл
                ДополнительныеОписания.Вставить(Уведомление.ОбъектПодписки, Уведомление.ТекстУведомления);
            КонецЦикла; 
            ТекстУведомления = СформироватьТекстУведомленияПоОбъектамУведомления(
					ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, ДополнительныеОписания);
			СформироватьУведомление(СформированныеУведомления, ПолучательУведомления, ТекстУведомления, УведомленияПодписки, ВидСобытия)
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("Получатель", ПолучательУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
		ОбъектыУведомления = Новый Массив;
		УведомленияПодписки = Новый Массив;
		ДополнительныеОписания = Новый Соответствие;
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
				ОбъектыУведомления.Добавить(Уведомление.Объект);
				ДополнительныеОписания.Вставить(Уведомление.Объект, Уведомление.ТекстУведомления);
			КонецЕсли;
			
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
		КонецЦикла;
		Если ОбъектыУведомления.Количество() > 0 Тогда
			ТекстУведомления = СформироватьТекстУведомленияПоОбъектамУведомления(
					ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, ДополнительныеОписания);
			СформироватьУведомление(СформированныеУведомления, ПолучательУведомления, ТекстУведомления, УведомленияПодписки, ВидСобытия)
		КонецЕсли;
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
		Отбор = Новый Структура();
		Отбор.Вставить("Получатель", ПолучательУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
		ОбъектыУведомленияПоЗадачам = Новый Массив;
		ОбъектыУведомленияПоПроцессам = Новый Массив;
		УведомленияПодписки = Новый Массив;
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			Если ТипЗнч(Уведомление.ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				Если ОбъектыУведомленияПоЗадачам.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
					ОбъектыУведомленияПоЗадачам.Добавить(Уведомление.ОбъектПодписки);
				КонецЕсли;
			Иначе
			    Если ОбъектыУведомленияПоПроцессам.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
					ОбъектыУведомленияПоПроцессам.Добавить(Уведомление.ОбъектПодписки);
				КонецЕсли;
			КонецЕсли;
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
		КонецЦикла;
		Если ОбъектыУведомленияПоЗадачам.Количество() > 0 Тогда
			ТекстУведомления = СформироватьТекстУведомленияПоОбъектамУведомления(
					ОбъектПодписки, ВидСобытия, ОбъектыУведомленияПоЗадачам, ПолучательУведомления);
			СформироватьУведомление(СформированныеУведомления, ПолучательУведомления, ТекстУведомления, УведомленияПодписки, ВидСобытия)
		КонецЕсли;
		Если ОбъектыУведомленияПоПроцессам.Количество() > 0 Тогда
			ТекстУведомления = СформироватьТекстУведомленияПоОбъектамУведомления(
					ОбъектПодписки, ВидСобытия, ОбъектыУведомленияПоПроцессам, ПолучательУведомления);
			СформироватьУведомление(СформированныеУведомления, ПолучательУведомления, ТекстУведомления, УведомленияПодписки, ВидСобытия)
		КонецЕсли;
	Иначе
		Отбор = Новый Структура();
		Отбор.Вставить("Получатель", ПолучательУведомления);
		Отбор.Вставить("ВидСобытия", ВидСобытия);
		УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
		УведомленияПодписки = Новый Массив;
		ОбъектыПодписки = Новый Массив;	
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			Если ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
			КонецЕсли;
			ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
		КонецЦикла;
		Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
			Отбор = Новый Структура();
			Отбор.Вставить("Получатель", ПолучательУведомления);
			Отбор.Вставить("ВидСобытия", ВидСобытия);
			Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
			УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
			ОбъектыУведомления = Новый Массив;	
			Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
				Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
					ОбъектыУведомления.Добавить(Уведомление.Объект);
				КонецЕсли;
			КонецЦикла;
			Если ОбъектыУведомления.Количество() > 0 Тогда
				ТекстУведомления = СформироватьТекстУведомленияПоОбъектамУведомления(
                    ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления);
				СформироватьУведомление(СформированныеУведомления, ПолучательУведомления, ТекстУведомления, УведомленияПодписки, ВидСобытия);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьУведомление(СформированныеУведомления, Получатель, ТекстУведомления, Уведомления, ВидСобытия) 
    
    СформированноеУведомление = СформированныеУведомления.Добавить();
    СформированноеУведомление.Получатель = Получатель;
    СформированноеУведомление.ТекстУведомления = ТекстУведомления;
    СформированноеУведомление.Уведомления = Уведомления;
    СформированноеУведомление.ВидСобытия = ВидСобытия;
    
КонецПроцедуры
        
// Добавляет строку табличной части с уведомлением в массив уведомлений в специальную структуру.
//
Процедура ДобавитьУведомлениеВМассив(МассивУведомлений, СтрокаУведомления)
	
	Уведомление = Новый Структура;
	Уведомление.Вставить("Объект", СтрокаУведомления.Объект);
	Уведомление.Вставить("Получатель", СтрокаУведомления.Получатель);
	Уведомление.Вставить("ВидСобытия", СтрокаУведомления.ВидСобытия);
	Уведомление.Вставить("ОбъектПодписки", СтрокаУведомления.ОбъектПодписки);
	
	МассивУведомлений.Добавить(Уведомление);
	
КонецПроцедуры

// Формирует текст уведомления пользователя по объекту и произошедшим событиям
//
Функция СформироватьТекстУведомленияПоОбъектамУведомления(ОбъектПодписки, ВидСобытия, ОбъектыУведомления, 
	ПолучательУведомления, ДополнительныеОписания = Неопределено)
	
	ТекстУведомления = "";
	
	ИспользоватьДополнительныеОписания = Ложь;
	Если ДополнительныеОписания <> Неопределено Тогда
		ИспользоватьДополнительныеОписания = Истина;
	КонецЕсли;
		
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = '<h3>Новая задача ""%1""</h3>'"), 
                ОбъектыУведомления[0].Ссылка)+ Символы.ПС, Символы.ПС);
		Иначе
			СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = '<h3>Новые задачи (%1)</h3>'"), 
                ОбъектыУведомления.Количество())+ Символы.ПС, Символы.ПС);
		КонецЕсли;
		
		Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
			СформироватьОписаниеОбъектаУведомления(ОбъектУведомления, ТекстУведомления, ПолучательУведомления, ВидСобытия);
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПолученоПисьмоПоОбращению Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = '<h3>Получено письмо по обращению ""%1""</h3>'"),
			    ОбъектыУведомления[0].Ссылка) + Символы.ПС, Символы.ПС);
		Иначе
			СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = '<h3>Получены письма по обращениям (%1)</h3>'"),
			    ОбъектыУведомления.Количество()) + Символы.ПС, Символы.ПС);
		КонецЕсли;
		
		Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
            Если ТипЗнч(ДополнительныеОписания) = Тип("Соответствие") Тогда
                ДополнительноеОписание = ДополнительныеОписания.Получить(ОбъектУведомления);
            Иначе
                ДополнительноеОписание = ДополнительныеОписания;
            КонецЕсли;
            СформироватьОписаниеОбъектаУведомления(
                ОбъектУведомления, 
                ТекстУведомления, 
                ПолучательУведомления, 
                ВидСобытия, 
                ДополнительноеОписание);
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПолученКомментарийОтПользователя Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = '<h3>Получен комментарий от пользователя ""%1""</h3>'"),
			    ОбъектыУведомления[0].Ссылка) + Символы.ПС, Символы.ПС);
		Иначе
			СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = '<h3>Получен комментарии от пользователей (%1)</h3>'"),
			    ОбъектыУведомления.Количество()) + Символы.ПС, Символы.ПС);
		КонецЕсли;
		
		Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
            Если ТипЗнч(ДополнительныеОписания) = Тип("Соответствие") Тогда
                ДополнительноеОписание = ДополнительныеОписания.Получить(ОбъектУведомления);
            Иначе
                ДополнительноеОписание = ДополнительныеОписания;
            КонецЕсли;
            СформироватьОписаниеОбъектаУведомления(
                ОбъектУведомления, 
                ТекстУведомления, 
                ПолучательУведомления, 
                ВидСобытия, 
                ДополнительноеОписание);
		КонецЦикла;
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = '<h3>Перенаправлена задача ""%1""</h3>'"), 
				ОбъектыУведомления[0].Ссылка) + Символы.ПС, Символы.ПС);
		Иначе
			СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = '<h3>Перенаправлены задачи (%1)</h3>'"), 
				ОбъектыУведомления.Количество()) + Символы.ПС, Символы.ПС);
		КонецЕсли;
		
		Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
			
			Если ИспользоватьДополнительныеОписания Тогда
				ДополнительноеОписание = ДополнительныеОписания.Получить(ОбъектУведомления);
			Иначе
				ДополнительноеОписание = "";
			КонецЕсли;
			
			СформироватьОписаниеОбъектаУведомления(ОбъектУведомления, ТекстУведомления, ПолучательУведомления, ВидСобытия, ДополнительноеОписание);
			
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ПредставлениеСрока = ПредставлениеСрока(ОбъектУведомления.Исполнитель, ОбъектУведомления.СрокИсполнения, ВидСобытия);
			СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = '<h3>%1: ""%2""</h3>'"),
					ПредставлениеСрока, ОбъектУведомления.Наименование) + Символы.ПС, Символы.ПС);
		Иначе
			СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = '<h3>Подошел срок выполнения задач (%1)</h3>'"), 
				ОбъектыУведомления.Количество()) + Символы.ПС, Символы.ПС);
		КонецЕсли;
		
		Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
			СформироватьОписаниеОбъектаУведомления(ОбъектУведомления, ТекстУведомления, ПолучательУведомления, ВидСобытия);
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ПредставлениеСрока = ПредставлениеСрока(ОбъектыУведомления[0].Исполнитель, ОбъектыУведомления[0].СрокИсполнения, ВидСобытия);
			СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = '<h3>%1: ""%2""</h3>'"), 
				ПредставлениеСрока, ОбъектыУведомления[0].Наименование) + Символы.ПС,Символы.ПС);
		Иначе
			СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = '<h3>Просрочены задачи (%1)</h3>'"),
					ОбъектыУведомления.Количество()) + Символы.ПС, Символы.ПС);
		КонецЕсли;
		
		Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
			СформироватьОписаниеОбъектаУведомления(ОбъектУведомления, ТекстУведомления, ПолучательУведомления, ВидСобытия);
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		
		Если ТипЗнч(ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ПредставлениеОбъектаПодписки = "";
		Иначе
			ПредставлениеОбъектаПодписки = СтрШаблон(" %1 ""%2""", НСтр("ru = 'процесса'"), ОбъектПодписки.Наименование)+ Символы.ПС;
		КонецЕсли;
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = '<h3>Выполнена задача ""%1""</h3>'"), ОбъектыУведомления[0].Наименование) + Символы.ПС, Символы.ПС);
		Иначе
			СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = '<h3>Выполнены задачи (%1)%2</h3>'"),
				ОбъектыУведомления.Количество(), ПредставлениеОбъектаПодписки) + Символы.ПС, Символы.ПС);
		КонецЕсли;
		
		Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
			СформироватьОписаниеОбъектаУведомления(ОбъектУведомления,ТекстУведомления, ПолучательУведомления, ВидСобытия);
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			Если ТипЗнч(ОбъектыУведомления[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаСообщения = НСтр("ru = '<h3>Задача остановлена ""%1""</h3>'");
			Иначе
				ТемаСообщения = НСтр("ru = '<h3>Процесс остановлен ""%1""</h3>'");
			КонецЕсли;
			СтрДобавить(ТекстУведомления, СтрШаблон(ТемаСообщения, ОбъектыУведомления[0].Ссылка), Символы.ПС);
		Иначе
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаСообщения = НСтр("ru = '<h3>Задачи остановлены (%1)'</h3>");
			Иначе
				ТемаСообщения = НСтр("ru = '<h3>Процессы остановлены (%1)'</h3>");
			КонецЕсли;	
			СтрДобавить(ТекстУведомления, СтрШаблон(ТемаСообщения, ОбъектыУведомления.Количество()), Символы.ПС);
		КонецЕсли;
		
		Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
			СформироватьОписаниеОбъектаУведомления(ОбъектУведомления, ТекстУведомления, ПолучательУведомления, ВидСобытия);
		КонецЦикла;
			
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
		    Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаСообщения = НСтр("ru = '<h3>Задача возобновлена ""%1""</h3>'");
			Иначе
				ТемаСообщения = НСтр("ru = '<h3>Процесс возобновлен ""%1""</h3>'");
			КонецЕсли;
			СтрДобавить(ТекстУведомления, СтрШаблон(ТемаСообщения, ОбъектыУведомления[0].Ссылка), Символы.ПС);
		Иначе
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаСообщения = НСтр("ru = '<h3>Задачи возобновлены (%1)</h3>'");
			Иначе
				ТемаСообщения = НСтр("ru = '<h3>Процессы возобновлены (%1)</h3>'");
			КонецЕсли;
				
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			СтрДобавить(ТекстУведомления, СтрШаблон(ТемаСообщения, КоличествоОбъектовУведомления), Символы.ПС);
		КонецЕсли;
		
		Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
			СформироватьОписаниеОбъектаУведомления(ОбъектУведомления, ТекстУведомления, ПолучательУведомления,
				ВидСобытия, ДополнительныеОписания);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекстУведомления;
	
КонецФункции

// Добавляет текстовое представление объекта уведомления к тексту уведомления
//
Функция СформироватьОписаниеОбъектаУведомления(ОбъектУведомления, ТекстУведомления, ПолучательУведомления, 
	ВидСобытия, ДополнительноеОписание = Неопределено)
	
	ПредставлениеОбъекта = СформироватьПредставлениеОбъекта(ОбъектУведомления, ВидСобытия, ДополнительноеОписание);
	СтрДобавить(ТекстУведомления, ПредставлениеОбъекта, Символы.ПС + Символы.ПС);
	
КонецФункции

// Формирует текстовое представление объекта
//
Функция СформироватьПредставлениеОбъекта(Объект, ВидСобытия, ДополнительноеОписание)
	
	Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПредставлениеОбъекта = СформироватьПредставлениеЗадачи(Объект, ВидСобытия, ДополнительноеОписание);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.Обращение") Тогда
		ПредставлениеОбъекта = СформироватьПредставлениеОбращения(Объект, ВидСобытия, ДополнительноеОписание);
		
	ИначеЕсли ЭтоПоддерживаемыйБизнесПроцесс(Объект) Тогда
		ПредставлениеОбъекта = СформироватьПредставлениеПроцесса(Объект, ВидСобытия, ДополнительноеОписание);
		
	Иначе
		ПредставлениеОбъекта = "<div class=""panel panel-info"">";
		
		НавигационнаяСсылка = ?(РаботаСУведомлениямиПовтИсп.ИспользоватьАдресПубликацииПриложенияВУведомлениях(),
			СтрШаблон("%1#%2", РаботаСУведомлениямиПовтИсп.АдресПубликацииИнформационнойБазыВИнтернете(), ПолучитьНавигационнуюСсылку(Объект)),
			ПолучитьНавигационнуюСсылку(Объект));
		
		СтрДобавить(ПредставлениеОбъекта, СтрШаблон(
			НСтр("ru = '<div class=""panel-heading-info""><h3 class=""panel-title"">%1: <a href=""%2"">%3</a></h3></div>'"), 
				ТипЗнч(Объект.Ссылка), НавигационнаяСсылка, ПредставлениеОбъекта(Объект.Ссылка, Ложь)));
		
		СтрДобавить(ПредставлениеОбъекта, "<div class=""panel-body"">");
		
		Если ЗначениеЗаполнено(ДополнительноеОписание) Тогда
			СтрДобавить(ПредставлениеОбъекта, СтрЗаменить(ДополнительноеОписание, Символы.ПС, "<br>"));
		КонецЕсли;
	
		СтрДобавить(ПредставлениеОбъекта, "</div></div>");
		
	КонецЕсли;
	
	Возврат ПредставлениеОбъекта
	
КонецФункции

// Формирует текстовое представление бизнес процесса
//
Функция СформироватьПредставлениеПроцесса(Объект, ВидСобытия, ДополнительноеОписание)
	
	ПредставлениеОбъекта = "<div class=""panel panel-info"">";
	
	СтрДобавить(ПредставлениеОбъекта,
		СтрШаблон(НСтр("ru = '<div class=""panel-heading-info""><h3 class=""panel-title"">%1: <a href=""%2"">%3</a></h3></div>'"), 
		ТипЗнч(Объект), НавигационнаяСсылка(Объект), Строка(Объект)));
		
	СтрДобавить(ПредставлениеОбъекта, "<div class=""panel-body"">");
	СтрДобавить(ПредставлениеОбъекта, СтрЗаменить(ОбработатьСпецСимволы(ДополнительноеОписание), Символы.ПС, "<br>"));
	СтрДобавить(ПредставлениеОбъекта, "</div></div>");
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции  

// Формирует текстовое представление задачи
//
Функция СформироватьПредставлениеЗадачи(Задача, ВидСобытия, ДополнительноеОписание) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ФорматДаты = "ДЛФ=DD; ДП='не указан'";
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматДаты = "ДЛФ=DDT; ДП='не указан'";
	КонецЕсли;
	
	ПредставлениеЗадачи = "<div class=""panel panel-info"">";
	
	СтрДобавить(ПредставлениеЗадачи,
		СтрШаблон(НСтр("ru = '<div class=""panel-heading-info""><h3 class=""panel-title"">Задача: <a href=""%1"">%2</a></h3></div>'"), 
		НавигационнаяСсылка(Задача.Ссылка), Строка(Задача.Ссылка)));
		
	СтрДобавить(ПредставлениеЗадачи, "<div class=""panel-body"">");
	
	Если ЗначениеЗаполнено(Задача.БизнесПроцесс) И ЭтоПоддерживаемыйБизнесПроцесс(Задача.БизнесПроцесс) Тогда
		БизнесПроцессОбъект = Задача.БизнесПроцесс.ПолучитьОбъект();
		Если БизнесПроцессОбъект <> Неопределено Тогда
			СтрДобавить(ПредставлениеЗадачи, БизнесПроцессОбъект.ПолучитьОписаниеУведомленияЗадачи(Задача), "<br>");
		КонецЕсли;
	КонецЕсли;
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи 
		ИЛИ ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача Тогда
		СтрДобавить(ПредставлениеЗадачи, ПредставлениеСрока(Задача.Исполнитель, Задача.СрокИсполнения, ВидСобытия), "<br>");
	КонецЕсли;
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		СтрДобавить(ПредставлениеЗадачи, СтрШаблон(НСтр("ru = '<blockquote>%1</blockquote>'"), ОбработатьСпецСимволы(ДополнительноеОписание)), "<br>");
	КонецЕсли;
	
	Если ВидСобытия <> Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		СтрДобавить(ПредставлениеЗадачи, СтрШаблон(НСтр("ru = '<blockquote>%1</blockquote>'"), СтрЗаменить(ОбработатьСпецСимволы(Задача.Описание), Символы.ПС, "<br>")), "<br><br>");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Задача.СрокИсполнения) Тогда
		СтрДобавить(ПредставлениеЗадачи, СтрШаблон(НСтр("ru = 'Крайний срок: %1'"), Формат(Задача.СрокИсполнения, ФорматДаты)), "<br>");
	КонецЕсли;
	Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда
		СтрДобавить(ПредставлениеЗадачи, СтрШаблон(НСтр("ru = 'Исполнитель: %1'"), Задача.Исполнитель), "<br>");
	КонецЕсли;
	Если ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда
		СтрДобавить(ПредставлениеЗадачи, СтрШаблон(НСтр("ru = 'Роль: %1'"), Задача.РольИсполнителя), "<br>");
	КонецЕсли;
	Если ЗначениеЗаполнено(Задача.ОсновнойОбъектАдресации) Тогда
		СтрДобавить(ПредставлениеЗадачи, СтрШаблон(НСтр("ru = 'Основной объект адресации: %1'"), Задача.ОсновнойОбъектАдресации), "<br>");
	КонецЕсли;
	Если ЗначениеЗаполнено(Задача.ДополнительныйОбъектАдресации) Тогда
		СтрДобавить(ПредставлениеЗадачи, СтрШаблон(НСтр("ru = 'Доп. объект адресации: %1'"), Задача.ДополнительныйОбъектАдресации), "<br>");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Задача.ДатаИсполнения) И Задача.Выполнена Тогда
		СтрДобавить(ПредставлениеЗадачи, СтрШаблон(НСтр("ru = 'Выполнено: %1'"), Формат(Задача.ДатаИсполнения, ФорматДаты)), "<br>");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Задача.РезультатВыполнения) Тогда
		СтрДобавить(ПредставлениеЗадачи, СтрШаблон(НСтр("ru = 'Результат: %1'"), Задача.РезультатВыполнения), "<br>");
	КонецЕсли;
	Если ЗначениеЗаполнено(Задача.Автор) Тогда
		СтрДобавить(ПредставлениеЗадачи, СтрШаблон(НСтр("ru = 'Автор: %1'"), Задача.Автор), "<br>");
	КонецЕсли;
	Если ЗначениеЗаполнено(Задача.Предмет) Тогда
		СтрДобавить(ПредставлениеЗадачи, СтрШаблон(НСтр("ru = 'Предмет: %1'"), Строка(Задача.Предмет)), "<br>");
	КонецЕсли;
	
	СтрДобавить(ПредставлениеЗадачи, "</div></div>");
		
	Возврат ПредставлениеЗадачи;
	
КонецФункции

// Формирует текстовое представление обращения
//
Функция СформироватьПредставлениеОбращения(Обращение, ВидСобытия, ДополнительноеОписание) Экспорт
	
	ПредставлениеОбращения = "<div class=""panel panel-info"">";
	
	СтрДобавить(ПредставлениеОбращения,
		СтрШаблон(НСтр("ru = '<div class=""panel-heading-info""><h3 class=""panel-title"">Обращение: <a href=""%2"">%1</a></h3></div>'"), 
			ПредставлениеОбъекта(Обращение.Ссылка, Ложь), НавигационнаяСсылка(Обращение)));
		
	СтрДобавить(ПредставлениеОбращения, "<div class=""panel-body"">");
	Если ЗначениеЗаполнено(ДополнительноеОписание) Тогда
		СтрДобавить(ПредставлениеОбращения, СтрЗаменить(ДополнительноеОписание, Символы.ПС, "<br>")); 
	КонецЕсли;
	
	СтрДобавить(ПредставлениеОбращения, СтрШаблон(НСтр("ru = 'Исполнитель: %1'"), Обращение.Исполнитель),"<br><br>---<br>");
	Если ЗначениеЗаполнено(Обращение.Комментарий) Тогда
		СтрДобавить(ПредставлениеОбращения, СтрШаблон(НСтр("ru = 'Комментарий: %1'"), Обращение.Комментарий),"<br>");
	КонецЕсли;
	
	Если Не ПустаяСтрока(СокрЛП(Обращение.Описание)) Тогда
		СтрДобавить(ПредставлениеОбращения, НСтр("ru = 'Описание обращения:'"),"<br><br>");
		Описание = Лев(СокрЛП(Обращение.Описание), 1000);
		Если Описание <> СокрЛП(Обращение.Описание) Тогда
			Описание = Описание + "...";
		КонецЕсли; 
		СтрДобавить(ПредставлениеОбращения, СтрШаблон(НСтр("ru = '<blockquote>%1</blockquote>'"), СтрЗаменить(ОбработатьСпецСимволы(Описание), Символы.ПС, "<br>")), "<br>");
	КонецЕсли;
	
	СтрДобавить(ПредставлениеОбращения, "</div></div>");
	
	Возврат ПредставлениеОбращения;
	
КонецФункции

// Формирует представление срока с учетом использования графика работ
//
Функция ПредставлениеСрока(Исполнитель, СрокИсполненияОбъекта, ВидСобытия)
	
	ТекущаяДата = КонецДня(ТекущаяДатаСеанса());
	ПримерныйСрок = Ложь;
	
	СрокИсполнения = КонецДня(СрокИсполненияОбъекта);
	СрокЗадачиСекунды = СрокИсполнения - ТекущаяДата;
	СрокЗадачи = Окр(СрокЗадачиСекунды / (3600*24));
	СрокЗадачи = ?(СрокЗадачи > 0, СрокЗадачи, - СрокЗадачи);
	
	ПредставлениеСрока = "";
	ПодписьДней = ОбщегоНазначенияУСП.ПолучитьПодписьДней(СрокЗадачи);
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
		
		Если СрокЗадачи = 0 Тогда
			ПредставлениеСрока = НСтр("ru = 'Подошел срок выполнения задачи'");
			
		Иначе
			Если ПодписьДней = НСтр("ru = 'день'") Тогда
				ПодписьНачало = НСтр("ru = 'Остался'");
			Иначе
				ПодписьНачало = НСтр("ru = 'Осталось'");
			КонецЕсли;
			ПредставлениеСрока = ПодписьНачало + " " + Строка(СрокЗадачи) + " " + ПодписьДней + СтрШаблон(" %1", НСтр("ru = 'на задачу'"));
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача Тогда
		Если СрокЗадачи = 0 Тогда
			ПредставлениеСрока = НСтр("ru = 'Задача просрочена'");
		Иначе
			ПредставлениеСрока = НСтр("ru = 'Задача просрочена на'") + " " + Строка(СрокЗадачи) + " " + ПодписьДней;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПримерныйСрок Тогда
		ТекстПримерныйСрок = НСтр("ru = 'Срок примерный'");
		ПредставлениеСрока = СтрШаблон("%1 (%2)", ПредставлениеСрока, ТекстПримерныйСрок);
	КонецЕсли;
	
	Возврат ПредставлениеСрока;
	
КонецФункции

// Обрабатывает возникшую ошибку при отправке уведомления
//
Процедура ОбработатьОшибкуОтправкиУведомления(СформированноеУведомление)
	
	Для Каждого Уведомление Из СформированноеУведомление.Уведомления Цикл
		
		НовоеЧислоПопыток = 
			РегистрыСведений.ОчередьУведомлений.УвеличитьЧислоПопытокОтправки(
				Уведомление.Объект, 
				Уведомление.Получатель, 
				Уведомление.ВидСобытия,
				Уведомление.ОбъектПодписки);
		
	КонецЦикла;

КонецПроцедуры

// Удаляет уведомление из очереди уведомлений
//
Процедура УдалитьУведомлениеИзОчередиУведомлений(Уведомление)
	
	РегистрыСведений.ОчередьУведомлений.УдалитьУведомление(
		Уведомление.Объект, 
		Уведомление.Получатель, 
		Уведомление.ВидСобытия,
		Уведомление.ОбъектПодписки);
	
КонецПроцедуры

// Добавляет бизнес-процесс в массив с проверкой подписки, дочерних и ведущих процессов.
// Если в массиве уже есть дочерние бизнес-процессы с подпиской, то удаляет их.
// Если в массиве уже есть ведущий бизнес-процесс с подпиской, то не добавляет.
Процедура ДобавитьВМассивСПроверкойПодписки(
		ОбъектУведомления, 
		ОбъектПодписки, 
		ОбъектыПодписки, 
		БизнесПроцессыРодители, 
		ОтказыОтПодписки,
		ОбъектыУведомленияСПодпиской,
		ОбъектыУведомленияСОтказом)
	
	Если ЕстьОтказОтПодпискиВИерархии(ОбъектУведомления, ОбъектПодписки, ОтказыОтПодписки) Тогда
		
		Если ОбъектыУведомленияСПодпиской.Найти(ОбъектУведомления) = Неопределено Тогда
			ДобавитьЗначениеВМассив(ОбъектУведомления, ОбъектыУведомленияСОтказом);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЯвляетсяПотомкомОбъектовПодписки(ОбъектПодписки, ОбъектыПодписки, ОтказыОтПодписки) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Родитель", ОбъектПодписки);
	НайденныеПроцессыПотомки = БизнесПроцессыРодители.НайтиСтроки(Отбор);
	Для Каждого СтрокаНайденныйПроцессПотомок Из НайденныеПроцессыПотомки Цикл
		
		ПроцессПотомок = СтрокаНайденныйПроцессПотомок.ОбъектПодписки;
		
		ИндексПотомкаВМассиве = ОбъектыПодписки.Найти(ПроцессПотомок);
		Если ИндексПотомкаВМассиве <> Неопределено Тогда
			ОбъектыПодписки.Удалить(ИндексПотомкаВМассиве);
		КонецЕсли;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ОбъектПодписки", ПроцессПотомок);
		СтрокиПроцессаПотомка = БизнесПроцессыРодители.НайтиСтроки(Отбор);
		Для Каждого СтрокаПроцессаПотомка Из СтрокиПроцессаПотомка Цикл
			БизнесПроцессыРодители.Удалить(СтрокаПроцессаПотомка);
		КонецЦикла;
		
	КонецЦикла;
	
	ИндексВМассивеОтказов = ОбъектыУведомленияСОтказом.Найти(ОбъектУведомления);
	Если ИндексВМассивеОтказов <> Неопределено Тогда
		ОбъектыУведомленияСОтказом.Удалить(ИндексВМассивеОтказов);
	КонецЕсли;
	
	ДобавитьЗначениеВМассив(ОбъектУведомления, ОбъектыУведомленияСПодпиской);
	
	ДобавитьВМассивСЗаполнениемРодителей(
		ОбъектПодписки,
		ОбъектыПодписки,
		БизнесПроцессыРодители,
		ОтказыОтПодписки);
	
КонецПроцедуры

// Добавляет бизнес-процесс в массив и заполняет таблицу родителей
//
Процедура ДобавитьВМассивСЗаполнениемРодителей(
	ОбъектПодписки,
	ОбъектыПодписки,
	БизнесПроцессыРодители,
	ОтказыОтПодписки)
	
	МассивРодителей = Новый Массив;
	ПолучитьРодителейСПроверкойПодписки(
		ОбъектПодписки,
		МассивРодителей,
		ОтказыОтПодписки,
		ОбъектПодписки);
	
	Для Каждого Родитель Из МассивРодителей Цикл
		
		НоваяСтрока = БизнесПроцессыРодители.Добавить();
		НоваяСтрока.ОбъектПодписки = ОбъектПодписки;
		НоваяСтрока.Родитель = Родитель;
		
	КонецЦикла;
	
	ОбъектыПодписки.Добавить(ОбъектПодписки);
	
КонецПроцедуры

// Получение родителя бизнес-процесса с проверкой подписки
//
Процедура ПолучитьРодителейСПроверкойПодписки(
	ОбъектРодитель,
	МассивРодителей,
	ОтказыОтПодписки,
	ОбъектПодписки)
	
	Если ТипЗнч(ОбъектРодитель) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Если ЗначениеЗаполнено(ОбъектРодитель.БизнесПроцесс) Тогда
			ПолучитьРодителейСПроверкойПодписки(
				ОбъектРодитель.БизнесПроцесс,
				МассивРодителей,
				ОтказыОтПодписки,
				ОбъектПодписки);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ОтказыОтПодписки.Найти(ОбъектРодитель, "ОбъектПодписки") <> Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ОбъектРодитель <> ОбъектПодписки Тогда
		МассивРодителей.Добавить(ОбъектРодитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектРодитель.ВедущаяЗадача) Тогда
		
		ПолучитьРодителейСПроверкойПодписки(
			ОбъектРодитель.ВедущаяЗадача,
			МассивРодителей,
			ОтказыОтПодписки,
			ОбъектПодписки);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектПодписки.ГлавнаяЗадача) Тогда
		
		ПолучитьРодителейСПроверкойПодписки(
			ОбъектРодитель.ГлавнаяЗадача,
			МассивРодителей,
			ОтказыОтПодписки,
			ОбъектПодписки);
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Формирует текст уведомления пользователя по всем видам событий, кроме указанных
//
Процедура СформироватьУведомленияПоСобытиям(ПолучательУведомления, ОбработанныеВидыБизнесСобытий, Уведомления, СформированныеУведомления)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Получатель", ПолучательУведомления);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
	
	Для Каждого Уведомление Из УведомленияПользователя Цикл
		
		Если ОбработанныеВидыБизнесСобытий.Найти(Уведомление.ВидСобытия) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстУведомления =
			СформироватьТекстУведомленияПоСобытию(
				Уведомление.ОбъектПодписки, 
				Уведомление.ВидСобытия, 
				Уведомление.Объект,
				ПолучательУведомления,
				Уведомление.ТекстУведомления);
				
		УведомленияПодписки = Новый Массив;
		ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
		
		СформированноеУведомление = СформированныеУведомления.Добавить();
		СформированноеУведомление.Получатель = ПолучательУведомления;
		СформированноеУведомление.ТекстУведомления = ТекстУведомления;
		СформированноеУведомление.Уведомления = УведомленияПодписки;
		СформированноеУведомление.ВидСобытия = Уведомление.ВидСобытия;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает представление конкретного бизнес-события для конкретного объекта
//
Функция ПолучитьПредставлениеБизнесСобытия(ВидСобытия, ОбъектПодписки = "", ДобавитьПредставлениеОбъекта = Ложь) Экспорт
	
	Если ТипЗнч(ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Подходит срок задачи'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Задача выполнена'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Задача перенаправлена'");			
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Задача остановлена'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Задача возобновлена'");		
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	ИначеЕсли ЭтоПоддерживаемыйБизнесПроцесс(ОбъектПодписки) Тогда
			
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Возобновлен процесс'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ЗавершениеБизнесПроцесса Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Завершен процесс'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Остановлен процесс'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СтартБизнесПроцесса Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Прерван процесс'");			
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Ход выполнения процесса'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Поступила новая задача пользователю'");
		ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Перенаправлена задача пользователю'");
		ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Подошел срок задачи пользователя'");
		ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача Тогда
			ПредставлениеБизнесСобытия = НСтр("ru = 'Просрочена задача пользователя'");
		Иначе
			ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		КонецЕсли;
		
	Иначе
		
		ПредставлениеБизнесСобытия = Строка(ВидСобытия);
		
	КонецЕсли;
	
	Если ДобавитьПредставлениеОбъекта Тогда
		ПредставлениеБизнесСобытия = 
			ПредставлениеБизнесСобытия
			+ " """
			+ ПредставлениеОбъекта(ОбъектПодписки)
			+ """";
	КонецЕсли;
	
	Возврат ПредставлениеБизнесСобытия;
	
КонецФункции

// Возвращает представление объекта с указанием его типа, если требуется
//
Функция ПредставлениеОбъекта(Объект, ДобавлятьТипОбъекта = Истина)
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.Обращение") Тогда
		Если ДобавлятьТипОбъекта Тогда
			Возврат Строка(Объект);
		Иначе
			Возврат СтрЗаменить(Строка(Объект), СтрШаблон(" (%1)",НСтр("ru='Обращение'")),"");
		КонецЕсли;
	Иначе
		Если ДобавлятьТипОбъекта Тогда
			Возврат СтрШаблон("%1 (%2)", Строка(Объект), ТипЗнч(Объект));
		Иначе
			Возврат Строка(Объект);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Формирует текст уведомления по событию
//
Функция СформироватьТекстУведомленияПоСобытию(ОбъектПодписки, ВидСобытия, ОбъектУведомления, ПолучательУведомления, ТекстУведомленияИзСобытий)
	
	ТекстУведомления = "";
	ДобавлятьОписаниеОбъектаПодписки = Истина;
	
	ПредставлениеПроизошедшегоСобытия =
		СтрШаблон(НСтр("ru = '%1'") + Символы.ПС, ПолучитьПредставлениеБизнесСобытия(ВидСобытия, ОбъектПодписки, Истина));
	
	СтрДобавить(ТекстУведомления, ПредставлениеПроизошедшегоСобытия, Символы.ПС);
	
	Если ОбъектУведомления <> ОбъектПодписки И ДобавлятьОписаниеОбъектаПодписки Тогда
		СформироватьОписаниеОбъектаУведомления(ОбъектПодписки, ТекстУведомления, ПолучательУведомления, ВидСобытия);
		СформироватьОписаниеОбъектаУведомления(ОбъектУведомления, ТекстУведомления, ПолучательУведомления, ВидСобытия);
	Иначе
		СформироватьОписаниеОбъектаУведомления(ОбъектУведомления, ТекстУведомления, ПолучательУведомления, ВидСобытия, ТекстУведомленияИзСобытий);
	КонецЕсли;
	
	Возврат ТекстУведомления;
	
КонецФункции

Функция ПолучитьОтказыОтПодпискиПоВидуБизнесСобытия(ВидСобытия, Получатель)
	
	ОтказыОтПодписки = РегистрыСведений.ПодпискиНаУведомления.ПолучитьОтказОтПодпискиПоВидуБизнесСобытия(ВидСобытия, Получатель);
	
	Возврат ОтказыОтПодписки;
	
КонецФункции

// Возвращает Истина если переданная ссылка является ссылкой 
// на поддерживаемый системой уведомлений бизнес-процесс.
Функция ЭтоПоддерживаемыйБизнесПроцесс(Ссылка)
	
	Возврат ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Поручение");
	
КонецФункции

// Проверяет есть ли среди родителей объекта подписки объекта из массива объектов подписки 
// с учетом отказов от уведомлений.
Функция ЯвляетсяПотомкомОбъектовПодписки(ОбъектПодписки, ОбъектыПодписки, ОтказыОтПодписки)
	
	Если ТипЗнч(ОбъектПодписки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ЯвляетсяПотомкомПоБизнесПроцессу = Ложь;
		
		Если ЗначениеЗаполнено(ОбъектПодписки.БизнесПроцесс) Тогда
			ЯвляетсяПотомкомПоБизнесПроцессу = ЯвляетсяПотомкомОбъектовПодписки(
				ОбъектПодписки.БизнесПроцесс,
				ОбъектыПодписки, 
				ОтказыОтПодписки);
		КонецЕсли;
		
		Возврат ЯвляетсяПотомкомПоБизнесПроцессу;
		
	КонецЕсли;
	
	Если ОбъектыПодписки.Найти(ОбъектПодписки) <> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ОтказыОтПодписки.Найти(ОбъектПодписки, "ОбъектПодписки") <> Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ЯвляетсяПотомкомПоВедущейЗадаче = Ложь;
	ЯвляетсяПотомкомПоГлавнойЗадаче = Ложь;
	
	Если ЗначениеЗаполнено(ОбъектПодписки.ВедущаяЗадача) Тогда
		
		ЯвляетсяПотомкомПоВедущейЗадаче = ЯвляетсяПотомкомОбъектовПодписки(
			ОбъектПодписки.ВедущаяЗадача,
			ОбъектыПодписки, 
			ОтказыОтПодписки);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектПодписки.ГлавнаяЗадача) Тогда
		
		ЯвляетсяПотомкомПоГлавнойЗадаче = ЯвляетсяПотомкомОбъектовПодписки(
			ОбъектПодписки.ГлавнаяЗадача,
			ОбъектыПодписки, 
			ОтказыОтПодписки);
		
	КонецЕсли;
	
	Возврат ЯвляетсяПотомкомПоВедущейЗадаче ИЛИ ЯвляетсяПотомкомПоГлавнойЗадаче;
	
КонецФункции

// Проверяет наличие отказа от подписки в иерархии.
//
Функция ЕстьОтказОтПодпискиВИерархии(ОбъектУведомления, ОбъектПодписки, ОтказыОтПодписки)
	
	Если ОбъектУведомления = ОбъектПодписки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ОтказОтПодпискиВИерархии = Ложь;
		
		Если ЗначениеЗаполнено(ОбъектУведомления.БизнесПроцесс) Тогда
			
			ОтказОтПодпискиВИерархии = ЕстьОтказОтПодпискиВИерархии(
				ОбъектУведомления.БизнесПроцесс,
				ОбъектПодписки,
				ОтказыОтПодписки);
				
		КонецЕсли;
		
		Возврат ОтказОтПодпискиВИерархии;
		
	КонецЕсли;
	
	Если ОтказыОтПодписки.Найти(ОбъектУведомления, "ОбъектПодписки") <> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ЕстьОтказПоВедущейЗадаче = Ложь;
	ЕстьОтказПоГлавнойЗадаче = Ложь;
	
	Если ЗначениеЗаполнено(ОбъектУведомления.ВедущаяЗадача) Тогда
		
		ЕстьОтказПоВедущейЗадаче = ЕстьОтказОтПодпискиВИерархии(
			ОбъектУведомления.ВедущаяЗадача,
			ОбъектПодписки,
			ОтказыОтПодписки);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектУведомления.ГлавнаяЗадача) Тогда
		
		ЕстьОтказПоГлавнойЗадаче = ЕстьОтказОтПодпискиВИерархии(
			ОбъектУведомления.ГлавнаяЗадача,
			ОбъектПодписки,
			ОтказыОтПодписки);
		
	КонецЕсли;
	
	Возврат ЕстьОтказПоВедущейЗадаче ИЛИ ЕстьОтказПоГлавнойЗадаче;
	
КонецФункции

// Добавляет значение в массив, если такого значения в нем еще нет
//
Процедура ДобавитьЗначениеВМассив(Значение, Массив, ДобавленоЗначениеВМассив = Ложь)
	
	Если Массив.Найти(Значение) = Неопределено Тогда
		Массив.Добавить(Значение);
		ДобавленоЗначениеВМассив = Истина;
	Иначе
		ДобавленоЗначениеВМассив = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Корректирует персональные настройки в соответствии с переданными параметрами. Для всех
// персональных настроек, у которых текущее значение совпадает со старым - устанавливается новое.
// Если старое значение совпадает с новым значением то корректировка не проводится.
//
// Параметры:
//  Настройка - ПеречислениеСсылка.НастройкиУведомлений - Корректируемая настройка.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид
//               события, для которого корректируется настройка.
//  Значение - Булево, Число - Новое значение настройки.
//  СтароеЗначение - Булево, Число - Старое значение настройки.
//
Процедура СкорректироватьПерсональныеНастройки(Настройка, ВидСобытия, Значение, СтароеЗначение)
	
	Если СтароеЗначение = Значение Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистраСведенийНастроек = Неопределено;
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача Тогда
		ИмяРегистраСведенийНастроек = "НастройкиУведомленияОЗадачах";
	КонецЕсли;
	
	ИмяНастройки = Неопределено;
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи
		И Настройка = Перечисления.НастройкиУведомлений.ЧастотаУведомления Тогда
		ИмяНастройки = "ЧастотаПриближениеСрока";
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗадачи 
		И Настройка = Перечисления.НастройкиУведомлений.СрокУведомления Тогда
		ИмяНастройки = "СрокУведомления";
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаЗадача
		И Настройка = Перечисления.НастройкиУведомлений.ЧастотаУведомления Тогда
		ИмяНастройки = "ЧастотаПросроченныеЗадачи";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРегистраСведенийНастроек) Или Не ЗначениеЗаполнено(ИмяНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений[ИмяРегистраСведенийНастроек].СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		Если ЗаписьНабора[ИмяНастройки] = СтароеЗначение Тогда
			ЗаписьНабора[ИмяНастройки] = Значение;
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Определяет тип объекта и вызывает соответствующее добавление уведомления
//
Процедура ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления = Неопределено)
	
	Если ОбъектУведомления = Неопределено Тогда
		
		ОбъектУведомления = Объект;
		
	КонецЕсли;
	
		
	Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ДобавитьУведомленияПоЗадачеИсполнителя(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.Обращение") Тогда
		
		ДобавитьУведомленияПоОбращению(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Ошибки") Тогда
		
		ДобавитьУведомленияПоОшибке(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Консультации") Тогда
		
		ДобавитьУведомленияПоКонсультации(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Пожелания") Тогда
		
		ДобавитьУведомленияПоПожеланию(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ЭтоПоддерживаемыйБизнесПроцесс(Объект) Тогда
		
		ДобавитьУведомленияПоБизнесПроцессу(ПроизошедшееСобытие, Объект, ВидСобытия, ОбъектУведомления);
		
	Иначе
		
		ДобавитьУведомленияПодписчиковПоОбъекту(Объект, ВидСобытия, ОбъектУведомления);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по задаче исполнителя
//
Процедура ДобавитьУведомленияПоЗадачеИсполнителя(ПроизошедшееСобытие, ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеЗадачи Тогда
		
		Если ЗадачаИсполнителя.Выполнена Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьУведомленияИсполнителейЗадачи(ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления);
		ДобавитьУведомленияПодписчиковПоОбъекту(ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи Тогда
		
		ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);
		
		БылИсполнительПредставление = "";
		Если ПараметрыСобытия.Свойство("БылИсполнитель") Тогда
			Если ЗначениеЗаполнено(ПараметрыСобытия.БылИсполнитель) Тогда
				БылИсполнительПредставление = СтрШаблон(
					НСтр("ru = 'от исполнителя: ""%1""'"),
					ПараметрыСобытия.БылИсполнитель);
			КонецЕсли;
		КонецЕсли;
		
		СталИсполнительПредставление = "";
		Если ПараметрыСобытия.Свойство("СталИсполнитель") Тогда
			Если ЗначениеЗаполнено(ПараметрыСобытия.СталИсполнитель) Тогда
				СталИсполнительПредставление = СтрШаблон(
					НСтр("ru = 'к исполнителю: ""%1""'"),
					ПараметрыСобытия.СталИсполнитель);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БылИсполнительПредставление)
			ИЛИ ЗначениеЗаполнено(СталИсполнительПредставление) Тогда
			
			ДополнительноеОписание = СтрШаблон(
				НСтр("ru = 'Перенаправлена %1 %2'"),
				БылИсполнительПредставление,
				СталИсполнительПредставление);
			
		Иначе
			ДополнительноеОписание = "";
		КонецЕсли;
		
		ДобавитьУведомленияИсполнителейЗадачи(
			ЗадачаИсполнителя,
			ВидСобытия,
			ОбъектУведомления,
			ДополнительноеОписание);
		ДобавитьУведомленияПодписчиковПоОбъекту(
			ЗадачаИсполнителя,
			ВидСобытия,
			ОбъектУведомления,
			ДополнительноеОписание);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		
		// Если была выполнена эта задача - тогда уведомим подписчиков
		Если ЗадачаИсполнителя = ОбъектУведомления Тогда
			ДобавитьУведомленияПодписчиковПоОбъекту(ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗадачаИсполнителя.БизнесПроцесс) Тогда
			ДобавитьУведомлениеПоОбъекту(
				ПроизошедшееСобытие,
				ЗадачаИсполнителя.БизнесПроцесс,
				ВидСобытия,
				ОбъектУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
			
		ДобавитьУведомленияИсполнителейЗадачи(ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления);
		ДобавитьУведомленияПодписчиковПоОбъекту(ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления);
		
	Иначе
		
		ДобавитьУведомленияПодписчиковПоОбъекту(ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по обращению
//
Процедура ДобавитьУведомленияПоОбращению(ПроизошедшееСобытие, Обращение, ВидСобытия, ОбъектУведомления)
	
    Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПолученоПисьмоПоОбращению 
     Или ВидСобытия = Справочники.ВидыБизнесСобытий.ПолученКомментарийОтПользователя Тогда
		
		ДополнительноеОписание = СтрЗаменить(ПроизошедшееСобытие.КонтекстСобытияСтрокой, Строка(ВидСобытия) + Символы.ПС,"");
		ДобавитьУведомленияИсполнителейОбращения(Обращение, ВидСобытия, ОбъектУведомления, ДополнительноеОписание);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеОбращения Тогда
		
		ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);
		
		БылОтветственныйПредставление = "";
		Если ПараметрыСобытия.Свойство("БылИсполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.БылИсполнитель) Тогда
			БылОтветственныйПредставление = СтрШаблон("%1", ПараметрыСобытия.БылИсполнитель);
		КонецЕсли;
		Если ПараметрыСобытия.Свойство("ИсходныйИсполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.ИсходныйИсполнитель) Тогда
			БылОтветственныйПредставление = СтрШаблон("%1", ПараметрыСобытия.ИсходныйИсполнитель);
		КонецЕсли;
		
		СталИсполнительПредставление = "";
		Если ПараметрыСобытия.Свойство("СталИсполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.СталИсполнитель) Тогда
			СталИсполнительПредставление = СтрШаблон("%1", ПараметрыСобытия.СталИсполнитель);
		КонецЕсли;
		Если ПараметрыСобытия.Свойство("Исполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.Исполнитель) Тогда
			СталИсполнительПредставление = СтрШаблон("%1", ПараметрыСобытия.Исполнитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БылОтветственныйПредставление) ИЛИ ЗначениеЗаполнено(СталИсполнительПредставление) Тогда
			
			ДополнительноеОписание = СтрШаблон(НСтр("ru = '%1 → %2'"), БылОтветственныйПредставление, СталИсполнительПредставление);
			Если ЗначениеЗаполнено(?(ПараметрыСобытия.Свойство("КомментарийПеренаправления"), ПараметрыСобытия.КомментарийПеренаправления, ПараметрыСобытия.Комментарий)) Тогда
				СтрДобавить(ДополнительноеОписание, СтрШаблон(НСтр("ru='Комментарий: %1'"),
					?(ПараметрыСобытия.Свойство("КомментарийПеренаправления"), 
						ПараметрыСобытия.КомментарийПеренаправления, ПараметрыСобытия.Комментарий)), Символы.ПС);
			КонецЕсли;
			
		Иначе
			ДополнительноеОписание = "";
		КонецЕсли;
		
		ДобавитьУведомленияИсполнителейОбращения(Обращение, ВидСобытия, ОбъектУведомления, ДополнительноеОписание);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по консультации
//
Процедура ДобавитьУведомленияПоКонсультации(ПроизошедшееСобытие, Консультация, ВидСобытия, ОбъектУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеКонсультации Тогда
		
		ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);
		
		Если ПараметрыСобытия.Свойство("БылОтветственный") И ЗначениеЗаполнено(ПараметрыСобытия.БылОтветственный) Тогда
			БылОтветственныйПредставление = СтрШаблон("%1", ПараметрыСобытия.БылОтветственный);
		КонецЕсли;
		Если ПараметрыСобытия.Свойство("БылИсполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.БылИсполнитель) Тогда
			БылОтветственныйПредставление = СтрШаблон("%1", ПараметрыСобытия.БылИсполнитель);
		КонецЕсли;
		Если ПараметрыСобытия.Свойство("ИсходныйИсполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.ИсходныйИсполнитель) Тогда
			БылОтветственныйПредставление = СтрШаблон("%1", ПараметрыСобытия.ИсходныйИсполнитель);
		КонецЕсли;
		
		СталИсполнительПредставление = "";
		Если ПараметрыСобытия.Свойство("СталОтветственный") И ЗначениеЗаполнено(ПараметрыСобытия.СталОтветственный) Тогда
			СталИсполнительПредставление = СтрШаблон("%1", ПараметрыСобытия.СталОтветственный);
		КонецЕсли;
		Если ПараметрыСобытия.Свойство("СталИсполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.СталИсполнитель) Тогда
			СталИсполнительПредставление = СтрШаблон("%1", ПараметрыСобытия.СталИсполнитель);
		КонецЕсли;
		Если ПараметрыСобытия.Свойство("Исполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.Исполнитель) Тогда
			СталИсполнительПредставление = СтрШаблон("%1", ПараметрыСобытия.Исполнитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БылОтветственныйПредставление) ИЛИ ЗначениеЗаполнено(СталИсполнительПредставление) Тогда
			
			ДополнительноеОписание = СтрШаблон(НСтр("ru = '%1 → %2'"), БылОтветственныйПредставление, СталИсполнительПредставление);
			Если ЗначениеЗаполнено(?(ПараметрыСобытия.Свойство("КомментарийПеренаправления"), ПараметрыСобытия.КомментарийПеренаправления, ПараметрыСобытия.Комментарий)) Тогда
				СтрДобавить(ДополнительноеОписание, СтрШаблон(НСтр("ru='Комментарий: %1'"),
					?(ПараметрыСобытия.Свойство("КомментарийПеренаправления"), 
						ПараметрыСобытия.КомментарийПеренаправления, ПараметрыСобытия.Комментарий)), Символы.ПС);
			КонецЕсли;
			
		Иначе
			ДополнительноеОписание = "";
		КонецЕсли;
		
		ДобавитьУведомленияОтветственныхКонсультации(Консультация, ВидСобытия, ОбъектУведомления, ДополнительноеОписание);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по ошибке
//
Процедура ДобавитьУведомленияПоОшибке(ПроизошедшееСобытие, Ошибка, ВидСобытия, ОбъектУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеОшибки Тогда
		
		ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);
		
		Если ПараметрыСобытия.Свойство("БылОтветственный") И ЗначениеЗаполнено(ПараметрыСобытия.БылОтветственный) Тогда
			БылОтветственныйПредставление = СтрШаблон("%1", ПараметрыСобытия.БылОтветственный);
		КонецЕсли;
		Если ПараметрыСобытия.Свойство("БылИсполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.БылИсполнитель) Тогда
			БылОтветственныйПредставление = СтрШаблон("%1", ПараметрыСобытия.БылИсполнитель);
		КонецЕсли;
		Если ПараметрыСобытия.Свойство("ИсходныйИсполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.ИсходныйИсполнитель) Тогда
			БылОтветственныйПредставление = СтрШаблон("%1", ПараметрыСобытия.ИсходныйИсполнитель);
		КонецЕсли;
		
		СталИсполнительПредставление = "";
		Если ПараметрыСобытия.Свойство("СталОтветственный") И ЗначениеЗаполнено(ПараметрыСобытия.СталОтветственный) Тогда
			СталИсполнительПредставление = СтрШаблон("%1", ПараметрыСобытия.СталОтветственный);
		КонецЕсли;
		Если ПараметрыСобытия.Свойство("СталИсполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.СталИсполнитель) Тогда
			СталИсполнительПредставление = СтрШаблон("%1", ПараметрыСобытия.СталИсполнитель);
		КонецЕсли;
		Если ПараметрыСобытия.Свойство("Исполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.Исполнитель) Тогда
			СталИсполнительПредставление = СтрШаблон("%1", ПараметрыСобытия.Исполнитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БылОтветственныйПредставление) ИЛИ ЗначениеЗаполнено(СталИсполнительПредставление) Тогда
			
			ДополнительноеОписание = СтрШаблон(НСтр("ru = '%1 → %2'"), БылОтветственныйПредставление, СталИсполнительПредставление);
			Если ЗначениеЗаполнено(?(ПараметрыСобытия.Свойство("КомментарийПеренаправления"), ПараметрыСобытия.КомментарийПеренаправления, ПараметрыСобытия.Комментарий)) Тогда
				СтрДобавить(ДополнительноеОписание, СтрШаблон(НСтр("ru='Комментарий: %1'"),
					?(ПараметрыСобытия.Свойство("КомментарийПеренаправления"), 
						ПараметрыСобытия.КомментарийПеренаправления, ПараметрыСобытия.Комментарий)), Символы.ПС);
			КонецЕсли;
			
		Иначе
			ДополнительноеОписание = "";
		КонецЕсли;
		
		ДобавитьУведомленияОтветственныхОшибки(Ошибка, ВидСобытия, ОбъектУведомления, ДополнительноеОписание);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет уведомление по пожеланию
//
Процедура ДобавитьУведомленияПоПожеланию(ПроизошедшееСобытие, Пожелание, ВидСобытия, ОбъектУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеПожелания Тогда
		
		ПараметрыСобытия = ПолучитьПараметрыСобытия(ПроизошедшееСобытие);
		
		Если ПараметрыСобытия.Свойство("БылОтветственный") И ЗначениеЗаполнено(ПараметрыСобытия.БылОтветственный) Тогда
			БылОтветственныйПредставление = СтрШаблон("%1", ПараметрыСобытия.БылОтветственный);
		КонецЕсли;
		Если ПараметрыСобытия.Свойство("БылИсполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.БылИсполнитель) Тогда
			БылОтветственныйПредставление = СтрШаблон("%1", ПараметрыСобытия.БылИсполнитель);
		КонецЕсли;
		Если ПараметрыСобытия.Свойство("ИсходныйИсполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.ИсходныйИсполнитель) Тогда
			БылОтветственныйПредставление = СтрШаблон("%1", ПараметрыСобытия.ИсходныйИсполнитель);
		КонецЕсли;
		
		СталИсполнительПредставление = "";
		Если ПараметрыСобытия.Свойство("СталОтветственный") И ЗначениеЗаполнено(ПараметрыСобытия.СталОтветственный) Тогда
			СталИсполнительПредставление = СтрШаблон("%1", ПараметрыСобытия.СталОтветственный);
		КонецЕсли;
		Если ПараметрыСобытия.Свойство("СталИсполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.СталИсполнитель) Тогда
			СталИсполнительПредставление = СтрШаблон("%1", ПараметрыСобытия.СталИсполнитель);
		КонецЕсли;
		Если ПараметрыСобытия.Свойство("Исполнитель") И ЗначениеЗаполнено(ПараметрыСобытия.Исполнитель) Тогда
			СталИсполнительПредставление = СтрШаблон("%1", ПараметрыСобытия.Исполнитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БылОтветственныйПредставление) ИЛИ ЗначениеЗаполнено(СталИсполнительПредставление) Тогда
			
			ДополнительноеОписание = СтрШаблон(НСтр("ru = '%1 → %2'"), БылОтветственныйПредставление, СталИсполнительПредставление);
			Если ЗначениеЗаполнено(?(ПараметрыСобытия.Свойство("КомментарийПеренаправления"), ПараметрыСобытия.КомментарийПеренаправления, ПараметрыСобытия.Комментарий)) Тогда
				СтрДобавить(ДополнительноеОписание, СтрШаблон(НСтр("ru='Комментарий: %1'"),
					?(ПараметрыСобытия.Свойство("КомментарийПеренаправления"), 
						ПараметрыСобытия.КомментарийПеренаправления, ПараметрыСобытия.Комментарий)), Символы.ПС);
			КонецЕсли;
			
		Иначе
			ДополнительноеОписание = "";
		КонецЕсли;
		
		ДобавитьУведомленияОтветственныхПожелания(Пожелание, ВидСобытия, ОбъектУведомления, ДополнительноеОписание);
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает уведомления по обращению с учетом исполнителей
//
Процедура ДобавитьУведомленияИсполнителейОбращения(Обращение, ВидСобытия, ОбъектУведомления, ДополнительноеОписание = Неопределено)
	
	Если ЗначениеЗаполнено(Обращение.Исполнитель) Тогда
		
		ДобавитьУведомленияПодписчиковПоСобытию(
			Обращение,
			ВидСобытия,
			ОбъектУведомления,
			Обращение.Исполнитель,
			ДополнительноеОписание);
			
		ДобавитьУведомленияПодписчиковПоОбъекту(
			Обращение.Исполнитель,
			ВидСобытия,
			ОбъектУведомления,
			ДополнительноеОписание);
			
	КонецЕсли;
	
КонецПроцедуры

// Записывает уведомления по обращению с учетом исполнителей
//
Процедура ДобавитьУведомленияОтветственныхКонсультации(Консультация, ВидСобытия, ОбъектУведомления, ДополнительноеОписание = Неопределено)
	
	Если ЗначениеЗаполнено(Консультация.Ответственный) Тогда
		
		ДобавитьУведомленияПодписчиковПоСобытию(
			Консультация,
			ВидСобытия,
			ОбъектУведомления,
			Консультация.Ответственный,
			ДополнительноеОписание);
			
		ДобавитьУведомленияПодписчиковПоОбъекту(
			Консультация.Ответственный,
			ВидСобытия,
			ОбъектУведомления,
			ДополнительноеОписание);
			
	КонецЕсли;
	
КонецПроцедуры

// Записывает уведомления по обращению с учетом исполнителей
//
Процедура ДобавитьУведомленияОтветственныхОшибки(Ошибка, ВидСобытия, ОбъектУведомления, ДополнительноеОписание = Неопределено)
	
	Если ЗначениеЗаполнено(Ошибка.Ответственный) Тогда
		
		ДобавитьУведомленияПодписчиковПоСобытию(
			Ошибка,
			ВидСобытия,
			ОбъектУведомления,
			Ошибка.Ответственный,
			ДополнительноеОписание);
			
		ДобавитьУведомленияПодписчиковПоОбъекту(
			Ошибка.Ответственный,
			ВидСобытия,
			ОбъектУведомления,
			ДополнительноеОписание);
			
	КонецЕсли;
	
КонецПроцедуры

// Записывает уведомления по обращению с учетом исполнителей
//
Процедура ДобавитьУведомленияОтветственныхПожелания(Пожелание, ВидСобытия, ОбъектУведомления, ДополнительноеОписание = Неопределено)
	
	Если ЗначениеЗаполнено(Пожелание.Ответственный) Тогда
		
		ДобавитьУведомленияПодписчиковПоСобытию(
			Пожелание,
			ВидСобытия,
			ОбъектУведомления,
			Пожелание.Ответственный,
			ДополнительноеОписание);
			
		ДобавитьУведомленияПодписчиковПоОбъекту(
			Пожелание.Ответственный,
			ВидСобытия,
			ОбъектУведомления,
			ДополнительноеОписание);
			
	КонецЕсли;
	
КонецПроцедуры

// Записывает уведомления по задаче с учетом исполнителей по ролям
//
Процедура ДобавитьУведомленияИсполнителейЗадачи(ЗадачаИсполнителя, ВидСобытия, ОбъектУведомления, 
	ПроверятьНастройки = Ложь, ДобавитьПодписчиковНаИсполнителей = Ложь, ДополнительноеОписание = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ЗадачаИсполнителя.Исполнитель) Тогда
		
		ДобавитьУведомленияПодписчиковПоСобытию(
			ЗадачаИсполнителя,
			ВидСобытия,
			ОбъектУведомления,
			ЗадачаИсполнителя.Исполнитель,
			ДополнительноеОписание);
		
		ДобавитьУведомленияПодписчиковПоОбъекту(
			ЗадачаИсполнителя.Исполнитель,
			ВидСобытия,
			ОбъектУведомления,
			ДополнительноеОписание);
		
	Иначе
		
		Если ПолучитьФункциональнуюОпцию("ОтправлятьУведомленияОЗадачахНаЛиниюПоддержки") Тогда
			
			ДобавитьУведомленияПодписчиковПоСобытию(
				ЗадачаИсполнителя,
				ВидСобытия,
				ОбъектУведомления,
				ЗадачаИсполнителя.ДополнительныйОбъектАдресации,
				ДополнительноеОписание);
				
			ДобавитьУведомленияПодписчиковПоОбъекту(
				ЗадачаИсполнителя.ДополнительныйОбъектАдресации,
				ВидСобытия,
				ОбъектУведомления,
				ДополнительноеОписание);
			
		Иначе
			
			ИсполнителиРоли = РегистрыСведений.ИсполнителиЗадач.ПолучитьИсполнителейРоли(
				ЗадачаИсполнителя.РольИсполнителя, 
				ЗадачаИсполнителя.ОсновнойОбъектАдресации, 
				ЗадачаИсполнителя.ДополнительныйОбъектАдресации);
			
			Для Каждого СтрокаИсполнитель Из ИсполнителиРоли Цикл
				
				ДобавитьУведомленияПодписчиковПоСобытию(
					ЗадачаИсполнителя,
					ВидСобытия,
					ОбъектУведомления,
					СтрокаИсполнитель.Исполнитель,
					ДополнительноеОписание);
				
				ДобавитьУведомленияПодписчиковПоОбъекту(
					СтрокаИсполнитель.Исполнитель,
					ВидСобытия,
					ОбъектУведомления,
					ДополнительноеОписание);
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли; 
	
КонецПроцедуры

// Добавляет уведомление по бизнес-процессам
//
Процедура ДобавитьУведомленияПоБизнесПроцессу(ПроизошедшееСобытие, БизнесПроцесс, ВидСобытия, ОбъектУведомления)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи Тогда
		Если ЗначениеЗаполнено(БизнесПроцесс.Автор) Тогда
			ДобавитьУведомленияПодписчиковПоСобытию(БизнесПроцесс, ВидСобытия, ОбъектУведомления, БизнесПроцесс.Автор);
		КонецЕсли;
		Если ЗначениеЗаполнено(БизнесПроцесс.ВедущаяЗадача) Тогда
			ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, БизнесПроцесс.ВедущаяЗадача, ВидСобытия, ОбъектУведомления);
		КонецЕсли;
		Если ЗначениеЗаполнено(БизнесПроцесс.ГлавнаяЗадача) Тогда
			ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, БизнесПроцесс.ГлавнаяЗадача, ВидСобытия, ОбъектУведомления);
		КонецЕсли;
		ДобавитьУведомленияПодписчиковПоОбъекту(БизнесПроцесс, ВидСобытия, ОбъектУведомления);
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса
		  Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
						
		Если ЗначениеЗаполнено(БизнесПроцесс.Автор) И БизнесПроцесс.Автор <> ПроизошедшееСобытие.Автор Тогда						
			ДобавитьУведомленияПодписчиковПоСобытию(БизнесПроцесс, ВидСобытия, ОбъектУведомления, БизнесПроцесс.Автор);
		КонецЕсли;
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			|	И ЗадачаИсполнителя.ПринятаКИсполнению = ИСТИНА
			|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс.Ссылка);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Задача = ВыборкаДетальныеЗаписи.Ссылка;
			ДобавитьУведомлениеПоОбъекту(ПроизошедшееСобытие, Задача, ВидСобытия, ОбъектУведомления);
		КонецЦикла;		
		ДобавитьУведомленияПодписчиковПоОбъекту(БизнесПроцесс, ВидСобытия, ОбъектУведомления);
	Иначе
		ДобавитьУведомленияПодписчиковПоОбъекту(БизнесПроцесс, ВидСобытия, ОбъектУведомления);
	КонецЕсли;
	
КонецПроцедуры

// Записывает уведомления по событию
//
Процедура ДобавитьУведомленияПодписчиковПоСобытию(
	Объект,
	ВидСобытия,
	ОбъектУведомления,
	Подписчик,
	ДополнительноеОписание = Неопределено)
	
	Если ДополнительноеОписание <> Неопределено Тогда
		ТекстУведомления = ДополнительноеОписание;
	Иначе
		ИсточникУведомления = ПолучитьПредставлениеБизнесСобытия(ВидСобытия, Объект, Истина);
		ПричинаУведомления = СтрШаблон(
			НСтр("ru = 'Получатель подписан на ""%1""'"),
			ПредставлениеОбъекта(ВидСобытия));
		ТекстУведомления = СформироватьТекстУведомления(
			ОбъектУведомления,
			ВидСобытия,
			ИсточникУведомления,
			ПричинаУведомления);
	КонецЕсли;
	
	ДобавитьУведомление(ОбъектУведомления, Подписчик, ТекстУведомления, ВидСобытия, Объект, Ложь);
	
КонецПроцедуры

// Записывает уведомления по объекту
//
Процедура ДобавитьУведомленияПодписчиковПоОбъекту(
	Объект,
	ВидСобытия,
	ОбъектУведомления,
	ДополнительноеОписание = Неопределено)
	
	Если ДополнительноеОписание <> Неопределено Тогда
		ТекстУведомления = ДополнительноеОписание;
	Иначе
		ИсточникУведомления = ПолучитьПредставлениеБизнесСобытия(ВидСобытия, Объект, Истина);
		ПричинаУведомления = СтрШаблон(
			НСтр("ru = 'Получатель подписан на ""%1""'"),
			ПредставлениеОбъекта(Объект));
		ТекстУведомления = СформироватьТекстУведомления(
			ОбъектУведомления,
			ВидСобытия,
			ИсточникУведомления,
			ПричинаУведомления);
	КонецЕсли;
	
	СписокПодписчиков =
		РегистрыСведений.ПодпискиНаУведомления.ПолучитьМассивПодписчиковПоОбъекту(ВидСобытия, Объект);
	Для Каждого СтрокаПодписчик Из СписокПодписчиков Цикл
		ДобавитьУведомление(
			ОбъектУведомления,
			СтрокаПодписчик,
			ТекстУведомления,
			ВидСобытия,
			Объект,
			Истина);
	КонецЦикла;
	
КонецПроцедуры

// Записывает уведомления в регистр сведений
//
Процедура ДобавитьУведомление(ОбъектУведомления, Получатель, ТекстУведомления, ВидСобытия, ОбъектПодписки, ПодпискаНаОбъект = Ложь) 
	
	Если Не ЗначениеЗаполнено(Получатель)  Тогда
		Возврат;
    КонецЕсли;
    
    // Если адреса пользователя не заполнены, то оповещения не нужно добавлять.
    Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
		АдресаПользователя = КонтактнаяИнформацияУСП.ВсеЭлектронныеАдресаПользователя(Получатель);
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.ЛинииПоддержки") Тогда
		АдресаПользователя = КонтактнаяИнформацияУСП.ВсеЭлектронныеАдресаЛинииПоддержки(Получатель);
    Иначе
        АдресаПользователя = "";
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(АдресаПользователя) Тогда
        Возврат;
    КонецЕсли;
    
    НастройкаУведомления = ПолучитьНастройкуУведомления(
		ВидСобытия, ОбъектУведомления, Получатель, ОбъектПодписки, ПодпискаНаОбъект);
	
	Если НастройкаУведомления.ПодпискаАктивна Тогда
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомление(
				ОбъектУведомления, Получатель, ТекстУведомления, ВидСобытия, ОбъектПодписки);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет наличие подписки на вид события по объекту или просто на вид события.
//
Функция ПолучитьНастройкуУведомления(
	ВидСобытия,
	ОбъектУведомления,
	Пользователь,
	ОбъектПодписки,
	ПодпискаНаОбъект)
	
	Если ПодпискаНаОбъект Тогда
		
		ПодпискаПользователя =
			РегистрыСведений.ПодпискиНаУведомления.ПроверитьПодпискуПоОбъекту(
				ВидСобытия,
				ОбъектПодписки,
				Пользователь);
				
	Иначе
		
		РазрешитьИзменятьНастройкиУведомлений = ПолучитьРазрешитьИзменятьНастройкиУведомлений();
		ПодпискаПоУмолчанию = ПолучитьНастройкуПоУмолчанию(Перечисления.НастройкиУведомлений.Подписка, ВидСобытия);
		ПодпискаПользователя = РегистрыСведений.ПодпискиНаУведомления.ПроверитьПодпискуПоВидуБизнесСобытия(
			ВидСобытия,
			ОбъектПодписки,
			Пользователь);
		
		Если РазрешитьИзменятьНастройкиУведомлений Тогда
			
			ПодпискаПользователя.ПодпискаАктивна = (НЕ ПодпискаПользователя.ЕстьЗаписьВРегистре И ПодпискаПоУмолчанию)
				ИЛИ (ПодпискаПользователя.ЕстьЗаписьВРегистре И ПодпискаПользователя.ПодпискаАктивна);
			
		Иначе
			
			ПодпискаПользователя.ПодпискаАктивна = ПодпискаПоУмолчанию
				ИЛИ (ПодпискаПользователя.ЕстьЗаписьВРегистре И ПодпискаПользователя.ПодпискаАктивна);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодпискаПользователя;
	
КонецФункции

// Возвращает структуру с параметрами произошедшего события
//
Функция ПолучитьПараметрыСобытия(Событие)
	
	Попытка
		СтрокаXML = Событие.КонтекстСобытия.Получить();
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
		ПараметрыСобытия = НовыйСериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	Исключение
		ПараметрыСобытия = Новый Структура;
	КонецПопытки;
	Возврат ПараметрыСобытия;
	
КонецФункции

// Формирует текст уведомления
//
Функция СформироватьТекстУведомления(ОбъектУведомления, ВидСобытия, ПояснениеУведомления = Неопределено, ПричинаУведомления = Неопределено)
	
	ТекстУведомления = "";
	
	СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = 'Событие: %1 ""%2""'"), ВидСобытия, ОбъектУведомления), Символы.ПС);
	СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = 'Пояснение: %1'"), ПояснениеУведомления), Символы.ПС);
	СтрДобавить(ТекстУведомления, СтрШаблон(НСтр("ru = 'Причина уведомления: %1'"), ПричинаУведомления), Символы.ПС);
	
	Возврат ТекстУведомления;
	
КонецФункции

// Процедура СтрДобавить добавляет к Строке Разделитель и ДобавляемоеЗначение в случае, 
// если Строка и ДобавляемоеЗначение не пустые. Если Строка пустая или ДобавляемоеЗначение
// не заполнено, то добавляет к Строке ДобавляемоеЗначение.
// 
// Параметры:
// 	Строка - Строка - Строка или любое значение, приводимое к строке. Модифицируется в процедуре.
// 	ДобавляемоеЗначение - ЛюбойТип - Строка или любое значение, приводимое к строке.
// 	Разделитель - Символ, Строка - Строка или любое значение, приводимое к строке. 
//
Процедура СтрДобавить(Строка, ДобавляемоеЗначение, Разделитель="") Экспорт
	
	Если ПустаяСтрока(Строка) Тогда
		Строка = СокрЛП(Строка(ДобавляемоеЗначение));
	ИначеЕсли Не ПустаяСтрока(СокрЛП(Строка(ДобавляемоеЗначение))) Тогда
		Строка = Строка(Строка) + Разделитель + СокрЛП(Строка(ДобавляемоеЗначение));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст навигационной ссылки с учетом адреса публикации информационной базы.
//
Функция НавигационнаяСсылка(Ссылка)
	
	Возврат ?(РаботаСУведомлениямиПовтИсп.ИспользоватьАдресПубликацииПриложенияВУведомлениях(),
		СтрШаблон("%1#%2", РаботаСУведомлениямиПовтИсп.АдресПубликацииИнформационнойБазыВИнтернете(), ПолучитьНавигационнуюСсылку(Ссылка)),
		ПолучитьНавигационнуюСсылку(Ссылка));
	
КонецФункции

#КонецОбласти 
