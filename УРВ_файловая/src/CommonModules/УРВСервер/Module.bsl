Функция НайтиОсновнойЭтапДляПодстановкиВДокументы(Владелец) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПроектов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭтапыПроектов КАК ЭтапыПроектов
		|ГДЕ
		|	ЭтапыПроектов.Владелец = &Владелец
		|	И НЕ ЭтапыПроектов.ПометкаУдаления
		|	И НЕ ЭтапыПроектов.Неактуальный";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		ВыборкаДетальныеЗаписи.Следующий(); 
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Справочники.ЭтапыПроектов.ПустаяСсылка();
	КонецЕсли;	
		
КонецФункции

Функция ПолучитьНастройкиИнтеграции(Интеграция) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиИнтеграции.АдресПодключения КАК АдресПодключения,
		|	НастройкиИнтеграции.Пользователь КАК Пользователь,
		|	НастройкиИнтеграции.Пароль КАК Пароль,
		|	НастройкиИнтеграции.Сервер КАК Сервер,
		|	НастройкиИнтеграции.ИмяБазы КАК ИмяБазы
		|ИЗ
		|	РегистрСведений.НастройкиИнтеграции КАК НастройкиИнтеграции
		|ГДЕ
		|	НастройкиИнтеграции.Интеграция = &Интеграция";
	
	Запрос.УстановитьПараметр("Интеграция", Интеграция);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Структура = Неопределено;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Структура = Новый Структура;
		Структура.Вставить("АдресПодключения", ВыборкаДетальныеЗаписи.АдресПодключения);
		Структура.Вставить("Пользователь", ВыборкаДетальныеЗаписи.Пользователь);
		Структура.Вставить("Пароль", ВыборкаДетальныеЗаписи.Пароль);
		Структура.Вставить("Сервер", ВыборкаДетальныеЗаписи.Сервер);
		Структура.Вставить("ИмяБазы", ВыборкаДетальныеЗаписи.ИмяБазы);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции	

Процедура ПередЗаписьюУстановкаОтветственногоПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Метаданные().Реквизиты.Найти("Ответственный") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если НЕ ЗначениеЗаполнено(Источник.Ответственный) ИЛИ Источник.Модифицированность() Тогда
			Источник.Ответственный = ТекущийПользователь;
		КонецЕсли;
	Исключение
		Сообщить("Ошибка установки реквизита ""Ответственный"": " + Символы.ПС + ОписаниеОшибки());
	КонецПопытки
	
КонецПроцедуры

Функция ПолучитьОбращенияКонтрагента(Абонент) Экспорт
	
	МассивОбращений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Обращение.Дата КАК ДатаРегистрации,
		|	Обращение.ТипОбращения КАК ТипОбращения,
		|	Обращение.НомерСокращенный КАК НомерСокращенный,
		|	Обращение.КаналПолучения КАК КаналПолучения,
		|	Обращение.Тема КАК Тема,
		|	Обращение.Описание КАК Описание,
		|	Обращение.Состояние КАК Состояние,
		|	Обращение.Оценка КАК Оценка,
		|	Обращение.Инициатор КАК Инициатор,
		|	Обращение.Исполнитель КАК Исполнитель,
		|	Обращение.ДатаЗакрытия КАК ДатаЗакрытия
		|ИЗ
		|	Документ.Обращение КАК Обращение
		|ГДЕ
		|	Обращение.Абонент = &Абонент
		|	И НЕ Обращение.ПометкаУдаления
		|	И Обращение.Проведен";
	
	Запрос.УстановитьПараметр("Абонент", Абонент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивОбращений;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураОбращения = Новый Структура;
	    Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
	        СтруктураОбращения.Вставить(Колонка.Имя,Строка(ВыборкаДетальныеЗаписи[Колонка.Имя]));
	    КонецЦикла;
		МассивОбращений.Добавить(СтруктураОбращения);
	КонецЦикла;
	
	Возврат МассивОбращений;
	
КонецФункции	

Функция ЗаполнитьСписокВыборкаВидовРабот(Сотрудник, Дата) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МАКСИМУМ(СтавкиСотрудниковПоВидамРаботСрезПоследних.Период) КАК Период,
	                      |	СтавкиСотрудниковПоВидамРаботСрезПоследних.Подразделение КАК Подразделение,
	                      |	СтавкиСотрудниковПоВидамРаботСрезПоследних.Регион КАК Регион,
	                      |	СтавкиСотрудниковПоВидамРаботСрезПоследних.Должность КАК Должность
	                      |ПОМЕСТИТЬ ВТ_ПоследнийДокументПоСтавке
	                      |ИЗ
	                      |	РегистрСведений.СтавкиСотрудниковПоВидамРабот.СрезПоследних(&датаСреза, ) КАК СтавкиСотрудниковПоВидамРаботСрезПоследних
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СтавкиСотрудниковПоВидамРаботСрезПоследних.Регион,
	                      |	СтавкиСотрудниковПоВидамРаботСрезПоследних.Должность,
	                      |	СтавкиСотрудниковПоВидамРаботСрезПоследних.Подразделение
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СтавкиСотрудниковПоВидамРабот.ВидРаботы,
	                      |	СтавкиСотрудниковПоВидамРабот.Должность,
	                      |	СтавкиСотрудниковПоВидамРабот.Подразделение,
	                      |	СтавкиСотрудниковПоВидамРабот.Регион,
	                      |	СтавкиСотрудниковПоВидамРабот.Ставка,
	                      |	СтавкиСотрудниковПоВидамРабот.Оклад
	                      |ПОМЕСТИТЬ ВТ_Ставки
	                      |ИЗ
	                      |	ВТ_ПоследнийДокументПоСтавке КАК ВТ_ПоследнийДокументПоСтавке
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиСотрудниковПоВидамРабот КАК СтавкиСотрудниковПоВидамРабот
	                      |		ПО ВТ_ПоследнийДокументПоСтавке.Период = СтавкиСотрудниковПоВидамРабот.Период
	                      |			И ВТ_ПоследнийДокументПоСтавке.Подразделение = СтавкиСотрудниковПоВидамРабот.Подразделение
	                      |			И ВТ_ПоследнийДокументПоСтавке.Регион = СтавкиСотрудниковПоВидамРабот.Регион
	                      |			И ВТ_ПоследнийДокументПоСтавке.Должность = СтавкиСотрудниковПоВидамРабот.Должность
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	Работы.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Работы КАК Работы
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Ставки КАК ВТ_Ставки
	                      |		ПО Работы.ВидыРабот = ВТ_Ставки.ВидРаботы
	                      |ГДЕ
	                      |	ВЫБОР
	                      |			КОГДА Работы.ВидРаботы = ЗНАЧЕНИЕ(Перечисление.ВидыРабот.РегламентированнаяРабота)
	                      |				ТОГДА ВТ_Ставки.Должность = &Должность
	                      |						И ВТ_Ставки.Подразделение = &Подразделение
	                      |						И ВТ_Ставки.Регион = &Регион
	                      |						И (ЕСТЬNULL(ВТ_Ставки.Ставка, 0) > 0
	                      |							ИЛИ ЕСТЬNULL(ВТ_Ставки.Оклад, 0) > 0)
	                      |			КОГДА Работы.ВидРаботы = ЗНАЧЕНИЕ(Перечисление.ВидыРабот.ОкладнаяРабота)
	                      |				ТОГДА ВТ_Ставки.Должность = &Должность
	                      |						И ВТ_Ставки.Подразделение = &Подразделение
	                      |						И ВТ_Ставки.Регион = &Регион
	                      |						И ЕСТЬNULL(ВТ_Ставки.Оклад, 0) > 0
	                      |			ИНАЧЕ Работы.ВидРаботы <> ЗНАЧЕНИЕ(Перечисление.ВидыРабот.РегламентированнаяРабота)
	                      |		КОНЕЦ
	                      |	И НЕ Работы.ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Ссылка
	                      |АВТОУПОРЯДОЧИВАНИЕ");
	
	СтруктураПараметров = Документы.УчетФактическихДанных.ТекущиеДанныеПоСотруднику(Сотрудник, ?(Дата = Дата(1,1,1), ТекущаяДата(), Дата));
	
	Запрос.УстановитьПараметр("Должность"     	, СтруктураПараметров.ТекущаяДолжность);
	Запрос.УстановитьПараметр("Подразделение" 	, СтруктураПараметров.ТекущееПодразделение);
	Запрос.УстановитьПараметр("Регион" 			, СтруктураПараметров.ТекущийРегион);
	Запрос.УстановитьПараметр("ДатаСреза"     	, ?(Дата = Дата(1,1,1), Текущаядата(), Дата));	
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

//++kruser 20.05.2019 86294
Процедура ОтправитьУведомлениеОНеуспешномВыполненииРегламентногоЗаданияПолученияПочты() Экспорт 
	
	УчетнаяЗапись 	= Константы.АдресПочтыДляОтправкиНеуспешнойЗагрузкиПочты.Получить();
	Интервал 		= Константы.ИнтервалНапоминанияНеуспешнойЗагрузкиПочты.Получить();
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) И Интервал > 0 Тогда
		
		Адресаты = Новый Массив;
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиУведомлений.Пользователь КАК Пользователь,
		|	НастройкиУведомлений.Настройка КАК Настройка,
		|	НастройкиУведомлений.ВидСобытия КАК ВидСобытия,
		|	НастройкиУведомлений.Значение КАК Значение
		|ПОМЕСТИТЬ ВТ_НастройкиУведомлений
		|ИЗ
		|	РегистрСведений.НастройкиУведомлений КАК НастройкиУведомлений
		|ГДЕ
		|	НастройкиУведомлений.Настройка = ЗНАЧЕНИЕ(Перечисление.НастройкиУведомлений.Подписка)
		|	И НастройкиУведомлений.ВидСобытия = ЗНАЧЕНИЕ(Справочник.ВидыБизнесСобытий.НапоминаниеНеуспешнойЗагрузкиПочтыРарус)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиКонтактнаяИнформация.Представление КАК Представление,
		|	ПользователиКонтактнаяИнформация.АдресЭП КАК АдресЭП,
		|	ПользователиКонтактнаяИнформация.Ссылка.Представление КАК ПредставлениеПользователя
		|ИЗ
		|	ВТ_НастройкиУведомлений КАК ВТ_НастройкиУведомлений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|		ПО ВТ_НастройкиУведомлений.Пользователь = ПользователиКонтактнаяИнформация.Ссылка
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя)
		|	И ПользователиКонтактнаяИнформация.АдресЭП <> """"";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Адресаты.Добавить(Новый Структура("Адрес, Представление", ВыборкаДетальныеЗаписи.АдресЭП, ВыборкаДетальныеЗаписи.ПредставлениеПользователя));
		КонецЦикла;
				
		Если Адресаты.Количество() > 0 Тогда
						
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДатыПоследнейЗагрузкиПочтовыхСообщений.УчетнаяЗапись КАК УчетнаяЗапись,
			|	ДатыПоследнейЗагрузкиПочтовыхСообщений.УчетнаяЗапись.Представление КАК УчетнаяЗаписьПредставление,
			|	ДатыПоследнейЗагрузкиПочтовыхСообщений.ДатаЗагрузкиПисем КАК ДатаЗагрузкиПисем
			|ИЗ
			|	РегистрСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений КАК ДатыПоследнейЗагрузкиПочтовыхСообщений
			|ГДЕ
			|	&Интервал > 0
			|	И РАЗНОСТЬДАТ(ДатыПоследнейЗагрузкиПочтовыхСообщений.ДатаЗагрузкиПисем, &ТекущаяДата, МИНУТА) >= &Интервал";
			
			Запрос.УстановитьПараметр("Интервал", 		Интервал);
			Запрос.УстановитьПараметр("ТекущаяДата", 	ТекущаяДатаСеанса());
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ТелоПисьма = Неопределено;
			Тема = "Не работает загрузка писем!";
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ТелоПисьма = ?(ЗначениеЗаполнено(ТелоПисьма), ТелоПисьма + Символы.ПС + ВыборкаДетальныеЗаписи.УчетнаяЗаписьПредставление + Формат(ВыборкаДетальныеЗаписи.ДатаЗагрузкиПисем, "ДФ=': dd.MM.yyyy HH:mm:ss'"), ВыборкаДетальныеЗаписи.УчетнаяЗаписьПредставление + Формат(ВыборкаДетальныеЗаписи.ДатаЗагрузкиПисем, "ДФ=': dd.MM.yyyy HH:mm:ss'")); 
			КонецЦикла;
			
			Если Не ТелоПисьма = Неопределено Тогда
				
				ТелоПисьма = "С момента последней успешной загрузки писем по одной или нескольким учётным записям прошло более " 
					+ Строка(Интервал) + " мин. Даты и время последних успешных загрузок по учётным записям: " 
					+ Символы.ПС + ТелоПисьма + Символы.ПС 
					+ "Необходима проверка параметров функционирования системы."; 
				
				ПараметрыПисьма = Новый Структура;
				
				ПараметрыПисьма.Вставить("Кому", 				Адресаты);
				ПараметрыПисьма.Вставить("Тема", 				Тема);
				ПараметрыПисьма.Вставить("Тело", 				ТелоПисьма);
				ПараметрыПисьма.Вставить("Важность",  			УправлениеЭлектроннойПочтой.ПолучитьВажность(Перечисления.ВариантыВажностиВзаимодействия.Обычная));
				ПараметрыПисьма.Вставить("ТипТекста", 			Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
				ПараметрыПисьма.Вставить("ОбрабатыватьТексты", 	Ложь);

				СоотвВложения = Новый Соответствие;				
				ПараметрыПисьма.Вставить("Вложения", СоотвВложения);
								
				Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись);
				
				Попытка
					
					Соединение = Новый ИнтернетПочта;
					ПротоколПодключения = ?(ПустаяСтрока(Профиль.АдресСервераIMAP), ПротоколИнтернетПочты.POP3, ПротоколИнтернетПочты.IMAP);
					Соединение.Подключиться(Профиль, ПротоколПодключения);
					
					Если ПротоколПодключения = ПротоколИнтернетПочты.IMAP Тогда
						ПочтовыеЯщики = Соединение.ПолучитьПочтовыеЯщики();
						Для Каждого ПочтовыйЯщик Из ПочтовыеЯщики Цикл
							Если НРег(ПочтовыйЯщик) = "отправленные"
								Или НРег(ПочтовыйЯщик) = "sent" Тогда
								
								Соединение.ТекущийПочтовыйЯщик = ПочтовыйЯщик;
								
							КонецЕсли;
						КонецЦикла;
						
						ПротоколПочты = "";

					Иначе
						ПротоколПочты = "";
					КонецЕсли;
					
					ТребуетсяПереустановкаСоединения = Ложь;
					
				Исключение
					
					ТребуетсяПереустановкаСоединения = Истина;
					
					ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
					|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УчетнаяЗапись,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстСообщенияОбОшибке);
					
				КонецПопытки;
				
				Если Не ТребуетсяПереустановкаСоединения Тогда
					
					Попытка
						
						Если ПротоколПочты = "" Или ПротоколПочты = "IMAP" Тогда
							Если ПротоколПочты = "IMAP" Тогда
								ПараметрыПисьма.Вставить("ПротоколПочты","IMAP");
							КонецЕсли;
							ИдентификаторПисьма = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма, Соединение, ПротоколПочты);
						ИначеЕсли ПротоколПочты = "Все" Тогда
							ИдентификаторПисьма = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма, Соединение, "");
							ПараметрыПисьма.Вставить("ПротоколПочты","IMAP");
							РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма, Соединение, "IMAP");
						КонецЕсли;
						
					Исключение
												
						Если ТипЗнч(ПараметрыПисьма) = Тип("Структура") И ПараметрыПисьма.Свойство("ОшибочныеПолучатели") Тогда
							
						Иначе
							ЭтоПроблемаОтвергнутыхСерверомПочтовыхАдресов = Ложь;
							ВсеАдресатыПисьмаОтвергнутыСервером           = Ложь;
						КонецЕсли;
						
						Если ЭтоПроблемаОтвергнутыхСерверомПочтовыхАдресов 
							И Не ВсеАдресатыПисьмаОтвергнутыСервером Тогда
							
							ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Следующие адресаты электронного письма %1 не приняты почтовым сервером:
							|%2. Письмо отправлено остальным адресатам.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),,);
							
						Иначе
							
							ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Во время отправки электронного письма %1 произошла ошибка
							|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							
						КонецЕсли;
						
						ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка, , ,
						ТекстСообщенияОбОшибке);
						
					КонецПопытки;	
					
					Соединение.Отключиться();
					
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
//--kruser 20.05.2019 86294

//{Рарус kruser 06.06.2019 87760
&НаСервере
Функция ПроверитьДоступностьРолиКлиентКомпании() Экспорт

	Возврат РольДоступна("КлиентКомпании");

КонецФункции 
//}Рарус kruser 06.06.2019 87760
