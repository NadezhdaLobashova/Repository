
#Область ПрограммныйИнтерфейс

// Вызывается при записи взаимодействия 
//
// Параметры:
//	ДокументОбъект - ДокументОбъект.* - объект взаимодействия.
//
Процедура ПриЗаписи(ДокументОбъект, УстанавливатьПризнакНеПросмотренности = Ложь) Экспорт
    
	Если ДокументОбъект = Неопределено Или ДокументОбъект.Ссылка.Пустая() Тогда 
		Возврат;
    Иначе
        ДокументСсылка = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	ПоказыватьПользователю = ПоказыватьПользователюВзаимодействие(ДокументСсылка);
	
	УстановитьПризнакРазрешенияПросмотраВзаимодействияПользователем(ДокументСсылка, ПоказыватьПользователю);
	
	НовоеОбращение = ОбращениеПоВзаимодействию(ДокументСсылка);
	РегистрыСведений.СостоянияОбращений.ДобавитьЗапись(НовоеОбращение);
	
	Если ПоказыватьПользователю И УстанавливатьПризнакНеПросмотренности И ЗначениеЗаполнено(НовоеОбращение) Тогда
		ИнициаторОбращения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовоеОбращение, "Инициатор");
		Если ИнициаторОбращения <> Неопределено И Не ИнициаторОбращения.Пустая() Тогда 
			УстановитьПризнакНеПросмотренности(ДокументСсылка, ИнициаторОбращения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Показывать взаимодействие или нет пользователю.
//
// Параметры:
//	Взаимодействие - ДокументСсылка.* - взаимодействие.
//
// Возвращаемое значение:
//	Булево - Истина, если показывать, Ложь - иначе.
//
Функция ПоказыватьПользователюВзаимодействие(Взаимодействие) Экспорт
	
	ПоказыватьПользователю = Ложь;
	Если ТипЗнч(Взаимодействие) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Взаимодействие, "ПометкаУдаления");
		ВнутренняяПереписка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Взаимодействие, "ВнутренняяПереписка");
		СтатусПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Взаимодействие, "СтатусПисьма");
		
		ПоказыватьПользователю = (Не ПометкаУдаления) И (СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено) И (Не ВнутренняяПереписка);
	ИначеЕсли ТипЗнч(Взаимодействие) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Взаимодействие, "ПометкаУдаления");
		ВнутренняяПереписка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Взаимодействие, "ВнутренняяПереписка");

		ПоказыватьПользователю = (Не ПометкаУдаления) И (Не ВнутренняяПереписка);
	ИначеЕсли ТипЗнч(Взаимодействие) = Тип("ДокументСсылка.КомментарийПользователя") Тогда
		ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Взаимодействие, "ПометкаУдаления");
		
		ПоказыватьПользователю = Не ПометкаУдаления;
	ИначеЕсли ТипЗнч(Взаимодействие) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Взаимодействие, "ПометкаУдаления");
		ВнутренняяПереписка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Взаимодействие, "ВнутренняяПереписка");
		
		ПоказыватьПользователю = (Не ПометкаУдаления) И (Не ВнутренняяПереписка);
	КонецЕсли;
	
	Возврат ПоказыватьПользователю;
	
КонецФункции

// Копирует файлы письма в обращение и фиксирует произошедшее бизнес-событие ПолученоПисьмоПоОбращению.
// 
Процедура ОбработатьПолучениеПисьмаПоОбращению(Письмо, Обращение, СозданоНовоеОбращение = Ложь) Экспорт
	
    Попытка
        РеквизитыОбращения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Обращение, "Состояние, Инициатор, ОжиданиеОценки");
    	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо, "ОтправительПредставление, ОтправительКонтакт, ОтправительАдрес, Тема, Текст");
        Если ТипЗнч(РеквизитыОбращения.ОжиданиеОценки) <> Тип("Булево") Тогда
            РеквизитыОбращения.ОжиданиеОценки = Ложь;
        КонецЕсли;
    	
    	ПараметрыСобытия = Новый Структура;
    	ПараметрыСобытия.Вставить("Письмо", Письмо);
    	ПараметрыСобытия.Вставить("Тема", РеквизитыПисьма.Тема);
    	ПараметрыСобытия.Вставить("Отправитель", РеквизитыПисьма.ОтправительКонтакт);
    	
    	ВидСобытия = Справочники.ВидыБизнесСобытий.ПолученоПисьмоПоОбращению;
    	
    	КонтекстСобытия = БизнесСобытия.СформироватьКонтекстСобытия(ПараметрыСобытия);
    	КонтекстСобытияСтрокой = СтрШаблон(НСтр("ru='%1
    			 |Тема: %2
    			 |Отправитель: %3'"), Строка(ВидСобытия), РеквизитыПисьма.Тема, РеквизитыПисьма.ОтправительПредставление); 
    	                                                                        
    	// Получим файлы электронного письма для обращения.
    	ПрисоединенныеФайлыУСП.СкопироватьПрисоединенныеФайлыИзПисьмаВОбращение(Письмо, Обращение);
    	
    	БизнесСобытия.ЗарегистрироватьСобытие(
    		Обращение, 
    		Справочники.ВидыБизнесСобытий.ПолученоПисьмоПоОбращению, 
    		КонтекстСобытия,,КонтекстСобытияСтрокой, Письмо, РеквизитыПисьма.ОтправительКонтакт);
    	
    	АдресОтправителяПисьма = РеквизитыПисьма.ОтправительАдрес;
    	СостояниеОбращения = РеквизитыОбращения.Состояние;
    	
    	ПолученаОценка = Ложь;
    	
    	РеквизитыОценки = РеквизитыОценки(РеквизитыПисьма.Тема, РеквизитыПисьма.Текст,  РеквизитыОбращения.ОжиданиеОценки);
    	Если Обращение = РеквизитыОценки.Обращение Тогда
    	    ПолученаОценка = Истина;
    	КонецЕсли;
    	
    	ЭтоПисьмоОтИнициатора = Ложь;
    	АдресаИнициатора = КонтактнаяИнформацияУСП.ВсеЭлектронныеАдресаПользователяСервиса(РеквизитыОбращения.Инициатор);
    	
    	Для каждого ДанныеАдреса Из АдресаИнициатора Цикл
    		Если ВРег(ДанныеАдреса.Адрес) = ВРег(АдресОтправителяПисьма) Тогда
    			ЭтоПисьмоОтИнициатора = Истина;
    			Прервать;
    		КонецЕсли; 
    	КонецЦикла; 
    	
    	ПисьмоОбъект = Письмо.ПолучитьОбъект();
    	ПисьмоОбъект.ВнутренняяПереписка = Не ЭтоПисьмоОтИнициатора;
    	ПисьмоОбъект.Записать();
    	
    	ОбращениеОбъект = Неопределено;
    	
    	Если Не СозданоНовоеОбращение И Не ПолученаОценка Тогда
    		Если СостояниеОбращения = Перечисления.СостоянияОбращений.Закрыто 
    			Или СостояниеОбращения = Перечисления.СостоянияОбращений.ОжиданиеИнициатора Тогда
    			ОбращениеОбъект = Обращение.ПолучитьОбъект();
    			ОбращениеОбъект.Состояние = Перечисления.СостоянияОбращений.Расследование;
				//{Рарус kruser 2019.01.31 77274
				Если Не ЗначениеЗаполнено(ОбращениеОбъект.Исполнитель) Тогда
				//}Рарус kruser 2019.01.31 77274
    			ОбращениеОбъект.Исполнитель = ОбращениеОбъект.ЛинияПоддержки;
				//{Рарус kruser 2019.01.31 77274
				КонецЕсли;
				//}Рарус kruser 2019.01.31 77274
    		КонецЕсли;
    	КонецЕсли;
    	
    	Если ПолученаОценка И Обращение.ОжиданиеОценки Тогда
    		Если ОбращениеОбъект = Неопределено Тогда 
    			ОбращениеОбъект = Обращение.ПолучитьОбъект();
    		КонецЕсли;
    		ОбращениеОбъект.ДатаОценки = ТекущаяУниверсальнаяДата();
    		ОбращениеОбъект.Оценка = РеквизитыОценки.Оценка;
    		ОбращениеОбъект.КомментарийОценки = РеквизитыОценки.Комментарий;
    		ОбращениеОбъект.ОжиданиеОценки = Ложь;
    		Контейнер = Новый Массив;
    		Контейнер.Добавить(Письмо);
    		ЕстьИзменения = Ложь;
    		Взаимодействия.УстановитьПризнакРассмотрено(Контейнер, Истина, ЕстьИзменения);
    	КонецЕсли;
    	
		Если ОбращениеОбъект <> Неопределено Тогда
			ОбращениеОбъект.ДополнительныеСвойства.Вставить("НеПолучатьТекстИзОписания", Истина);
            Если ОбращениеОбъект.ПометкаУдаления Тогда
                ОбращениеОбъект.Записать(РежимЗаписиДокумента.Запись);
            Иначе
    		    ОбращениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
            КонецЕсли;
    	КонецЕсли;
        
    Исключение
        ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, 
            Метаданные.Документы.Обращение, Обращение, 
            ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки; 
        
КонецПроцедуры
 
// Отправляет письмо о регистрации нового обращения пользователя.
// Параметры:
//	Обращение - ДокументСсылка.Обращения - зарегистрированное обращение.
//
Процедура ОтправитьПисьмоОРегистрацииОбращения(Обращение, ДанныеКонтакта, ИсходноеПисьмо = Неопределено) Экспорт
	
    СвойстваОбращения = Новый Структура;
    СвойстваОбращения.Вставить("Сервис", "Сервис");
    СвойстваОбращения.Вставить("Витрина", "Витрина");
    СвойстваОбращения.Вставить("Инициатор", "Инициатор");
    // {Рарус_shav 2018.10.23 74401
    СвойстваОбращения.Вставить("Проект", "Проект");
	
	Если ИсходноеПисьмо <> Неопределено Тогда
    	УчетнаяЗаписьИП = ИсходноеПисьмо.УчетнаяЗапись;
	Иначе
    	УчетнаяЗаписьИП = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	КонецЕсли;
	// }Рарус_shav 2018.10.23 74401
	
    ДанныеОбращения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Обращение, СвойстваОбращения);
    
    УчетнаяЗапись = УчетнаяЗаписьПоддержки(ДанныеОбращения.Сервис, ДанныеОбращения.Витрина);
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='У сервиса ""%1"" не установлена учетная запись для отправки письма о регистрации обращения.'"),
				ДанныеОбращения.Сервис);
	КонецЕсли; 
    // {Рарус_shav 2018.10.23 74401
	//ШаблонПисьма = Справочники.ШаблоныТекстов.ШаблонПоТипу(
	//    Справочники.ТипыШаблоновТекстов.ПисьмоРегистрацияНовогоОбращения, 
	//    ДанныеОбращения.Сервис, ДанныеОбращения.Витрина);
    ШаблонПисьма = Справочники.ШаблоныТекстов.ШаблонПоТипу(
        Справочники.ТипыШаблоновТекстов.ПисьмоРегистрацияНовогоОбращения, 
        ДанныеОбращения.Сервис, ДанныеОбращения.Витрина, ДанныеОбращения.Проект, УчетнаяЗаписьИП);
	// }Рарус_shav 2018.10.23 74401
	Если Не ЗначениеЗаполнено(ШаблонПисьма) Тогда
		// {Рарус_shav 2018.10.31 74401 #7
		//ВызватьИсключение СтрШаблон(НСтр("ru='У сервиса ""%1"" не установлен шаблон письма для отправки письма о регистрации обращения.'"),
		//		ДанныеОбращения.Сервис);
		Возврат;
		// }Рарус_shav 2018.10.31 74401 #7
	КонецЕсли; 
				
    ТаблицаКартинок = Новый ТаблицаЗначений;
	//+astyul, 75271, 08.11.2018   УчетнаяЗаписьИП
    //Письмо = ЗаготовкаИсходящегоПисьма(ШаблонПисьма, Обращение, УчетнаяЗапись, ТаблицаКартинок, ИсходноеПисьмо);
	Письмо = ЗаготовкаИсходящегоПисьма(ШаблонПисьма, Обращение, ?(НЕ ЗначениеЗаполнено(УчетнаяЗаписьИП),УчетнаяЗапись, УчетнаяЗаписьИП), ТаблицаКартинок, ИсходноеПисьмо);
	//-astyul, 75271, 08.11.2018   УчетнаяЗаписьИП
	Если Константы.ОтправлятьПисьмоОРегистрацииОбращенияБезПодтверждения.Получить() Тогда
		Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
	Иначе
		Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
	КонецЕсли;
    ДобавитьПолучателяПисьма(Письмо, ДанныеКонтакта);
	Письмо.Записать();
	
    ДобавитьКартинкиВПисьмо(Письмо, ТаблицаКартинок);
    УстановитьПредметПисьма(Письмо, Обращение);
	
	УстановитьПривилегированныйРежим(Истина);
	Если Константы.ОтправлятьПисьмоОРегистрацииОбращенияБезПодтверждения.Получить() Тогда
        ОтправитьПисьмо(Письмо, СобытиеЖурналаРегистрацииОтправкаПисьмаОРегистрацииОбращения());
	КонецЕсли;
	
КонецПроцедуры

// Вставляет форматированный документ в форматированый документ
//
// Параметры:
//  ИсходныйДокумент   - ФорматированныйДокумент - документ, в который нужно вставить документ для вставки. 
//  ДокументДляВставки - ФорматированныйДокумент - документ для вставки в исходный документ.
//  ПозицияНачала      - Число - позиция начала вставки.
//  ПозицияКонца       - Число - позиция конца вставки.
//
Процедура ВставитьФорматированныйДокументВФорматированныйДокумент(ИсходныйДокумент, ДокументДляВставки, ПозицияНачала = 0, ПозицияКонца = 0) Экспорт
    
    ЗакладкаНачала = ИсходныйДокумент.ПолучитьЗакладкуПоПозиции(ПозицияНачала);
    ЗакладкаКонца = ИсходныйДокумент.ПолучитьЗакладкуПоПозиции(ПозицияКонца);
    ИсходныйДокумент.СформироватьЭлементы(ЗакладкаНачала, ЗакладкаКонца);
    Вложения = Неопределено; 
    ТекстHTML = Неопределено;
    ИсходныйДокумент.ПолучитьHTML(ТекстHTML, Вложения);
    ИсходныйДокумент.Удалить(ЗакладкаНачала);
    ИсходныйДокументКопия = Новый ФорматированныйДокумент;
    ИсходныйДокументКопия.УстановитьHTML(ТекстHTML, Вложения);
    ЗакладкаКонца = ИсходныйДокументКопия.ПолучитьЗакладкуПоПозиции(ПозицияКонца);
    ЭлементыОкончания = ИсходныйДокументКопия.СформироватьЭлементы(ЗакладкаКонца);
    Для каждого Параграф Из ДокументДляВставки.Элементы Цикл
        Если Параграф.Элементы.Количество() = 0 Тогда // Пустые параграфы не добавляются в элементы.
            НовыйЭлемент = Параграф.Элементы.Добавить("%Удалить%", Тип("ТекстФорматированногоДокумента"));
        КонецЕсли; // Обработка вставки пустого параграфа.
    КонецЦикла; 
    ЭлементыДляВставки = ДокументДляВставки.СформироватьЭлементы();
    ЗакладкаНачала = Неопределено;
    ЗакладкаКонца = Неопределено;
    ЗаполнитьЭлементы(ИсходныйДокумент, ЭлементыДляВставки, ЗакладкаНачала, ЗакладкаКонца);
    ЗаполнитьЭлементы(ИсходныйДокумент, ЭлементыОкончания);
    Если ЗакладкаНачала <> Неопределено Тогда
        ПозицияНачала = ИсходныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаНачала);
    КонецЕсли;
    Если ЗакладкаКонца <> Неопределено Тогда
        ПозицияКонца = ИсходныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаКонца);
    КонецЕсли;
    
КонецПроцедуры

// Добавляет форматированный документ к форматированному документу
//
// Параметры:
//  ИсходныйДокумент - ФорматированныйДокумент - документ, в который нужно добавить документ. 
//  ДокументДляДобавления - ФорматированныйДокумент - документ для добавления в исходный документ.
//
Процедура ДобавитьФорматированныйДокументКФорматированномуДокументу(ИсходныйДокумент, ДокументДляДобавления) Экспорт
    
    Для каждого Параграф Из ДокументДляДобавления.Элементы Цикл
        Если Параграф.Элементы.Количество() = 0 Тогда // Пустые параграфы не добавляются в элементы.
            НовыйЭлемент = Параграф.Элементы.Добавить("%Удалить%", Тип("ТекстФорматированногоДокумента"));
        КонецЕсли; // Обработка вставки пустого параграфа.
    КонецЦикла; 
    ЗаполнитьЭлементы(ИсходныйДокумент, ДокументДляДобавления.СформироватьЭлементы());
    
КонецПроцедуры

// Возвращает начальные символы ключа обращения для идентификации обращения по номеру.
//
Функция НачалоКлючаОбращения() Экспорт
	
	Возврат "(#";
	
КонецФункции

// Возвращает данные взаимодействий
//
// Параметры:
//  Предмет - ДокументСсылка.Обращения - объект, по которому нужно получить данные взаимодействий.
// 
// Возвращаемое значение:
//   Структура - данные взаимодействий.
//
Функция ДанныеВзаимодействий(Предмет) Экспорт
    
    ДанныеВзаимодействий = Новый Структура;
    ДанныеВзаимодействий.Вставить("КоличествоНеРассмотрено", 0);
    ДанныеВзаимодействий.Вставить("ДатаПоследнегоВзаимодействия", '00010101');
    ДанныеВзаимодействий.Вставить("Активен", Ложь);
    
    Запрос = Новый Запрос;
    
    Запрос.Текст = 
    	"ВЫБРАТЬ
        |	Рассмотрение.КоличествоНеРассмотрено,
        |	Рассмотрение.ДатаПоследнегоВзаимодействия,
        |	Рассмотрение.Активен
        |ИЗ
        |	РегистрСведений.СостоянияПредметовВзаимодействий КАК Рассмотрение
        |ГДЕ
        |	Рассмотрение.Предмет = &Предмет";
    
    Запрос.УстановитьПараметр("Предмет", Предмет );
    
    Результат = Запрос.Выполнить();
    ДанныеПисьма = Результат.Выбрать();
    
    Если ДанныеПисьма.Следующий() Тогда
        ЗаполнитьЗначенияСвойств(ДанныеВзаимодействий, ДанныеПисьма);
    КонецЕсли;
    
    Возврат ДанныеВзаимодействий;
    
КонецФункции

// Заменяет в тексте параметры на значения по реквизитам Предмета, соответствующим наименованиям параметров.
// Параметры в тексте задаются слитно в обрамляющих квадратных скобках, как реквизиты объектов, например "[Ответственный]".
// Возможно получение значений через точки.
// Параметры:
//  Текст          - Строка - в этом тексте нужно заменить параметры на значения параметров
//  Предмет        - Ссылка - ссылка на предмет, из которого извлекаются параметры 
//  ДанныеКартинок - Структура - картинки, используемые в тексте, если это HTML и он собирается в форматированный документ.
//                   * Ключ - имя картинки
//                   * Значение - двоичные данные картинки
//
Процедура ЗаменитьПараметрыНаЗначения(Текст, Предмет, ДанныеКартинок = Неопределено) Экспорт
    
    ТекстРезультат = "";
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Предмет)) Тогда
		СсылкаНаПредмет = Предмет;
	Иначе
		СсылкаНаПредмет = Предмет.Ссылка;
	КонецЕсли;
	ПараметрыСОстаткамиСтрок = СтрРазделить(Текст, "[", Ложь);
    Если Лев(Текст, 1) <> "[" Тогда
        ТекстРезультат = ТекстРезультат + ПараметрыСОстаткамиСтрок[0];
        ПараметрыСОстаткамиСтрок.Удалить(0);
    КонецЕсли;
    КэшЗначенийПараметров = Новый Соответствие;
    Для каждого ПараметрСОстаткомСтроки Из ПараметрыСОстаткамиСтрок Цикл
        ПозицияСимволаКонцаПараметра = СтрНайти(ПараметрСОстаткомСтроки, "]");
        ТекущийПараметр = Лев(ПараметрСОстаткомСтроки, ПозицияСимволаКонцаПараметра - 1);
        ОстатокСтроки = Сред(ПараметрСОстаткомСтроки, ПозицияСимволаКонцаПараметра + 1);
        Параметр = ОчиститьПараметр(ТекущийПараметр);
        Значение = КэшЗначенийПараметров.Получить(Параметр);
        Если Значение = Неопределено Тогда
    		Если СтрНайти(Параметр, "Предмет") <> 0 Тогда
                ЧастиПараметра = СтрРазделить(Параметр, ".", Ложь);
                Значение = ЗначениеПараметраРекурсивно(ЧастиПараметра, СсылкаНаПредмет, 1, КэшЗначенийПараметров);
    		ИначеЕсли СтрНайти(Параметр, "КлючОбращения") <> 0 И ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.Обращение") Тогда
                Номер = ПрефиксацияОбъектов.УдалитьЛидирующиеНулиИзНомераОбъекта(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаПредмет,"Номер"));
                Значение = НачалоКлючаОбращения() + СокрП(Номер) +")";
            ИначеЕсли СтрНайти(Параметр, "Оценка") <> 0 И ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.Обращение") Тогда
                Значение = ПолучитьОценкиВВидеСсылокMailto(СсылкаНаПредмет);
            КонецЕсли;
            Если ТипЗнч(Значение) = Тип("ФорматированныйДокумент") Тогда
                Значение = ЗначениеПараметраИзФорматированногоДокумента(Значение, ДанныеКартинок);    
            КонецЕсли;
            КэшЗначенийПараметров.Вставить(Параметр, Значение);
        КонецЕсли;
        ТекстРезультат = ТекстРезультат + Значение + ОстатокСтроки;
	КонецЦикла;
    
    Текст = ТекстРезультат;
    
КонецПроцедуры

// Устанавливает учетную запись электронного письма по параметрам формы.
//
// Параметры:
//  Объект    - ДокументОбъект.ЭлектронноеПисьмоИсходящее - исходящее электронное письмо.
//  Параметры - Структура - параметры формы.
//
Процедура УстановитьУчетнуюЗаписьПоПараметрам(Объект, Параметры) Экспорт
    
    ИсточникЗаполнения = Документы.Обращение.ПустаяСсылка();
    
    Если Параметры.ЗначенияЗаполнения.Свойство("Предмет") И ТипЗнч(Параметры.ЗначенияЗаполнения.Предмет) = Тип("ДокументСсылка.Обращение") Тогда
        ИсточникЗаполнения = Параметры.ЗначенияЗаполнения.Предмет;
    ИначеЕсли Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.Обращение") Тогда
        ИсточникЗаполнения = Параметры.Основание;
    КонецЕсли;
    
    Свойства = Новый Структура;
    Свойства.Вставить("УчетнаяЗаписьВитрины", "Витрина.УчетнаяЗапись");
    Свойства.Вставить("УчетнаяЗаписьВитриныПоУмолчанию", "Сервис.ОсновнаяВитрина.УчетнаяЗапись");
    Свойства.Вставить("УчетнаяЗаписьПоУмолчанию", "Сервис.УчетнаяЗаписьСлужбыПоддержкиПоУмолчанию");
    Свойства.Вставить("УчетныеЗаписи", "Сервис.УчетныеЗаписиСлужбыПоддержки");
    
    УчетныеЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникЗаполнения, Свойства);                               
    
    Если ЗначениеЗаполнено(УчетныеЗаписи.УчетнаяЗаписьВитрины) Тогда
        Объект.УчетнаяЗапись = УчетныеЗаписи.УчетнаяЗаписьВитрины;
    ИначеЕсли ЗначениеЗаполнено(УчетныеЗаписи.УчетнаяЗаписьВитриныПоУмолчанию) Тогда
        Объект.УчетнаяЗапись = УчетныеЗаписи.УчетнаяЗаписьВитриныПоУмолчанию;
    ИначеЕсли ЗначениеЗаполнено(УчетныеЗаписи.УчетнаяЗаписьПоУмолчанию) Тогда
        Объект.УчетнаяЗапись = УчетныеЗаписи.УчетнаяЗаписьПоУмолчанию;
    ИначеЕсли УчетныеЗаписи.УчетныеЗаписи <> Неопределено Тогда
        ВыборкаЗаписи = УчетныеЗаписи.УчетныеЗаписи.Выбрать();
        Если ВыборкаЗаписи.Следующий() Тогда
            Объект.УчетнаяЗапись = ВыборкаЗаписи.УчетнаяЗапись;
        КонецЕсли; 
    КонецЕсли;
    
КонецПроцедуры

// Возвращает контекст приложения пользователя из текста HTML обращения.
// Параметры:
//  - ТекстHTML - Строка - текст обращения пользователя в формате HTML
//  - Сервис - СправочникСсылка.Сервисы - сервис пользователя, для определения значений контекста.
//
Функция КонтекстПриложения(Знач ТекстHTML, Сервис) Экспорт
    
    КонтекстОбращения = Новый Структура;
    
    Попытка
        ПозицияНачалаКонтекста = Найти(ТекстHTML, "<!-- @AddInfo");
        Если ПозицияНачалаКонтекста <> 0 Тогда
            СтрокаКонтекста = Сред(ТекстHTML, ПозицияНачалаКонтекста + 13);
            СтрокаКонтекста = Лев(СтрокаКонтекста, СтрДлина(СтрокаКонтекста) - 4);
            ЧтениеJSON = Новый ЧтениеJSON;
            ЧтениеJSON.УстановитьСтроку(СтрокаКонтекста);
            Контекст = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
            КонтекстОбращения.Вставить("Витрина", Справочники.Витрины.НайтиПоРеквизиту("Хост", Контекст.host,, Сервис));
            КонтекстОбращения.Вставить("Приложение", Справочники.Приложения.НайтиПоКоду(Число(Контекст.zone), Истина,, Сервис));
            КонтекстОбращения.Вставить("ВерсияПлатформы", Контекст.platformVersion);
            КонтекстОбращения.Вставить("ВерсияКонфигурации", Контекст.configVersion);
            КонтекстОбращения.Вставить("ИмяКонфигурации", Контекст.configName);
            КонтекстОбращения.Вставить("НомерПриложения", Контекст.zone);
        КонецЕсли;
        Возврат КонтекстОбращения;
        
    Исключение
        Возврат КонтекстОбращения;
        
    КонецПопытки; 
    
КонецФункции

// Возвращает учетную запись поддержки для отправки писем по Сервису и Витрине.
// Параметры:
//  Сервис - СправочникСсылка.Сервисы - сервис
//  Витрина - СправочникСсылка.Витрины - витрина
//
Функция УчетнаяЗаписьПоддержки(Сервис, Витрина) Экспорт
    
    УчетнаяЗапись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Витрина, "УчетнаяЗапись");
	
    Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
        
        СвойстваСервиса = Новый Структура;
        СвойстваСервиса.Вставить("УчетнаяЗаписьОсновнойВитрины", "ОсновнаяВитрина.УчетнаяЗапись");
        СвойстваСервиса.Вставить("УчетнаяЗапись", "УчетнаяЗаписьСлужбыПоддержкиПоУмолчанию");
        СвойстваСервиса.Вставить("УчетныеЗаписи", "УчетныеЗаписиСлужбыПоддержки");
        
        ДанныеСервиса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сервис, СвойстваСервиса);
        Если ЗначениеЗаполнено(ДанныеСервиса.УчетнаяЗаписьОсновнойВитрины) Тогда
    		УчетнаяЗапись = ДанныеСервиса.УчетнаяЗаписьОсновнойВитрины;
        ИначеЕсли ЗначениеЗаполнено(ДанныеСервиса.УчетнаяЗапись) Тогда
    		УчетнаяЗапись = ДанныеСервиса.УчетнаяЗапись;
    	ИначеЕсли ЗначениеЗаполнено(ДанныеСервиса.УчетныеЗаписи) Тогда // Может не быть учентых записей у Сервиса.
            ВыборкаЗаписи = ДанныеСервиса.УчетныеЗаписи.Выбрать();
            Если ВыборкаЗаписи.Следующий() Тогда
                УчетнаяЗапись = ВыборкаЗаписи.УчетнаяЗапись;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    
    Возврат УчетнаяЗапись;
    
КонецФункции

// Возвращает заготовку исходящего письма, заполненную по переданным параметрам
//
// Параметры:
//  ШаблонПисьма    - Структура - шаблон, по которому будет заполнена заготовка (см. описание функции Справочники.ШаблоныТекстов.ШаблонПоТипу).
//  Предмет         - ЛюбаяСсылка - используется в качестве источника значений параметров шаблона.
//  УчетнаяЗапись   - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись для заполнения заголовки.
//  ТаблицаКартинок - ТаблицаЗначений - неявно возвращаемый параметр. Содержит картинки шаблона для сохранения вложений письма.
//  ПисьмоОснование - ДокументСсылка.ЭлектронноеПисьмоВходящее - письмо-основание.
// 
// Возвращаемое значение:
//   - ДокументОбъект.ЭлектронноеПисьмоИсходящее - электронное письмо, заполненное по переданным параметрам
//
Функция ЗаготовкаИсходящегоПисьма(ШаблонПисьма, Предмет, УчетнаяЗапись, ТаблицаКартинок = Неопределено, ПисьмоОснование = Неопределено) Экспорт
    
	Если ПисьмоОснование = Неопределено Тогда 
		ПисьмоОснование = Документы.ЭлектронноеПисьмоВходящее.ПустаяСсылка();
	КонецЕсли;
    
    НастройкиПользователя = Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
		                    УчетнаяЗапись, Перечисления.ТипыТекстовЭлектронныхПисем.HTML, Истина);
	
    ПараметрыОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "ИмяПользователя, АдресЭлектроннойПочты");
    
    Если НастройкиПользователя.Подпись <> Неопределено Тогда
		ДобавитьФорматированныйДокументКФорматированномуДокументу(ШаблонПисьма.Текст, НастройкиПользователя.Подпись);
	КонецЕсли; 
    
    Письмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
    
    ЗаполнитьЗначенияСвойств(Письмо, НастройкиПользователя);
    
	Письмо.УчетнаяЗапись            = УчетнаяЗапись;
    Письмо.ОтправительПредставление = ПараметрыОтправителя.ИмяПользователя;
	Письмо.Автор                    = Пользователи.ТекущийПользователь();
	Письмо.Ответственный            = Пользователи.ТекущийПользователь();
	Письмо.Дата                     = ТекущаяУниверсальнаяДата() + 1;
	Письмо.Важность                 = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	Письмо.ТипТекста                = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
	Письмо.Кодировка                = "utf-8";
    Письмо.ВзаимодействиеОснование  = ПисьмоОснование;
	Письмо.Тема                     = ШаблонПисьма.Заголовок;
	Письмо.Комментарий              = ШаблонПисьма.Наименование;

    Если ЗначениеЗаполнено(ПисьмоОснование) Тогда
    	Письмо.ВключатьТелоИсходногоПисьма = Истина;
    	Письмо.ОтображатьТелоИсходногоПисьма = Истина;
	    Письмо.ИдентификаторОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПисьмоОснование, "ИдентификаторСообщения");
    КонецЕсли;     
    
	СтруктураВложений = Новый Структура;
	ШаблонПисьма.Текст.ПолучитьHTML(Письмо.ТекстHTML, СтруктураВложений);
	
	ЗаменитьПараметрыНаЗначения(Письмо.ТекстHTML, Предмет);
	ЗаменитьПараметрыНаЗначения(Письмо.Тема, Предмет);
    
    ТаблицаКартинок = Новый ТаблицаЗначений;
	ТаблицаКартинок.Колонки.Добавить("ИмяФайла");
	ТаблицаКартинок.Колонки.Добавить("ИдентификаторФайлаДляHTML");
	ТаблицаКартинок.Колонки.Добавить("Картинка");
    
    Для каждого Вложение Из СтруктураВложений Цикл
		НоваяСтрока = ТаблицаКартинок.Добавить();
		НоваяСтрока.ИмяФайла                  = Вложение.Ключ;
		НоваяСтрока.Картинка                  = Вложение.Значение;
		НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
	КонецЦикла;
	
	Если ТаблицаКартинок.Количество() > 0 Тогда
		
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(Письмо.ТекстHTML);
		Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(ДокументHTML, ТаблицаКартинок);
        
        Если ЗначениеЗаполнено(Письмо.ВзаимодействиеОснование) Тогда
                
    		Основание = Взаимодействия.ПолучитьДанныеПисьмаОснования(Письмо.ВзаимодействиеОснование);
    		ДокументОснованиеHTML =  Взаимодействия.СформироватьДокументHTMLНаОснованииПисьма(
    			Письмо.ВзаимодействиеОснование,
    			Основание.ТипТекста,
    			Основание.Текст,
    			Основание.ТекстHTML,
    			Письмо.ТипТекста);
    			
    		ЭлементТелоОснованиеHTML = ДокументОснованиеHTML.Тело;
    		МассивДочернихУзловТелаОснование = Взаимодействия.МассивДочернихУзловСодержащихHTML(ЭлементТелоОснованиеHTML);
    		
    		ЭлементDIV =  Взаимодействия.ДобавитьЭлементСАтрибутами(ЭлементТелоОснованиеHTML,
    			"div", Новый Структура("style","border:none;border-left:solid SkyBlue 1.5pt;padding:0cm 0cm 0cm 4pt;margin:0cm;"));
    		
    		Для каждого ДочернийУзел Из МассивДочернихУзловТелаОснование Цикл
    			ЭлементDIV.ДобавитьДочерний(ДочернийУзел);
    		КонецЦикла;
    		
    		СтруктураДанныеШапкиПисьмаОснования = Новый Структура(
    			"ОтправительПредставление,ОтправительАдрес,Дата,Тема,ПолучателиПисьма,ПолучателиКопий",
    			Основание.ОтправительПредставление,
    			Основание.ОтправительАдрес,
    			Основание.Дата,
    			Основание.Тема,
    			Основание.ПолучателиПисьма,
    			Основание.ПолучателиКопий,);
    		
    		ЭлементШрифт = Взаимодействия.СформироватьЭлементДанныхШапкиПисьма(ЭлементDIV, СтруктураДанныеШапкиПисьмаОснования,
    		               ТипЗнч(Письмо.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
    		Взаимодействия.ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементDIV, ЭлементШрифт, МассивДочернихУзловТелаОснование);
    		МассивДочернихУзловТелаТекущее = Взаимодействия.МассивДочернихУзловСодержащихHTML(ДокументHTML.Тело);
    		Для Каждого ДочернийУзел Из МассивДочернихУзловТелаТекущее Цикл
    			ЭлементТелоОснованиеHTML.ВставитьПеред(ДокументОснованиеHTML.ИмпортироватьУзел(ДочернийУзел,Истина),ЭлементDIV);
    		КонецЦикла;
    		
    		ДокументHTML = ДокументОснованиеHTML;
            
        КонецЕсли;
        
        Письмо.ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		
	КонецЕсли;
    
    Письмо.Текст = Взаимодействия.ПолучитьОбычныйТекстИзHTML(Письмо.ТекстHTML);
    Письмо.Размер = ОценитьРазмерПисьма(Письмо, СтруктураВложений);
    
    Возврат Письмо;
    
КонецФункции

// Возвращает ссылку на обращение по Взаимодействию
//
Функция ОбращениеПоВзаимодействию(Взаимодействие) Экспорт
	
	Если Взаимодействие = Неопределено Или Взаимодействие.Пустая() Тогда 
		Возврат Документы.Обращение.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПредметыПапкиВзаимодействий.Предмет КАК Обращение
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.Взаимодействие = &Взаимодействие");
	Запрос.УстановитьПараметр("Взаимодействие", Взаимодействие);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Если ТипЗнч(Выборка.Обращение) = Тип("ДокументСсылка.Обращение") Тогда 
			Возврат Выборка.Обращение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Документы.Обращение.ПустаяСсылка();
	
КонецФункции

// Отправляет подготовленное письмо. Если к письма стоит признак удаления после отправки, то оно удаляется.
//
Процедура ОтправитьПисьмо(Письмо, СобытиеЖурнала) Экспорт
	
    Попытка
        ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(Письмо);
        ЗаписьЖурналаРегистрации(СобытиеЖурнала, УровеньЖурналаРегистрации.Информация, 
            Метаданные.Документы.ЭлектронноеПисьмоВходящее, Письмо,
            СтрШаблон(НСтр("ru = 'Письмо с темой ""%1"" успешно отправлено на адрес %2.'"), Письмо.Тема, Письмо.СписокПолучателейПисьма));
    Исключение
        ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при отправке письма %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
        ЗаписьЖурналаРегистрации(СобытиеЖурнала, УровеньЖурналаРегистрации.Ошибка,
            Метаданные.Документы.ЭлектронноеПисьмоВходящее, Письмо,
            СтрШаблон(НСтр("ru = 'Ошибка при отправке письма: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
        Возврат;
    КонецПопытки;

    Если НЕ Письмо.УдалятьПослеОтправки Тогда
		
		Попытка
			Письмо.ИдентификаторСообщения = ИдентификаторПисьма;
			Письмо.СтатусПисьма          = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
			Письмо.ДатаОтправления       = ТекущаяУниверсальнаяДата();
			Письмо.Записать(РежимЗаписиДокумента.Запись);
			
			ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(
				Письмо.Ссылка, Взаимодействия.ОпределитьПапкуДляПисьма(Письмо.Ссылка));
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при записи письма после успешной отправки %1'"), 
                                       КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	Иначе
		
		Письмо.Прочитать();
		Письмо.Удалить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик регламентного задания ОбработатьВходящиеПисьма
//
Процедура ОбработатьВходящиеПисьма() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
    
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Письма.Ссылка КАК Письмо,
		|	Письма.УчетнаяЗапись КАК УчетнаяЗапись,
		|	Письма.Текст КАК Текст,
		|	Письма.ТекстHTML КАК ТекстHTML,
		|	Письма.ТипТекста КАК ТипТекста,
		|	Письма.ПолучателиПисьма.(
		|		Адрес КАК Адрес
		|	) КАК ПолучателиПисьма,
		|	Письма.Тема КАК Тема,
		|	Письма.ОтправительКонтакт КАК ОтправительКонтакт,
		|	Письма.ОтправительАдрес КАК ОтправительАдрес,
		|	Письма.ОтправительПредставление КАК ОтправительПредставление,
		|	Предметы.Предмет КАК Предмет,
		//Лобашова 22.05.2019 86282 +
		|	Предметы.ПапкаЭлектронногоПисьма КАК Папка,		
		//Лобашова 22.05.2019 86282 -
		|	Письма.ПолучателиКопий.(
		|		Адрес КАК Адрес
		|	) КАК ПолучателиКопий
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее КАК Письма
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК Предметы
		|		ПО Письма.Ссылка = Предметы.Взаимодействие
		|ГДЕ
		|	(ЕСТЬNULL(Предметы.Предмет, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
		|			ИЛИ Предметы.Предмет = Письма.Ссылка)
		|	И ЕСТЬNULL(Предметы.ПапкаЭлектронногоПисьма.СоздаватьОбращения, ИСТИНА)
		// {Рарус_shav 2019.02.05 80760
		|	И НЕ Письма.ПометкаУдаления
		// }Рарус_shav 2019.02.05 80760
		|	И Письма.ОтправительАдрес <> Письма.УчетнаяЗапись.АдресЭлектроннойПочты";
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
    ДанныеВитрин = ДанныеВитрин();

	Пока Выборка.Следующий() Цикл
		//Лобашова 22.05.2019 86282 +
		//Дополнительная проверка на необходимость создания обращения по входящему эл.письму
		//Напрямую проверяются настройки папок у учетной записи каждого письма
			СоздаватьОбращение = Истина;
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЭлектронноеПисьмоВходящее.Ссылка КАК Ссылка,
				|	ЭлектронноеПисьмоВходящее.УчетнаяЗапись КАК УчетнаяЗапись,
				|	ПапкиЭлектронныхПисем.СоздаватьОбращения КАК СоздаватьОбращения,
				|	ПапкиЭлектронныхПисем.Владелец КАК Владелец
				|ИЗ
				|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
				|		ПО ЭлектронноеПисьмоВходящее.УчетнаяЗапись = ПапкиЭлектронныхПисем.Владелец
				|ГДЕ
				|	ЭлектронноеПисьмоВходящее.Ссылка = &Письмо
				|	И ПапкиЭлектронныхПисем.Ссылка = &Папка";
			
			Запрос.УстановитьПараметр("Письмо", Выборка.Письмо);
			
			//Если указана папка в РС
			Если ЗначениеЗаполнено(Выборка.Папка) Тогда
				Запрос.УстановитьПараметр("Папка", Выборка.Папка);
		
				ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.СоздаватьОбращения = Ложь Тогда
						СоздаватьОбращение = Ложь;
					КонецЕсли;
				КонецЦикла;
			//Если не указана папка в РС, проверяем на запрет по всем папкам
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПапкиЭлектронныхПисем.Ссылка = &Папка", "");
				ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
				Если  ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если ВыборкаДетальныеЗаписи.СоздаватьОбращения = Ложь тогда
							СоздаватьОбращение = Ложь;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ СоздаватьОбращение Тогда
				 Продолжить; //В настройках папки указано, что создавать обращение не нужно, переходим к след. письму.
			КонецЕсли;

		//Лобашова 22.05.2019 86282 -
				
		СозданоНовоеОбращение = Ложь;
		//{Рарус kruser 23.05.2019 86907 		
		Если ОсобаяОработкаПисем(Выборка.ОтправительАдрес) Тогда	
			Обращение = ОбращениеПоПисьмуПоНомеруКлиента(ПолучитьНомерОбращенияИзТемы(Выборка.Тема));
		Иначе 
			//}Рарус kruser 23.05.2019 86907
			Обращение = ОбращениеПоПисьму(Выборка.Тема, Выборка.Текст);			
			//{Рарус kruser 23.05.2019 86907 			
		КонецЕсли;
		//}Рарус kruser 23.05.2019 86907		
		Если Не ЗначениеЗаполнено(Обращение) Тогда
            Обращение = НовоеОбращениеПоПисьму(Выборка, ДанныеВитрин);
            Если Обращение = Неопределено Тогда
                Продолжить; // В процессе создания обращения произошла ошибка.
            КонецЕсли;
            СозданоНовоеОбращение = Истина;
        Иначе
			Взаимодействия.УстановитьПредмет(Выборка.Письмо, Обращение, Истина);
        КонецЕсли;
 		ОбработатьПолучениеПисьмаПоОбращению(Выборка.Письмо, Обращение, СозданоНовоеОбращение);
	КонецЦикла; 
	
КонецПроцедуры

// Создает обращение на основании письма и возвращает на него ссылку.
//
// Параметры:
//  ДанныеПисьма - ВыборкаИзРезультатаЗапроса, Структура - данные входящего электронного письма:
//  ДанныеВитрин - Структура - данные витрин в разных разрезах, см. функцию ДанныеВитрин() 
// Возвращаемое значение:
//  ДокументСсылка.Обращение - созданное обращение.
//
Функция НовоеОбращениеПоПисьму(ДанныеПисьма, ДанныеВитрин, ВызыватьИсключениеПриОшибке = Ложь) Экспорт
    
    Попытка
        НовоеОбращение = Документы.Обращение.СоздатьДокумент();
        НовоеОбращение.Тема = ДанныеПисьма.Тема;
        НовоеОбращение.Дата = ТекущаяУниверсальнаяДата();
        НовоеОбращение.Заполнить(Неопределено);
        НовоеОбращение.ТипОбращения = Перечисления.ТипыОбращений.Консультация;
        НовоеОбращение.КаналПолучения = Справочники.КаналыПолученияОбращений.ЭлектроннаяПочта;
        НовоеОбращение.ОписаниеХранилище = Новый ХранилищеЗначения(
            ФорматированныйДокументИзТекстаПисьма(ДанныеПисьма.Письмо, ДанныеПисьма.ТипТекста, ДанныеПисьма.Текст, ДанныеПисьма.ТекстHTML));
            
        НовоеОбращение.Витрина = ДанныеВитрин.ВитриныПоУчетнымЗаписям.Получить(ДанныеПисьма.УчетнаяЗапись);
        Если Не ЗначениеЗаполнено(НовоеОбращение.Витрина) Тогда
            ПолучателиПисьма = ДанныеПисьма.ПолучателиПисьма.Выбрать();
            Пока ПолучателиПисьма.Следующий() Цикл
                НовоеОбращение.Витрина = ДанныеВитрин.ВитриныПоАдресам.Получить(НРег(СтрЗаменить(ПолучателиПисьма.Адрес,"'","")));
                Если ЗначениеЗаполнено(НовоеОбращение.Витрина) Тогда
                    Прервать;
                КонецЕсли;
            КонецЦикла;
		КонецЕсли; 
		//Вторая попытка найти витрину, по получателям копий.
		Если Не ЗначениеЗаполнено(НовоеОбращение.Витрина) Тогда
            ПолучателиПисьма = ДанныеПисьма.ПолучателиКопий.Выбрать();
            Пока ПолучателиПисьма.Следующий() Цикл
                НовоеОбращение.Витрина = ДанныеВитрин.ВитриныПоАдресам.Получить(НРег(СтрЗаменить(ПолучателиПисьма.Адрес,"'","")));
                Если ЗначениеЗаполнено(НовоеОбращение.Витрина) Тогда
                    Прервать;
                КонецЕсли;
            КонецЦикла;
		КонецЕсли;
			
		НовоеОбращение.Сервис = ДанныеВитрин.СервисыВитрин.Получить(НовоеОбращение.Витрина);

		//{Рарус kruser 2019.02.14 81191	
		ДанныеЗаполненияПоУмолчанию = ПолучитьПравилаЗполненияРеквизитовОбращенийПоУмолчанию(ДанныеПисьма.УчетнаяЗапись,ДанныеПисьма.ОтправительАдрес);
		
		Если ДанныеЗаполненияПоУмолчанию.Количество() > 0 И Не ЗначениеЗаполнено(НовоеОбращение.Сервис) Тогда	
			НовоеОбращение.Сервис = ДанныеЗаполненияПоУмолчанию.Сервис;
		КонецЕсли;
		//}Рарус kruser 2019.02.14 81191
        
        Если Не ЗначениеЗаполнено(НовоеОбращение.Инициатор) Тогда
            НовоеОбращение.Инициатор = КонтактнаяИнформацияУСП.ПользовательСервисаПоАдресу(НовоеОбращение.Сервис, ДанныеПисьма.ОтправительАдрес);
        КонецЕсли; 
        НовоеОбращение.АдресДляПереписки = ДанныеПисьма.ОтправительАдрес;
        
        Если ЗначениеЗаполнено(НовоеОбращение.Инициатор) Тогда 
            НовоеОбращение.Абонент = Обслуживание.АбонентПользователяСервиса(НовоеОбращение.Инициатор);
            НовоеОбращение.АбонентОбслуживающейОрганизации = Обслуживание.АбонентОбслуживающейОрганизацииАбонента(НовоеОбращение.Абонент);
        КонецЕсли;
        
        Документы.Обращение.УстановитьИсполнителяПоУмолчанию(НовоеОбращение);
		
		//+ Котова А.Ю. 25.09.2018 ТЗ№ 72692 {
		
		//{Рарус kruser 2019.02.14 81191	
		//ДанныеЗаполненияПоУмолчанию = ПолучитьПравилаЗполненияРеквизитовОбращенийПоУмолчанию(ДанныеПисьма.УчетнаяЗапись,ДанныеПисьма.ОтправительАдрес);
		//}Рарус kruser 2019.02.14 81191

		Если ДанныеЗаполненияПоУмолчанию.Количество() > 0 Тогда
			
			НовоеОбращение.Сервис = ДанныеЗаполненияПоУмолчанию.Сервис;
			НовоеОбращение.Исполнитель = ДанныеЗаполненияПоУмолчанию.Исполнитель;
			НовоеОбращение.Важность = ДанныеЗаполненияПоУмолчанию.Важность;
			НовоеОбращение.Проект = ДанныеЗаполненияПоУмолчанию.Проект;
			//{Рарус kruser 2018.12.25 78093
			НовоеОбращение.ЭтапПроекта = ДанныеЗаполненияПоУмолчанию.ЭтапПроекта;
			//}Рарус kruser 2018.12.25 78093
			НовоеОбращение.ЛинияПоддержки = ДанныеЗаполненияПоУмолчанию.ЛинияПоддержки;
			
			//{Рарус kruser 23.05.2019 86907 
			Если ДанныеЗаполненияПоУмолчанию.ОсобаяОбработка Тогда
				НовоеОбращение.НомерОбращенияКлиента = ПолучитьНомерОбращенияИзТемы(ДанныеПисьма.Тема);
			КонецЕсли;
			//}Рарус kruser 23.05.2019 86907			
						
		КонецЕсли;

		//- Котова А.Ю. 25.09.2018 ТЗ№ 72692 }

        НовоеОбращение.Записать(РежимЗаписиДокумента.Проведение);
        
        Обращение = НовоеОбращение.Ссылка;
        СозданоНовоеОбращение = Истина;
        
        // Создание письма о регистрации обращения
        ДанныеКонтакта = Новый Структура;
        ДанныеКонтакта.Вставить("Контакт", ДанныеПисьма.ОтправительКонтакт);
        ДанныеКонтакта.Вставить("Адрес", ДанныеПисьма.ОтправительАдрес);
        ДанныеКонтакта.Вставить("Представление", ДанныеПисьма.ОтправительПредставление);
	        
        Взаимодействия.УстановитьПредмет(ДанныеПисьма.Письмо, НовоеОбращение.Ссылка, Истина);
        
		Если ЗначениеЗаполнено(НовоеОбращение.Сервис) Тогда
			ОтправитьПисьмоОРегистрацииОбращения(Обращение, ДанныеКонтакта, ДанныеПисьма.Письмо);				
		КонецЕсли;
		
    Исключение
        ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при создании обращения по входящему письму по причине: %1'"),
                    ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					Если ВызыватьИсключениеПриОшибке Тогда
            ВызватьИсключение ТекстОшибки;
        Иначе
            ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСозданиеОбращенияПоВходящемуПисьму(),
                УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЭлектронноеПисьмоВходящее, ДанныеПисьма.Письмо, ТекстОшибки);
        КонецЕсли;
    КонецПопытки;
    
    Возврат Обращение;
            
КонецФункции

//+ Котова А.Ю. 25.09.2018 ТЗ№ 72692 {

Функция ПолучитьПравилаЗполненияРеквизитовОбращенийПоУмолчанию(УчетнаяЗапись,АдресОтправителя)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.АдресЭлПочтыИсх КАК АдресЭлПочтыИсх,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.УчетнаяЗаписьВх КАК УчетнаяЗаписьВх,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.Исполнитель КАК Исполнитель,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.Сервис КАК Сервис,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.Важность КАК Важность,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.Проект КАК Проект,
				   //{Рарус kruser 2018.12.25 78093
				   |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.ЭтапПроекта КАК ЭтапПроекта,
				   //}Рарус kruser 2018.12.25 78093
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.Компонент КАК Компонент,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.ПриоритетПравила КАК ПриоритетПравила,
				   //{Рарус kruser 23.05.2019 86907
				   |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.ОсобаяОбработка КАК ОсобаяОбработка,		
				   //}Рарус kruser 23.05.2019 86907
	               |	0 КАК ЧастноеПравило,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.ЛинияПоддержки КАК ЛинияПоддержки
	               |ПОМЕСТИТЬ ТЗПравилаЗаполнения
	               |ИЗ
	               |	РегистрСведений.ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию КАК ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию
	               |ГДЕ
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.АдресЭлПочтыИсх = &АдресОтправителя
	               |	И ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.УчетнаяЗаписьВх = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.АдресЭлПочтыИсх,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.УчетнаяЗаписьВх,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.Исполнитель,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.Сервис,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.Важность,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.Проект,
				   //{Рарус kruser 2018.12.25 78093
				   |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.ЭтапПроекта,
				   //}Рарус kruser 2018.12.25 78093
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.Компонент,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.ПриоритетПравила,
				   //{Рарус kruser 23.05.2019 86907
				   |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.ОсобаяОбработка,		
				   //}Рарус kruser 23.05.2019 86907
	               |	0,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.ЛинияПоддержки
	               |ИЗ
	               |	РегистрСведений.ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию КАК ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию
	               |ГДЕ
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.УчетнаяЗаписьВх = &УчетнаяЗапись
	               |	И ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.АдресЭлПочтыИсх = """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.АдресЭлПочтыИсх,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.УчетнаяЗаписьВх,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.Исполнитель,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.Сервис,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.Важность,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.Проект,
				   //{Рарус kruser 2018.12.25 78093
				   |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.ЭтапПроекта,
				   //}Рарус kruser 2018.12.25 78093
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.Компонент,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.ПриоритетПравила,
				   //{Рарус kruser 23.05.2019 86907
				   |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.ОсобаяОбработка,		
				   //}Рарус kruser 23.05.2019 86907
	               |	1,
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.ЛинияПоддержки
	               |ИЗ
	               |	РегистрСведений.ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию КАК ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию
	               |ГДЕ
	               |	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.АдресЭлПочтыИсх = &АдресОтправителя
	               |	И ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.УчетнаяЗаписьВх = &УчетнаяЗапись
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ТЗПравилаЗаполнения.АдресЭлПочтыИсх КАК АдресЭлПочтыИсх,
	               |	ТЗПравилаЗаполнения.УчетнаяЗаписьВх КАК УчетнаяЗаписьВх,
	               |	ТЗПравилаЗаполнения.Исполнитель КАК Исполнитель,
	               |	ТЗПравилаЗаполнения.Сервис КАК Сервис,
	               |	ТЗПравилаЗаполнения.Важность КАК Важность,
	               |	ТЗПравилаЗаполнения.Проект КАК Проект,
				   //{Рарус kruser 2018.12.25 78093
				   |	ТЗПравилаЗаполнения.ЭтапПроекта КАК ЭтапПроекта,
				   //}Рарус kruser 2018.12.25 78093
	               |	ТЗПравилаЗаполнения.Компонент КАК Компонент,
	               |	ТЗПравилаЗаполнения.ПриоритетПравила КАК ПриоритетПравила,
				   //{Рарус kruser 23.05.2019 86907
				   |	ТЗПравилаЗаполнения.ОсобаяОбработка КАК ОсобаяОбработка,		
				   //}Рарус kruser 23.05.2019 86907
	               |	ТЗПравилаЗаполнения.ЧастноеПравило КАК ЧастноеПравило,
	               |	ТЗПравилаЗаполнения.ЛинияПоддержки КАК ЛинияПоддержки
	               |ИЗ
	               |	ТЗПравилаЗаполнения КАК ТЗПравилаЗаполнения
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЧастноеПравило УБЫВ,
	               |	ПриоритетПравила УБЫВ";
	Запрос.УстановитьПараметр("УчетнаяЗапись",УчетнаяЗапись);
	Запрос.УстановитьПараметр("АдресОтправителя",АдресОтправителя);
	Результат = Запрос.Выполнить().Выгрузить();
	СтрукутураДанных = Новый Структура;
	
	Если Результат.Количество()>0 Тогда
		СтрукутураДанных.Вставить("Исполнитель", Результат[0].Исполнитель);
		СтрукутураДанных.Вставить("Сервис", Результат[0].Сервис);
		СтрукутураДанных.Вставить("Важность", Результат[0].Важность);
		СтрукутураДанных.Вставить("Проект", Результат[0].Проект);
		//{Рарус kruser 2018.12.25 78093
		СтрукутураДанных.Вставить("ЭтапПроекта", Результат[0].ЭтапПроекта);
		//}Рарус kruser 2018.12.25 78093
		СтрукутураДанных.Вставить("Компонент", Результат[0].Компонент);
		СтрукутураДанных.Вставить("ЛинияПоддержки", Результат[0].ЛинияПоддержки);
		//}Рарус kruser 23.05.2019 86907
		СтрукутураДанных.Вставить("ОсобаяОбработка", Результат[0].ОсобаяОбработка);		
		//{Рарус kruser 23.05.2019 86907

	КонецЕсли;
	Возврат СтрукутураДанных;
КонецФункции

//- Котова А.Ю. 25.09.2018 ТЗ№ 72692 }

//{Рарус kruser 23.05.2019 86907 		
Функция ОсобаяОработкаПисем(ОтправительАдрес)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.АдресЭлПочтыИсх КАК АдресЭлПочтыИсх,
		|	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.УчетнаяЗаписьВх КАК УчетнаяЗаписьВх,
		|	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.ОсобаяОбработка КАК ОсобаяОбработка
		|ИЗ
		|	РегистрСведений.ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию КАК ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию
		|ГДЕ
		|	ПравилаЗаполненияРеквизитовОбращенийПоУмолчанию.АдресЭлПочтыИсх = &АдресЭлПочтыИсх";
	
	Запрос.УстановитьПараметр("АдресЭлПочтыИсх", ОтправительАдрес);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОсобаяОбработка = Ложь;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда	
		ОсобаяОбработка = ВыборкаДетальныеЗаписи.ОсобаяОбработка;
	КонецЕсли;
		
	Возврат ОсобаяОбработка;
	
КонецФункции 		
//}Рарус kruser 23.05.2019 86907

//{Рарус kruser 23.05.2019 86907 		
Функция ОбращениеПоПисьмуПоНомеруКлиента(НомерОбращенияКлиента)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Обращение.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Обращение КАК Обращение
	|ГДЕ
	|	&НомерОбращенияКлиента <> """"
	|	И Обращение.НомерОбращенияКлиента = &НомерОбращенияКлиента";
	
	Запрос.УстановитьПараметр("НомерОбращенияКлиента", НомерОбращенияКлиента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Обращение = Документы.Обращение.ПустаяСсылка();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда	 
		Обращение = ВыборкаДетальныеЗаписи.Ссылка;	
	КонецЕсли;
	
	Возврат Обращение;
		
КонецФункции 		
//}Рарус kruser 23.05.2019 86907

//{Рарус kruser 23.05.2019 86907 		
Функция ПолучитьНомерОбращенияИзТемы(Тема)
	
	Шаблон = "[S7 Jira]";
	ШаблонНачало = "(";
	ШаблонКонец = ")";
	
	Если СтрНайти(Тема, Шаблон) > 0 Тогда
		
		НачалоСтроки = Сред(Тема, СтрНайти(Тема, ШаблонНачало) + 1);
		Результат = Сред(НачалоСтроки, 1, СтрНайти(НачалоСтроки, ШаблонКонец) - 1);
		
		НомерОбращенияКлиента = Результат;
		
	Иначе 
		НомерОбращенияКлиента = "";
	КонецЕсли;
	
	Возврат НомерОбращенияКлиента;
		
КонецФункции 		
//}Рарус kruser 23.05.2019 86907

Функция ФорматированныйДокументИзТекстаПисьма(Письмо, Знач ТипТекста = Неопределено, Знач Текст = Неопределено, Знач ТекстHTML = Неопределено) Экспорт
    
    ТипТекста = ?(ТипТекста = Неопределено, Письмо.ТипТекста, ТипТекста);
    Текст = ?(Текст = Неопределено, Письмо.Текст, Текст);
    ТекстHTML = ?(ТекстHTML = Неопределено, Письмо.ТекстHTML, ТекстHTML);
   
    ФорматированныйДокумент = Новый ФорматированныйДокумент;
    
    Если ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
        ТекстHTML = ТекстHTML;
        Вложения = Новый Соответствие;
        ТекстHTML = ОбработатьТекстHTMLДляФорматированногоДокумента(Письмо, ТекстHTML, Вложения);
        СтруктураВложений = Новый Структура;
        Для Каждого ЭлементВложения Из Вложения Цикл
            ИдентификаторВложения = "_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор),"-","_");
            ТекстHTML = СтрЗаменить(ТекстHTML, "src=""" + ЭлементВложения.Ключ+"""", "src=""" + ИдентификаторВложения + """");
            СтруктураВложений.Вставить(ИдентификаторВложения, ЭлементВложения.Значение);
        КонецЦикла;
        ФорматированныйДокумент.УстановитьHTML(ТекстHTML, СтруктураВложений);
    Иначе
        ТекстОбращения = Текст;
        ФорматированныйДокумент.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(Текст));
    КонецЕсли;
    
    Возврат ФорматированныйДокумент;
    
КонецФункции

// Возвращает количество не рассмотренных взаимодействий по переданному предмету.
//
// Параметры:
//  Предмет - СправочникСсылка, ДокументСсылка - предмет взаимодействий.
// 
// Возвращаемое значение:
//  Число - количество не рассмотренных взаимодействий.
//
Функция КоличествоНеРассмотренныхВзаимодействий(Предмет) Экспорт

    Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СУММА(ВЫБОР
		|			КОГДА ПредметыПапкиВзаимодействий.Рассмотрено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КоличествоНеРассмотрено
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.Предмет = &Предмет
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредметыПапкиВзаимодействий.Предмет";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
    Если Выборка.Следующий() Тогда
        Возврат Выборка.КоличествоНеРассмотрено;
    Иначе
        Возврат 0;
    КонецЕсли;
    
КонецФункции

Процедура ДобавитьПолучателяПисьма(Письмо, ДанныеКонтакта) Экспорт
	
	НоваяСтрока = Письмо.ПолучателиПисьма.Добавить();
	НоваяСтрока.Адрес         = ДанныеКонтакта.Адрес;
	НоваяСтрока.Представление = ДанныеКонтакта.Представление;
    НоваяСтрока.Контакт       = ДанныеКонтакта.Контакт;
	
	Письмо.СписокПолучателейПисьма = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиПисьма, Ложь);
	
КонецПроцедуры
 
Процедура ДобавитьКартинкиВПисьмо(Письмо, ТаблицаКартинок) Экспорт
	
	Для каждого Вложение Из ТаблицаКартинок Цикл
		
		ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
		АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки);
		ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			Письмо.Ссылка,
			АдресКартинкиВоВременномХранилище,
			"_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_"),
			ДвоичныеДанныеКартинки.Размер());
		
		Если ПрисоединенныйФайл <> Неопределено Тогда
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
 
Процедура УстановитьПредметПисьма(Письмо, Предмет) Экспорт
	
	Реквизиты = СтруктураРеквизитовВзаимодействияДляЗаписи(Предмет, Истина);
	ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Письмо.Ссылка, Реквизиты);
	
КонецПроцедуры

// Возвращает ссылку на предмет взаимодействия
//
Функция ПредметВзаимодействия(Взаимодействие, ТипПредмета = Неопределено) Экспорт
	
	Если Взаимодействие = Неопределено Или Взаимодействие.Пустая() Тогда 
		Возврат Документы.Обращение.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПредметыПапкиВзаимодействий.Предмет КАК Предмет
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.Взаимодействие = &Взаимодействие");
	Запрос.УстановитьПараметр("Взаимодействие", Взаимодействие);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Если ТипПредмета = Неопределено Тогда 
			Возврат Выборка.Предмет;
        ИначеЕсли ТипЗнч(Выборка.Предмет) =ТипПредмета Тогда
			Возврат Выборка.Предмет;
		КонецЕсли;
	КонецЕсли;
    
    Возврат Неопределено;
	
КонецФункции

// Возвращает информацию по витринам в разных разрезах.
// 
// Возвращаемое значение:
//  Структура - данные витрин:
//   * ВитриныПоУчетнымЗаписям - Соответствие
//   * ВитриныПоАдресам - Соответствие
//   * СервисыВитрин - Соответствие
//
Функция ДанныеВитрин() Экспорт
    
    Запрос = Новый Запрос;
	Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   1 КАК Порядок,
        |   Витрины.Владелец КАК Сервис,
        |   Витрины.Ссылка КАК Витрина,
        |   Витрины.УчетнаяЗапись КАК УчетнаяЗапись,
        |   Витрины.УчетнаяЗапись.АдресЭлектроннойПочты КАК Адрес
        |ПОМЕСТИТЬ ВитриныАдреса
        |ИЗ
        |   Справочник.Витрины КАК Витрины
        |ГДЕ
        |   НЕ Витрины.ПометкаУдаления
        |   И НЕ Витрины.УчетнаяЗапись = &ПустаяУчетнаяЗапись
        |   И Витрины.УчетнаяЗапись.ИспользоватьДляПолучения
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   2,
        |   Витрины.Владелец,
        |   Витрины.Ссылка,
        |   Витрины.Владелец.УчетнаяЗаписьСлужбыПоддержкиПоУмолчанию,
        |   Витрины.Владелец.УчетнаяЗаписьСлужбыПоддержкиПоУмолчанию.АдресЭлектроннойПочты
        |ИЗ
        |   Справочник.Витрины КАК Витрины
        |ГДЕ
        |   НЕ Витрины.ПометкаУдаления
        |   И НЕ Витрины.УчетнаяЗапись = &ПустаяУчетнаяЗапись
        |   И Витрины.УчетнаяЗапись <> ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты)
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   3,
        |   УчетныеЗаписиСервисов.Ссылка,
        |   УчетныеЗаписиСервисов.Ссылка.ОсновнаяВитрина,
        |   УчетныеЗаписиСервисов.УчетнаяЗапись,
        |   УчетныеЗаписиСервисов.УчетнаяЗапись.АдресЭлектроннойПочты
        |ИЗ
        |   Справочник.Сервисы.УчетныеЗаписиСлужбыПоддержки КАК УчетныеЗаписиСервисов
        |ГДЕ
        |   НЕ УчетныеЗаписиСервисов.Ссылка.ПометкаУдаления
        |   И НЕ УчетныеЗаписиСервисов.УчетнаяЗапись = &ПустаяУчетнаяЗапись
        |   И НЕ УчетныеЗаписиСервисов.УчетнаяЗапись.ПометкаУдаления
        |   И УчетныеЗаписиСервисов.УчетнаяЗапись.ИспользоватьДляПолучения
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВитриныАдреса.Порядок,
        |   ВитриныАдреса.Сервис,
        |   ВитриныАдреса.Витрина,
        |   ВитриныАдреса.УчетнаяЗапись,
        |   ВитриныАдреса.Адрес
        |ИЗ
        |   ВитриныАдреса КАК ВитриныАдреса
        |
        |УПОРЯДОЧИТЬ ПО
        |   ВитриныАдреса.Порядок";
        
    Запрос.УстановитьПараметр("ПустаяУчетнаяЗапись", Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка());
    
    Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
    ДанныеВитрин = Новый Структура;
    ДанныеВитрин.Вставить("ВитриныПоУчетнымЗаписям", Новый Соответствие);
	ДанныеВитрин.Вставить("ВитриныПоАдресам", Новый Соответствие);
    ДанныеВитрин.Вставить("СервисыВитрин", Новый Соответствие);
    
	Пока Выборка.Следующий() Цикл
        Если ДанныеВитрин.ВитриныПоУчетнымЗаписям.Получить(Выборка.УчетнаяЗапись) = Неопределено Тогда
            ДанныеВитрин.ВитриныПоУчетнымЗаписям.Вставить(Выборка.УчетнаяЗапись, Выборка.Витрина);
        КонецЕсли;
        Если ДанныеВитрин.ВитриныПоАдресам.Получить(Выборка.Адрес) = Неопределено Тогда
            ДанныеВитрин.ВитриныПоАдресам.Вставить(Выборка.Адрес, Выборка.Витрина);
        КонецЕсли;
        Если ДанныеВитрин.СервисыВитрин.Получить(Выборка.Витрина) = Неопределено Тогда
            ДанныеВитрин.СервисыВитрин.Вставить(Выборка.Витрина, Выборка.Сервис);
        КонецЕсли; 
	КонецЦикла; 
    
    Возврат ДанныеВитрин;
    
КонецФункции

// Добавляет в РС "НеПросмотренныеДанныеИнициатором" запись по измерениям.
//
Процедура УстановитьПризнакНепросмотренности(Знач Объект, Знач ПользовательСервиса) Экспорт 
	
	Если Объект = Неопределено Или ПользовательСервиса = Неопределено
		Или Объект.Пустая() Или ПользовательСервиса.Пустая() Тогда 
			Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяЗапись = РегистрыСведений.НепросмотренныеДанныеИнициатором.СоздатьМенеджерЗаписи();
	НоваяЗапись.Объект = Объект;
	НоваяЗапись.ПользовательСервиса = ПользовательСервиса;
	НоваяЗапись.Записать();
	
КонецПроцедуры

// Удаляет из РС "НеПросмотренныеДанныеИнициатором" запись по измерениям.
//
Процедура УдалитьПризнакНеПросмотренности(Знач Объект, Знач ПользовательСервиса) Экспорт 
	
	Если Объект = Неопределено Или ПользовательСервиса = Неопределено
		Или Объект.Пустая() Или ПользовательСервиса.Пустая() Тогда 
			Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.НепросмотренныеДанныеИнициатором.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.ПользовательСервиса.Установить(ПользовательСервиса);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует структуру для записи в регистр сведений ПредметыПапкиВзаимодействий.
//
// Параметры:
//  Папка       - Справочник.ПапкиЭлектронныхПисем - папка, имеет смысл для документов "Электронное письмо входящее"
//               и "Электронное письмо исходящее".
//  Предмет          - СправочникСсылка, ДокументСсылка, указывает на предмет взаимодействия.
//  Рассмотрено      - Булево - признак рассмотрения взаимодействия.
//  РассмотретьПосле - ДатаВремя - дата, до которой отложено рассмотрение взаимодействия.
//  РассчитыватьРассмотрено - Булево - признак необходимости расчета состояний папки и предмета.
//
// Возвращаемое значение:
//   Структура   - сформированная структура.
//
Функция СтруктураРеквизитовВзаимодействияДляЗаписи(Предмет, Рассмотрено)
	
	СтруктураВозврата = ВзаимодействияКлиентСервер.ПустаяСтруктураРеквизитыВзаимодействия();
	
	Если Предмет <> Неопределено Тогда
		СтруктураВозврата.Предмет = Предмет;
	КонецЕсли;
	
	Если Рассмотрено <> Неопределено Тогда
		СтруктураВозврата.Рассмотрено = Рассмотрено;
	КонецЕсли;
	
	СтруктураВозврата.РассчитыватьРассмотрено = Истина;
	
	Возврат СтруктураВозврата;
	
КонецФункции
    
// Регистрирует событие отправки письма пользователю сервиса из обращения
//
Процедура ЗарегистрироватьСобытияОтправкиПисьма(Объект) Экспорт
	
	ОбращениеПоПисьму = ОбращениеПоВзаимодействию(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(ОбращениеПоПисьму) Тогда
		Возврат;
	КонецЕсли;
	
	ИнициаторОбращения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбращениеПоПисьму, "Инициатор");
	АдресаИнициатора = КонтактнаяИнформацияУСП.ВсеЭлектронныеАдресаОбъекта(ИнициаторОбращения);
	МассивАдресов = Новый Массив;
	Для каждого АдресИнициатора Из АдресаИнициатора Цикл
		МассивАдресов.Добавить(ВРег(АдресИнициатора.Адрес));
	КонецЦикла; 
	
	ПисьмоОтправленоИнициатору = Ложь;
	
	Для каждого ДанныеАдреса Из Объект.ПолучателиПисьма Цикл
		Если МассивАдресов.Найти(ВРег(ДанныеАдреса.Адрес)) <> Неопределено Тогда
			ПисьмоОтправленоИнициатору = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для каждого ДанныеАдреса Из Объект.ПолучателиКопий Цикл
		Если МассивАдресов.Найти(ВРег(ДанныеАдреса.Адрес)) <> Неопределено Тогда
			ПисьмоОтправленоИнициатору = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для каждого ДанныеАдреса Из Объект.ПолучателиОтвета Цикл
		Если МассивАдресов.Найти(ВРег(ДанныеАдреса.Адрес)) <> Неопределено Тогда
			ПисьмоОтправленоИнициатору = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для каждого ДанныеАдреса Из Объект.ПолучателиСкрытыхКопий Цикл
		Если МассивАдресов.Найти(ВРег(ДанныеАдреса.Адрес)) <> Неопределено Тогда
			ПисьмоОтправленоИнициатору = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПисьмоОтправленоИнициатору Тогда
		
		ПараметрыСобытия = Новый Структура;
		ПараметрыСобытия.Вставить("Письмо", Объект.Ссылка);
		ПараметрыСобытия.Вставить("Тема", Объект.Тема);
		
		ВидСобытия = Справочники.ВидыБизнесСобытий.ОтправленоПисьмоПользователюСервиса;
		
		КонтекстСобытия = БизнесСобытия.СформироватьКонтекстСобытия(ПараметрыСобытия);
		КонтекстСобытияСтрокой = СтрШаблон(НСтр("ru='%1'"), Строка(ВидСобытия)); 
		
		БизнесСобытия.ЗарегистрироватьСобытие(
			ОбращениеПоПисьму, 
			ВидСобытия, 
			КонтекстСобытия, ?(ЗначениеЗаполнено(Объект.Автор), Объект.Автор, Неопределено), 
			КонтекстСобытияСтрокой, Объект.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

// Дописывает в ссылку новый параметр, если значение параметра заполнено
//
Процедура ДобавитьПараметрКСсылкеMailto(СсылкаMailto, НазваниеПараметра, ЗначениеПараметра, НачатоЗаполнениеПараметров)
	
	Если ПустаяСтрока(ЗначениеПараметра) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметра = ЗакодироватьСсылкуMailto(ЗначениеПараметра);
	
	Если НазваниеПараметра = "to" Тогда
		
		СсылкаMailto = СсылкаMailto + ЗначениеПараметра;
		Возврат;
		
	КонецЕсли;
	
	Если НачатоЗаполнениеПараметров Тогда
		
		СимволРазделитель = "&";
		
	Иначе
		
		СимволРазделитель = "?";
		НачатоЗаполнениеПараметров = Истина;
		
	КонецЕсли;
	
	СсылкаMailto = СсылкаMailto + СимволРазделитель + НазваниеПараметра + "=" + ЗначениеПараметра;
	
	Возврат;
	
КонецПроцедуры

// Возвращает строку в виде ссылки mailto с заданными параметрами
//
Функция СформироватьСсылкуMailto(Кому = "", Копия = "", СкрытаяКопия = "", ТемаПисьма = "", 
	ТекстПисьма = "", ТипТекста = Неопределено, Представление = "")
	
	Если ТипТекста = Неопределено Тогда
		ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML")
	КонецЕсли;
	
	СсылкаMailto = "";
	НачатоЗаполнениеПараметров = Ложь;
	
	ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "to", Кому, НачатоЗаполнениеПараметров);
	ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "cc", Копия, НачатоЗаполнениеПараметров);
	ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "bcc", СкрытаяКопия, НачатоЗаполнениеПараметров);
	ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "subject", ТемаПисьма, НачатоЗаполнениеПараметров);
	ДобавитьПараметрКСсылкеMailto(СсылкаMailto, "body", ТекстПисьма, НачатоЗаполнениеПараметров);
	
	Если Не ПустаяСтрока(СсылкаMailto) Тогда
		
		Если ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML") Тогда
			
			Если ПустаяСтрока(Представление) Тогда
				Представление = СсылкаMailto;
			КонецЕсли;
			
			СсылкаMailto = СтрШаблон("<a href=""mailto:%1"">%2</a>", СсылкаMailto, Представление);
			
		Иначе
			
			СсылкаMailto = "mailto:" + СсылкаMailto;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СсылкаMailto;
	
КонецФункции

// Кодирует символы " ", ПС, "?", "&", "%"
//
Функция ЗакодироватьСсылкуMailto(СсылкаMailto)
	
	ЗакодированнаяСсылкаMailto = СсылкаMailto;
	
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, "%", "%25");
	
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, Символы.ПС, "%0D%0A");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, " ", "%20");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, "?", "%3F");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, "&", "%26");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, """", "%22");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, "<", "%3C");
	ЗакодированнаяСсылкаMailto = СтрЗаменить(ЗакодированнаяСсылкаMailto, ">", "%3E");
	
	Возврат ЗакодированнаяСсылкаMailto;
	
КонецФункции

// Базовое имя события для регистрации в журнале событий
//
// Возвращаемое значение:
//     Строка - имя
//
Функция СобытиеЖурналаРегистрации()
	Возврат НСтр("ru='Взаимодействия УСП'", 
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() );
КонецФункции

Функция ЗначениеПараметраИзФорматированногоДокумента(ФорматированныйДокумент, ДанныеКартинок)
    
    КартинкиДокумента = Новый Структура;
    ТекстHTML = "";
    ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, КартинкиДокумента);
    Если ДанныеКартинок <> Неопределено Тогда
        Для каждого СтрокаКартинки Из КартинкиДокумента Цикл
            ВложениеКлюч = СтрокаКартинки.Ключ; 
            Если ДанныеКартинок.Свойство(ВложениеКлюч) <> Неопределено Тогда
                ВложениеКлюч = "_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
                ТекстHTML = СтрЗаменить(ТекстHTML, СтрокаКартинки.Ключ, ВложениеКлюч);
            КонецЕсли;
            ДанныеКартинок.Вставить(ВложениеКлюч, СтрокаКартинки.Значение);    
        КонецЦикла;
    КонецЕсли;
    НачалоТела = СтрНайти(ВРег(ТекстHTML), "<BODY");
    
    Возврат СокрЛП(Сред(ТекстHTML, НачалоТела + 7, СтрНайти(ВРег(ТекстHTML),"</BODY") -  НачалоТела - 8));
    
КонецФункции

Функция ОчиститьПараметр(Знач ТекущийПараметр)
    
    ОчистительТекста = Новый ФорматированныйДокумент;
    ОчистительТекста.УстановитьHTML(ТекущийПараметр, Новый Структура);
    
    Возврат СокрЛП(ОчистительТекста.ПолучитьТекст());
    
КонецФункции

Функция ЗначениеПараметраРекурсивно(ИменаРеквизитов, Источник, ИндексРеквизита, КэшЗначений)
    
    Если ИндексРеквизита = ИменаРеквизитов.Количество() Или Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
        Возврат Источник;
    Иначе
        ИмяРеквизита = ИменаРеквизитов[ИндексРеквизита];
        МетаданныеИсточника = Источник.Метаданные();
        ПутьИмени = Новый Массив;
        Для Счетчик = 0 По ИндексРеквизита Цикл
            ПутьИмени.Добавить(ИменаРеквизитов[Счетчик]);
        КонецЦикла;
        ПутьИмени = СтрСоединить(ПутьИмени, ".");
        ЗначениеЗамены = КэшЗначений.Получить(ПутьИмени);
        Если ЗначениеЗамены = Неопределено Тогда
            Если МетаданныеИсточника.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
                ЗначениеЗамены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, ИмяРеквизита);
                Если ТипЗнч(ЗначениеЗамены) = Тип("ХранилищеЗначения") Тогда
                    ЗначениеЗамены = ЗначениеЗамены.Получить();
                КонецЕсли;
            ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеИсточника) Или ОбщегоНазначения.ЭтоСправочник(МетаданныеИсточника) Тогда 
                Для Каждого Реквизит из МетаданныеИсточника.СтандартныеРеквизиты Цикл
                    Если ИмяРеквизита = Реквизит.Имя Тогда
                        ЗначениеЗамены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, ИмяРеквизита);
                        Если ТипЗнч(Источник) = Тип("ДокументСсылка.Обращение") И ИмяРеквизита = "Номер" Тогда
                            ЗначениеЗамены = ПрефиксацияОбъектов.УдалитьЛидирующиеНулиИзНомераОбъекта(ЗначениеЗамены);
                        ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.Обращение") И ИмяРеквизита = "Дата" Тогда
                            СекундДоМестногоВремени = ТекущаяДата() - УниверсальноеВремя(ТекущаяДата());
                            ЗначениеЗамены = ОбщегоНазначенияУСП.ПредставлениеМестногоВремениСПоправкойНаУниверсальное(ЗначениеЗамены + СекундДоМестногоВремени);
                        КонецЕсли;    
                        Прервать;
                    КонецЕсли;
                КонецЦикла;
            КонецЕсли;
        КонецЕсли;
        Возврат ЗначениеПараметраРекурсивно(ИменаРеквизитов, ЗначениеЗамены, ИндексРеквизита + 1, КэшЗначений);
    КонецЕсли;
   
КонецФункции
        
Функция ОбработатьТекстHTMLДляФорматированногоДокумента(Письмо, ТекстHTML, СтруктураВложений)
    
    Если Не ПустаяСтрока(ТекстHTML) Тогда
        
        ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
        
        ТаблицаФайлов = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
        ВнешниеФайлы = Новый Соответствие;
        
        Для каждого Картинка Из ДокументHTML.Картинки Цикл
            АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
            Если АтрибутИсточникКартинки = Неопределено Тогда
                Продолжить;
            КонецЕсли; 
            Если ТаблицаФайлов.Количество() Тогда
                Для каждого ПрисоединенныйФайл ИЗ ТаблицаФайлов Цикл
                    Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.ИДФайлаЭлектронногоПисьма) > 0 Тогда
                        НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
                        НовыйАтрибутКартинки.ТекстовоеСодержимое = ПрисоединенныйФайл.Наименование;
                        Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
                        СтруктураВложений.Вставить(ПрисоединенныйФайл.Наименование, Новый Картинка(ПолучитьИзВременногоХранилища(
                            ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла)));
                    КонецЕсли;
                    Прервать;
                КонецЦикла;
            Иначе
                ВнешнийФайл = ВнешниеФайлы.Получить(АтрибутИсточникКартинки.Значение);
                Если ВнешнийФайл = Неопределено И НРег(Лев(АтрибутИсточникКартинки.Значение, 4)) = НРег("http") Тогда
                    ПараметрыПолучения = Новый Структура("Таймаут", 10);
                    ДанныеВложения = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(АтрибутИсточникКартинки.Значение, ПараметрыПолучения);
                    Если ДанныеВложения.Статус Тогда
                        Файл = Новый Файл(ДанныеВложения.Путь);
                        ДвоичныеДанные = Новый ДвоичныеДанные(ДанныеВложения.Путь);
                        АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
                        ИмяФайла = Сред(АтрибутИсточникКартинки.Значение, СтрНайти(АтрибутИсточникКартинки.Значение,"/",НаправлениеПоиска.СКонца) + 1);
                        Если СтрДлина(ИмяФайла) > 0 Тогда
                            ИмяРасширение = СтрРазделить(ИмяФайла, ".", Ложь);
                            ИмяБезРасширения = ИмяРасширение[0];
                            Если ИмяРасширение.Количество() > 1 Тогда
                                РасширениеБезТочки = ИмяРасширение[ИмяРасширение.Количество() - 1];
                            Иначе
                                // Если тип не задан, будем предполагать, что это JPG.
                                РасширениеБезТочки = "jpg";
                            КонецЕсли;
                        Иначе
                            ИмяБезРасширения = Файл.ИмяБезРасширения;
                            РасширениеБезТочки = СтрЗаменить(Файл.Расширение,".","");
                        КонецЕсли;    
                        
                        НовыйВнешнийФайл = ПрисоединенныеФайлы.ДобавитьФайл(Письмо, ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Файл.ИмяБезРасширения, ""), 
                        РасширениеБезТочки, Файл.ПолучитьВремяИзменения(), Файл.ПолучитьУниверсальноеВремяИзменения(),
                        АдресХранилища);
                        ОбъектФайла = НовыйВнешнийФайл.ПолучитьОбъект();
                        ОбъектФайла.ИДФайлаЭлектронногоПисьма = АтрибутИсточникКартинки.Значение;
                        ОбъектФайла.Записать();
                        ВнешнийФайл = НовыйВнешнийФайл.Ссылка;
                        ВнешниеФайлы.Вставить(АтрибутИсточникКартинки.Значение, ВнешнийФайл);
                    Иначе
                        ВнешнийФайл = Неопределено;
                    КонецЕсли;
                КонецЕсли;
                Если ВнешнийФайл <> Неопределено Тогда
                    НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
                    НовыйАтрибутКартинки.ТекстовоеСодержимое = ВнешнийФайл.Наименование;
                    Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
                    
                    СтруктураВложений.Вставить(
                        ВнешнийФайл.Наименование,
                        Новый Картинка(ПолучитьИзВременногоХранилища(
                        ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВнешнийФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла)));
				Иначе
					НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
                    НовыйАтрибутКартинки.ТекстовоеСодержимое = "";
                    Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
				КонецЕсли;
            КонецЕсли;
        КонецЦИкла;
        Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
    Иначе
        Возврат ТекстHTML;
    КонецЕсли;
    
КонецФункции

// Возвращает обращение по теме и тексту электронного письма.
// Значение возвращается, в случае, если в теле или в тексте письма будет найден идентификатор обращения.
//
// Параметры:
//  ТемаПисьма  - Строка - тема письма.
//  ТекстПисьма - Строка - текст письма.
// 
// Возвращаемое значение:
//  ДокументСсылка.Обращение - ссылка на обращение по письму.
//
Функция ОбращениеПоПисьму(ТемаПисьма, ТекстПисьма = "") Экспорт
	
	Обращение = Документы.Обращение.ПустаяСсылка();
	ТекстДляОбработки = ТемаПисьма;
	
	НачалоИдентификатора = СтрНайти(ТекстДляОбработки, НачалоКлючаОбращения());
	Если НачалоИдентификатора = 0 Тогда
		ТекстДляОбработки = ТекстПисьма;
		НачалоИдентификатора = СтрНайти(ТекстДляОбработки, НачалоКлючаОбращения());
	КонецЕсли;
	
	Если НачалоИдентификатора <> 0 Тогда
	
		ПозицияПоиска = НачалоИдентификатора + 2;
		ПозицияОкончания = СтрДлина(ТекстДляОбработки);
		КонецИдентификатора = 0;
		
		Пока Сред(ТекстДляОбработки, ПозицияПоиска, 1) <> ")" И Сред(ТекстДляОбработки, ПозицияПоиска, 1) <> ":" И Сред(ТекстДляОбработки, ПозицияПоиска, 1) <> " " И ПозицияПоиска < ПозицияОкончания Цикл
			КонецИдентификатора = ПозицияПоиска;
			ПозицияПоиска = ПозицияПоиска + 1;
		КонецЦикла;
		
		Если КонецИдентификатора - НачалоИдентификатора > 17 Тогда 
			Возврат Обращение;
		КонецЕсли;
		
		НомерОбращения = Сред(ТекстДляОбработки, НачалоИдентификатора + 2, КонецИдентификатора - НачалоИдентификатора - 1);
		
		РазделительПрефикса = СтрНайти(НомерОбращения, "-");
		Если РазделительПрефикса = 0 Тогда
			Возврат Обращение;
		КонецЕсли;
		
		Префикс = Лев(НомерОбращения, РазделительПрефикса - 1);
		Номер = Сред(НомерОбращения, РазделительПрефикса + 1);
		
		ОпределенияНомера = Новый Массив;
		ТекущийНомер = Номер;
		ОпределенияНомера.Добавить(Префикс + "-" + Номер);
		Для Дополнение = 1 По 12 - СтрДлина(Номер) Цикл
			ТекущийНомер = "0" + ТекущийНомер;
			ОпределенияНомера.Добавить(Префикс + "-" + ТекущийНомер);
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Обращение.Ссылка
			|ИЗ
			|	Документ.Обращение КАК Обращение
			|ГДЕ
			|	Обращение.Номер В(&ОпределенияНомера)";
		Запрос.УстановитьПараметр("ОпределенияНомера", ОпределенияНомера);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			 Обращение = Выборка.Ссылка;
		КонецЕсли;
		
	Иначе 
		// Вероятно пришло письмо с ошибкой доставки. Проверим это.
		НачалоИдентификатора = СтрНайти(ТекстДляОбработки, "Message-Id: <");
		
		Если НачалоИдентификатора = 0 Тогда 
			Возврат Обращение;
		КонецЕсли;
		
		ПозицияПоиска = НачалоИдентификатора + 13;
		ПозицияОкончания = СтрДлина(ТекстДляОбработки);
		КонецИдентификатора = 0;
		
		Пока Сред(ТекстДляОбработки, ПозицияПоиска, 1) <> ">" И Сред(ТекстДляОбработки, ПозицияПоиска, 1) <> " " И ПозицияПоиска < ПозицияОкончания Цикл
			КонецИдентификатора = ПозицияПоиска;
			ПозицияПоиска = ПозицияПоиска + 1;
		КонецЦикла;
		
		Если КонецИдентификатора - НачалоИдентификатора > 500 Тогда 
			Возврат Обращение;
		КонецЕсли;
		
		ИдентификаторСообщения = Сред(ТекстДляОбработки, НачалоИдентификатора + 13, КонецИдентификатора - НачалоИдентификатора - 12);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПредметыПапкиВзаимодействий.Предмет
			|ИЗ
			|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
			|ГДЕ
			|	ВЫРАЗИТЬ(ПредметыПапкиВзаимодействий.Взаимодействие КАК Документ.ЭлектронноеПисьмоИсходящее).ИдентификаторСообщения = &ИдентификаторСообщения";
		Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
	
		Если Выборка.Следующий() Тогда
			 Обращение = Выборка.Предмет;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Обращение;
	
КонецФункции

// Формирует текст ссылок MailTo для ответов на задачу.
//
Функция ПолучитьОценкиВВидеСсылокMailto(Обращение)
	//+ Котова А.Ю. 14.05.2019 ТЗ№ 86223 {
	ЭтоЗакрытиеОбращения = (Обращение.Состояние = Перечисления.СостоянияОбращений.Закрыто);
	АдресЭлектроннойПочты = Неопределено;
	Если ЭтоЗакрытиеОбращения Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныТекстовПисем.УчетнаяЗапись КАК УчетнаяЗапись
		|ИЗ
		|	РегистрСведений.ШаблоныТекстовПисем КАК ШаблоныТекстовПисем
		|ГДЕ
		|	ШаблоныТекстовПисем.Проект = &Проект
		|	И ШаблоныТекстовПисем.ТипШаблона = &ТипШаблона";
		
		Запрос.УстановитьПараметр("Проект", Обращение.Проект);
		Запрос.УстановитьПараметр("ТипШаблона", Справочники.ТипыШаблоновТекстов.ПисьмоЗакрытиеОбращения);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		РеквизитыОбращения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Обращение, "Сервис, НомерСокращенный");
	
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			АдресЭлектроннойПочты = ВыборкаДетальныеЗаписи.УчетнаяЗапись;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(АдресЭлектроннойПочты) или НЕ ЭтоЗакрытиеОбращения Тогда
		//- Котова А.Ю. 14.05.2019 ТЗ№ 86223 }		
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СервисыУчетныеЗаписиСлужбыПоддержки.УчетнаяЗапись.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
		|ИЗ
		|	Справочник.Сервисы.УчетныеЗаписиСлужбыПоддержки КАК СервисыУчетныеЗаписиСлужбыПоддержки
		|ГДЕ
		|	СервисыУчетныеЗаписиСлужбыПоддержки.Ссылка В
		|			(ВЫБРАТЬ
		|				Обращение.Сервис
		|			ИЗ
		|				Документ.Обращение КАК Обращение
		|			ГДЕ
		|				Обращение.Ссылка = &Обращение)";
	
	Запрос.УстановитьПараметр("Обращение", Обращение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РеквизитыОбращения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Обращение, "Сервис, НомерСокращенный");
	
	Если Выборка.Следующий() Тогда
		АдресЭлектроннойПочты = Выборка.АдресЭлектроннойПочты;
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru='У сервиса ""%1"" не заполнена учетная запись для получения писем.'"), РеквизитыОбращения.Сервис);
	КонецЕсли; 
	//+ Котова А.Ю. 14.05.2019 ТЗ№ 86223 {	
КонецЕсли;
	//- Котова А.Ю. 14.05.2019 ТЗ№ 86223 }

	УИОбращения = Строка(Обращение.УникальныйИдентификатор());
	
	Разделитель = " ";
	
	ПредставлениеОтветов = Новый Массив;
	ПредставлениеОтветов.Добавить(НСтр("ru='1 – Ужасно'"));
	ПредставлениеОтветов.Добавить(НСтр("ru='2 – Плохо'")); 
	ПредставлениеОтветов.Добавить(НСтр("ru='3 – Приемлемо'")); 
	ПредставлениеОтветов.Добавить(НСтр("ru='4 – Хорошо'")); 
	ПредставлениеОтветов.Добавить(НСтр("ru='5 – Отлично'"));
	
	Для Счетчик = 1 по 5 Цикл
		
		Оценка = 6 - Счетчик;
		
		ТекстОтвета = ЗаголовокПисьмаОценкиОбращения();
			
		СсылкаНаОтвет = СформироватьСсылкуMailto(
			АдресЭлектроннойПочты,,,
			СтрШаблон(НСтр("ru='Оценка обращения %1%2:%3:%4)'"), 
				НачалоКлючаОбращения(), 
				РеквизитыОбращения.НомерСокращенный, 
				УИОбращения, 
				Оценка),
			ТекстОтвета,
			Перечисления.ТипыТекстовЭлектронныхПисем.HTML,
			ПредставлениеОтветов[Оценка - 1]);
			
		// {Рарус_shav 2019.05.18 
		Результат = Строка(Результат) + Строка(Разделитель) + Строка(СсылкаНаОтвет);
		// }Рарус_shav 2019.05.18 
		Разделитель = " / ";
		
	КонецЦикла;
	
	СсылкаНаОтвет = СформироватьСсылкуMailto(
		АдресЭлектроннойПочты,,,
		СтрШаблон(НСтр("ru='Прошу продолжить работу по обращению %1%2)'"), НачалоКлючаОбращения(), РеквизитыОбращения.НомерСокращенный),
			НСтр("ru = 'Добрый день, 
				|'"),
			Перечисления.ТипыТекстовЭлектронныхПисем.HTML,
			НСтр("ru='Продолжить работу'"));

	Результат = Результат + Разделитель + СсылкаНаОтвет;
	
	Возврат Результат;
	
КонецФункции

Функция ОценитьРазмерПисьма(Письмо, Картинки)

	Размер = СтрДлина(Письмо.Тема)*2;
	Размер = Размер + ?(Письмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML,
		                СтрДлина(Письмо.ТекстHTML), СтрДлина(Письмо.Текст))*2;
	
	Для каждого СтрокаКартинки Из Картинки Цикл
		Размер = Размер + СтрокаКартинки.Значение.ПолучитьДвоичныеДанные().Размер() * 1.5;
	КонецЦикла;
	
	Возврат Размер;

КонецФункции

// Возвращает заголовок текста письма оценки обращения
//
Функция ЗаголовокПисьмаОценкиОбращения()
	
	Возврат НСтр("ru = 'Добавьте комментарий к оценке обращения:'");
	
КонецФункции

// Установить реквизит "НеПоказыватьПользователю" в РС "ПредметыПапкиВзаимодействий"
//
// Параметры:
//	Взаимодействие - ДокументСсылка.* - взаимодействие.
//	ПоказыватьПользователю - Булево - показывать или нет пользователю.
//
Процедура УстановитьПризнакРазрешенияПросмотраВзаимодействияПользователем(Взаимодействие, ПоказыватьПользователю)
	
	Набор = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьНаборЗаписей();
	Набор.Отбор.Взаимодействие.Установить(Взаимодействие);
	Набор.Прочитать();
	Если Набор.Количество() = 0 Тогда 
		Запись = Набор.Добавить();
		Запись.Взаимодействие = Взаимодействие;
	Иначе
		Запись = Набор.Получить(0);
	КонецЕсли;
	Запись.НеПоказыватьПользователю = Не ПоказыватьПользователю;
	Набор.Записать();
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрацииОтправкаПисьмаОРегистрацииОбращения()
	
	Возврат НСтр("ru='Отправка письма о регистрации обращения'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЖурналаРегистрацииСозданиеОбращенияПоВходящемуПисьму()
    
    Возврат НСтр("ru='Создание обращения по входящему письму'", 
                 ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());    
	
КонецФункции

// Заполняет элементы параграфа по переданному параграфу.
//
// Параметры:
//  Приемник - ФорматированныйДокумент - документ для заполнения.
//  Источник - Массив - массив элементов форматированного документа для заполнения приемника.
//
Процедура ЗаполнитьЭлементы(Приемник, Источник, ЗакладкаНачала = Неопределено, ЗакладкаКонца = Неопределено)
    
    СоответствиеПараграфов = Новый Соответствие;
    КоличествоЭлементов = Приемник.Элементы.Количество();
    Если КоличествоЭлементов > 0 Тогда
        ПараграфПриемника = Приемник.Элементы.Получить(КоличествоЭлементов - 1);
        Если Источник.Количество() > 0 Тогда
            ПараграфИсточника = Источник[0].Родитель;
            ПараграфПриемника.ТипПараграфа = ПараграфИсточника.ТипПараграфа;
            ПараграфПриемника.ГоризонтальноеПоложение = ПараграфИсточника.ГоризонтальноеПоложение;
            ПараграфПриемника.МеждустрочныйИнтервал = ПараграфИсточника.МеждустрочныйИнтервал;
            ПараграфПриемника.Отступ = ПараграфИсточника.Отступ;
            СоответствиеПараграфов.Вставить(ПараграфИсточника, ПараграфПриемника);
        КонецЕсли;
    КонецЕсли;
    Для Каждого Элемент Из Источник Цикл
        ТекущийПараграф = Неопределено; 
        Для Каждого ЭлементСоответствия Из СоответствиеПараграфов Цикл // Параграфы не ищутся в соответствии.
            Если ЭлементСоответствия.Ключ = Элемент.Родитель Тогда
                ТекущийПараграф = ЭлементСоответствия.Значение;
            КонецЕсли;
        КонецЦикла;
        Если ТекущийПараграф = Неопределено Тогда
            ТекущийПараграф = Приемник.Элементы.Добавить();
            ТекущийПараграф.ТипПараграфа = Элемент.Родитель.ТипПараграфа;
            ТекущийПараграф.ГоризонтальноеПоложение = Элемент.Родитель.ГоризонтальноеПоложение;
            ТекущийПараграф.МеждустрочныйИнтервал = Элемент.Родитель.МеждустрочныйИнтервал;
            ТекущийПараграф.Отступ = Элемент.Родитель.Отступ;
            СоответствиеПараграфов.Вставить(Элемент.Родитель, ТекущийПараграф);
        КонецЕсли;    
        Если Тип(Элемент) = Тип("ТекстФорматированногоДокумента") Тогда
            ТекстЭлемента = Строка(Элемент.Текст);
            Если ТекстЭлемента = "%Удалить%" Тогда // Обработка вставки пустого параграфа.
                НовыйЭлемент = ТекущийПараграф;
            Иначе
                НовыйЭлемент = ТекущийПараграф.Элементы.Добавить(ТекстЭлемента, Тип("ТекстФорматированногоДокумента"));
                НовыйЭлемент.НавигационнаяСсылка = Элемент.НавигационнаяСсылка;
                НовыйЭлемент.ЦветТекста = Элемент.ЦветТекста;
                НовыйЭлемент.ЦветФона = Элемент.ЦветФона;
                НовыйЭлемент.Шрифт = Новый Шрифт(Элемент.Шрифт);
            КонецЕсли;
        ИначеЕсли Тип(Элемент) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
            НовыйЭлемент = ТекущийПараграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
        ИначеЕсли Тип(Элемент) = Тип("КартинкаФорматированногоДокумента") Тогда
            НовыйЭлемент = ТекущийПараграф.Элементы.Добавить(Элемент.Картинка, Тип("КартинкаФорматированногоДокумента"));
            Если ТипЗнч(Элемент.Картинка) = Тип("Картинка") И Не Элемент.Картинка.Вид = ВидКартинки.Пустая Тогда
                НовыйЭлемент.НавигационнаяСсылка = Элемент.НавигационнаяСсылка;
                НовыйЭлемент.Ширина = Элемент.Ширина;
                НовыйЭлемент.Высота = Элемент.Высота;
            КонецЕсли;
        ИначеЕсли Тип(Элемент) = Тип("ПараграфФорматированногоДокумента") Тогда
            НовыйЭлемент = ДобавитьПараграф(Приемник.Элементы, Элемент);    
        КонецЕсли;
        Если ЗакладкаНачала = Неопределено Тогда
            ЗакладкаНачала = НовыйЭлемент.ЗакладкаНачала;
        КонецЕсли;
        Если ТипЗнч(НовыйЭлемент) = Тип("ПараграфФорматированногоДокумента") Тогда
            ЗакладкаКонца = НовыйЭлемент.ЗакладкаНачала; // Обработка вставки пустого параграфа.
        Иначе            
            ЗакладкаКонца = НовыйЭлемент.ЗакладкаКонца;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры
    
// Добавляет параграф форматированного документа в коллекцию элементов форматированного документа.
//
// Параметры:
//  ЭлементыПриемники - КоллекцияЭлементовФорматированногоДокумента
//  Источник - ПараграфФорматированногоДокумента - источник заполнения параграфа.
// 
// Возвращаемое значение:
//   - ПараграфФорматированногоДокумента - созданный параграф. 
//
Функция ДобавитьПараграф(ЭлементыПриемники, Источник)
   
    НовыйПараграф = ЭлементыПриемники.Добавить();
    НовыйПараграф.ТипПараграфа = Источник.ТипПараграфа;
    НовыйПараграф.ГоризонтальноеПоложение = Источник.ГоризонтальноеПоложение;
    НовыйПараграф.МеждустрочныйИнтервал = Источник.МеждустрочныйИнтервал;
    НовыйПараграф.Отступ = Источник.Отступ;
    ЗаполнитьЭлементы(НовыйПараграф, Источник.Элементы);
    Возврат НовыйПараграф;
    
КонецФункции

Процедура ОпределитьЭлементыИИндексДляВставки(ЭлементыДляПоиска, Закладка, ЭлементыДляВставки, ИндексДляВставки)
    
    Для Каждого Элемент Из ЭлементыДляПоиска Цикл
        Если Элемент.ЗакладкаНачала = Закладка Тогда
            ЭлементыДляВставки = ЭлементыДляПоиска;
            ИндексДляВставки = ЭлементыДляПоиска.Индекс(Элемент);
            Прервать;
        ИначеЕсли Элемент.ЗакладкаКонца = Закладка Тогда 
            ЭлементыДляВставки = ЭлементыДляПоиска;
            ИндексДляВставки = ЭлементыДляПоиска.Индекс(Элемент) + 1;
            Прервать;
        КонецЕсли;
        Если ТипЗнч(Элемент) = Тип("ПараграфФорматированногоДокумента") Тогда
            ОпределитьЭлементыИИндексДляВставки(Элемент.Элементы, Закладка, ЭлементыДляВставки, ИндексДляВставки)
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

// Возвращает строку в тексте сообщения после строки ЗаголовокПоля.
// 
Функция ПолучитьСтрокуСообщенияПоЗаголовкуПоля(ТекстСообщения, ЗаголовокПоля, ДлинаСтроки)
	
	Результат = "";
	
	Позиция = СтрНайти(ТекстСообщения, ЗаголовокПоля);
	
	Если Позиция = 0 Тогда
		Результат = "";
	Иначе
		Результат = Сред(ТекстСообщения, Позиция + СтрДлина(ЗаголовокПоля), ДлинаСтроки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру реквизитов оценки обращения из текста сообщения 
//
Функция РеквизитыОценки(Тема, ТекстСообщения, ОжиданиеОценки = Ложь)
	
	НачалоИдентификаторов = СтрНайти(Тема, НачалоКлючаОбращения());
	
	// Идентификаторы обращения и ответа закодированы в теме в виде:
	// Тема (#Номер:ИдентификаторОбращения:ИдентификаторОтвета)
	
	Тема = СтрЗаменить(СтрЗаменить(Тема, " ",""), Символы.ПС, "");
	
	ИдентификаторОбращения = "";
	ИдентификаторОтвета = "";
	
	Если НачалоИдентификаторов <> 0 Тогда
	
		ПозицияПоиска = НачалоИдентификаторов + 2;
		ПозицияОкончания = СтрДлина(Тема);
        
        КонецИдентификаторов = 0;
		
		Пока Сред(Тема, ПозицияПоиска, 1) <> ")" И Сред(Тема, ПозицияПоиска, 1) <> " " И ПозицияПоиска < ПозицияОкончания Цикл
			КонецИдентификаторов = ПозицияПоиска;
			ПозицияПоиска = ПозицияПоиска + 1;
		КонецЦикла;
		
		СтрокаИдентификаторов = Сред(Тема, НачалоИдентификаторов + 2, КонецИдентификаторов - НачалоИдентификаторов - 1);
		
		Идентификаторы = СтрРазделить(СтрокаИдентификаторов, ":");
		Если Идентификаторы.Количество() >= 3 Тогда
			Если СтрДлина(Идентификаторы[1]) = 36 Тогда
				ИдентификаторОбращения = Идентификаторы[1]; 
			КонецЕсли;
			Если СтрДлина(Идентификаторы[2]) = 1 Тогда
				ИдентификаторОтвета = Идентификаторы[2];
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	РеквизитыОценки = Новый Структура;
	РеквизитыОценки.Вставить("Обращение", Документы.Обращение.ПустаяСсылка());
	РеквизитыОценки.Вставить("Оценка", 0);
	РеквизитыОценки.Вставить("Комментарий", "");
	
	Если ИдентификаторОбращения = "" Тогда
		ИдентификаторОбращения = ПолучитьСтрокуСообщенияПоЗаголовкуПоля(
			ТекстСообщения, НСтр( "ru = '*Обращение:'"), 36);
	КонецЕсли;
					
	Если ИдентификаторОтвета = "" Тогда
		ИдентификаторОтвета = ПолучитьСтрокуСообщенияПоЗаголовкуПоля(
			ТекстСообщения, НСтр( "ru = '*Ответ:'"), 1);
	КонецЕсли;
		
	ТекстОкончанияКомментария = НСтр("ru = '____________________'");
	НачальнаяПозицияКомментария = 1;
	КонечнаяПозицияКомментария = СтрНайти(ТекстСообщения, ТекстОкончанияКомментария);
	КоличествоСимволов = КонечнаяПозицияКомментария - НачальнаяПозицияКомментария;
	КомментарийОценки = Сред(ТекстСообщения, НачальнаяПозицияКомментария, КоличествоСимволов);
	
	КомментарийОценки = СтрЗаменить(КомментарийОценки, ЗаголовокПисьмаОценкиОбращения(),"");
	КомментарийОценки = СтрЗаменить(КомментарийОценки, НСтр("ru='Комментарий:'"),"");
	КомментарийОценки = СокрЛП(КомментарийОценки);
			
	Если ЗначениеЗаполнено(ИдентификаторОбращения) И ЗначениеЗаполнено(ИдентификаторОтвета) Тогда
		Попытка
			ОбращениеПоИдентификатору = Документы.Обращение.ПолучитьСсылку(
				Новый УникальныйИдентификатор(ИдентификаторОбращения));
				
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Обращение.Ссылка
				|ИЗ
				|	Документ.Обращение КАК Обращение
				|ГДЕ
				|	Обращение.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", ОбращениеПоИдентификатору);
			
			Если НЕ Запрос.Выполнить().Пустой() Тогда
				РеквизитыОценки.Обращение = ОбращениеПоИдентификатору;
			КонецЕсли;
			
			Оценка = Число(ИдентификаторОтвета);
			РеквизитыОценки.Оценка = Оценка;
			РеквизитыОценки.Комментарий = КомментарийОценки;
			
        Исключение
            Если ОжиданиеОценки Тогда
    			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, 
                    Метаданные.Документы.Обращение, ОбращениеПоИдентификатору, 
    				НСтр("ru='Не определены реквизиты оценки обращения.'"));
            КонецЕсли;
		КонецПопытки;
			
	КонецЕсли;
	
	Возврат РеквизитыОценки;
	
КонецФункции

// Раскодирует символы " ", ПС, "?", "&", "%"
//
Функция РаскодироватьСсылкуMailto(СсылкаMailto)
	
	РаскодированнаяСсылкаMailto = СсылкаMailto;
	
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%0D%0A", Символы.ПС);
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%0A", Символы.ПС);
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%20", " ");
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%3F", "?");
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%26", "&");
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%22", """");
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%3C", "<");
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%3E", ">");
	
	РаскодированнаяСсылкаMailto = СтрЗаменить(РаскодированнаяСсылкаMailto, "%25", "%");
	
	Возврат РаскодированнаяСсылкаMailto;
	
КонецФункции

#КонецОбласти
