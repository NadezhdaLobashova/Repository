///////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// 
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции


Процедура ЗагрузитьПодписки(EndPoint = Неопределено,Заголовки = Неопределено,МассивПроведенныхДокументов = Неопределено) Экспорт
    
    ПустаяСсылка = Справочники.Абоненты.ПустаяСсылка();
    
    Если EndPoint = Неопределено Тогда
        EndPoint = RESTAPIEndPoint();
    КонецЕсли;
    
    Если Заголовки = Неопределено Тогда
        Заголовки = ПолучитьЗаголовки();    
    КонецЕсли;
    
    Запрос = Новый HTTPЗапрос("api/rest/public/subscriber", Заголовки);
    ТелоЗапроса = SubscriberRequest();
    
    Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
    
    Результат = EndPoint.ОтправитьДляОбработки(Запрос);
    
    Страница = 1;
    
    Владелец = ОбщийИнтеграция_API_1C.ПолучитьСсылкуВладелца();
    
    Если Владелец = Неопределено Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В справочнике ""Сервисы"", нет не одного элемента, введите элемент!'"));
    КонецЕсли;
    
    Документ       = Документы.РегистрационнаяАнкета.СоздатьДокумент();
    Документ.Дата  = ТекущаяДата();
    ТабЧасть        = Документ.ПродуктыАбонентов;
    
    Пока Не НужноЛиОбработатьИСообщитьКодСостояния(Результат.КодСостояния,"subscriber") Цикл
        
        СтруктураПоиска = Новый Структура;
        
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
        
        ДанныеПодписок 			= ПрочитатьJSON(ЧтениеJSON);
        ЧтениеJSON.Закрыть();
        
        Если Не ДанныеПодписок.subscribers.Количество() Тогда
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Обработка была прервана на странице: '")+ Страница);
            Прервать;
        КонецЕсли;
        Для Каждого ОписаниеПодписки Из ДанныеПодписок.subscribers Цикл
            
            Если ОписаниеПодписки.Свойство("Name") Тогда
                СтруктураПоиска.Вставить("Наименование",ОписаниеПодписки.Name);
            КонецЕсли;
            
            СтруктураПоиска.Вставить("Владелец",Владелец);            
            
            АбонентСсылка = ОбщийИнтеграция_API_1C.ПолучитьЭлементСправочника("Абоненты",СтруктураПоиска);
            
            Если ОписаниеПодписки.Свойство("regNumbers") Тогда
                
                Для Каждого РегНомер Из ОписаниеПодписки.regNumbers Цикл
                    
                    СтрокаТаблицы = ТабЧасть.Добавить();
                    СтрокаРегНомер = СтрЗаменить(Строка(РегНомер),Символы.НПП,"");
                    СтрокаТаблицы.РегНомер = СтрокаРегНомер;
                    
                КонецЦикла;    
                
            КонецЕсли;
                        
        КонецЦикла;
        
        Страница = Страница + 1;
        ТелоЗапроса = SubscriberRequest(Страница);
        Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
        Результат = EndPoint.ОтправитьДляОбработки(Запрос);
        
    КонецЦикла;
    
    Попытка
        Документ.Записать(РежимЗаписиДокумента.Проведение); 
        Если Не МассивПроведенныхДокументов = Неопределено Тогда
            МассивПроведенныхДокументов.Добавить(Документ)
        КонецЕсли;
    Исключение
        ТектсСообщения = "Документ, " + Документ + ", не проведен по причине, " + ОписаниеОшибки();
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТектсСообщения);
        ОбщийИнтеграция_API_1C.СделатьЗаписьВЖурналеРегистрацииДляДокумента(Документ.Метаданные().Имя,ТектсСообщения);
        Документ.Записать();
    КонецПопытки;
    
    
КонецПроцедуры

Функция ПолучитьСсылкуМетодом_createBillingReport(EndPoint = Неопределено,Заголовки = Неопределено) Экспорт
    
    reportUeid = "";
    
    Если EndPoint = Неопределено Тогда
        EndPoint = RESTAPIEndPoint();
    КонецЕсли;
    
    Если Заголовки = Неопределено Тогда
        Заголовки = ПолучитьЗаголовки();    
    КонецЕсли; 
    
    Запрос = Новый HTTPЗапрос("api/rest/public/option/billing-report", Заголовки);
    ТелоЗапроса = optionBillingReport(); // Заполняем тело POST запроса
    Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
    
    Результат = EndPoint.ОтправитьДляОбработки(Запрос);
    
    КодСостояния = Результат.КодСостояния;
    ИмяСервиса   = "createBillingReport";
    Если НужноЛиОбработатьИСообщитьКодСостояния(КодСостояния,ИмяСервиса) Тогда
        Возврат reportUeid;
    КонецЕсли;
    
    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
    
    ДанныеПодписок 			= ПрочитатьJSON(ЧтениеJSON);
    ЧтениеJSON.Закрыть();
    
    //Мы получили ссылка на сформированный список по контрагентам.		
    reportUeid	= ДанныеПодписок.reportUeid;
    
    Возврат reportUeid;
    
КонецФункции

Процедура ПодключитьсяКПартнерскомуAPIИЗагрузитьДанныеПоСервисамИТС(reportUeid = "") Экспорт
    
    EndPoint = RESTAPIEndPoint();
    Заголовки = ПолучитьЗаголовки();
    
    reportUeid = ПолучитьИлиЗагрузитьreportUeid(,EndPoint,Заголовки).Ссылка;
            
    //Выполняем запрос по полученной ссылке
    Запрос = Новый HTTPЗапрос("api/rest/public/option/billing-report/" +reportUeid, Заголовки);
    
    //Результат = EndPoint.ОтправитьДляОбработки(Запрос);
    Результат = EndPoint.Получить(Запрос);
    
    КодСостояния = Результат.КодСостояния;
    ИмяСервиса   = "getBillingReport";
    Если НужноЛиОбработатьИСообщитьКодСостояния(КодСостояния,ИмяСервиса) Тогда
        Возврат;
    КонецЕсли;
    
    Владелец = ОбщийИнтеграция_API_1C.ПолучитьСсылкуВладелца();
    
    Если Владелец = Неопределено Тогда
        ОбщийИнтеграция_API_1C.ВызватьИсключениеИСообщить(НСтр("ru = 'В справочнике ""Сервисы"", нет не одного элемента, введите элемент!'"));
    КонецЕсли;
    
    //МассивПроведенныхДокументов = Новый Массив;
    
    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
    ДополнительныеПараметрыФункцияВосстановленияЧтения = Новый Структура();
    //ДанныеПодписок 			= ПрочитатьJSON(ЧтениеJSON);
    ДанныеПодписок 			= ПрочитатьJSON(ЧтениеJSON, , , , "ФункцияВосстановленияЧтения", ОбщийИнтеграция_API_1C, ДополнительныеПараметрыФункцияВосстановленияЧтения);
    ЧтениеJSON.Закрыть();
    
    //Мы получили ссылка на сформированный список по контрагентам.		
    ДанныеСпискаКонтрагентов	= ДанныеПодписок.report;
    ИмяСвойства = "entries";
    Если ДанныеСпискаКонтрагентов.Свойство(ИмяСвойства) Тогда
        Записи = ДанныеСпискаКонтрагентов[ИмяСвойства];
    Иначе
        ОбщийИнтеграция_API_1C.СделатьЗаписьВЖурналеРегистрацииОшибокРаспарсинга(ИмяСвойства);
        ОбщийИнтеграция_API_1C.ВызватьИсключениеИСообщить(НСтр("ru = 'В полученном списке нет, нет не одной записи!'"));
    КонецЕсли;    
    
    СтруктураПоиска = Новый Структура;
    
    Документ                    = Документы.РегистрацияИТС.СоздатьДокумент();
    Документ.Дата               = ТекущаяДата();
    Документ.СозданоОбработкой  = Истина;
    Документ.Комментарий        = НСтр("ru = 'Документ создан фоновым заданием, выполненым '") + ТекущаяДата();
    ТЧПодпискиИТС               = Документ.ПодпискиИТС;
    
    Если Записи.количество()<=1 Тогда
        ОбщийИнтеграция_API_1C.ВызватьИсключениеИСообщить(НСтр("ru = 'Несмотря на ""status: 200"" и ""state:  OK"". 
                                                                      | Был получен пустой ""Список абонентов""!
                                                                      | Выполнение регламентного задания было прервано!'"));
    КонецЕсли;
    
    Для Каждого Запись Из Записи Цикл
        
        АбонентСсылка = Неопределено;
        
        Тарифы = Запись.tariffs;
        Если Тарифы.Количество() = 0 Тогда
            ТекстСообщения = НСтр("Был получен пустой список при выполнеии метода """+ИмяСервиса+"""!");
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
            ОбщийИнтеграция_API_1C.СделатьЗаписьВЖурналеРегистрации(КодСостояния,ИмяСервиса,ТекстСообщения);
            Возврат;       
        КонецЕсли;
        
        Для каждого Тариф Из Тарифы Цикл
            
            Если Тариф.Свойство("userOrganizationInn") Тогда
                СтруктураПоиска.Вставить("ИНН",Тариф.userOrganizationInn);
            КонецЕсли;
            
            СтруктураПоиска.Вставить("Владелец",Владелец);
            
            АбонентСсылка = ОбщийИнтеграция_API_1C.ПолучитьЭлементСправочника("Абоненты",СтруктураПоиска);
            
            СтруктураПоиска.Очистить();
            
            СтруктураПоиска.Вставить("Наименование",Тариф.name);
            
            СервисИТС = ОбщийИнтеграция_API_1C.ПолучитьЭлементСправочника("СервисыИТС",СтруктураПоиска);
            СтруктураПоиска.Очистить();
            
            ДатаПокупки = '00010101';
            
            Если Тариф.Свойство("buyDate") Тогда 
                ДатаПокупки = Тариф.buyDate;
            Иначе
                ДатаПокупки = Тариф.startDate;
            КонецЕсли;
            
            СтруктураОтбора = Новый Структура("Абонент,РегНомер,СервисИТС,ДатаПокупки,ДатаНачала,ДатаОкончания,Поддержка",АбонентСсылка,Запись.subscriberCode,СервисИТС,ДатаПокупки,Тариф.startDate,Тариф.endDate,Запись.maintenance);
            СтруктураОтбора.Вставить("КоличествоМесяцев",ОбщийИнтеграция_API_1C.РасчитатьКоличествоМесяцев(Тариф.endDate,Тариф.startDate));
            СтрокаПодпискиИТС = ТЧПодпискиИТС.Добавить();
            ЗаполнитьЗначенияСвойств(СтрокаПодпискиИТС,СтруктураОтбора);
            
        КонецЦикла;		
        
    КонецЦикла;
    
    ТЧПодпискиИТС.Свернуть("Абонент,РегНомер,СервисИТС,ДатаПокупки,КоличествоМесяцев,ДатаНачала,ДатаОкончания,Поддержка,СделатьДвижение,Поддержка");
    Документ.Записать();
    Документ.УстановитьФлагСделатьДвижениеВТЧ();
    Попытка
        Документ.Записать(РежимЗаписиДокумента.Проведение);
    Исключение
        ТектсСообщения = "Документ, " + Документ + ", не проведен по причине, " + ОписаниеОшибки();
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТектсСообщения);
        ОбщийИнтеграция_API_1C.СделатьЗаписьВЖурналеРегистрацииДляДокумента(Документ.Метаданные().Имя,ТектсСообщения);
        Документ.Записать();
    КонецПопытки;
    
    ЗагрузитьПодписки(EndPoint,Заголовки);
    
    Если Документ.Проведен Тогда
        ОбщийИнтеграция_API_1C.СделатьЗаписьРС_СсылкаНаЗагрузкуСпискаС_ПартнерскогоAPI_1С(reportUeid,Истина);
    КонецЕсли;
    
КонецПроцедуры	

Функция RESTAPIEndPoint()
    
    URL = "https://partner-api.1c.ru/api";
    
    ДанныеАутентификации = Константы.ДанныеАутентификацииСПартнерскимAPI_1C.Получить().Получить();
    Если ДанныеАутентификации <> Неопределено Тогда
        Логин  = ДанныеАутентификации.Логин;
        Пароль = ДанныеАутентификации.Пароль;
    Иначе
         ОбщийИнтеграция_API_1C.ВызватьИсключениеИСообщить(НСтр("ru = 'Введите данные аутентификации в константу ""Данные аутентификации"".'"));
    КонецЕсли;
    
    СтруктрураURI = СтруктураURI(URL);
    Порт = ?(СтруктрураURI.Порт = Неопределено, ?(НРег(СтруктрураURI.Схема) = "https", 443, 80), СтруктрураURI.Порт);
    
    Возврат Новый HTTPСоединение(
    СтруктрураURI.Хост,
    Порт,
    Логин,
    Пароль,
    Неопределено, // При необходимости нужно описать прокси.
    30,
    ЗащищенноеСоединение());
    
КонецФункции

Функция SubscriberRequest(Страница = 1,КоличествоЗаписей = 300)
    
    ЗаписьДанныхСообщения = Новый ЗаписьJSON;
    ЗаписьДанныхСообщения.УстановитьСтроку();
    
    ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
    
    ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("page");
    ЗаписьДанныхСообщения.ЗаписатьЗначение(Страница);
    
    ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("size");
    ЗаписьДанныхСообщения.ЗаписатьЗначение(КоличествоЗаписей);
    
    ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
    
    Возврат ЗаписьДанныхСообщения.Закрыть();
    
КонецФункции

Функция optionBillingReport(Массив = Неопределено)
    
    Если Массив = Неопределено Тогда
        Массив = Новый Массив;
    КонецЕсли;
    ЗаписьДанныхСообщения = Новый ЗаписьJSON;
    ЗаписьДанныхСообщения.УстановитьСтроку();
    
    ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
    ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("subscriberCodeList");
    ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
    //ЗаписьДанныхСообщения.ЗаписатьЗначение();
    ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
    
    ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("type");
    ЗаписьДанныхСообщения.ЗаписатьЗначение("COUNTERAGENT");
    
    ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
    
    Возврат ЗаписьДанныхСообщения.Закрыть();
    
КонецФункции

Функция GetoptionBillingReport(reportUeid)
    
    ЗаписьДанныхСообщения = Новый ЗаписьJSON;
    ЗаписьДанныхСообщения.УстановитьСтроку();
    
    ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
    ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("reportUeid");
    ЗаписьДанныхСообщения.ЗаписатьЗначение(reportUeid);
    
    ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
    
    Возврат ЗаписьДанныхСообщения.Закрыть();
    
КонецФункции

Функция СтруктураURI(Знач СтрокаURI)
    
    СтрокаURI = СокрЛП(СтрокаURI);
    
    // схема
    Схема = "";
    Позиция = СтрНайти(СтрокаURI, "://");
    Если Позиция > 0 Тогда
        Схема = НРег(Лев(СтрокаURI, Позиция - 1));
        СтрокаURI = Сред(СтрокаURI, Позиция + 3);
    КонецЕсли;
    
    // Строка соединения и путь на сервере.
    СтрокаСоединения = СтрокаURI;
    ПутьНаСервере = "";
    Позиция = СтрНайти(СтрокаСоединения, "/");
    Если Позиция > 0 Тогда
        ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
        СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
    КонецЕсли;
    
    // Информация пользователя и имя сервера.
    СтрокаАвторизации = "";
    ИмяСервера = СтрокаСоединения;
    Позиция = СтрНайти(СтрокаСоединения, "@");
    Если Позиция > 0 Тогда
        СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
        ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
    КонецЕсли;
    
    // логин и пароль
    Логин = СтрокаАвторизации;
    Пароль = "";
    Позиция = СтрНайти(СтрокаАвторизации, ":");
    Если Позиция > 0 Тогда
        Логин = Лев(СтрокаАвторизации, Позиция - 1);
        Пароль = Сред(СтрокаАвторизации, Позиция + 1);
    КонецЕсли;
    
    // хост и порт
    Хост = ИмяСервера;
    Порт = "";
    Позиция = СтрНайти(ИмяСервера, ":");
    Если Позиция > 0 Тогда
        Хост = Лев(ИмяСервера, Позиция - 1);
        Порт = Сред(ИмяСервера, Позиция + 1);
        Если Не ТолькоЦифрыВСтроке(Порт) Тогда
            Порт = "";
        КонецЕсли;
    КонецЕсли;
    
    Результат = Новый Структура;
    Результат.Вставить("Схема", Схема);
    Результат.Вставить("Логин", Логин);
    Результат.Вставить("Пароль", Пароль);
    Результат.Вставить("ИмяСервера", ИмяСервера);
    Результат.Вставить("Хост", Хост);
    Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
    Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
    
    Возврат Результат;
    
КонецФункции

Функция ТолькоЦифрыВСтроке(Знач Значение, Знач Устаревший = Истина, Знач ПробелыЗапрещены = Истина)
    
    Если ТипЗнч(Значение) <> Тип("Строка") Тогда
        Возврат Ложь;
    КонецЕсли;
    
    Если Не ПробелыЗапрещены Тогда
        Значение = СтрЗаменить(Значение, " ", "");
    КонецЕсли;
    
    Если СтрДлина(Значение) = 0 Тогда
        Возврат Истина;
    КонецЕсли;
    
    // Если содержит только цифры, то в результате замен должна быть получена пустая строка.
    // Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
    Возврат СтрДлина(
    СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
    СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
    Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
    
КонецФункции

Функция ЗащищенноеСоединение()
    
    Возврат Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
    
КонецФункции

Функция СоздатьОбъектСправочника(Менеджер, СтруктураРеквизитов)Экспорт
    
    Объект = Менеджер.СоздатьЭлемент();
    Для каждого Эл Из СтруктураРеквизитов Цикл
        Объект[Эл.Ключ] = Эл.Значение;
    КонецЦикла;
    
    Попытка
        Объект.Записать();
        Возврат Объект.Ссылка;
    Исключение
        Возврат Неопределено; 
    КонецПопытки;
    
КонецФункции

Функция НужноЛиОбработатьИСообщитьКодСостояния(КодСостояния, ИмяСервиса)
    
    Если КодСостояния = 200 Тогда
        Возврат Ложь;
    КонецЕсли;
    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выполнен метод """+ИмяСервиса+""", код ошибки: "+ КодСостояния);
    ОбщийИнтеграция_API_1C.СделатьЗаписьВЖурналеРегистрации(КодСостояния,ИмяСервиса);
    Возврат Истина;
    
КонецФункции	

Функция ПолучитьЗаголовки()
    
    Заголовки = Новый Соответствие;
    Заголовки.Вставить("Content-Type", "application/json");
    
    Возврат	Заголовки;
    
КонецФункции // ()

Функция ПолучитьИлиЗагрузитьreportUeid(ПолучитьНовую = Ложь,EndPoint = Неопределено,Заголовки = Неопределено) Экспорт
            
    Если ПолучитьНовую Тогда // безусловно, нужно получить новую ссылку
        Возврат ИнтеграцияСПартнерскимAPI_1C.ПолучитьСсылкуМетодом_createBillingReport(EndPoint,Заголовки);
    КонецЕсли;
    
    ВозвращаемаяСтруктура = Новый Структура("Ссылка,ЭтоНовая");
    ВозвращаемаяСтруктура.ЭтоНовая = Истина;
    
    Выборка = РегистрыСведений.СсылкаНаЗагрузкуСпискаС_ПартнерскогоAPI_1С.Выбрать(); // у нас в регистре всегда одна запись или нет ничего.
    
    Если Выборка.Следующий() Тогда //Есть загруженные ссылки
        
        ТекДата = НачалоДня(ТекущаяДата());
        
        Если выборка.ДатаПолученияСсылки = ТекДата 
            И Выборка.ДанныеПолучены Тогда
            ВозвращаемаяСтруктура.Ссылка = "";
        ИначеЕсли выборка.ДатаПолученияСсылки = ТекДата 
            И Не Выборка.ДанныеПолучены Тогда
            ВозвращаемаяСтруктура.Ссылка = Выборка.Ссылка;
            ВозвращаемаяСтруктура.ЭтоНовая = Ложь;
        Иначе
            ВозвращаемаяСтруктура.Ссылка =ИнтеграцияСПартнерскимAPI_1C.ПолучитьСсылкуМетодом_createBillingReport(EndPoint,Заголовки);;
        КонецЕсли;
        
    Иначе //Значит ссылки нет
        
        ВозвращаемаяСтруктура.Ссылка = ИнтеграцияСПартнерскимAPI_1C.ПолучитьСсылкуМетодом_createBillingReport(EndPoint,Заголовки);
    КонецЕсли;
    
    Возврат ВозвращаемаяСтруктура;
    
КонецФункции

Процедура ПодключитсяИЗагрузитьСсылкуНаСкачиваниеСписка()Экспорт
    
    СтруктураReportUeid = ПолучитьИлиЗагрузитьreportUeid();
    ЭтоНовая    = СтруктураReportUeid.ЭтоНовая;
    reportUeid  = СтруктураReportUeid.Ссылка;
    
    Если reportUeid = "" Тогда
        Возврат;
    ИначеЕсли Не ЭтоНовая Тогда
        ОбщийИнтеграция_API_1C.ВызватьИсключениеИСообщить(НСтр("ru = 'На текущий день ссылка на загрузку ""Список абонентов"" уже получена!
                                                                | Выполнение регламентного задания было прервано!'")); 
    КонецЕсли;
    
    ОбщийИнтеграция_API_1C.СделатьЗаписьРС_СсылкаНаЗагрузкуСпискаС_ПартнерскогоAPI_1С(reportUeid);

КонецПроцедуры


#КонецОбласти