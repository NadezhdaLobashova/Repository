
#Область ПрограммныйИнтерфейс

// Рассчитывает и устанавливает срок обработки обращения.
//
// Параметры:
//  ОбращениеОбъектСсылка - ДокументСсылка.Обращение, ДокументОбъект.Обращение - ссылка или объект обращения.
//  ДатаЗаписи		      - Дата - момент записи обращения.
//
Процедура УстановитьСрокОбращения(ОбращениеОбъектСсылка, ДатаЗаписи, Принудительно = Ложь, ЭтоПереоткрытие = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашения") Тогда
		Возврат;
	КонецЕсли; 
	
	ИменаСвойств = "Ссылка, Дата, Сервис, Состояние, ОбслуживающаяОрганизация, ЛинияПоддержки, Исполнитель, ПометкаУдаления";
		
	Если ТипЗнч(ОбращениеОбъектСсылка) = Тип("ДокументОбъект.Обращение") Тогда
		СвойстваОбращения = Новый Структура(ИменаСвойств);
		ЗаполнитьЗначенияСвойств(СвойстваОбращения, ОбращениеОбъектСсылка);
	Иначе
		СвойстваОбращения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбращениеОбъектСсылка, ИменаСвойств);
	КонецЕсли;
	
	Если СвойстваОбращения.ПометкаУдаления Или СвойстваОбращения.Состояние = Перечисления.СостоянияОбращений.Закрыто Или 
		СвойстваОбращения.Состояние = Перечисления.СостоянияОбращений.ОжиданиеИнициатора Тогда
		// Обнулим сроки, если они установлены
		ТекущиеСроки = РегистрыСведений.СрокиОбращенийПоСоглашениям.ТекущиеСрокиОбращения(СвойстваОбращения.Ссылка);
		Если ТекущиеСроки.СрокРеакции <> '00010101' Или ТекущиеСроки.СрокОбработки <> '00010101' Тогда
			НоваяЗапись = РегистрыСведений.СрокиОбращенийПоСоглашениям.СоздатьМенеджерЗаписи();
			НоваяЗапись.Период = ДатаЗаписи;
			НоваяЗапись.Обращение = СвойстваОбращения.Ссылка;
			НоваяЗапись.ЛинияПоддержки = СвойстваОбращения.ЛинияПоддержки;
			НоваяЗапись.СостояниеОбращения = СвойстваОбращения.Состояние;
			НоваяЗапись.Записать();
		КонецЕсли; 
		Возврат;
    КонецЕсли;
    
	
	ЗапросПодходящихСоглашений = Новый Запрос;
	
	ЗапросПодходящихСоглашений.Текст = 
	    //+kruser 13.08.2019 90864
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|   МИНИМУМ(СоглашенияСервисов.Приоритет) КАК Приоритет
		//|ПОМЕСТИТЬ МинимальныйПриоритет
		//|ИЗ
		//|   РегистрСведений.СоглашенияСервисов КАК СоглашенияСервисов
		//|ГДЕ
		//|   СоглашенияСервисов.Период <= &ТекущаяДата
		//|   И (СоглашенияСервисов.ДействуетПо > НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		//|           ИЛИ СоглашенияСервисов.ДействуетПо = &ПустаяДата)
		//|   И СоглашенияСервисов.Сервис = &Сервис
		//|   И СоглашенияСервисов.Период <= &МинимальнаяДата
		//|   И (СоглашенияСервисов.Соглашение.ОбслуживающаяОрганизация = &ОбслуживающаяОрганизация
		//|           ИЛИ СоглашенияСервисов.Соглашение.ОбслуживающаяОрганизация = &ПустаяОрганизация)
		//|   И НЕ СоглашенияСервисов.Соглашение.ПометкаУдаления
		//|;
		"
		//-kruser 13.08.2019 90864
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   СоглашенияСервисов.Соглашение,
        |   СоглашенияСервисов.Период,
        |   СоглашенияСервисов.Приоритет
        |ПОМЕСТИТЬ Соглашения
        |ИЗ
        |   РегистрСведений.СоглашенияСервисов КАК СоглашенияСервисов
		//+kruser 13.08.2019 90864
		//|       ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйПриоритет КАК МинимальныйПриоритет
        //|       ПО СоглашенияСервисов.Приоритет = МинимальныйПриоритет.Приоритет
		//-kruser 13.08.2019 90864
        |ГДЕ
        |   СоглашенияСервисов.Период <= &ТекущаяДата
        |   И (СоглашенияСервисов.ДействуетПо > НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
        |           ИЛИ СоглашенияСервисов.ДействуетПо = &ПустаяДата)
        |   И СоглашенияСервисов.Сервис = &Сервис
        |   И СоглашенияСервисов.Период <= &МинимальнаяДата
        |   И (СоглашенияСервисов.Соглашение.ОбслуживающаяОрганизация = &ОбслуживающаяОрганизация
        |           ИЛИ СоглашенияСервисов.Соглашение.ОбслуживающаяОрганизация = &ПустаяОрганизация)
        |   И НЕ СоглашенияСервисов.Соглашение.ПометкаУдаления
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ПараметрыСоглашения.Ссылка КАК Соглашение,
        |   ПараметрыСоглашения.КлючПараметров КАК КлючПараметров,
        |   ПараметрыСоглашения.ВремяОбработки КАК ВремяОбработки,
        |   ПараметрыСоглашения.ВремяРеакции КАК ВремяРеакции,
        |   Обращение.Ссылка КАК Обращение,
        |   ПараметрыСоглашения.Ссылка.ИспользоватьЛиниюПоддержки,
        |   ПараметрыСоглашения.Ссылка.ИспользоватьСостояние,
        |   ПараметрыСоглашения.ЛинияПоддержки,
        |   ПараметрыСоглашения.СостояниеОбращения,
        |   Соглашения.Период,
        |   Соглашения.Приоритет
        |ПОМЕСТИТЬ КлючиПараметров
        |ИЗ
        |   Документ.Обращение КАК Обращение
        |       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Соглашения.ПараметрыСоглашения КАК ПараметрыСоглашения
        |           ЛЕВОЕ СОЕДИНЕНИЕ Соглашения КАК Соглашения
        |           ПО ПараметрыСоглашения.Ссылка = Соглашения.Соглашение
        |       ПО (НЕ ПараметрыСоглашения.Ссылка.ИспользоватьВажность
        |               ИЛИ Обращение.Важность = ПараметрыСоглашения.Важность)
        |           И (НЕ ПараметрыСоглашения.Ссылка.ИспользоватьТипОбращения
        |               ИЛИ Обращение.ТипОбращения = ПараметрыСоглашения.ТипОбращения)
        |           И (НЕ ПараметрыСоглашения.Ссылка.ИспользоватьКомпонентСервиса
        |               ИЛИ Обращение.Компонент = ПараметрыСоглашения.КомпонентСервиса)
		//+ Котова А.Ю. 29.04.2019 ТЗ№ 74355 {
		 |           И (НЕ ПараметрыСоглашения.Ссылка.ИспользоватьАбонент
        |               ИЛИ Обращение.Абонент = ПараметрыСоглашения.Абонент)
        |           И (НЕ ПараметрыСоглашения.Ссылка.ИспользоватьПроект
        |               ИЛИ Обращение.Проект = ПараметрыСоглашения.Проект)
		//- Котова А.Ю. 29.04.2019 ТЗ№ 74355 }
        |           И (НЕ ПараметрыСоглашения.Ссылка.ИспользоватьЛиниюПоддержки
        |               ИЛИ Обращение.ЛинияПоддержки = ПараметрыСоглашения.ЛинияПоддержки)
        |           И (НЕ ПараметрыСоглашения.Ссылка.ИспользоватьСостояние
        |               ИЛИ Обращение.Состояние = ПараметрыСоглашения.СостояниеОбращения)
        |           И (НЕ ПараметрыСоглашения.Ссылка.ИспользоватьРаздел
        |               ИЛИ Обращение.Раздел = ПараметрыСоглашения.Раздел)
        |ГДЕ
        |   Обращение.Ссылка = &Обращение
        |   И ПараметрыСоглашения.Ссылка В
        |           (ВЫБРАТЬ
        |               Соглашения.Соглашение
        |           ИЗ
        |               Соглашения)
        |;
        |
		//+kruser 13.08.2019 90864
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(КлючиПараметров.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТ_ПриоритетыСоглашений
		|ИЗ
		|	КлючиПараметров КАК КлючиПараметров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиПараметров.Соглашение КАК Соглашение,
		|	КлючиПараметров.КлючПараметров КАК КлючПараметров,
		|	КлючиПараметров.ВремяОбработки КАК ВремяОбработки,
		|	КлючиПараметров.ВремяРеакции КАК ВремяРеакции,
		|	КлючиПараметров.Обращение КАК Обращение,
		|	КлючиПараметров.ИспользоватьЛиниюПоддержки КАК ИспользоватьЛиниюПоддержки,
		|	КлючиПараметров.ИспользоватьСостояние КАК ИспользоватьСостояние,
		|	КлючиПараметров.ЛинияПоддержки КАК ЛинияПоддержки,
		|	КлючиПараметров.СостояниеОбращения КАК СостояниеОбращения,
		|	КлючиПараметров.Период КАК Период,
		|	КлючиПараметров.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ КлючиПараметровСМинимальнымПриоритетом
		|ИЗ
		|	КлючиПараметров КАК КлючиПараметров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПриоритетыСоглашений КАК ВТ_ПриоритетыСоглашений
		|		ПО КлючиПараметров.Приоритет = ВТ_ПриоритетыСоглашений.Приоритет
		|;
		|
		//-kruser 13.08.2019 90864
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   КлючиПараметров.Соглашение,
        |   КлючиПараметров.ВремяОбработки,
        |   КлючиПараметров.ВремяРеакции,
        |   КлючиПараметров.КлючПараметров,
        |   КлючиПараметров.ИспользоватьЛиниюПоддержки,
        |   КлючиПараметров.ИспользоватьСостояние,
        |   КлючиПараметров.ЛинияПоддержки,
        |   КлючиПараметров.СостояниеОбращения,
        |   НЕ ТекущиеПараметрыДляКлюча.КлючПараметров ЕСТЬ NULL  КАК ЭтоТекущийКлюч,
        |   ЕСТЬNULL(ТекущиеПараметры.Период, &ТекущаяДата) КАК ДатаОтсчета,
        |   КлючиПараметров.Период,
        |   КлючиПараметров.Соглашение.ОбслуживающаяОрганизация КАК ОбслуживающаяОрганизация,
        |   КлючиПараметров.Приоритет
        |ИЗ
		//+kruser 13.08.2019 90864
		//|   КлючиПараметров КАК КлючиПараметров
		|   КлючиПараметровСМинимальнымПриоритетом КАК КлючиПараметров
		//-kruser 13.08.2019 90864
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиОбращенийПоСоглашениям.СрезПоследних КАК ТекущиеПараметрыДляКлюча
        |       ПО КлючиПараметров.Соглашение = ТекущиеПараметрыДляКлюча.Соглашение
        |           И КлючиПараметров.Обращение = ТекущиеПараметрыДляКлюча.Обращение
        |           И КлючиПараметров.КлючПараметров = ТекущиеПараметрыДляКлюча.КлючПараметров
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиОбращенийПоСоглашениям.СрезПоследних КАК ТекущиеПараметры
        |       ПО КлючиПараметров.Обращение = ТекущиеПараметры.Обращение
        |           И (ВЫБОР
        |               КОГДА КлючиПараметров.ИспользоватьЛиниюПоддержки
        |                   ТОГДА КлючиПараметров.ЛинияПоддержки = ТекущиеПараметры.ЛинияПоддержки
        |               ИНАЧЕ ИСТИНА
        |           КОНЕЦ)
        |           И (ВЫБОР
        |               КОГДА КлючиПараметров.ИспользоватьСостояние
        |                   ТОГДА КлючиПараметров.СостояниеОбращения = ТекущиеПараметры.СостояниеОбращения
        |               ИНАЧЕ ИСТИНА
        |           КОНЕЦ)";
	                                                             
	ЗапросПодходящихСоглашений.УстановитьПараметр("ТекущаяДата", ДатаЗаписи);
	ЗапросПодходящихСоглашений.УстановитьПараметр("Сервис", СвойстваОбращения.Сервис);
	ЗапросПодходящихСоглашений.УстановитьПараметр("Обращение", СвойстваОбращения.Ссылка);
	ЗапросПодходящихСоглашений.УстановитьПараметр("ПустаяДата", '00010101000000');
	ЗапросПодходящихСоглашений.УстановитьПараметр("МинимальнаяДата", НачалоДня(СвойстваОбращения.Дата));  // Минимальная дата регистрации соглашения
	ЗапросПодходящихСоглашений.УстановитьПараметр("ОбслуживающаяОрганизация", СвойстваОбращения.ОбслуживающаяОрганизация);
	ЗапросПодходящихСоглашений.УстановитьПараметр("ПустаяОрганизация", Справочники.ОбслуживающиеОрганизации.ПустаяСсылка());
	Результат = ЗапросПодходящихСоглашений.Выполнить();
	
	Если Результат.Пустой() Тогда
		// Обнулим сроки, если они установлены
		ТекущиеСроки = РегистрыСведений.СрокиОбращенийПоСоглашениям.ТекущиеСрокиОбращения(СвойстваОбращения.Ссылка);
		Если ТекущиеСроки.СрокРеакции <> '00010101' Или ТекущиеСроки.СрокОбработки <> '00010101' Тогда
			НоваяЗапись = РегистрыСведений.СрокиОбращенийПоСоглашениям.СоздатьМенеджерЗаписи();
			НоваяЗапись.Период = ДатаЗаписи;
			НоваяЗапись.Обращение = СвойстваОбращения.Ссылка;
			НоваяЗапись.ЛинияПоддержки = СвойстваОбращения.ЛинияПоддержки;
			НоваяЗапись.СостояниеОбращения = СвойстваОбращения.Состояние;
			НоваяЗапись.Записать();
		КонецЕсли; 
		Возврат;
	Иначе
		РегистрыСведений.ДлительностьОбработкиОбращений.ВыполнитьРасчет(ДатаЗаписи, СвойстваОбращения.Ссылка);
    КонецЕсли;
    
	ЗапросДлительности = Новый Запрос;
	ЗапросДлительности.Текст = 
		"ВЫБРАТЬ
        |   СУММА(ДлительностьОбработки.ДлительностьВРабочееВремя) КАК Длительность
        |ИЗ
        |   РегистрСведений.ДлительностьОбработкиОбращений КАК ДлительностьОбработки
        |ГДЕ
        |   (НЕ &ИспользоватьСостояниеОбращения
        |           ИЛИ ДлительностьОбработки.Состояние = &СостояниеОбращения)
        |   И (НЕ &ИспользоватьОбслуживающуюОрганизацию
        |           ИЛИ ДлительностьОбработки.ОбслуживающаяОрганизация = &ОбслуживающаяОрганизация)
        |   И (НЕ &ИспользоватьЛиниюПоддержки
        |           ИЛИ ДлительностьОбработки.ЛинияПоддержки = &ЛинияПоддержки)
        |   И ДлительностьОбработки.Период < &ДатаОтсчета
        |   И ДлительностьОбработки.Период > &ПоследняяДатаЗакрытия
        |   И ДлительностьОбработки.Обращение = &Обращение
        |   И ДлительностьОбработки.Состояние <> &СостояниеОжидание";
	
	ЗапросДлительности.УстановитьПараметр("ПоследняяДатаЗакрытия", Документы.Обращение.ПоследняяДатаЗакрытия(СвойстваОбращения.Ссылка));
	ЗапросДлительности.УстановитьПараметр("Обращение", СвойстваОбращения.Ссылка);
	ЗапросДлительности.УстановитьПараметр("СостояниеОжидание", Перечисления.СостоянияОбращений.ОжиданиеИнициатора);
    
    ЗапросОжидания = Новый Запрос;
	ЗапросОжидания.Текст = 
		"ВЫБРАТЬ
        |   ЕСТЬNULL(СУММА(ДлительностьОбработки.ДлительностьВРабочееВремя), 0) КАК Длительность
        |ИЗ
        |   РегистрСведений.ДлительностьОбработкиОбращений КАК ДлительностьОбработки
        |ГДЕ
        |   (НЕ &ИспользоватьСостояниеОбращения
        |           ИЛИ ДлительностьОбработки.Состояние = &СостояниеОбращения)
        |   И (НЕ &ИспользоватьОбслуживающуюОрганизацию
        |           ИЛИ ДлительностьОбработки.ОбслуживающаяОрганизация = &ОбслуживающаяОрганизация)
        |   И (НЕ &ИспользоватьЛиниюПоддержки
        |           ИЛИ ДлительностьОбработки.ЛинияПоддержки = &ЛинияПоддержки)
        |   И ДлительностьОбработки.Период >= &ДатаОтсчета
        |   И ДлительностьОбработки.Период > &ПоследняяДатаЗакрытия
        |   И ДлительностьОбработки.Обращение = &Обращение
        |   И ДлительностьОбработки.Состояние = &СостояниеОжидание";
	
	ЗапросОжидания.УстановитьПараметр("ПоследняяДатаЗакрытия", Документы.Обращение.ПоследняяДатаЗакрытия(СвойстваОбращения.Ссылка));
	ЗапросОжидания.УстановитьПараметр("Обращение", СвойстваОбращения.Ссылка);
	ЗапросОжидания.УстановитьПараметр("СостояниеОжидание", Перечисления.СостоянияОбращений.ОжиданиеИнициатора);
    
	ПодходящиеКлючиСоглашений = Результат.Выгрузить();
	ПодходящиеКлючиСоглашений.Колонки.Добавить("ЗатратыДоДатыРасчета", ОбщегоНазначения.ОписаниеТипаЧисло(15,0));
	ПодходящиеКлючиСоглашений.Колонки.Добавить("СрокОбработки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваОбращения.ОбслуживающаяОрганизация, "ГрафикРаботы, ЧасовойПояс");
	СвойстваЛинии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваОбращения.ЛинияПоддержки, "ГрафикРаботы, ЧасовойПояс");
	
	ГрафикРаботы = ?(ЗначениеЗаполнено(СвойстваЛинии.ГрафикРаботы), СвойстваЛинии.ГрафикРаботы, СвойстваОрганизации.ГрафикРаботы);
	ЧасовойПояс = ?(ЗначениеЗаполнено(СвойстваЛинии.ЧасовойПояс), СвойстваЛинии.ЧасовойПояс, СвойстваОрганизации.ЧасовойПояс);
    
    Если Не ЗначениеЗаполнено(ЧасовойПояс) Тогда
        ЧасовойПояс = ПолучитьЧасовойПоясИнформационнойБазы();
    КонецЕсли;
	
	Для каждого ДанныеКлюча Из ПодходящиеКлючиСоглашений Цикл
		
		ЗапросДлительности.УстановитьПараметр("ИспользоватьОбслуживающуюОрганизацию", ЗначениеЗаполнено(ДанныеКлюча.ОбслуживающаяОрганизация));
		ЗапросДлительности.УстановитьПараметр("ИспользоватьЛиниюПоддержки", ДанныеКлюча.ИспользоватьЛиниюПоддержки);
		ЗапросДлительности.УстановитьПараметр("ИспользоватьСостояниеОбращения", ДанныеКлюча.ИспользоватьСостояние);
		ЗапросДлительности.УстановитьПараметр("ОбслуживающаяОрганизация", ДанныеКлюча.ОбслуживающаяОрганизация);
		ЗапросДлительности.УстановитьПараметр("ЛинияПоддержки", ДанныеКлюча.ЛинияПоддержки);
		ЗапросДлительности.УстановитьПараметр("СостояниеОбращения", ДанныеКлюча.СостояниеОбращения);
		ЗапросДлительности.УстановитьПараметр("ДатаОтсчета", ДанныеКлюча.ДатаОтсчета);
		ЗапросОжидания.УстановитьПараметр("ИспользоватьОбслуживающуюОрганизацию", ЗначениеЗаполнено(ДанныеКлюча.ОбслуживающаяОрганизация));
		ЗапросОжидания.УстановитьПараметр("ИспользоватьЛиниюПоддержки", ДанныеКлюча.ИспользоватьЛиниюПоддержки);
		ЗапросОжидания.УстановитьПараметр("ИспользоватьСостояниеОбращения", ДанныеКлюча.ИспользоватьСостояние);
		ЗапросОжидания.УстановитьПараметр("ОбслуживающаяОрганизация", ДанныеКлюча.ОбслуживающаяОрганизация);
		ЗапросОжидания.УстановитьПараметр("ЛинияПоддержки", ДанныеКлюча.ЛинияПоддержки);
		ЗапросОжидания.УстановитьПараметр("СостояниеОбращения", ДанныеКлюча.СостояниеОбращения);
		ЗапросОжидания.УстановитьПараметр("ДатаОтсчета", ДанныеКлюча.ДатаОтсчета);
		
		РезультатПоДлительности = ЗапросДлительности.Выполнить();
		Если РезультатПоДлительности.Пустой() Тогда
			ДанныеКлюча.ЗатратыДоДатыРасчета = 0;
		Иначе
			ДанныеКлюча.ЗатратыДоДатыРасчета = РезультатПоДлительности.Выгрузить()[0].Длительность
		КонецЕсли;
        
		РезультатПоОжиданию = ЗапросОжидания.Выполнить();
		Если РезультатПоОжиданию.Пустой() Тогда
			ДлительностьОжидания = 0;
		Иначе
			ДлительностьОжидания = РезультатПоОжиданию.Выгрузить()[0].Длительность
		КонецЕсли;
        
		ДанныеКлюча.СрокОбработки = УниверсальноеВремя(СрокСУчетомГрафикаРаботы(ГрафикРаботы, 
			?(ЗначениеЗаполнено(ЧасовойПояс), МестноеВремя(ДанныеКлюча.ДатаОтсчета, ЧасовойПояс), МестноеВремя(ДанныеКлюча.ДатаОтсчета)), 
			ДанныеКлюча.ВремяОбработки * 3600 - ДанныеКлюча.ЗатратыДоДатыРасчета, ДлительностьОжидания), ЧасовойПояс);
		
	КонецЦикла; 
	
	ПодходящиеКлючиСоглашений.Сортировать("СрокОбработки, ЭтоТекущийКлюч УБЫВ");
	ПодходящийКлюч = ПодходящиеКлючиСоглашений[0];
	
	Если Принудительно Или (Не ПодходящийКлюч.ЭтоТекущийКлюч) Тогда
		
		НоваяЗапись = РегистрыСведений.СрокиОбращенийПоСоглашениям.СоздатьМенеджерЗаписи();
		НоваяЗапись.Период = ПодходящийКлюч.ДатаОтсчета;
		НоваяЗапись.Соглашение = ПодходящийКлюч.Соглашение;
		НоваяЗапись.КлючПараметров = ПодходящийКлюч.КлючПараметров;
		НоваяЗапись.СрокОбработки = ПодходящийКлюч.СрокОбработки;
		Если НоваяЗапись.СрокОбработки < ТекущаяУниверсальнаяДата() Тогда
			НоваяЗапись.СрокОбработкиСорван = Истина;
		КонецЕсли;
		
		НоваяЗапись.ЗатратыДоДатыРасчета = ПодходящийКлюч.ЗатратыДоДатыРасчета;
		
		НоваяЗапись.Обращение = СвойстваОбращения.Ссылка;
		НоваяЗапись.ЛинияПоддержки = СвойстваОбращения.ЛинияПоддержки;
		НоваяЗапись.СостояниеОбращения = СвойстваОбращения.Состояние;
		
		Если ТипЗнч(СвойстваОбращения.Исполнитель) = Тип("СправочникСсылка.ЛинииПоддержки") Тогда
			НоваяЗапись.СрокРеакции = УниверсальноеВремя(СрокСУчетомГрафикаРаботы(
				ГрафикРаботы, МестноеВремя(ДатаЗаписи, ЧасовойПояс), ПодходящийКлюч.ВремяРеакции * 3600), ЧасовойПояс);
		КонецЕсли; 
		
		НоваяЗапись.Записать();
		
		Если НоваяЗапись.СрокОбработки < ДатаЗаписи И Не ЭтоПереоткрытие Тогда
			РегистрыСведений.ДлительностьОбработкиОбращений.ВыполнитьРасчет(НоваяЗапись.СрокОбработки, СвойстваОбращения.Ссылка);
		КонецЕсли;
		
		Если Не ПодходящийКлюч.ЭтоТекущийКлюч Тогда
			РегистрыСведений.ОтправленныеОповещенияПоСоглашениям.УдалитьОповещенияПоОбращению(СвойстваОбращения.Ссылка);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает срок с учетом графика работы.
//
// Параметры:
//  ГрафикРаботы	 - СправочникСсылка.Календари - график работы для расчета срока.
//  ДатаОтсчета		 - Дата - дата, от которой выполняется расчет срока.
//  ВремяОбработки	 - Число - время в секундах.
// 
// Возвращаемое значение:
//  Дата - срок с учетом графика работы. 
//
Функция СрокСУчетомГрафикаРаботы(Календарь, ДатаОтсчета, ВремяОбработки, РабочееВремяОжидания = 0) Экспорт
	
	Календари = новый Массив;
	Календари.Добавить(Календарь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РасписаниеДня = ГрафикиРаботы.РасписанияРаботыНаПериод(Календари, НачалоДня(ДатаОтсчета), КонецДня(ДатаОтсчета));
	ОбщееВремяСНачалаДня = Час(ДатаОтсчета)*3600 + Минута(ДатаОтсчета)*60 + Секунда(ДатаОтсчета);
	РабочееВремяСНачалаДня = РегистрыСведений.ДлительностьОбработкиОбращений.РабочееВремяПоДлительности(РасписаниеДня, ОбщееВремяСНачалаДня, 0); 
	
	ГрафикиРаботы.СоздатьВТРасписанияРаботыНаПериод(Запрос.МенеджерВременныхТаблиц, Календари, НачалоДня(ДатаОтсчета), '39991231');
    
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДОБАВИТЬКДАТЕ(ДатыГрафика1.ДатаГрафика, 
		|				  СЕКУНДА,
		|				  РАЗНОСТЬДАТ(&ПустаяДата, 
		|				              МАКСИМУМ(ДатыГрафика1.ВремяНачала),
		|				              СЕКУНДА) 
		|				  + &ВремяОбработки 
		|				  - СУММА(РАЗНОСТЬДАТ(ЕСТЬNULL(ДатыГрафика2.ВремяНачала, &ПустаяДата),
		|				                      ЕСТЬNULL(ДатыГрафика2.ВремяОкончания, &ПустаяДата),
		|				                      СЕКУНДА))) КАК Срок
		|ИЗ
		|	ВТРасписанияРаботы КАК ДатыГрафика1
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписанияРаботы КАК ДатыГрафика2
		|		ПО (ДатыГрафика2.ДатаГрафика < ДатыГрафика1.ДатаГрафика
		|				ИЛИ ДатыГрафика2.ДатаГрафика = ДатыГрафика1.ДатаГрафика
		|					И ДатыГрафика2.ВремяНачала < ДатыГрафика1.ВремяНачала)
		|СГРУППИРОВАТЬ ПО
		|	ДатыГрафика1.ДатаГрафика,
		|	ДатыГрафика1.ВремяНачала
		|ИМЕЮЩИЕ
		|	СУММА(РАЗНОСТЬДАТ(ЕСТЬNULL(ДатыГрафика2.ВремяНачала, &ПустаяДата),
		|					  ЕСТЬNULL(ДатыГрафика2.ВремяОкончания, &ПустаяДата),
		|					  СЕКУНДА)) 
		|		  + МАКСИМУМ(РАЗНОСТЬДАТ(ДатыГрафика1.ВремяНачала,
		|		  						 ДатыГрафика1.ВремяОкончания,
		|								 СЕКУНДА)) >= &ВремяОбработки
		|УПОРЯДОЧИТЬ ПО
		|	ДатыГрафика1.ДатаГрафика";
		
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаОтсчета", МестноеВремя(ДатаОтсчета));
	Запрос.УстановитьПараметр("ДатаОтсчетаНачалоДня", НачалоДня(ДатаОтсчета));
	Запрос.УстановитьПараметр("ВремяОбработки", ВремяОбработки + РабочееВремяСНачалаДня + РабочееВремяОжидания);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Срок;
	Иначе
		ВызватьИсключение НСтр(СтрШаблон("ru='Не хватило данных рабочего графика ""%1"". Заполните график работы для расчета сроков.'", Календарь)); 
	КонецЕсли
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик регламентного задания КонтрольСроковОбращенийПоСоглашениям
//
Процедура КонтрольСроковОбращенийПоСоглашениям() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашения") Тогда
		Возврат;
	КонецЕсли; 
	
	КэшПолучателейПеренаправлений = Новый Соответствие;
	
	 // Контроль сроков реакции
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сроки.Период,
		|	Сроки.Обращение,
		|	Сроки.Обращение.Исполнитель КАК Исполнитель,
		|	Сроки.Соглашение,
		|	Сроки.КлючПараметров,
		|	Сроки.ЛинияПоддержки,
		|	Сроки.СостояниеОбращения,
		|	Сроки.СрокРеакции,
		|	Сроки.СрокОбработки,
		|	Сроки.СрокОбработкиСорван
		|ИЗ
		|	РегистрСведений.СрокиОбращенийПоСоглашениям.СрезПоследних КАК Сроки
		|ГДЕ
		|	Сроки.СрокРеакцииСорван = ЛОЖЬ
		|	И Сроки.Обращение.Состояние <> &СостояниеЗакрыто
		|	И Сроки.СрокРеакции <= &КонтрольнаяДата
		|	И Сроки.СрокРеакции <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И НЕ Сроки.Обращение.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("СостояниеЗакрыто", Перечисления.СостоянияОбращений.Закрыто);
	Запрос.УстановитьПараметр("КонтрольнаяДата", УниверсальноеВремя(ТекущаяДата(), ПолучитьЧасовойПоясИнформационнойБазы()));
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Менеджер = РегистрыСведений.СрокиОбращенийПоСоглашениям.СоздатьМенеджерЗаписи();
		Менеджер.Период = Выборка.Период;
		Менеджер.Обращение = Выборка.Обращение;
		Менеджер.Соглашение = Выборка.Соглашение;
		Менеджер.КлючПараметров = Выборка.КлючПараметров;
		Менеджер.ЛинияПоддержки = Выборка.ЛинияПоддержки;
		Менеджер.СостояниеОбращения = Выборка.СостояниеОбращения;
		Менеджер.СрокРеакции = Выборка.СрокРеакции;
		Менеджер.СрокРеакцииСорван = Истина;
		Менеджер.СрокОбработки = Выборка.СрокОбработки;
		Менеджер.СрокОбработкиСорван = Выборка.СрокОбработкиСорван;
		Менеджер.Записать();
		
		ВидСобытия = Справочники.ВидыБизнесСобытий.СорванСрокРеакции;
		
		ДанныеКонтекста = Новый Структура;
		ДанныеКонтекста.Вставить("Исполнитель", Выборка.Исполнитель);
		ДанныеКонтекста.Вставить("Состояние", Выборка.СостояниеОбращения);
		ДанныеКонтекста.Вставить("СрокРеакции", Выборка.СрокРеакции);
		
		КонтекстСобытия = БизнесСобытия.СформироватьКонтекстСобытия(ДанныеКонтекста);
		
		СекундДоМестногоВремени = ТекущаяДата() - УниверсальноеВремя(ТекущаяДата());
		МестноеВремяСрокаПредупреждения = Выборка.СрокРеакции + СекундДоМестногоВремени;
		ПредставлениеСрокаПредупреждения =  ОбщегоНазначенияУСП.ПредставлениеМестногоВремениСПоправкойНаУниверсальное(МестноеВремяСрокаПредупреждения);
		
		БизнесСобытия.ЗарегистрироватьСобытие(
			Выборка.Обращение,  
			Справочники.ВидыБизнесСобытий.СорванСрокРеакции,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1
					|Исполнитель: %2
					|Состояние: %3
					|Срок реакции: %4'"), 
		//{Рарус kruser 2018.12.25 77539
				//Строка(ВидСобытия), Выборка.Исполнитель, Выборка.СостояниеОбращения, Выборка.СрокРеакции));
				Строка(ВидСобытия), Выборка.Исполнитель, Выборка.СостояниеОбращения, МестноеВремяСрокаПредупреждения));
		//}Рарус kruser 2018.12.25 77539
		
		ВыполнитьПеренаправленияПоКлючуПараметров(Выборка.Обращение, Выборка.КлючПараметров, 
			Перечисления.ТипыСрывовСроков.СрывСрокаРеакции, КэшПолучателейПеренаправлений);

	КонецЦикла;
	
	// Контроль сроков обработки
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сроки.Период,
		|	Сроки.Обращение,
		|	Сроки.Обращение.Исполнитель КАК Исполнитель,
		|	Сроки.Соглашение,
		|	Сроки.КлючПараметров,
		|	Сроки.ЛинияПоддержки,
		|	Сроки.СостояниеОбращения,
		|	Сроки.СрокРеакции,
		|	Сроки.СрокРеакцииСорван,
		|	Сроки.СрокОбработки
		|ИЗ
		|	РегистрСведений.СрокиОбращенийПоСоглашениям.СрезПоследних КАК Сроки
		|ГДЕ
		|	Сроки.СрокОбработкиСорван = ЛОЖЬ
		|	И Сроки.Обращение.Состояние <> &СостояниеЗакрыто
		|	И Сроки.СрокОбработки <= &КонтрольнаяДата
		|	И Сроки.СрокОбработки <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И НЕ Сроки.Обращение.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("СостояниеЗакрыто", Перечисления.СостоянияОбращений.Закрыто);
	Запрос.УстановитьПараметр("КонтрольнаяДата", УниверсальноеВремя(ТекущаяДата(), ПолучитьЧасовойПоясИнформационнойБазы()));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Менеджер = РегистрыСведений.СрокиОбращенийПоСоглашениям.СоздатьМенеджерЗаписи();
		Менеджер.Период = Выборка.Период;
		Менеджер.Обращение = Выборка.Обращение;
		Менеджер.Соглашение = Выборка.Соглашение;
		Менеджер.КлючПараметров = Выборка.КлючПараметров;
		Менеджер.ЛинияПоддержки = Выборка.ЛинияПоддержки;
		Менеджер.СостояниеОбращения = Выборка.СостояниеОбращения;
		Менеджер.СрокРеакции = Выборка.СрокРеакции;
		Менеджер.СрокРеакцииСорван = Выборка.СрокРеакцииСорван;
		Менеджер.СрокОбработки = Выборка.СрокОбработки;
		Менеджер.СрокОбработкиСорван = Истина;
		Менеджер.Записать();
		
		ВыполнитьПеренаправленияПоКлючуПараметров(Выборка.Обращение, Выборка.КлючПараметров, 
			Перечисления.ТипыСрывовСроков.СрывСрокаОбработки, КэшПолучателейПеренаправлений);
		
		ВидСобытия = Справочники.ВидыБизнесСобытий.СорванСрокОбработки;
		
		ДанныеКонтекста = Новый Структура;
		ДанныеКонтекста.Вставить("Исполнитель", Выборка.Исполнитель);
		ДанныеКонтекста.Вставить("Состояние", Выборка.СостояниеОбращения);
		ДанныеКонтекста.Вставить("СрокОбработки", Выборка.СрокОбработки);
		
		КонтекстСобытия = БизнесСобытия.СформироватьКонтекстСобытия(ДанныеКонтекста);
		
		СекундДоМестногоВремени = ТекущаяДата() - УниверсальноеВремя(ТекущаяДата());
		МестноеВремяСрока = Выборка.СрокОбработки + СекундДоМестногоВремени;
		ПредставлениеСрока =  ОбщегоНазначенияУСП.ПредставлениеМестногоВремениСПоправкойНаУниверсальное(МестноеВремяСрока);
		
		БизнесСобытия.ЗарегистрироватьСобытие(
			Выборка.Обращение,  
			Справочники.ВидыБизнесСобытий.СорванСрокОбработки,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1
					|Исполнитель: %2
					|Состояние: %3
					|Срок обработки: %4'"), 
				//{Рарус kruser 2018.12.25 77539
				//Строка(ВидСобытия), Выборка.Исполнитель, Выборка.СостояниеОбращения, Выборка.СрокОбработки)); 
				Строка(ВидСобытия), Выборка.Исполнитель, Выборка.СостояниеОбращения, МестноеВремяСрока)); 
		        //}Рарус kruser 2018.12.25 77539
				
	КонецЦикла; 
	
КонецПроцедуры

// Обработчик регламентного задания ОтправкаОповещенийПоСоглашениям
//
Процедура ОтправкаОповещенийПоСоглашениям() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	МоментОтправкиОповещений = ТекущаяУниверсальнаяДата();
    
    ИмяСобытия = НСтр("ru='Оповещение о сроках обработки обращения'");
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашения") Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сроки.Обращение,
		|	Сроки.Соглашение,
		|	Сроки.КлючПараметров,
		|	Оповещения.КлючОповещения,
		|	Сроки.СрокОбработки,
		|	ВЫБОР
		|		КОГДА Оповещения.Получатель ССЫЛКА Перечисление.ВыраженияПолучателей
		|			ТОГДА ВЫБОР
		|					КОГДА Оповещения.Получатель = &Исполнитель
		|						ТОГДА Сроки.Обращение.Исполнитель
		|					КОГДА Оповещения.Получатель = &РуководительЛинииПоддержки
		|						ТОГДА Сроки.Обращение.ЛинияПоддержки.Руководитель
		|					КОГДА Оповещения.Получатель = &ПерваяЛинияПоддержки
		|						ТОГДА Сроки.Обращение.ОбслуживающаяОрганизация.ПерваяЛинияПоддержки
		|					КОГДА Оповещения.Получатель = &ЛинияПоддержкиИсполнителя
		|						ТОГДА Сроки.Обращение.ЛинияПоддержки
		|				КОНЕЦ
		|		ИНАЧЕ Оповещения.Получатель
		|	КОНЕЦ КАК Получатель,
		|	Сроки.СрокРеакцииСорван,
		|	Сроки.СрокОбработкиСорван
		|ПОМЕСТИТЬ ВсеОповещения
		|ИЗ
		|	РегистрСведений.СрокиОбращенийПоСоглашениям.СрезПоследних(, ) КАК Сроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Соглашения.Оповещения КАК Оповещения
		|		ПО Сроки.Соглашение = Оповещения.Ссылка
		|			И Сроки.КлючПараметров = Оповещения.КлючПараметров
		|ГДЕ
		|	Сроки.Обращение.Состояние <> &СостояниеЗакрыто
		|	И НЕ Сроки.Обращение.ПометкаУдаления
		|	И НЕ Сроки.Соглашение.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА Оповещения.ТипСрываСроков = &СрывСрокаРеакции
		|				ТОГДА ДОБАВИТЬКДАТЕ(Сроки.СрокРеакции, ЧАС, Оповещения.ВремяОповещения) <= &ТекущаяУниверсальнаяДата
		|			КОГДА Оповещения.ТипСрываСроков = &СрывСрокаОбработки
		|				ТОГДА ДОБАВИТЬКДАТЕ(Сроки.СрокОбработки, ЧАС, Оповещения.ВремяОповещения) <= &ТекущаяУниверсальнаяДата
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеОповещения.Обращение КАК Обращение,
		|	ВсеОповещения.Соглашение,
		|	ВсеОповещения.КлючПараметров КАК КлючПараметров,
		|	ВсеОповещения.КлючОповещения,
		|	ВсеОповещения.Получатель КАК Получатель,
		|	ВсеОповещения.Обращение.ОбслуживающаяОрганизация КАК ОбслуживающаяОрганизация,
		|	ВсеОповещения.Обращение.ЛинияПоддержки КАК ЛинияПоддержки,
		|	ВсеОповещения.Обращение.Исполнитель КАК Исполнитель,
		|	ВсеОповещения.СрокОбработки КАК СрокОбработки,
		|	ВсеОповещения.СрокРеакцииСорван КАК СрокРеакцииСорван,
		|	ВсеОповещения.СрокОбработкиСорван КАК СрокОбработкиСорван,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВсеОповещения.СрокОбработки, &ПустаяДата) = &ПустаяДата
		|			ТОГДА 0
		|		ИНАЧЕ РАЗНОСТЬДАТ(ВсеОповещения.СрокОбработки, &ТекущаяУниверсальнаяДата, СЕКУНДА)
		|	КОНЕЦ КАК СрокВСекундах,
		|	ПОДСТРОКА(ВсеОповещения.Обращение.Описание, 1, 500) КАК Описание
		|ИЗ
		|	ВсеОповещения КАК ВсеОповещения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтправленныеОповещенияПоСоглашениям КАК ОтправленныеОповещения
		|		ПО ВсеОповещения.Обращение = ОтправленныеОповещения.Обращение
		|			И ВсеОповещения.Соглашение = ОтправленныеОповещения.Соглашение
		|			И ВсеОповещения.КлючПараметров = ОтправленныеОповещения.КлючПараметров
		|			И ВсеОповещения.КлючОповещения = ОтправленныеОповещения.КлючОповещения
		|ГДЕ
		|	ОтправленныеОповещения.Обращение ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеОповещения.Получатель,
		|	ВсеОповещения.Обращение,
		|	ВсеОповещения.КлючПараметров,
		|	ВсеОповещения.КлючОповещения,
		|	ВсеОповещения.Соглашение,
		|	ВсеОповещения.Обращение.ОбслуживающаяОрганизация,
		|	ВсеОповещения.Обращение.ЛинияПоддержки,
		|	ВсеОповещения.Обращение.Исполнитель,
		|	ВсеОповещения.СрокОбработки,
		|	ВсеОповещения.СрокОбработкиСорван,
		|	ВсеОповещения.СрокРеакцииСорван,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВсеОповещения.СрокОбработки, &ПустаяДата) = &ПустаяДата
		|			ТОГДА 0
		|		ИНАЧЕ РАЗНОСТЬДАТ(ВсеОповещения.СрокОбработки, &ТекущаяУниверсальнаяДата, СЕКУНДА)
		|	КОНЕЦ,
		|	ПОДСТРОКА(ВсеОповещения.Обращение.Описание, 1, 500)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СрокОбработки
		|ИТОГИ
		|	МАКСИМУМ(КлючПараметров),
		|	МАКСИМУМ(ОбслуживающаяОрганизация),
		|	МАКСИМУМ(ЛинияПоддержки),
		|	МАКСИМУМ(Исполнитель),
		|	МАКСИМУМ(СрокОбработки),
		|	МАКСИМУМ(СрокРеакцииСорван),
		|	МАКСИМУМ(СрокОбработкиСорван),
		|	МАКСИМУМ(СрокВСекундах),
		|	МАКСИМУМ(Описание)
		|ПО
		|	Получатель,
		|	Обращение";                      
		
	Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", МоментОтправкиОповещений);
	Запрос.УстановитьПараметр("СостояниеЗакрыто", Перечисления.СостоянияОбращений.Закрыто);
	Запрос.УстановитьПараметр("Исполнитель", Перечисления.ВыраженияПолучателей.Исполнитель);
	Запрос.УстановитьПараметр("РуководительЛинииПоддержки", Перечисления.ВыраженияПолучателей.РуководительЛинииПоддержки);
	Запрос.УстановитьПараметр("ПерваяЛинияПоддержки", Перечисления.ВыраженияПолучателей.ПерваяЛинияПоддержки);
	Запрос.УстановитьПараметр("ЛинияПоддержкиИсполнителя", Перечисления.ВыраженияПолучателей.ЛинияПоддержкиИсполнителя);
	Запрос.УстановитьПараметр("СрывСрокаОбработки", Перечисления.ТипыСрывовСроков.СрывСрокаОбработки);
	Запрос.УстановитьПараметр("СрывСрокаРеакции", Перечисления.ТипыСрывовСроков.СрывСрокаРеакции);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	ВыборкаПолучатель = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТекстПредупреждения = РаботаСУведомлениями.ТекстПредупрежденияОбАвтоматическойОтправке();

	Пока ВыборкаПолучатель.Следующий() Цикл
		
		Если ТипЗнч(ВыборкаПолучатель.Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
			АдресаПользователя = КонтактнаяИнформацияУСП.ВсеЭлектронныеАдресаПользователя(ВыборкаПолучатель.Получатель);
		Иначе
			АдресаПользователя = КонтактнаяИнформацияУСП.ВсеЭлектронныеАдресаЛинииПоддержки(ВыборкаПолучатель.Получатель);
		КонецЕсли;
		
		ЧасовойПоясПолучателя = ЧасовойПоясПолучателя(ВыборкаПолучатель.Получатель);
		ПредставлениеСмещения = ОбщегоНазначенияУСПКлиентСервер.ПредставлениеСмещенияВремени(
			МестноеВремя(МоментОтправкиОповещений,ЧасовойПоясПолучателя) - МоментОтправкиОповещений);
		
		
		АдресаЭлектроннойПочты = Новый Массив;
		Для каждого АдресПользователя Из АдресаПользователя Цикл
			АдресаЭлектроннойПочты.Добавить(АдресПользователя.Адрес);
		КонецЦикла; 
		
		Если АдресаЭлектроннойПочты.Количество() = 0 Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Оповещение ""%1"" не отправлено, так как не указан почтовый адрес у получателя ""%2"".'"), 
				ИмяСобытия, Строка(ВыборкаПолучатель.Получатель));
			ЗаписьЖурналаРегистрации(
				СтрШаблон(НСтр("ru='%1.%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
                    СобытиеЖурналаРегистрации(), ИмяСобытия),
				УровеньЖурналаРегистрации.Предупреждение,,, ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		КоличествоОповещений = 0;
		ТекстПисьма = "";
		ВыборкаОбращения = ВыборкаПолучатель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ОповещенияДляОтправки = Новый Массив;
		
		Пока ВыборкаОбращения.Следующий() Цикл
			
			КоличествоОповещений = КоличествоОповещений + 1;
			
			НавигационнаяСсылкаНаОбращение = ?(РаботаСУведомлениямиПовтИсп.ИспользоватьАдресПубликацииПриложенияВУведомлениях(),
				РаботаСУведомлениямиПовтИсп.АдресПубликацииИнформационнойБазыВИнтернете() + "#" + ПолучитьНавигационнуюСсылку(ВыборкаОбращения.Обращение),
				ПолучитьНавигационнуюСсылку(ВыборкаОбращения.Обращение));
				
			ТекстАдресации = СтрШаблон(НСтр("ru='Исполнитель: %1<br>'"), ОбщегоНазначенияУСПКлиентСервер.ОписаниеИсполнителя(
				ВыборкаОбращения.ОбслуживающаяОрганизация, ВыборкаОбращения.ЛинияПоддержки, ВыборкаОбращения.Исполнитель));
				
			Описание = ?(ПустаяСтрока(СокрЛП(ВыборкаОбращения.Описание)), "", 
				"<br><blockquote>"+ СтрЗаменить(СокрЛП(ВыборкаОбращения.Описание), Символы.ПС, "<br>")+"..."+"</blockquote>");
			Если ВыборкаОбращения.СрокОбработки < МоментОтправкиОповещений Тогда
				ТекстПисьма = ТекстПисьма + СтрШаблон(
					НСтр("ru='<div class=""panel panel-danger""><div class=""panel-heading-danger"">
						 |<h3 class=""panel-title"">Просрочено: <a href=""%2"">%1</a></h3></div>
						 |<div class=""panel-body"">
						 |<b>Срок обработки: %3 (%6)</b><br>
						 |Просрочено на: %4<br>
						 |%5
						 |%7</div></div>'"),
					Строка(ВыборкаОбращения.Обращение),
					НавигационнаяСсылкаНаОбращение,
					Формат(МестноеВремя(ВыборкаОбращения.СрокОбработки, ЧасовойПоясПолучателя),"ДФ='dd.MM.yyyy HH:mm'"),
					ОбщегоНазначенияУСПКлиентСервер.ДниЧасыМинуты(ВыборкаОбращения.СрокВСекундах),
					ТекстАдресации,
					ПредставлениеСмещения, 
					Описание);
			ИначеЕсли ВыборкаОбращения.СрокРеакцииСорван = Истина Тогда
				ТекстПисьма = ТекстПисьма + СтрШаблон(
					НСтр("ru='<div class=""panel panel-warning""><div class=""panel-heading-warning"">
						 |<h3 class=""panel-title"">Отсутствует реакция: <a href=""%2"">%1</a></h3></div>
						 |<div class=""panel-body"">
						 |<b>Срок обработки: %3 (%6)</b><br>
						 |Осталось на обработку: %4<br>
						 |%5
						 |%7</div></div>'"),
					Строка(ВыборкаОбращения.Обращение),
					НавигационнаяСсылкаНаОбращение,
					Формат(МестноеВремя(ВыборкаОбращения.СрокОбработки, ЧасовойПоясПолучателя),"ДФ='dd.MM.yyyy HH:mm'"),
					ОбщегоНазначенияУСПКлиентСервер.ДниЧасыМинуты(-ВыборкаОбращения.СрокВСекундах),
					ТекстАдресации,
					ПредставлениеСмещения, 
					Описание);
			Иначе
				ТекстПисьма = ТекстПисьма + СтрШаблон(
					НСтр("ru='<div class=""panel panel-success""><div class=""panel-heading-success"">
						 |<h3 class=""panel-title"">Подходит срок: <a href=""%2"">%1</a></h3></div>
						 |<div class=""panel-body"">
						 |<b>Срок обработки: %3 (%6)</b><br>
						 |Осталось на обработку: %4<br>
						 |%5
						 |%7</div></div>'"),
					Строка(ВыборкаОбращения.Обращение),
					НавигационнаяСсылкаНаОбращение,
					Формат(МестноеВремя(ВыборкаОбращения.СрокОбработки, ЧасовойПоясПолучателя),"ДФ='dd.MM.yyyy HH:mm'"),
					ОбщегоНазначенияУСПКлиентСервер.ДниЧасыМинуты(-ВыборкаОбращения.СрокВСекундах),
					ТекстАдресации,
					ПредставлениеСмещения, 
					Описание);
			КонецЕсли;
			
			ВыборкаОповещения = ВыборкаОбращения.Выбрать();
			Пока ВыборкаОповещения.Следующий() Цикл
				Оповещение = Новый Структура("Обращение, Соглашение, КлючПараметров, КлючОповещения, Получатель");
				ЗаполнитьЗначенияСвойств(Оповещение, ВыборкаОповещения);
				ОповещенияДляОтправки.Добавить(Оповещение);
			КонецЦикла; 
				
		КонецЦикла; 
		
		Если КоличествоОповещений = 1 Тогда
			ТемаПисьма = НСтр("ru='Оповещение по срокам обращений'")
		Иначе
			ТемаПисьма = СтрШаблон(НСтр("ru='Оповещения по срокам обращений (%1)'"), Формат(КоличествоОповещений,"ЧГ=0"));
		КонецЕсли;
		
		ОбщегоНазначенияУСП.ЗаменитьКлассыОтображенияНаСтилиHTML(ТекстПисьма);
		
		ТекстПисьма = "<html lang=""ru""><head style=""font-family: sans-serif;-webkit-text-size-adjust: 100%;"
                    + "-ms-text-size-adjust: 100%;font-size: 10px;-webkit-tap-highlight-color: rgba(0,0,0,0);""><meta charset=""UTF-8"">" 
                    + "</head><body style=""font-family: Helvetica Neue,Helvetica,Arial,sans-serif;font-size: 14px;line-height: 1.42857143;"
                    + "color: #333;background-color: #fff;"">" + ТекстПисьма + "<footer style=""display: block;"">" 
                    + СтрЗаменить(ТекстПредупреждения, Символы.ПС, "<br>") + "</footer></body></html>";
		
		Для Каждого ПочтовыйАдресПолучателя Из АдресаЭлектроннойПочты Цикл
			
			Попытка
				
				ПараметрыПисьма = Новый Структура;
				ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
				ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
				ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
				ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
				
				СообщениеОбОшибке = "";
				
				РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), ПараметрыПисьма);
				
				Для каждого Оповещение Из ОповещенияДляОтправки Цикл
					РегистрыСведений.ОтправленныеОповещенияПоСоглашениям.ДобавитьОповещение(Оповещение);
					КонтекстСтрокой = СтрШаблон(
						НСтр("ru='%1
							|Соглашение: %2
							|Получатель: %3'"), Справочники.ВидыБизнесСобытий.ОтправленоОповещениеПоКонтролируемымСрокам,
							Оповещение.Соглашение, Оповещение.Получатель); 
					БизнесСобытия.ЗарегистрироватьСобытие(Оповещение.Обращение, 
						Справочники.ВидыБизнесСобытий.ОтправленоОповещениеПоКонтролируемымСрокам,,,
						КонтекстСтрокой, Оповещение.Соглашение, Оповещение.Получатель)
				КонецЦикла; 
                
                ЗаписьЖурналаРегистрации(
    				СтрШаблон(НСтр("ru='%1.%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),СобытиеЖурналаРегистрации(), ИмяСобытия),
    				УровеньЖурналаРегистрации.Информация,,,
    				СтрШаблон(НСтр("ru = 'Оповещение успешно отправлено на адрес %1.'"), ПочтовыйАдресПолучателя));
				
			Исключение
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
					СтрШаблон(НСтр("ru='%1.%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), СобытиеЖурналаРегистрации(), ИмяСобытия),
					УровеньЖурналаРегистрации.Ошибка,,,
					СтрШаблон(НСтр("ru = 'Ошибка при отправке оповещения: %1'"), ОписаниеОшибки));
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Базовое имя события для регистрации в журнале событий
//
// Возвращаемое значение:
//     Строка - имя
//
Функция СобытиеЖурналаРегистрации() Экспорт
    
    Возврат НСтр("ru='Соглашения'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
    
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьПеренаправленияПоКлючуПараметров(Обращение, КлючПараметров, ТипСрываСроков, КэшПолучателейПеренаправлений)
	
	ЗапросПоПолучателямПеренаправлений = Новый Запрос;
	ЗапросПоПолучателямПеренаправлений.Текст = 
		"ВЫБРАТЬ
		|	СоглашенияПеренаправления.Получатель,
		|	ВЫБОР
		|		КОГДА СоглашенияПеренаправления.Получатель ССЫЛКА Справочник.Пользователи
		|			ТОГДА СведенияОПользователях.ОбслуживающаяОрганизация
		|		КОГДА СоглашенияПеренаправления.Получатель ССЫЛКА Справочник.ЛинииПоддержки
		|			ТОГДА ЛинииПоддержки.Владелец
		|	КОНЕЦ КАК ОбслуживающаяОрганизация,
		|	ВЫБОР
		|		КОГДА СоглашенияПеренаправления.Получатель ССЫЛКА Справочник.Пользователи
		|			ТОГДА СведенияОПользователях.ЛинияПоддержки
		|		КОГДА СоглашенияПеренаправления.Получатель ССЫЛКА Справочник.ЛинииПоддержки
		|			ТОГДА ЛинииПоддержки.Ссылка
		|	КОНЕЦ КАК ЛинияПоддержки,
		|	ВЫБОР
		|		КОГДА СоглашенияПеренаправления.Получатель ССЫЛКА Справочник.Пользователи
		|			ТОГДА СоглашенияПеренаправления.Получатель
		|		КОГДА СоглашенияПеренаправления.Получатель ССЫЛКА Справочник.ЛинииПоддержки
		|			ТОГДА СоглашенияПеренаправления.Получатель
		|	КОНЕЦ КАК Исполнитель
		|ИЗ
		|	Справочник.Соглашения.Перенаправления КАК СоглашенияПеренаправления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПользователях КАК СведенияОПользователях
		|		ПО ((ВЫРАЗИТЬ(СоглашенияПеренаправления.Получатель КАК Справочник.Пользователи)) = СведенияОПользователях.Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛинииПоддержки КАК ЛинииПоддержки
		|		ПО СоглашенияПеренаправления.Получатель = ЛинииПоддержки.Ссылка
		|ГДЕ
		|	СоглашенияПеренаправления.КлючПараметров = &КлючПараметров";
		
	// Перенаправление обращений
	ПолучательПеренаправления = КэшПолучателейПеренаправлений.Получить(КлючПараметров);
	
	Если ПолучательПеренаправления = Неопределено Тогда
		ЗапросПоПолучателямПеренаправлений.УстановитьПараметр("КлючПараметров", КлючПараметров);
		ЗапросПоПолучателямПеренаправлений.УстановитьПараметр("ТипСрываСроков", ТипСрываСроков);
		
		Результат = ЗапросПоПолучателямПеренаправлений.Выполнить();
		Если Результат.Пустой() Тогда
			ПолучательПеренаправления = Ложь;
		Иначе
			ВыборкаПоПолучателям = Результат.Выбрать();
			ВыборкаПоПолучателям.Следующий();
			ПолучательПеренаправления = Новый Структура;
			ПолучательПеренаправления.Вставить("Получатель", ВыборкаПоПолучателям.Получатель);
			ПолучательПеренаправления.Вставить("Исполнитель", ВыборкаПоПолучателям.Исполнитель);
			ПолучательПеренаправления.Вставить("ОбслуживающаяОрганизация", ВыборкаПоПолучателям.ОбслуживающаяОрганизация);
			ПолучательПеренаправления.Вставить("ЛинияПоддержки", ВыборкаПоПолучателям.ЛинияПоддержки);
		КонецЕсли;
		КэшПолучателейПеренаправлений.Вставить(КлючПараметров, ПолучательПеренаправления);
	КонецЕсли;
	
	Если ПолучательПеренаправления <> Ложь Тогда
		Если ТипЗнч(ПолучательПеренаправления.Получатель) = Тип("ПеречислениеСсылка.ВыраженияПолучателей") Тогда
			Если ПолучательПеренаправления.Получатель = Перечисления.ВыраженияПолучателей.РуководительЛинииПоддержки Тогда
				РуководительЛинии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обращение, "ЛинияПоддержки.Руководитель");
				Если ЗначениеЗаполнено(РуководительЛинии) Тогда
					СведенияОПользователе = РегистрыСведений.СведенияОПользователях.СведенияОПользователе(РуководительЛинии);
					Объект = Обращение.ПолучитьОбъект();
					Объект.ОбслуживающаяОрганизация = СведенияОПользователе.ОбслуживающаяОрганизация;
					Объект.ЛинияПоддержки = СведенияОПользователе.ЛинияПоддержки;
					Объект.Исполнитель = РуководительЛинии;
					Объект.Записать();
				КонецЕсли;
			ИначеЕсли ПолучательПеренаправления.Получатель =  Перечисления.ВыраженияПолучателей.ПерваяЛинияПоддержки Тогда
				ПерваяЛиния = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обращение, "ОбслуживающаяОрганизация.ПерваяЛинияПоддержки");
				Объект = Обращение.ПолучитьОбъект();
				Объект.ЛинияПоддержки = ПерваяЛиния;
				Объект.Исполнитель = ПерваяЛиния;
				Объект.Записать();
			ИначеЕсли ПолучательПеренаправления.Получатель =  Перечисления.ВыраженияПолучателей.ЛинияПоддержкиИсполнителя Тогда
				ЛинияПоддержки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обращение, "ЛинияПоддержки");
				Объект = Обращение.ПолучитьОбъект();
				Объект.ЛинияПоддержки = ЛинияПоддержки;
				Объект.Исполнитель = ЛинияПоддержки;
				Объект.Записать();
			ИначеЕсли ПолучательПеренаправления.Получатель =  Перечисления.ВыраженияПолучателей.Исполнитель Тогда
				ЛинияПоддержки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обращение, "Исполнитель");
				Объект = Обращение.ПолучитьОбъект();
				Объект.ЛинияПоддержки = ЛинияПоддержки;
				Объект.Исполнитель = ЛинияПоддержки;
				Объект.Записать();
			КонецЕсли;
		Иначе
			Объект = Обращение.ПолучитьОбъект();
			Объект.ОбслуживающаяОрганизация = ПолучательПеренаправления.ОбслуживающаяОрганизация;
			Объект.ЛинияПоддержки = ПолучательПеренаправления.ЛинияПоддержки;
			Объект.Исполнитель = ?(ЗначениеЗаполнено(ПолучательПеренаправления.Исполнитель), 
			ПолучательПеренаправления.Исполнитель, ПолучательПеренаправления.ЛинияПоддержки);
			Объект.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЧасовойПоясПолучателя(Получатель)
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.ОбслуживающиеОрганизации") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель, "ЧасовойПояс");
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.ЛинииПоддержки") Тогда
		СвойстваЛинии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, Новый Структура("ПоясЛинии, ПоясОрганизации", "ЧасовойПояс", "Владелец.ЧасовойПояс"));
		Возврат ?(ЗначениеЗаполнено(СвойстваЛинии.ПоясЛинии), СвойстваЛинии.ПоясЛинии, СвойстваЛинии.ПоясОрганизации);
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
		СведенияПользователя = РегистрыСведений.СведенияОПользователях.СведенияОПользователе(Получатель);
		ЛинияПоддержки = СведенияПользователя.ЛинияПоддержки;
		СвойстваЛинии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЛинияПоддержки, Новый Структура("ПоясЛинии, ПоясОрганизации", "ЧасовойПояс", "Владелец.ЧасовойПояс"));
		Возврат ?(ЗначениеЗаполнено(СвойстваЛинии.ПоясЛинии), СвойстваЛинии.ПоясЛинии, СвойстваЛинии.ПоясОрганизации);
	Иначе
		Возврат ПолучитьЧасовойПоясИнформационнойБазы();
	КонецЕсли;
	
КонецФункции
 
#КонецОбласти




