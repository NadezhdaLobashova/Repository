
#Область ПрограммныйИнтерфейс

// Проверяет применимость условия маршрутизации к объекту.
//
// Параметры:
//  Объект          - ЛюбаяСсылка - ссылка на справочник или документ.
//  СсылкаНаУсловие - СправочникСсылка.УсловияМаршрутизации - ссылка на условие маршрутизации.
// 
// Возвращаемое значение:
//  Булево - Истина, если условие применимо;
//           Ложь, если условие неприменимо или указаны пустые ссылки.
//
Функция ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(Знач Объект, СсылкаНаУсловие) Экспорт
	
	Результат = Ложь;
	
	// Условия нет - возвращается Истина.
	Если НЕ ЗначениеЗаполнено(СсылкаНаУсловие) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИндексЗначенияПеречисления = Перечисления.ТипыОбъектов.Индекс(СсылкаНаУсловие.ТипОбъекта);
	ИмяЗначенияПеречисления = Метаданные.Перечисления.ТипыОбъектов.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	// Если Объект не указан, в условия маршрутизации передается пустая ссылка того типа, который записан в условии маршрутизации. 
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Если ИмяЗначенияПеречисления = "Обращения" Тогда
			Объект = Документы.Обращение.ПустаяСсылка();
		Иначе
			Объект = Справочники[ИмяЗначенияПеречисления].ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	// Если Объект имеет другой тип по сравнению с тем, который указан в условии.
	Если ИмяЗначенияПеречисления = "Обращения" И Объект.Метаданные().Имя <> "Обращение" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяЗначенияПеречисления <> Объект.Метаданные().Имя Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СпособЗаданияУсловия = СсылкаНаУсловие.СпособЗаданияУсловия;
	Если СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.НаВстроенномЯзыке Тогда
		
		Результат = ПроверитьУсловиеНаВстроенномЯзыке(Объект, СсылкаНаУсловие);
		
	ИначеЕсли СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.ВРежимеКонструктора Тогда
				
		Результат = ПроверитьУсловиеВРежимеКонструктора(Объект, 
			СсылкаНаУсловие.НастройкаУсловия.Получить(),
			ИмяЗначенияПеречисления);
	
	ИначеЕсли СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
		
		Настройки = СсылкаНаУсловие.НастройкаКомбинацииУсловий.Получить();
		ЗаполнитьКомбинациюПравил(Объект, Настройки.Отбор.Элементы);
		Результат = ПроверитьУсловиеВРежимеКонструктора(Объект, 
			Настройки,
			"Условия",
			Ложь);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьУсловиеНаВстроенномЯзыке(Объект, СсылкаНаУсловие)
	
	Результат = Истина;
	
	Попытка
		УстановитьБезопасныйРежим(Истина);
		Выполнить(СсылкаНаУсловие.ВыражениеУсловия);
		УстановитьБезопасныйРежим(Ложь);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка условия маршрутизации'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			СсылкаНаУсловие.Метаданные(),
			СсылкаНаУсловие,
			ПодробноеПредставлениеОшибки(Инфо));
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При проверке условия маршрутизации ""%1"" возникла ошибка:
				|%2
				|Обратитесь к администратору.'"),
			СсылкаНаУсловие.Наименование, 
			Инфо.Описание);
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьУсловиеВРежимеКонструктора(Объект, Настройки, ТипМакета, ЕстьПараметры = Истина)
	
	СхемаКомпоновкиДанных = Справочники.УсловияМаршрутизации.ПолучитьМакет(ТипМакета);
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Настройки);
	
	Если ЕстьПараметры Тогда
		ПараметрОбъект = Компоновщик.Настройки.ПараметрыДанных.Элементы[0];
		ПараметрОбъект.Значение = Объект;
		ПараметрОбъект.Использование = Истина;
	КонецЕсли;
	
	// Дополнительная обработка групп пользователей - разворачивание их в пользователей.
	РазвернутьГруппыВУсловияхОтбора(Компоновщик.Настройки.Отбор.Элементы);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		Компоновщик.ПолучитьНастройки()
		,
		,
		, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    ТаблицаРезультата = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Результат = ТаблицаРезультата.Количество() > 0;
	
	Возврат Результат;
		
КонецФункции

Процедура ЗаполнитьКомбинациюПравил(Объект, ЭлементыКомбинации)
	
	Для Каждого ЭлементОтбора Из ЭлементыКомбинации Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЗаполнитьКомбинациюПравил(Объект, ЭлементОтбора.Элементы);		
		Иначе
			СпособЗаданияУсловия = ЭлементОтбора.ПравоеЗначение.СпособЗаданияУсловия;
			Если СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.НаВстроенномЯзыке Тогда
				Результат = ПроверитьУсловиеНаВстроенномЯзыке(Объект, ЭлементОтбора.ПравоеЗначение);
			ИначеЕсли СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.ВРежимеКонструктора Тогда
				Результат = ПроверитьУсловиеВРежимеКонструктора(Объект, 
					ЭлементОтбора.ПравоеЗначение.НастройкаУсловия.Получить(),
					СтрЗаменить(Строка(ЭлементОтбора.ПравоеЗначение.ТипОбъекта), " ",""));
			ИначеЕсли СпособЗаданияУсловия = Перечисления.СпособыЗаданияУсловия.КомбинацияИзДругихУсловий Тогда
				НастройкиВложенногоПравила = ЭлементОтбора.ПравоеЗначение.НастройкаКомбинацииУсловий.Получить();
				ЗаполнитьКомбинациюПравил(Объект, НастройкиВложенногоПравила.Отбор.Элементы);
				Результат = ПроверитьУсловиеВРежимеКонструктора(Объект, 
					НастройкиВложенногоПравила,
					"Условия",
					Ложь);
			КонецЕсли;
			
			ПолеОтбора = Новый ПолеКомпоновкиДанных("ПолеДляПроверки");
    		ЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
    		ЭлементОтбора.Использование = Истина;
    		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Результат;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура РазвернутьГруппыВУсловияхОтбора(ЭлементыОдногоУровня)
	
	Для Каждого ЭлементОтбора Из ЭлементыОдногоУровня Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ПользователиГруппы = РаботаСПользователями.ПользователиГруппыПользователей(ЭлементОтбора.ПравоеЗначение);
				ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений();
				ЭлементОтбора.ПравоеЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
				ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(ПользователиГруппы);
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;				
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;					
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") 
				И ЭлементОтбора.ПравоеЗначение.Количество() > 0
				И ТипЗнч(ЭлементОтбора.ПравоеЗначение[0].Значение) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				СписокПользователейГрупп = Новый Массив;
				Для Каждого ГруппаПользователей Из ЭлементОтбора.ПравоеЗначение Цикл
					ПользователиГруппы = РаботаСПользователями.ПользователиГруппыПользователей(ГруппаПользователей.Значение);
					ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений();
					ЭлементОтбора.ПравоеЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
					Для Каждого Пользователь Из ПользователиГруппы Цикл
						СписокПользователейГрупп.Добавить(Пользователь);
					КонецЦикла;
				КонецЦикла;
				ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений();
				ЭлементОтбора.ПравоеЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
				ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(ПользователиГруппы);
                Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;				
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;					
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			РазвернутьГруппыВУсловияхОтбора(ЭлементОтбора.Элементы);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры
	
#КонецОбласти 
