
#Область ПрограммныйИнтерфейс

// Добавляет запись бизнес-события.
//
// Параметры:
//  Источник               - ЛюбаяСсылка - ссылка на источник бизнес-события.
//  ВидСобытия             - СправочникСсылка.ВидыБизнесСобытий - вид бизнес-события.
//  КонтекстСобытия        - ХранилищеЗначения
//  Автор                  - СправочникСсылка.Пользователи - по-умолчанию равен текущему пользователю.
//  КонтекстСобытияСтрокой - Строка - описание события.
//  Ссылка1                - ЛюбаяСсылка - расшифровка. 
//  Ссылка2                - ЛюбаяСсылка - расшифровка.
//
Процедура ЗарегистрироватьСобытие(Источник, ВидСобытия, КонтекстСобытия = Неопределено, 
								  Автор = Неопределено, КонтекстСобытияСтрокой = "", 
								  Ссылка1 = Неопределено, Ссылка2 = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Элемент = Справочники.ПроизошедшиеБизнесСобытия.СоздатьЭлемент();
	
	Элемент.Дата = ТекущаяДата();
	
	Если Автор = Неопределено Тогда
		Элемент.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	Иначе
		Элемент.Автор = Автор;
	КонецЕсли;
	
	Элемент.ВидСобытия = ВидСобытия;
	
	Элемент.Источник = Источник;
	Элемент.Обработано = Ложь;
	Если КонтекстСобытия <> Неопределено Тогда
		Элемент.КонтекстСобытия = КонтекстСобытия;
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(КонтекстСобытияСтрокой)) Тогда
		КонтекстСобытияСтрокой = Строка(ВидСобытия);
	КонецЕсли;
	
	Элемент.КонтекстСобытияСтрокой = КонтекстСобытияСтрокой;
	Элемент.Ссылка1 = Ссылка1;
	Элемент.Ссылка2 = Ссылка2;
	
	Элемент.Записать();
	
КонецПроцедуры

// Сохраняет в регистре сведений ПодпискиНаБизнесСобытия подписку.
//
Процедура СохранитьПодпискуНаБизнесСобытия(ВидСобытия, Потребитель) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПодпискиНаБизнесСобытия.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидСобытия.Установить(ВидСобытия);
	НаборЗаписей.Отбор.Потребитель.Установить(Потребитель);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидСобытия = ВидСобытия;
	НоваяЗапись.Потребитель = Потребитель;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет в регистре сведений ПодпискиНаБизнесСобытия подписку.
//
Процедура УдалитьПодпискуНаБизнесСобытия(ВидСобытия, Потребитель) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПодпискиНаБизнесСобытия.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидСобытия.Установить(ВидСобытия);
	НаборЗаписей.Отбор.Потребитель.Установить(Потребитель);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Делает проверку для всех типов Предмета
//
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоКарточке(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	// Проверим условие
	Если Не РаботаСУсловиямиМаршрутизации.ПроверитьПрименимостьУсловияМаршрутизацииКОбъекту(ПредметСсылка, Условие) Тогда
		Возврат Ложь; // условие не выполняется
	КонецЕсли;	
	
	// Подписчик - Идентификатор объекта, Предмет - Объект
	Если (ТипЗнч(ПредметСсылка) = Тип("СправочникСсылка.Консультации")
		ИЛИ ТипЗнч(ПредметСсылка) = Тип("СправочникСсылка.Ошибки")
		ИЛИ ТипЗнч(ПредметСсылка) = Тип("СправочникСсылка.Пожелания")
		ИЛИ ТипЗнч(ПредметСсылка) = Тип("ДокументСсылка.Обращение")) Тогда
		
		// Подписчик не указан - подойдет ко всем
		Если Не ЗначениеЗаполнено(Подписчик) Тогда
			Возврат Истина;
		КонецЕсли;
		
		ИдентификаторОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ПредметСсылка));
		
		Если ИдентификаторОбъекта = Подписчик Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Сохраняет в регистре сведений ПравилаАвтоматическогоЗапускаБизнесПроцессов подписку.
//
Процедура СохранитьПравилоАвтоматическогоЗапускаБизнесПроцессов(ВидСобытия, ШаблонБизнесПроцесса, ИдентификаторОбъекта, Условие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидБизнесСобытия.Установить(ВидСобытия);
	НаборЗаписей.Отбор.ШаблонБизнесПроцесса.Установить(ШаблонБизнесПроцесса);
	НаборЗаписей.Отбор.КлассИсточникаБизнесСобытия.Установить(ИдентификаторОбъекта);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидБизнесСобытия = ВидСобытия;
	НоваяЗапись.ШаблонБизнесПроцесса = ШаблонБизнесПроцесса;
	НоваяЗапись.КлассИсточникаБизнесСобытия = ИдентификаторОбъекта;
	НоваяЗапись.Условие = Условие;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет в регистре сведений ПравилаАвтоматическогоЗапускаБизнесПроцессов подписку.
//
Процедура УдалитьПравилоАвтоматическогоЗапускаБизнесПроцессов(ВидСобытия, ШаблонБизнесПроцесса, ИдентификаторОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидБизнесСобытия.Установить(ВидСобытия);
	НаборЗаписей.Отбор.ШаблонБизнесПроцесса.Установить(ШаблонБизнесПроцесса);
	НаборЗаписей.Отбор.КлассИсточникаБизнесСобытия.Установить(ИдентификаторОбъекта);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Формирует XML описание данных контекста события и упаковывает их в хранилище значения.
//
// Параметры:
//  ДанныеКонтекста - любое сериализуемое значение.
// 
// Возвращаемое значение:
//  ХранилищеЗначения - упакованный контекст события.
//
Функция СформироватьКонтекстСобытия(ДанныеКонтекста) Экспорт
	
	ИнформацияДляЗаписиXML = Новый ЗаписьXML;
	ИнформацияДляЗаписиXML.УстановитьСтроку();
	
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	НовыйСериализаторXDTO.ЗаписатьXML(ИнформацияДляЗаписиXML, ДанныеКонтекста, НазначениеТипаXML.Явное);
	
	СтрокаXML = ИнформацияДляЗаписиXML.Закрыть(); 
	КонтекстСобытия = Новый ХранилищеЗначения(СтрокаXML);
	
	Возврат КонтекстСобытия;
	
КонецФункции

// Формирует XML описание данных контекста события и упаковывает их в хранилище значения.
//
// Параметры:
//  ДанныеКонтекста - Строка - строка XML контекста события.
// 
// Возвращаемое значение:
//  Значение - значение из строки XML.
//
Функция ПолучитьКонтекстСобытия(ДанныеКонтекста) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеКонтекста);
	
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	ЗначениеXML = НовыйСериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	
	ЧтениеXML.Закрыть(); 
	
	Возврат ЗначениеXML;
	
КонецФункции

// Возвращает представление значения.
//
// Параметры:
//  Значение - ЛюбоеЗначение - значение, для которого нужно получить представление.
// 
// Возвращаемое значение:
//  Строка - представление значения.
//
Функция ПредставлениеЗначения(Значение) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат НСтр("ru='<Пусто>'"); 
	Иначе
		Возврат Строка(Значение);
	КонецЕсли;
	
КонецФункции

// Делает запись бизнес-события перенаправления объекта
//
Процедура ЗарегистрироватьПеренаправлениеКарточкиБазыЗнаний(Объект) Экспорт
    
    Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Консультации") Тогда
    	ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеКонсультации;
    ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Пожелания") Тогда
    	ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеПожелания;
    ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Ошибки") Тогда
    	ВидСобытия = Справочники.ВидыБизнесСобытий.ПеренаправлениеОшибки;
    Иначе
        ВызватьИсключение НСтр("ru='Не поддерживаемый объект перенаправления.'"); 
    КонецЕсли; 
    
    ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	
	Если ДополнительныеСвойства.Свойство("КомментарийПеренаправления") Тогда
		КомментарийПеренаправления = ДополнительныеСвойства.КомментарийПеренаправления;
	Иначе
		КомментарийПеренаправления = "";
	КонецЕсли;
	
	ПараметрыСобытия = Новый Структура;
	ПараметрыСобытия.Вставить("ИсходнаяОрганизация", ДополнительныеСвойства.ИсходнаяОрганизация);
	ПараметрыСобытия.Вставить("ИсходнаяЛинияПоддержки", ДополнительныеСвойства.ИсходнаяЛинияПоддержки);
	ПараметрыСобытия.Вставить("ИсходныйОтветственный", ДополнительныеСвойства.ИсходныйОтветственный);
	ПараметрыСобытия.Вставить("Организация", Объект.ОбслуживающаяОрганизация);
	ПараметрыСобытия.Вставить("ЛинияПоддержки", Объект.ЛинияПоддержки);
	ПараметрыСобытия.Вставить("Ответственный", Объект.Ответственный);
	ПараметрыСобытия.Вставить("Комментарий", КомментарийПеренаправления);
	
	КонтекстСтрокой = Строка(ВидСобытия);
	
	Если ДополнительныеСвойства.ИсходнаяОрганизация <> Объект.ОбслуживающаяОрганизация Тогда
		КонтекстСтрокой = КонтекстСтрокой + СтрШаблон(НСтр("ru='Организация: ""%1"" → ""%2""'"),
			ПредставлениеЗначения(ДополнительныеСвойства.ИсходнаяОрганизация), 
			ПредставлениеЗначения(Объект.ОбслуживающаяОрганизация));
	КонецЕсли;
	
	Если ДополнительныеСвойства.ИсходнаяЛинияПоддержки <> Объект.ЛинияПоддержки Тогда
		КонтекстСтрокой = КонтекстСтрокой + ?(ПустаяСтрока(КонтекстСтрокой), "", Символы.ПС) +
			СтрШаблон(НСтр("ru='Линия поддержки: ""%1"" → ""%2""'"),
				ПредставлениеЗначения(ДополнительныеСвойства.ИсходнаяЛинияПоддержки), 
				ПредставлениеЗначения(Объект.ЛинияПоддержки));
	КонецЕсли;
    
    Если ДополнительныеСвойства.ИсходныйОтветственный <> Объект.Ответственный Тогда
		КонтекстСтрокой = КонтекстСтрокой + ?(ПустаяСтрока(КонтекстСтрокой), "", Символы.ПС) +
			СтрШаблон(НСтр("ru='Ответственный: ""%1"" → ""%2""'"),
				ПредставлениеЗначения(ДополнительныеСвойства.ИсходныйОтветственный), 
				ПредставлениеЗначения(Объект.Ответственный));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КомментарийПеренаправления) Тогда
		КонтекстСтрокой = КонтекстСтрокой + ?(ПустаяСтрока(КонтекстСтрокой), "", Символы.ПС) +
			СтрШаблон(НСтр("ru='Комментарий: %1'"), КомментарийПеренаправления);
	КонецЕсли; 
	
	КонтекстСобытия = СформироватьКонтекстСобытия(ПараметрыСобытия);
	ЗарегистрироватьСобытие(Объект.Ссылка, ВидСобытия, КонтекстСобытия,, КонтекстСтрокой, 
		ДополнительныеСвойства.ИсходныйОтветственный, Объект.Ответственный);
		
КонецПроцедуры

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик подписки на событие ПередЗаписью у всех бизнес-процессов.
//
Процедура БизнесПроцессПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		
		Если Источник.Стартован Тогда // старт бизнес-процесса
			Источник.ДополнительныеСвойства.Вставить("НужноЗаписатьСобытиеСтартБизнесПроцесса");
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, "Стартован, Завершен, Состояние");
	
	Если Источник.Стартован И Не Реквизиты.Стартован Тогда // старт бизнес-процесса
		
		ЗарегистрироватьСобытие(Источник.Ссылка, Справочники.ВидыБизнесСобытий.СтартБизнесПроцесса);
		
	КонецЕсли;
	
	Если Источник.Завершен И Не Реквизиты.Завершен Тогда // завершение бизнес-процесса
		
		ЗарегистрироватьСобытие(Источник.Ссылка, Справочники.ВидыБизнесСобытий.ЗавершениеБизнесПроцесса);
		
	КонецЕсли;
	
	Если Источник.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен
		И Реквизиты.Состояние <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда // Возобновление бизнес-процесса
		
		ЗарегистрироватьСобытие(Источник.Ссылка, Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса);
		
	КонецЕсли;
	
	Если Источник.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен
		И Реквизиты.Состояние <> Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда // Остановка бизнес-процесса
		
		ЗарегистрироватьСобытие(Источник.Ссылка, Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, "ПометкаУдаления");
	
	Если Источник.ПометкаУдаления И Не Реквизиты.ПометкаУдаления Тогда // Установка пометки удаления
		ПометитьНаУдалениеСобытияПоИсточнику(Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПриЗаписи у бизнес-процессов.
//
Процедура БизнесПроцессПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	Если Источник.ДополнительныеСвойства.Свойство("НужноЗаписатьСобытиеСтартБизнесПроцесса") Тогда
		ЗарегистрироватьСобытие(Источник.Ссылка, Справочники.ВидыБизнесСобытий.СтартБизнесПроцесса);
		Источник.ДополнительныеСвойства.Удалить("НужноЗаписатьСобытиеСтартБизнесПроцесса");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПриЗаписи у справочников.
//
Процедура СправочникПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, "ПометкаУдаления");
	
	Если Источник.ПометкаУдаления И Не Реквизиты.ПометкаУдаления Тогда // Установка пометки удаления
		ПометитьНаУдалениеСобытияПоИсточнику(Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ПриЗаписи у документов.
//
Процедура ДокументПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, "ПометкаУдаления");
	
	Если Источник.ПометкаУдаления И Не Реквизиты.ПометкаУдаления Тогда // Установка пометки удаления
		ПометитьНаУдалениеСобытияПоИсточнику(Источник.Ссылка);
	КонецЕсли;

КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью у задач.
//
Процедура ЗадачаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, "ПометкаУдаления");
	
	Если Источник.ПометкаУдаления И Не Реквизиты.ПометкаУдаления Тогда // Установка пометки удаления
		ПометитьНаУдалениеСобытияПоИсточнику(Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Отработка регламентного задания ОбработкаПроизошедшихБизнесСобытий.
//
Функция ОбработкаПроизошедшихБизнесСобытий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	КешПотребителей = Новый Соответствие;
	ОбработаноСобытий = 0;
    
	Пока Истина Цикл // В цикле получаем порциями по 100 необработанные события, пока есть что обрабатывать
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 100
            |   События.Автор КАК Автор,
            |   События.ВидСобытия КАК ВидСобытия,
            |   События.Дата КАК Дата,
            |   События.Источник КАК Источник,
            |   События.КонтекстСобытия КАК КонтекстСобытия,
            |   События.КонтекстСобытияСтрокой КАК КонтекстСобытияСтрокой,
            |   События.Ссылка КАК Ссылка,
            |   События.ЧислоПопытокОбработки КАК ЧислоПопытокОбработки,
            |   События.ПометкаУдаления КАК ПометкаУдаления
            |ИЗ
            |   Справочник.ПроизошедшиеБизнесСобытия КАК События
            |ГДЕ
            |   События.Обработано = ЛОЖЬ
            |   И События.ЧислоПопытокОбработки < 3
            |
            |УПОРЯДОЧИТЬ ПО
            |   События.Дата";
		Таблица = Запрос.Выполнить().Выгрузить();	
		Если Таблица.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;	
		Для Каждого Строка Из Таблица Цикл
			Потребители = ВыбратьПотребителей(Строка.ВидСобытия, КешПотребителей);
			СработавшиеПользовательскиеОбработчики = Новый Массив;
			НачатьТранзакцию();
			Попытка
				Если Строка.ПометкаУдаления = Ложь Тогда
					Для Каждого Потребитель Из Потребители Цикл
						Если Потребитель = Перечисления.ПотребителиБизнесСобытий.АвтоматическийЗапускБизнесПроцессов Тогда
							ОбработатьСобытиеАвтоматическийЗапускБизнесПроцессов(Строка);
						ИначеЕсли Потребитель = Перечисления.ПотребителиБизнесСобытий.РассылкаУведомлений Тогда;
							ОбработатьСобытиеРассылкаУведомлений(Строка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;		
				Объект = Строка.Ссылка.ПолучитьОбъект();
				Объект.Обработано = Истина;
				Объект.Записать();
                ОбработаноСобытий = ОбработаноСобытий + 1;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, 
					Метаданные.Справочники.ПроизошедшиеБизнесСобытия, Строка.Ссылка, СообщениеОбОшибке);
				Попытка
					Объект = Строка.Ссылка.ПолучитьОбъект();
					Объект.ЧислоПопытокОбработки = Объект.ЧислоПопытокОбработки + 1;
					Объект.Записать();
				Исключение 
					СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, 
						Метаданные.Справочники.ПроизошедшиеБизнесСобытия, Строка.Ссылка, СообщениеОбОшибке);
				КонецПопытки;	
				Для Каждого ОбработчикСсылка Из СработавшиеПользовательскиеОбработчики Цикл
					Попытка
						ВыполняемыйКодОтменыОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбработчикСсылка, 
							"ВыполняемыйКодОтменыОбработки");
						Если ЗначениеЗаполнено(ВыполняемыйКодОтменыОбработки) Тогда
							Выполнить(ВыполняемыйКодОтменыОбработки);
						КонецЕсли;	
					Исключение
						СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
							УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ПроизошедшиеБизнесСобытия, 
							Строка.Ссылка, СообщениеОбОшибке);
					КонецПопытки;
				КонецЦикла;
			КонецПопытки;
		КонецЦикла;
    КонецЦикла;
    Возврат ОбработаноСобытий;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Помечает на удаление произошедшие события, когда помечается на удаление Источник событий.
//
Процедура ПометитьНаУдалениеСобытияПоИсточнику(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизошедшиеБизнесСобытия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПроизошедшиеБизнесСобытия КАК ПроизошедшиеБизнесСобытия
		|ГДЕ
		|	ПроизошедшиеБизнесСобытия.Источник = &Источник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроизошедшиеБизнесСобытия.Дата";
				   
	Запрос.УстановитьПараметр("Источник", Источник);
				   
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(Истина);
		Объект.Записать();
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Отрабатывает событие старта бизнес-процесса - сперва проверяя по своим настройкам,
// что действительно сработало событие.
//
Процедура ОбработатьСобытиеАвтоматическийЗапускБизнесПроцессов(Событие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Таблица = Неопределено;
	
	Запрос = Новый Запрос;
	
	// получаем данные без отбора по организации
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ШаблонБизнесПроцесса КАК ШаблонБизнесПроцесса,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.Условие КАК Условие,
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.КлассИсточникаБизнесСобытия КАК Подписчик
		|ИЗ
		|	РегистрСведений.ПравилаАвтоматическогоЗапускаБизнесПроцессов КАК ПравилаАвтоматическогоЗапускаБизнесПроцессов
		|ГДЕ
		|	ПравилаАвтоматическогоЗапускаБизнесПроцессов.ВидБизнесСобытия = &ВидБизнесСобытия";
	
	Запрос.УстановитьПараметр("ВидБизнесСобытия", Событие.ВидСобытия);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;		
	
	Таблица = РезультатЗапроса.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Событие.Источник);
		Если (МенеджерОбъекта = Неопределено) ИЛИ (МенеджерОбъекта <> Неопределено 
			И МенеджерОбъекта.ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(СтрокаТаблицы.ШаблонБизнесПроцесса, 
			Событие.Источник, СтрокаТаблицы.Подписчик, Событие.ВидСобытия, СтрокаТаблицы.Условие)) Тогда
		
			БизнесПроцесс = Неопределено;
			Шаблон = СтрокаТаблицы.ШаблонБизнесПроцесса;
			
			ШаблонОбъект = Шаблон.ПолучитьОбъект();
			
			МассивПолей = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
			Если МассивПолей.Количество() <> 0 Тогда
				
				СтрокаПолей = МассивПолейВСтроку(МассивПолей);
				
				СообщениеОбОшибке = СтрШаблон(
					НСтр("ru = 'Шаблон ""%1"" нельзя использовать для автоматического запуска процессов, т.к. не заполнены поля: %2!'"),
					Строка(Шаблон), СтрокаПолей);
				
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииАвтоматическийЗапускПроцессов(),
                    УровеньЖурналаРегистрации.Ошибка, , Шаблон, СообщениеОбОшибке);
				
			КонецЕсли;	
			
			// Тут заполняем по шаблону и стартуем бизнес-процесс
			
			ИмяПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Шаблон).ИмяПроцесса(Шаблон);
			БизнесПроцесс = БизнесПроцессы[ИмяПроцесса].СоздатьБизнесПроцесс();
		
			Если БизнесПроцесс <> Неопределено Тогда
				
				ПараметрыЗаполнения = Новый Структура();
				ПараметрыЗаполнения.Вставить("Шаблон", Шаблон);
				ПараметрыЗаполнения.Вставить("Предмет", Событие.Источник);
				ПараметрыЗаполнения.Вставить("АвторСобытия", Событие.Автор);
				БизнесПроцесс.Заполнить(ПараметрыЗаполнения);
				БизнесПроцесс.Дата = Событие.Дата;
				БизнесПроцесс.Записать();
				БизнесПроцесс.Старт();
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

// Обрабатывает произошедшее событие, отправляя уведомления в соответствии с настройками.
//
Процедура ОбработатьСобытиеРассылкаУведомлений(Событие)
	
	РаботаСУведомлениями.ОбработатьБизнесСобытие(Событие);
	
КонецПроцедуры

// Возвращает потребителей по виду события, используя кэширование.
//
Функция ВыбратьПотребителей(ВидСобытия, КешПотребителей)
	
	Потребители = КешПотребителей.Получить(ВидСобытия);
	Если Потребители <> Неопределено Тогда
		Возврат Потребители;
	КонецЕсли;	
		
	Потребители = Новый Массив;
	
	Отбор = Новый Структура("ВидСобытия", ВидСобытия);
	Выборка = РегистрыСведений.ПодпискиНаБизнесСобытия.Выбрать(Отбор);
	
	Пока Выборка.Следующий() Цикл
	    Потребители.Добавить(Выборка.Потребитель);
	КонецЦикла;
	
	КешПотребителей.Вставить(ВидСобытия, Потребители);
	
	Возврат Потребители;
		
КонецФункции	

// Формирует строку из имен полей через запятую.
//
Функция МассивПолейВСтроку(МассивПолей) Экспорт
	
	СтрокаПолей = "";
	
	Для Индекс = 0 По МассивПолей.Количество() - 1 Цикл
		
		Если Индекс <>  0 Тогда
			СтрокаПолей = СтрокаПолей + ", ";
		КонецЕсли;	
		
		СтрокаПолей = СтрокаПолей + МассивПолей[Индекс];
		
	КонецЦикла;	
	
	Возврат СтрокаПолей;
	
КонецФункции	

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru='Обработка бизнес-событий'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЖурналаРегистрацииАвтоматическийЗапускПроцессов()
    
    Возврат НСтр("ru='Обработка автоматического запуска процессов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти
