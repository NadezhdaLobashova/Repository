
#Область РаботаСВебСервисом

// Возвращает список доступных компонентов пожеланий для пользователя.
//
// Параметры:
//	Пользователь - СправочникСсылка.ПользователиСервисов - пользователь.
//
// Возвращаемое значение:
//	Массив - массив с наименованиями компонентов.
//
Функция ДоступныеКомпонентыПожеланий(Знач Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст =
        "ВЫБРАТЬ
        |   КомпонентыСервиса.Ссылка
        |ИЗ
        |   Справочник.КомпонентыСервиса КАК КомпонентыСервиса
        |ГДЕ
        |   НЕ КомпонентыСервиса.ПометкаУдаления
        |   И КомпонентыСервиса.Владелец = &Сервис
        |   И КомпонентыСервиса.ИспользоватьВЦентреИдей";
    Запрос.УстановитьПараметр("Сервис", Пользователь.Владелец);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает простарнство имен (XDTO-пакет "UsersIdeas_1_0_0_1").
//
// Возвращаемое значение:
//	Строка - пространство имен.
//
Функция ПространствоИмен_1_0_0_1() Экспорт 
	
	Возврат "http://www.1c.ru/1cFresh/InformationCenter/UsersIdeas/1.0.0.1";
	
КонецФункции

// Возвращает отфильтрованные компоненты пожеланий.
//
// Параметры:
//	ДоступныеКомпонентыПожеланий - Массив - доступные компонен.
//	ФильтрыПоПредмету - ОбъектXDTO - фильтры по предмету.
//
// Возвращаемое значение:
//	Массив - отфильтрованные предметы.
//
Функция ОтфильтрованныеКомпоненты(Знач ДоступныеКомпонентыПожеланий, Знач ФильтрыПоПредмету) Экспорт
	
	Если ФильтрыПоПредмету.SubjectFilterElement.Количество() = 0 Тогда 
		Возврат ДоступныеКомпонентыПожеланий;
	КонецЕсли;
	
	МассивФильтров = Новый Массив;
	Для Каждого Фильтр Из ФильтрыПоПредмету.SubjectFilterElement Цикл 
		МассивФильтров.Добавить(Фильтр);
	КонецЦикла;
	
	ОтфильтрованныеПредметы = Новый Массив;
	Для Каждого Предмет Из ДоступныеКомпонентыПожеланий Цикл 
		Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Наименование");
		Если МассивФильтров.Найти(Предмет.Наименование) <> Неопределено Тогда 
			ОтфильтрованныеПредметы.Добавить(Предмет);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтфильтрованныеПредметы;
	
КонецФункции

// Возвращает список пожеланий на голосовании.
//
// Параметры:
//	Пользователь - СправочникСсылка.ПользователиСервисов - пользователь.
//	СписокКомпонентов - СправочникСсылка.КомпонентыСервиса - предметы
//	ТипСортировки - Строка - тип сортировки.
//	КоличествоВыборки - Число - количество выборки.
//
// Возвращаемое значение:
//	Массив - массив выполненных запросов.
//
Функция СписокПожеланийНаГолосовании(Знач Пользователь, Знач СписокКомпонентов, Знач ТипСортировки, Знач КоличествоВыборки) Экспорт
    
    Если ТипСортировки = "CreateDate" Тогда
    	ТекстЗапроса = 
    		"ВЫБРАТЬ ПЕРВЫЕ 1000
            |   Пожелания.Ссылка КАК Пожелание,
            |   Пожелания.ДатаРегистрации КАК ДатаСоздания
            |ПОМЕСТИТЬ ВсеПожелания
            |ИЗ
            |   Справочник.Пожелания КАК Пожелания
            |ГДЕ
            |   НЕ Пожелания.ПометкаУдаления
            |   И Пожелания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПожеланий.НаГолосовании)
            |   И Пожелания.Компоненты.Компонент В(&СписокКомпонентов)
            |   И Пожелания.Сервисы.Сервис В(&Сервис)
            |   И Пожелания.Публикуется
            |
            |ОБЪЕДИНИТЬ
            |
            |ВЫБРАТЬ ПЕРВЫЕ 1000
            |   Пожелания.Ссылка,
            |   Пожелания.ДатаРегистрации
            |ИЗ
            |   Справочник.Пожелания КАК Пожелания
            |ГДЕ
            |   НЕ Пожелания.ПометкаУдаления
            |   И Пожелания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПожеланий.Рассматривается)
            |   И Пожелания.Компоненты.Компонент В(&СписокКомпонентов)
            |   И Пожелания.Сервисы.Сервис В(&Сервис)
            |   И Пожелания.Автор = &Пользователь
            |   И Пожелания.Публикуется";
        
    ИначеЕсли ТипСортировки = "Rating" Тогда
    	ТекстЗапроса = 
    		"ВЫБРАТЬ ПЕРВЫЕ 1000
            |   Пожелания.Ссылка КАК Пожелание,
            |   ЗначенияПоказателей.ЗначениеОборот КАК СуммаГолосов
            |ПОМЕСТИТЬ ВсеПожелания
            |ИЗ
            |   Справочник.Пожелания КАК Пожелания
            |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияПоказателей.Обороты(, , , Показатель = &СуммаГолосов) КАК ЗначенияПоказателей
            |       ПО Пожелания.Ссылка = ЗначенияПоказателей.Объект
            |ГДЕ
            |   НЕ Пожелания.ПометкаУдаления
            |   И Пожелания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПожеланий.НаГолосовании)
            |   И Пожелания.Компоненты.Компонент В(&СписокКомпонентов)
            |   И Пожелания.Сервисы.Сервис В(&Сервис)
            |   И Пожелания.Публикуется
            |
            |ОБЪЕДИНИТЬ
            |
            |ВЫБРАТЬ ПЕРВЫЕ 1000
            |   Пожелания.Ссылка,
            |   ЗначенияПоказателей.ЗначениеОборот
            |ИЗ
            |   Справочник.Пожелания КАК Пожелания
            |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияПоказателей.Обороты(, , , Показатель = &СуммаГолосов) КАК ЗначенияПоказателей
            |       ПО Пожелания.Ссылка = ЗначенияПоказателей.Объект
            |ГДЕ
            |   НЕ Пожелания.ПометкаУдаления
            |   И Пожелания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПожеланий.Рассматривается)
            |   И Пожелания.Компоненты.Компонент В(&СписокКомпонентов)
            |   И Пожелания.Сервисы.Сервис В(&Сервис)
            |   И Пожелания.Автор = &Пользователь
            |   И Пожелания.Публикуется
            |
            |УПОРЯДОЧИТЬ ПО
            |   СуммаГолосов УБЫВ";
            
    ИначеЕсли ТипСортировки = "CommentsCount" Тогда
    	ТекстЗапроса = 
    		"ВЫБРАТЬ ПЕРВЫЕ 1000
            |   Пожелания.Ссылка КАК Пожелание,
            |   ЗначенияПоказателей.ЗначениеОборот КАК КоличествоКомментариев
            |ПОМЕСТИТЬ ВсеПожелания
            |ИЗ
            |   Справочник.Пожелания КАК Пожелания
            |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияПоказателей.Обороты(, , , Показатель = &КоличествоКомментариев) КАК ЗначенияПоказателей
            |       ПО Пожелания.Ссылка = ЗначенияПоказателей.Объект
            |ГДЕ
            |   НЕ Пожелания.ПометкаУдаления
            |   И Пожелания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПожеланий.НаГолосовании)
            |   И Пожелания.Компоненты.Компонент В(&СписокКомпонентов)
            |   И Пожелания.Сервисы.Сервис В(&Сервис)
            |   И Пожелания.Публикуется
            |
            |ОБЪЕДИНИТЬ
            |
            |ВЫБРАТЬ ПЕРВЫЕ 1000
            |   Пожелания.Ссылка,
            |   ЗначенияПоказателей.ЗначениеОборот
            |ИЗ
            |   Справочник.Пожелания КАК Пожелания
            |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияПоказателей.Обороты(, , , Показатель = &КоличествоКомментариев) КАК ЗначенияПоказателей
            |       ПО Пожелания.Ссылка = ЗначенияПоказателей.Объект
            |ГДЕ
            |   НЕ Пожелания.ПометкаУдаления
            |   И Пожелания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПожеланий.Рассматривается)
            |   И Пожелания.Компоненты.Компонент В(&СписокКомпонентов)
            |   И Пожелания.Сервисы.Сервис В(&Сервис)
            |   И Пожелания.Автор = &Пользователь
            |   И Пожелания.Публикуется
            |
            |УПОРЯДОЧИТЬ ПО
            |   КоличествоКомментариев УБЫВ";
    КонецЕсли;
    
    ТекстЗапроса = ТекстЗапроса + "; " +
        "ВЫБРАТЬ ПЕРВЫЕ 5
        |   ВсеПожелания.Пожелание КАК Пожелание,
        |   ВсеПожелания.ДатаСоздания КАК ДатаСоздания
        |ПОМЕСТИТЬ Пожелания
        |ИЗ
        |   ВсеПожелания КАК ВсеПожелания
        |
        |УПОРЯДОЧИТЬ ПО
        |   &ТекстИндексацииСортировка
        |
        |ИНДЕКСИРОВАТЬ ПО
        |   ДатаСоздания,
        |   Пожелание";
	
	Запрос = Новый Запрос;
    
    Если ТипСортировки = "CreateDate" Тогда 
        ИмяПоля = "ДатаСоздания";
		ТекстИндексации = ИмяПоля;
	ИначеЕсли ТипСортировки = "Rating" Тогда 
        ИмяПоля = "СуммаГолосов";
		ТекстИндексации = ИмяПоля;
	ИначеЕсли ТипСортировки = "CommentsCount" Тогда 
		ИмяПоля = "КоличествоКомментариев";
		ТекстИндексации = ИмяПоля;
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип сортировки'");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокКомпонентов", СписокКомпонентов);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
    Запрос.УстановитьПараметр("Сервис", Пользователь.Владелец);
	ТекстЗапроса = ТекстЗапроса + ТекстОсновногоЗапроса();
    
 	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 5", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоВыборки, "ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИНДЕКСИРОВАТЬ ПО
		                                     |   ДатаСоздания", "ИНДЕКСИРОВАТЬ ПО
		                                     |   " + ТекстИндексации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВсеПожелания.ДатаСоздания КАК ДатаСоздания", СтрШаблон("ВсеПожелания.%1 КАК %1", ИмяПоля));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстИндексацииСортировка", ТекстИндексации + " УБЫВ");
	
	Запрос.Текст = ТекстЗапроса;
    
    УстановитьПараметрыПоказателейПожеланий(Запрос);
    
	Возврат Запрос.ВыполнитьПакет();

КонецФункции

// Возвращает список отклоненных пожеланий.
//
// Параметры:
//	Пользователь - СправочникСсылка.ПользователиСервисов - пользователь.
//	СписокКомпонентов - СправочникСсылка.КомпонентыСервиса - предметыю
//	ТипСортировки - Строка - тип сортировки.
//	КоличествоВыборки - Число - количество выборки.
//
// Возвращаемое значение:
//	Массив - массив выполненных запросов.
//
Функция СписокОтклоненныхПожеланий(Знач Пользователь, Знач СписокКомпонентов, Знач ТипСортировки, Знач КоличествоВыборки) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 5
        |   Пожелания.Ссылка КАК Пожелание,
        |   Пожелания.ДатаЗакрытия КАК ДатаЗакрытия
        |ПОМЕСТИТЬ Пожелания
        |ИЗ
        |   Справочник.Пожелания КАК Пожелания
        |ГДЕ
        |   НЕ Пожелания.ПометкаУдаления
        |   И Пожелания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПожеланий.Отклонено)
        |   И Пожелания.Компоненты.Компонент В(&СписокКомпонентов)
        |   И Пожелания.Сервисы.Сервис В(&Сервис)
        |   И Пожелания.Автор = &Пользователь
        |   И Пожелания.Публикуется
        |
        |УПОРЯДОЧИТЬ ПО
        |   ДатаЗакрытия УБЫВ,
        |   Пожелание
        |
        |ИНДЕКСИРОВАТЬ ПО
        |   ДатаЗакрытия,
        |   Пожелание";
		
	Если ТипСортировки <> "ClosingDate" Тогда 
		ВызватьИсключение НСтр("ru = 'Некорректный тип сортировки'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКомпонентов", СписокКомпонентов);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
    Запрос.УстановитьПараметр("Сервис", Пользователь.Владелец);
	ТекстЗапроса = ТекстЗапроса + ТекстОсновногоЗапроса();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 5", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоВыборки, "ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстИндексацииСортировка", "ДатаЗакрытия УБЫВ");
	Запрос.Текст = ТекстЗапроса;
    
    УстановитьПараметрыПоказателейПожеланий(Запрос);
    
    Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// Возвращает список реализованных пожеланий.
//
// Параметры:
//	Пользователь - СправочникСсылка.ПользователиСервисов - пользователь.
//	СписокКомпонентов - СправочникСсылка.КомпонентыСервиса - компоненты.
//	ТипСортировки - Строка - тип сортировки.
//	КоличествоВыборки - Число - количество выборки.
//
// Возвращаемое значение:
//	Массив - массив выполненных запросов.
//
Функция СписокРеализованныхПожеланий(Знач Пользователь, Знач СписокКомпонентов, Знач ТипСортировки, Знач КоличествоВыборки) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 5
        |   Пожелания.Ссылка КАК Пожелание,
        |   Пожелания.ДатаЗакрытия КАК ДатаЗакрытия
        |ПОМЕСТИТЬ Пожелания
        |ИЗ
        |   Справочник.Пожелания КАК Пожелания
        |ГДЕ
        |   НЕ Пожелания.ПометкаУдаления
        |   И Пожелания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПожеланий.Реализовано)
        |   И Пожелания.Компоненты.Компонент В(&СписокКомпонентов)
        |   И Пожелания.Сервисы.Сервис В(&Сервис)
        |   И Пожелания.Публикуется
        |
        |УПОРЯДОЧИТЬ ПО
        |   ДатаЗакрытия УБЫВ,
        |   Пожелание
        |
        |ИНДЕКСИРОВАТЬ ПО
        |   ДатаЗакрытия,
        |   Пожелание";
	
	Если ТипСортировки <> "ClosingDate" Тогда 
		ВызватьИсключение НСтр("ru = 'Некорректный тип сортировки'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКомпонентов", СписокКомпонентов);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
    Запрос.УстановитьПараметр("Сервис", Пользователь.Владелец);
	ТекстЗапроса = ТекстЗапроса + ТекстОсновногоЗапроса();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 5", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоВыборки, "ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстИндексацииСортировка", "ДатаЗакрытия УБЫВ");
	Запрос.Текст = ТекстЗапроса;
	
    УстановитьПараметрыПоказателейПожеланий(Запрос);
    
    Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// Возвращает список запланированных к реализации пожеланий.
//
// Параметры:
//	Пользователь - СправочникСсылка.ПользователиСервисов - пользователь.
//	СписокКомпонентов - СправочникСсылка.КомпонентыСервиса - компоненты.
//	ТипСортировки - Строка - тип сортировки.
//	КоличествоВыборки - Число - количество выборки.
//
// Возвращаемое значение:
//	Массив - массив выполненных запросов.
//
Функция СписокЗапланированныхКРеализацииПожеланий(Знач Пользователь, Знач СписокКомпонентов, Знач ТипСортировки, Знач КоличествоВыборки) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 5
        |   Пожелания.Ссылка КАК Пожелание,
        |   Пожелания.ПлановаяДатаРеализации КАК ПлановаяДатаРеализации
        |ПОМЕСТИТЬ Пожелания
        |ИЗ
        |   Справочник.Пожелания КАК Пожелания
        |ГДЕ
        |   НЕ Пожелания.ПометкаУдаления
        |   И Пожелания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПожеланий.Запланировано)
        |   И Пожелания.Компоненты.Компонент В(&СписокКомпонентов)
        |   И Пожелания.Сервисы.Сервис В(&Сервис)
        |   И Пожелания.Публикуется
        |
        |УПОРЯДОЧИТЬ ПО
        |   ПлановаяДатаРеализации,
        |   Пожелание
        |
        |ИНДЕКСИРОВАТЬ ПО
        |   ПлановаяДатаРеализации,
        |   Пожелание";
	
	Если ТипСортировки <> "PlanMadeDate" Тогда 
		ВызватьИсключение НСтр("ru = 'Некорректный тип сортировки'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКомпонентов", СписокКомпонентов);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
    Запрос.УстановитьПараметр("Сервис", Пользователь.Владелец);
	ТекстЗапроса = ТекстЗапроса + ТекстОсновногоЗапроса();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 5", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоВыборки, "ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстИндексацииСортировка", "ПлановаяДатаРеализации УБЫВ");
	Запрос.Текст = ТекстЗапроса;
    
    УстановитьПараметрыПоказателейПожеланий(Запрос);
    
    Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// Возвращает список избранных пожеланий.
//
// Параметры:
//	Пользователь - СправочникСсылка.ПользователиСервисов - пользователь.
//	СписокКомпонентов - СправочникСсылка.КомпонентыСервиса - предметы
//	ТипСортировки - Строка - тип сортировки.
//	КоличествоВыборки - Число - количество выборки.
//
// Возвращаемое значение:
//	Массив - массив выполненных запросов.
//
Функция СписокИзбранныхПожеланий(Знач Пользователь, Знач СписокКомпонентов, Знач ТипСортировки, Знач КоличествоВыборки) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 5
        |   Пожелания.Пожелание КАК Пожелание,
        |   Пожелания.ДатаИзменения КАК ДатаИзменения
        |ПОМЕСТИТЬ Пожелания
        |ИЗ
        |   РегистрСведений.ИзбранныеПожелания КАК Пожелания
        |ГДЕ
        |   Пожелания.Пользователь = &Пользователь
        |   И НЕ Пожелания.Пожелание.ПометкаУдаления
        |   И НЕ Пожелания.Пожелание.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПожеланий.Дубль)
        |   И Пожелания.Пожелание.Компоненты.Компонент В(&СписокКомпонентов)
        |   И Пожелания.Пожелание.Сервисы.Сервис В(&Сервис)
        |   И Пожелания.Пожелание.Публикуется
        |
        |УПОРЯДОЧИТЬ ПО
        |   ДатаИзменения УБЫВ,
        |   Пожелание
        |
        |ИНДЕКСИРОВАТЬ ПО
        |   ДатаИзменения,
        |   Пожелание";
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКомпонентов", СписокКомпонентов);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
    Запрос.УстановитьПараметр("Сервис", Пользователь.Владелец);
	ТекстЗапроса = ТекстЗапроса + ТекстОсновногоЗапроса();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 5", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоВыборки, "ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстИндексацииСортировка", "ДатаИзменения УБЫВ");
	Запрос.Текст = ТекстЗапроса;
	
    УстановитьПараметрыПоказателейПожеланий(Запрос);
    
    Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// Возвращает представление пожелания.
//
// Параметры:
//	СсылкаНаПожелание - СправочникСсылка.Пожелания - Пожелание.
//	Пользователь - СправочникСсылка.ПользователиСервисов - пользователь. для кого нужно получить представление.
//
// Возвращаемое значение:
//	Массив - массив результатов запросов.
//
Функция ПолучитьПредставлениеПожелания(Знач СсылкаНаПожелание, Знач Пользователь) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Пожелания.Ссылка КАК Пожелание
		|ПОМЕСТИТЬ Пожелания
		|ИЗ
		|	Справочник.Пожелания КАК Пожелания
		|ГДЕ
		|	НЕ Пожелания.ПометкаУдаления
		|	И Пожелания.Ссылка = &СсылкаНаПожелание
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаПожелание", СсылкаНаПожелание);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	ТекстЗапроса = ТекстЗапроса + ТекстОсновногоЗапроса();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстИндексацииСортировка", "Пожелание УБЫВ");
	Запрос.Текст = ТекстЗапроса;
	
    УстановитьПараметрыПоказателейПожеланий(Запрос);
    
    Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// Возвращает текст основного запроса для получения списка пожеланий.
//  
//  Возвращаемое занчение:
//  Строка - текст запроса.
// 
// Возвращаемое значение:
//   - 
//
Функция ТекстОсновногоЗапроса()
	
	ТекстЗапроса = 
		";
		|////////////////////////////////////////////////////////////////////////////////
		|" +
        "ВЫБРАТЬ
        |   КОЛИЧЕСТВО(Пожелания.Пожелание) КАК КоличествоПожеланий
        |ИЗ
        |   Пожелания КАК Пожелания
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ЗначенияПоказателей.Объект КАК Пожелание,
        |   СУММА(ВЫБОР
        |           КОГДА ЗначенияПоказателей.Показатель = &СуммаОтрицательныхГолосов
        |               ТОГДА ЗначенияПоказателей.ЗначениеОборот
        |           ИНАЧЕ 0
        |       КОНЕЦ) КАК СуммаОтрицательныхГолосов,
        |   СУММА(ВЫБОР
        |           КОГДА ЗначенияПоказателей.Показатель = &СуммаПоложительныхГолосов
        |               ТОГДА ЗначенияПоказателей.ЗначениеОборот
        |           ИНАЧЕ 0
        |       КОНЕЦ) КАК СуммаПоложительныхГолосов,
        |   СУММА(ВЫБОР
        |           КОГДА ЗначенияПоказателей.Показатель = &КоличествоКомментариев
        |               ТОГДА ЗначенияПоказателей.ЗначениеОборот
        |           ИНАЧЕ 0
        |       КОНЕЦ) КАК КоличествоКомментариев,
        |   СУММА(ВЫБОР
        |           КОГДА ЗначенияПоказателей.Показатель = &СуммаГолосов
        |               ТОГДА ЗначенияПоказателей.ЗначениеОборот
        |           ИНАЧЕ 0
        |       КОНЕЦ) КАК СуммаГолосов
        |ПОМЕСТИТЬ Агрегаторы
        |ИЗ
        |   РегистрНакопления.ЗначенияПоказателей.Обороты(
        |           ,
        |           ,
        |           ,
        |           Объект В
        |               (ВЫБРАТЬ
        |                   Пожелания.Пожелание
        |               ИЗ
        |                   Пожелания КАК Пожелания)) КАК ЗначенияПоказателей
        |
        |СГРУППИРОВАТЬ ПО
        |   ЗначенияПоказателей.Объект
        |
        |ИНДЕКСИРОВАТЬ ПО
        |   Пожелание
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   Пожелания.Пожелание КАК Пожелание,
        |   ГолосаПользователейЗаПожелания.Голос КАК ГолосПользователя
        |ПОМЕСТИТЬ ПроголосованныеПожелания
        |ИЗ
        |   Пожелания КАК Пожелания
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГолосаПользователейЗаПожелания КАК ГолосаПользователейЗаПожелания
        |       ПО Пожелания.Пожелание = ГолосаПользователейЗаПожелания.Пожелание
        |ГДЕ
        |   ГолосаПользователейЗаПожелания.Пользователь = &Пользователь
        |
        |ИНДЕКСИРОВАТЬ ПО
        |   Пожелание
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   Пожелания.Пожелание КАК Пожелание,
        |   ЕСТЬNULL(Агрегаторы.СуммаОтрицательныхГолосов, 0) КАК СуммаОтрицательныхГолосов,
        |   ЕСТЬNULL(Агрегаторы.СуммаПоложительныхГолосов, 0) КАК СуммаПоложительныхГолосов,
        |   ЕСТЬNULL(Агрегаторы.СуммаГолосов, 0) КАК СуммаГолосов,
        |   ЕСТЬNULL(Агрегаторы.СуммаГолосов, 0) КАК Рейтинг,
        |   ЕСТЬNULL(Агрегаторы.КоличествоКомментариев, 0) КАК КоличествоКомментариев,
        |   ЕСТЬNULL(ПроголосованныеПожелания.ГолосПользователя, 0) КАК ГолосПользователя
        |ИЗ
        |   Пожелания КАК Пожелания
        |       ЛЕВОЕ СОЕДИНЕНИЕ Агрегаторы КАК Агрегаторы
        |       ПО Пожелания.Пожелание = Агрегаторы.Пожелание
        |       ЛЕВОЕ СОЕДИНЕНИЕ ПроголосованныеПожелания КАК ПроголосованныеПожелания
        |       ПО Пожелания.Пожелание = ПроголосованныеПожелания.Пожелание
        |
        |УПОРЯДОЧИТЬ ПО
        |   &ТекстИндексацииСортировка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает список комментариев по пожеланию.
//
// Параметры:
//	Пожелание - СправочникСсылка.Пожелания - Пожелание.
//	КоличествоВыборки  - Число - количество выборки.
//
// Возвращаемое занчение:
//	РезультатЗапроса - результат запроса.
//
Функция КомментраииПоПожеланию(Знач Пожелание, Знач КоличествоВыборки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пожелание", Пожелание);
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КомментарийПользователя.Ссылка) КАК КоличествоКомментариев
		|ИЗ
		|	Документ.КомментарийПользователя КАК КомментарийПользователя
		|ГДЕ
		|	КомментарийПользователя.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ %1
		|	КомментарийПользователя.Дата КАК Дата,
		|	КомментарийПользователя.Ссылка КАК Комментарий
		|ИЗ
		|	Документ.КомментарийПользователя КАК КомментарийПользователя
		|ГДЕ
		|	КомментарийПользователя.Предмет = &Пожелание
		|	И КомментарийПользователя.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, Строка(КоличествоВыборки));
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// Добавление нового пожелания.
//
// Параметры:
//	Наименование - Строка - наименование пожелания.
//	ТекстHTML - Строка - HTML-текст пожелания.
//	ВложенияHTML - Структура - вложения HTML.
//
// Возвращаемое значение:
//	СправочникСсылка.Пожелания - Пожелание.
//
Функция ДобавитьПожелание(Знач Наименование, Знач ТекстHTML, Знач ВложенияHTML, Знач Компонент, Знач Автор,  Знач ДатаРегистрации) Экспорт 
    
    Сервис = Автор.Владелец;
    Контекст = ВзаимодействияУСП.КонтекстПриложения(ТекстHTML, Сервис);
    Витрина = Неопределено;
    Контекст.Свойство("Витрина", Витрина);
    Если Не ЗначениеЗаполнено(Витрина) Тогда
        Витрина = БазаЗнанийПовтИсп.ОсновнаяВитринаСервиса(Сервис);
    КонецЕсли; 
    
	НовоеПожелание = Справочники.Пожелания.СоздатьЭлемент();
	НовоеПожелание.Наименование = Наименование;
	НовоеПожелание.ДатаРегистрации = ДатаРегистрации;
    НовоеПожелание.Публикуется = Истина;
	НовоеПожелание.Автор = Автор;
	НовоеПожелание.Состояние = Перечисления.СостоянияПожеланий.Рассматривается;
    НовоеПожелание.ДобавитьСервис(Сервис, Витрина);
	НовоеПожелание.ДобавитьКомпонент(Компонент);
    
    ОписаниеФорматированныйДокумент = Новый ФорматированныйДокумент;
    ОписаниеФорматированныйДокумент.УстановитьHTML(ТекстHTML, ВложенияHTML);
    НовоеПожелание.ОписаниеХранилище = Новый ХранилищеЗначения(ОписаниеФорматированныйДокумент);
    НовоеПожелание.Описание = ОписаниеФорматированныйДокумент.ПолучитьТекст();
	НовоеПожелание.Записать();
	
	Возврат НовоеПожелание.Ссылка;
	
КонецФункции

// Возвращает ссылку на компонент идие по его наименованию.
//
// Параметры:
//	ИмяПредмета - Строка - наименование предмета.
//
// Возвращаемое значение:
//	СправочникСсылка.КомпонентыСервиса - предмет.
//
Функция ПредметПоНаименованию(Знач НаименованиеКомпонента) Экспорт
    
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", НаименованиеКомпонента);
	Запрос.Текст =
		"ВЫБРАТЬ
        |   Компоненты.Ссылка КАК Ссылка
        |ИЗ
        |   Справочник.КомпонентыСервиса КАК Компоненты
        |ГДЕ
        |   Компоненты.Наименование = &Наименование";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл 
		Возврат ВыборкаЗапроса.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.КомпонентыСервиса.ПустаяСсылка();
	
КонецФункции

// Производит полнотекстовый поиск по Пожеланием.
//
// Параметры:
//	ПоисковыйЗапрос - Строка - поисковый запрос.
//	Пользователь - СправочникСсылка.ПользователиСервисов - пользователь.
//	СписокКомпонентов - СправочникСсылка.КомпонентыСервиса - предметы
//	ТипСортировки - Строка - тип сортировки.
//	КоличествоВыборки - Число - количество выборки.
// Возвращаемое значение:
//	Массив - массив выполненных запросов.
//
Функция НайтиПожелания(Знач ПоисковыйЗапрос, Знач Пользователь, Знач СписокКомпонентов, Знач КоличествоВыборки) Экспорт
	
	МассивОтбор = Новый Массив();
	МассивОтбор.Добавить(Метаданные.Справочники.Пожелания);
	
	Пожелания = ПолнотекстовыйПоиск.СоздатьСписок(ПоисковыйЗапрос, КоличествоВыборки);
	Пожелания.ОбластьПоиска = МассивОтбор;
	Пожелания.ПерваяЧасть();
	
	НайденныеПожелания = Новый ТаблицаЗначений;
	НайденныеПожелания.Колонки.Добавить("Пожелание", Новый ОписаниеТипов("СправочникСсылка.Пожелания"));
	
	Для Каждого Результат Из Пожелания Цикл
		Строка = НайденныеПожелания.Добавить();
		Строка.Пожелание = Результат.Значение;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКомпонентов", СписокКомпонентов);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("НайденныеПожелания", НайденныеПожелания);
	ТекстЗапроса = 
		"ВЫБРАТЬ
        |   НайденныеПожелания.Пожелание КАК Пожелание
        |ПОМЕСТИТЬ НайденныеПожелания
        |ИЗ
        |   &НайденныеПожелания КАК НайденныеПожелания
        |
        |ИНДЕКСИРОВАТЬ ПО
        |   Пожелание
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ ПЕРВЫЕ 100
        |   Пожелания.Ссылка КАК Пожелание
        |ПОМЕСТИТЬ СписокВсехПожеланий
        |ИЗ
        |   Справочник.Пожелания КАК Пожелания
        |ГДЕ
        |   НЕ Пожелания.ПометкаУдаления
        |   И Пожелания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПожеланий.НаГолосовании)
        |   И Пожелания.Компоненты.Компонент В(&СписокКомпонентов)
        |
        |ОБЪЕДИНИТЬ
        |
        |ВЫБРАТЬ ПЕРВЫЕ 100
        |   Пожелания.Ссылка
        |ИЗ
        |   Справочник.Пожелания КАК Пожелания
        |ГДЕ
        |   НЕ Пожелания.ПометкаУдаления
        |   И Пожелания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПожеланий.Рассматривается)
        |   И Пожелания.Компоненты.Компонент В(&СписокКомпонентов)
        |   И Пожелания.Автор = &Пользователь
        |
        |ОБЪЕДИНИТЬ
        |
        |ВЫБРАТЬ ПЕРВЫЕ 100
        |   Пожелания.Ссылка
        |ИЗ
        |   Справочник.Пожелания КАК Пожелания
        |ГДЕ
        |   НЕ Пожелания.ПометкаУдаления
        |   И Пожелания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПожеланий.Отклонено)
        |   И Пожелания.Компоненты.Компонент В(&СписокКомпонентов)
        |   И Пожелания.Автор = &Пользователь
        |
        |ОБЪЕДИНИТЬ
        |
        |ВЫБРАТЬ ПЕРВЫЕ 100
        |   Пожелания.Ссылка
        |ИЗ
        |   Справочник.Пожелания КАК Пожелания
        |ГДЕ
        |   НЕ Пожелания.ПометкаУдаления
        |   И Пожелания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПожеланий.Реализовано)
        |   И Пожелания.Компоненты.Компонент В(&СписокКомпонентов)
        |
        |ОБЪЕДИНИТЬ
        |
        |ВЫБРАТЬ ПЕРВЫЕ 100
        |   Пожелания.Ссылка
        |ИЗ
        |   Справочник.Пожелания КАК Пожелания
        |ГДЕ
        |   НЕ Пожелания.ПометкаУдаления
        |   И Пожелания.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПожеланий.Запланировано)
        |   И Пожелания.Компоненты.Компонент В(&СписокКомпонентов)
        |
        |ИНДЕКСИРОВАТЬ ПО
        |   Пожелание
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ ПЕРВЫЕ 5
        |   НайденныеПожелания.Пожелание КАК Пожелание
        |ПОМЕСТИТЬ Пожелания
        |ИЗ
        |   НайденныеПожелания КАК НайденныеПожелания
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокВсехПожеланий КАК СписокВсехПожеланий
        |       ПО НайденныеПожелания.Пожелание = СписокВсехПожеланий.Пожелание
        |
        |ИНДЕКСИРОВАТЬ ПО
        |   Пожелание";
	ТекстЗапроса = ТекстЗапроса + ТекстОсновногоЗапроса();

    ТекстИндексации = "ДатаСоздания";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 5", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоВыборки,"ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстИндексацииСортировка", ТекстИндексации + " УБЫВ");
	Запрос.Текст = ТекстЗапроса;
	
    УстановитьПараметрыПоказателейПожеланий(Запрос);
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// Добавляет голоса пользователей.
//
// Параметры:
//	МассивПользователей - Массив - массив пользователей.
//	Пожелание - СправочникСсылка.ПожеланияПользователей - пожелание.
//
Процедура ДобавитьГолосаПользователейКПожеланию(МассивПользователей, Пожелание, Голос = 1) Экспорт
    
    
	Если Пожелание.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
    
	Попытка
	
        УстановитьПривилегированныйРежим(Истина);
		Для Каждого Пользователь из МассивПользователей Цикл
			
			Если Пользователь.Пустая() Тогда 
				Продолжить;
			КонецЕсли;
			
			Документ = ГолосЗаПожеланиеПоПожеланиюИПользователю(Пожелание, Пользователь);
			Документ.ПометкаУдаления = Ложь;
			Документ.Пожелание = Пожелание;
			Документ.Пользователь = Пользователь;
			Документ.Дата = ТекущаяУниверсальнаяДата();
			Документ.Голос = Голос;
			Документ.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
        УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает документ "ГолосЗаПожелание" по пожеланию и пользователю.
//
// Параметры:
//	Пожелание - СправочникСсылка.Пожелания - Пожелание.
//	Пользователь - СправочникСсылка.ПользователиСервисов - пользователь.
//
// Возвращаемое значение:
//	ДокументСсылка.ГолосЗаПожелание - голос.
//
Функция ГолосЗаПожеланиеПоПожеланиюИПользователю(Знач Пожелание, Знач Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаОбъект", Пожелание);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГолосЗаПожелание.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ГолосЗаПожелание КАК ГолосЗаПожелание
		|ГДЕ
		|	ГолосЗаПожелание.Пользователь = &Пользователь
		|	И ГолосЗаПожелание.Пожелание = &СсылкаНаОбъект";
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл 
		Возврат ВыборкаДокументов.Ссылка.ПолучитьОбъект();
	КонецЦикла;
	
	Возврат Документы.ГолосЗаПожелание.СоздатьДокумент();
	
КонецФункции

// Добавляет комментарий к пожеланию.
//
// Параметры:
//	Пожелание - СправочникСсылка.Пожелания - Пожелание.
//	Пользователь - СправочникСсылка.ПользователиСервисов - пользователь.
//	ОсновнойКомментарий - ДокументСсылка.КомментарийПользователя - комментарий.
//	Текст - Строка - текст комментария.
//	Дата - Дата - дата комментария.
//
Процедура ДобавитьКомментрийКПожеланию(Знач Пожелание, Знач Пользователь, Знач ОсновнойКомментарий, Знач ТекстHTML, Знач Дата) Экспорт
	
	НачатьТранзакцию();
    
    Попытка
		
        Сервис = Пользователь.Владелец;
        
        Контекст = ВзаимодействияУСП.КонтекстПриложения(ТекстHTML, Сервис);
        Витрина = Неопределено;
        Контекст.Свойство("Витрина", Витрина);
        Если Не ЗначениеЗаполнено(Витрина) Тогда
            Принадлежность = БазаЗнаний.ОсновнаяПринадлежностьКарточки(Пожелание);
            Если Сервис = Принадлежность.Сервис Тогда
                Витрина = Принадлежность.Витрина;
            КонецЕсли;
        КонецЕсли;
        
        Если Не ЗначениеЗаполнено(Витрина) Тогда
            Витрина = БазаЗнанийПовтИсп.ОсновнаяВитринаСервиса(Сервис);
        КонецЕсли; 
    
        ПозицияНачалаКонтекста = Найти(ТекстHTML, "<!-- @AddInfo");
        Если ПозицияНачалаКонтекста <> 0 Тогда
            ТекстHTML = Лев(ТекстHTML, ПозицияНачалаКонтекста - 1);
        КонецЕсли; 
        
        ФорматированныйДокумент = Новый ФорматированныйДокумент;
        ФорматированныйДокумент.УстановитьHTML(ТекстHTML, Новый Структура);
        
		НовыйКомментарий = Документы.КомментарийПользователя.СоздатьДокумент();
        НовыйКомментарий.Сервис = Сервис;
        НовыйКомментарий.Витрина = Витрина;
        НовыйКомментарий.Автор = Пользователь;
		НовыйКомментарий.Предмет = Пожелание;
		НовыйКомментарий.Описание = СокрЛП(ТекстHTML);
		НовыйКомментарий.Тема = СокрЛП(ТекстHTML);
		НовыйКомментарий.Дата = Дата;
		НовыйКомментарий.ВзаимодействиеОснование = ОсновнойКомментарий;
        НовыйКомментарий.ОписаниеХранилище = Новый ХранилищеЗначения(ФорматированныйДокумент);
        
		НовыйКомментарий.Записать(РежимЗаписиДокумента.Проведение);
        
        Взаимодействия.УстановитьПредмет(НовыйКомментарий.Ссылка, Пожелание, Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Удаляет комментарий.
//
// Параметры:
//	СсылкаНаКомментарий - ДокументСсылка.КомментарийПользователя - комментарий пользователя к пожеланию.
//
Процедура УдалитьКомментарий(Знач СсылкаНаКомментарий) Экспорт
	
	НачатьТранзакцию();
    
    Попытка
		
		Комментрий = СсылкаНаКомментарий.ПолучитьОбъект();
		Комментрий.УстановитьПометкуУдаления(Истина);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает: является или нет данный комментарий комментарием службы поддержки.
//
// Пользователь^
//	Пользователь - СправочникСсылка.ПользователиСервисов.
//
// Возвращаемое значение:
//	Булево - Истина, если является, Ложь - иначе.
//
Функция ЭтоКомментарийСлужбыПоддержки(Знач Пользователь) Экспорт 
	
	Возврат ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи");
	
КонецФункции

Функция ЧислоПожеланийНаСтранице() Экспорт
	
	Возврат 6;
	
КонецФункции

#КонецОбласти

#Область Оповещения

// Оповещает пользователей о событиях в Информационном центре.
//
Процедура ОповеститьПользователей() Экспорт
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОповещенияИнформационногоЦентра");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
	
		НаборЗаписей = РегистрыСведений.ОповещенияИнформационногоЦентра.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл 
			Объект = Запись.Объект;
			Если ТипЗнч(Объект) = Тип("СправочникСсылка.Пожелания") Тогда
				ОповеститьОПожелании(Объект);
			ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.КомментарийПользователя") Тогда
				ОповеститьОКомментарии(Объект);
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурнал(ИмяСобытияДляЖурналаРегистрации() + ". " + НСтр("ru='Рассылка оповещений'"), ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Оповещает о комментарии.
//
// Параметры:
//	Комментарий - ДокументСсылка.КомментарийПользователи - комментарий.
//
Процедура ОповеститьОКомментарии(Знач Комментарий) Экспорт 
	
	Если Комментарий.Пустая() Или Не Комментарий.Проведен Тогда 
		Возврат;
	КонецЕсли;
	
    ОсновнойКомментарий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Комментарий, "ВзаимодействиеОснование");
    Если ОсновнойКомментарий = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    СвойстваКомментария = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновнойКомментарий, "Проведен, Автор, Сервис, Витрина");
    Если Не СвойстваКомментария.Проведен Тогда 
        Возврат;
    КонецЕсли;
    
    АдресаКонтакта = КонтактнаяИнформацияУСП.АктуальныеАдресаОтправкиПользователяСервиса(СвойстваКомментария.Автор);
    Сервис = Комментарий.Пользователь.Владелец;
    ДанныеКонтакта = АдресаКонтакта[0];
    ШаблонТекста = Справочники.ШаблоныТекстов.ШаблонПоТипу(Справочники.ТипыШаблоновТекстов.ПисьмоОтветНаКомментарийКПожеланию, 
                   СвойстваКомментария.Сервис, СвойстваКомментария.Витрина);
    УчетнаяЗапись = ВзаимодействияУСП.УчетнаяЗаписьПоддержки(СвойстваКомментария.Сервис, СвойстваКомментария.Витрина);    
    Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
        ВызватьИсключение НСтр("ru='Не установлена учетная запись для отправки писем.'");
    КонецЕсли; 
    
    СоздатьПисьмоДляОтправки(ШаблонТекста, Комментарий, УчетнаяЗапись, ДанныеКонтакта);
    
КонецПроцедуры

// Оповещает о пожелании.
//
// Параметры:
//	Пожелание - СправочникСсылка.Пожелания - Пожелание.
//
Процедура ОповеститьОПожелании(Знач Пожелание) Экспорт
	
	Если Пожелание.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Пожелание.Состояние = Перечисления.СостоянияПожеланий.Рассматривается Тогда 
		ИмяМакета = Справочники.ТипыШаблоновТекстов.ПисьмоПожеланиеДобавлено;
        
    ИначеЕсли Пожелание.Состояние = Перечисления.СостоянияПожеланий.Реализовано Тогда
		ИмяМакета = Справочники.ТипыШаблоновТекстов.ПисьмоПожеланиеРеализовано;
        Справочники.Новости.ДобавитьНовость(СтрШаблон(НСтр("ru = 'Реализована идея ''%1'''"), Пожелание), Пожелание, 5);	
        
    ИначеЕсли Пожелание.Состояние = Перечисления.СостоянияПожеланий.Запланировано Тогда
		ИмяМакета = Справочники.ТипыШаблоновТекстов.ПисьмоПожеланиеЗапланированоКРеализации;
        
    ИначеЕсли Пожелание.Состояние = Перечисления.СостоянияПожеланий.НаГолосовании Тогда
		ИмяМакета = Справочники.ТипыШаблоновТекстов.ПисьмоПожеланиеНаГолосовании;
        Справочники.Новости.ДобавитьНовость(СтрШаблон(НСтр("ru = 'Новая идея ''%1'''"), Пожелание), Пожелание, 3);	
        
    ИначеЕсли Пожелание.Состояние = Перечисления.СостоянияПожеланий.Отклонено Тогда
		ИмяМакета = Справочники.ТипыШаблоновТекстов.ПисьмоПожеланиеОтклонено;
        
    ИначеЕсли Пожелание.Состояние = Перечисления.СостоянияПожеланий.Дубль Тогда
		ИмяМакета = Справочники.ТипыШаблоновТекстов.ПисьмоПожеланиеЯвляетсяДублем;
        
    КонецЕсли;
	
	ОтправитьОповещениеПожеланияПоЭлектроннойПочте(ИмяМакета, Пожелание);
	
КонецПроцедуры

// Отправляет оповещение по почте по пожеланию.
//
// Параметры:
//  ТипШаблона - СправочникСсылка.ТипыШаблоновТекстов - тип шаблона текста.
//  Пожелание - СправочникСсылка.Пожелания - Пожелание.
//
Процедура ОтправитьОповещениеПожеланияПоЭлектроннойПочте(Знач ТипШаблона, Знач Пожелание)
	
	// Формирование промежуточных данных
	ОсновнаяКарточка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пожелание, "ОсновнаяКарточка");
    
    Если ОсновнаяКарточка = Неопределено Тогда 
		ОсновнаяКарточка = Справочники.Пожелания.ПустаяСсылка();
	КонецЕсли;
    
    ПользовательОсновнойКарточки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнаяКарточка, "Автор");
	Если ПользовательОсновнойКарточки = Неопределено Тогда 
		ПользовательОсновнойКарточки = Справочники.ПользователиСервисов.ПустаяСсылка();
	КонецЕсли;
    
    Выборка = ПолучитьСписокПользователейПоПожеланию(Пожелание);
    Принадлежность = БазаЗнаний.ОсновнаяПринадлежностьКарточки(Пожелание);
    УчетнаяЗапись = ВзаимодействияУСП.УчетнаяЗаписьПоддержки(Принадлежность.Сервис, Принадлежность.Витрина);
    ШаблонТекста = Справочники.ШаблоныТекстов.ШаблонПоТипу(ТипШаблона, Принадлежность.Сервис, Принадлежность.Витрина);
    
    Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
        ВызватьИсключение НСтр("ru='Не установлена учетная запись для отправки писем.'");
    КонецЕсли; 
    
    Пока Выборка.Следующий() Цикл 
        
        Если ТипЗнч(Выборка.Пользователь) = Тип("СправочникСсылка.ПользователиСервисов") Тогда
    	    АдресаКонтакта = КонтактнаяИнформацияУСП.АктуальныеАдресаОтправкиПользователяСервиса(Выборка.Пользователь);
        ИначеЕсли ТипЗнч(Выборка.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
    	    АдресаКонтакта = КонтактнаяИнформацияУСП.ВсеЭлектронныеАдресаПользователя(Выборка.Пользователь);
        Иначе
            Продолжить;
        КонецЕсли;
        
        Если АдресаКонтакта.Количество() = 0 Тогда
            Продолжить;
		КонецЕсли;
    	ДанныеКонтакта = АдресаКонтакта[0];
        ТаблицаКартинок = Новый ТаблицаЗначений; // Для сохранения вложений картинок
        СоздатьПисьмоДляОтправки(ШаблонТекста, Пожелание, УчетнаяЗапись, ДанныеКонтакта)
        
    КонецЦикла;    
        
КонецПроцедуры

// Возвращает выборку с пользователями, которые:
//	1. Голосовали за пожелание порложительно.
//	2. Сообщения которых являлись основанием для пожеланияю
//	3. Комментировали пожелание.
//
// Параметры:
//	Пожелание - СправочникСсылка.ПожеланияПользователей - пожелание.
//
// Возвращаемое значение:
//	ВыборкаЗапроса - выборка пользователей.
//
Функция ПолучитьСписокПользователейПоПожеланию(Знач Пожелание)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаОбъект", Пожелание);
	Запрос.Текст =
		"ВЫБРАТЬ
        |   ИзбранныеПожелания.Пользователь КАК Пользователь
        |ИЗ
        |   РегистрСведений.ИзбранныеПожелания КАК ИзбранныеПожелания
        |ГДЕ
        |   ИзбранныеПожелания.Пожелание = &СсылкаНаОбъект
        |   И НЕ ИзбранныеПожелания.Пожелание.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает имя события для журнала регистрации
//
// Возвращаемое значение:
//	Строка - имя события для журнала регистрации.
//
Функция ИмяСобытияДляЖурналаРегистрации() Экспорт
	
	Возврат ИнтеграцияСИнформационнымЦентром.СобытиеЖурналаРегистрации() + ". " + НСтр("ru='Пожелания пользователей'");
	
КонецФункции

// Возвращает представление даты реализации для Пожелания.
//
// Параметры:
//	Дата - Дата - дата.
//	Периодичность - ПеречислениеСсылка.Периодичность - период.
//
// Возвращаемое значение:
//	Строка - представление даты реализации.
//
Функция ПредставлениеДатыРеализации(Знач Дата, Знач Периодичность) Экспорт 
	
	Если Периодичность = Перечисления.Периодичность.День Тогда 
		Возврат Формат(Дата, "Л=ru; ДЛФ=DD");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда 
		Возврат Формат(Дата, "Л=ru; ДФ='ММММ гггг'") + НСтр("ru = ' г.'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда 
		Возврат Формат(Дата, "ДФ='к'") + НСтр("ru = ' квартал '") + Формат(Дата, "ДФ='гггг'") + НСтр("ru = ' г.'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда 
		НомерКвартала = Число(Формат(Дата, "ДФ='к'"));
		Возврат Строка(?(НомерКвартала = 1 Или НомерКвартала = 2, 1, 2)) + НСтр("ru = ' полугодие '") + Формат(Дата, "ДФ='гггг'") + НСтр("ru = ' г.'");;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат Формат(Дата, "ДФ='гггг'") + НСтр("ru = ' г.'");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает максимальное число выбранных пожеланий.
//
// Возвращаемое значение:
//	Число - максимальное число выбранных пожеланий.
//
Функция МаксимальноеЧислоВыбранныхПожеланий() Экспорт 
	
	Возврат 1000;
	
КонецФункции

// Возвращает максимальное число выбранных комментариев к Пожеланием.
//
// Возвращаемое значение:
//	Число - максимальное число выбранных комментариев.
//
Функция МаксимальноеЧислоВыбранныхКомментариевКПожеланием() Экспорт 
	
	Возврат 1000;
	
КонецФункции

// Возвращает представление пожелания.
//
// Параметры:
//	Пожелание - СправочникСсылка.Пожелания - Пожелание.
//
// Возвращаемое значение:
//	Строка - представление пожелания.
//
Функция ПредставлениеПожелания(Знач Пожелание) Экспорт 
	
	Если Пожелание.Пустая() Тогда 
		Возврат "";
	КонецЕсли;
	
	СвойстваПожелания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Пожелание, "Наименование, Код");
	
	Возврат СвойстваПожелания.Наименование + " (#" + ПрефиксацияОбъектов.УдалитьЛидирующиеНулиИзНомераОбъекта(СвойстваПожелания.Код) + ")";
	
КонецФункции

// Записать информацию об ошибке в журнал регистрации.
//
// Параметры:
//  Событие - Строка, имя события при котором произошла ошибка.
//  Описание - Строка, удобочитаемое описание ошибки.
//  Ошибка - Строка, описание ошибки;
//         - ИнформацияОбОшибке, структурированное описание ошибки.
//  Мета - ОбъектМетаданных, объект метаданных, к которому относится событие.
//  Данные - данные, с которыми связано событие.
//  Транзакция - РежимТранзакцииЗаписиЖурналаРегистрации, указывает отношение
//               записи к текущей транзакции.
//
Процедура ЗаписатьОшибкуВЖурнал(Событие,
                                Описание = Неопределено,
                                Ошибка = Неопределено,
                                Мета = Неопределено,
                                Данные = Неопределено,
                                Транзакция = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		Событие,
		УровеньЖурналаРегистрации.Ошибка,
		Мета,
		Данные,
		ТекстОшибки(Описание, Ошибка),
		Транзакция);
	
КонецПроцедуры // ЗаписатьОшибкуВЖурнал()

// Сформировать текст ошибки, начинающийся с дополнительного
// описания и заканчивающийся техническими подробностсями.
//
// Параметры:
//  Описание - Строка, дополнительное описание ошибки.
//  Ошибка - ИнформацияОбОшибке, структурированное описание ошибки;
//         - Строка, текстовое описание ошибки.
//
// Возвращаемое значение:
//  
//
Функция ТекстОшибки(Описание, Ошибка)
	
	Возврат "" + Описание + ?(Описание = Неопределено, "", "
		|
		|") + ИнформациюОбОшибкеВСтроку(Ошибка);
	
КонецФункции // ТекстОшибки()

// Преобразовать объект типа ИнформацияОбОшибке в строку.
//
// Параметры:
//  Ошибка - ИнформацияОбОшибке, структурированное описание ошибки;
//         - Строка, текстовое описание ошибки.
//  НомерПричины - Число, номер причины ошибки (служебный параметр).
//
// Возвращаемое значение:
//  Строка - Строковое предстваление ошибки.
//
Функция ИнформациюОбОшибкеВСтроку(Ошибка, НомерПричины = 0)
	
	ТипОшибки = ТипЗнч(Ошибка);
	ТипИнформацияОбОшибке = Тип("ИнформацияОбОшибке");
	ТипСтруктура = Тип("Структура");
	
	Если ТипОшибки = ТипИнформацияОбОшибке Или ТипОшибки = ТипСтруктура Тогда
		Текст = Ошибка.Описание;
		
		Если Не ПустаяСтрока(Ошибка.ИмяМодуля) Тогда
			Текст = Текст + "
				|
				|{" + Ошибка.ИмяМодуля + "(" + Ошибка.НомерСтроки + ")}";
		КонецЕсли;
		
		Если Не ПустаяСтрока(Ошибка.ИсходнаяСтрока) Тогда
			Текст = Текст + ":
				|" + Ошибка.ИсходнаяСтрока;
		КонецЕсли;
		
		Если Ошибка.Причина <> Неопределено Тогда
			Причина = НСтр("ru = 'ПРИЧИНА № '");
			НомерПричины = НомерПричины + 1;
			Текст = Текст + "
				|
				|" + Причина + НомерПричины + "
				|" + ИнформациюОбОшибкеВСтроку(Ошибка.Причина, НомерПричины);
		КонецЕсли;
		
		Возврат Текст;
	ИначеЕсли ТипОшибки = Тип("Строка") Тогда
		Возврат Ошибка;
	Иначе
		Возврат Строка(Ошибка);
	КонецЕсли;
	
КонецФункции // ИнформациюОбОшибкеВСтроку()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьПисьмоДляОтправки(ШаблонТекста, Предмет, УчетнаяЗапись, ДанныеКонтакта)
    
    ТаблицаКартинок = Новый ТаблицаЗначений; // Для сохранения вложений картинок
    
    Письмо = ВзаимодействияУСП.ЗаготовкаИсходящегоПисьма(ШаблонТекста, Предмет, УчетнаяЗапись, ТаблицаКартинок);
    Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
    Письмо.УдалятьПослеОтправки = Ложь;
    ВзаимодействияУСП.ДобавитьПолучателяПисьма(Письмо, ДанныеКонтакта);	
    Письмо.Записать();
    ВзаимодействияУСП. ДобавитьКартинкиВПисьмо(Письмо, ТаблицаКартинок);
    ВзаимодействияУСП.УстановитьПредметПисьма(Письмо, Предмет);
    
КонецПроцедуры
 
Процедура УстановитьПараметрыПоказателейПожеланий(Запрос) 
    
    Запрос.УстановитьПараметр("СуммаГолосов", Перечисления.ПоказателиКарточек.СуммаГолосов);
    Запрос.УстановитьПараметр("СуммаПоложительныхГолосов", Перечисления.ПоказателиКарточек.СуммаПоложительныхГолосов);
    Запрос.УстановитьПараметр("СуммаОтрицательныхГолосов", Перечисления.ПоказателиКарточек.СуммаОтрицательныхГолосов);
    Запрос.УстановитьПараметр("КоличествоКомментариев", Перечисления.ПоказателиКарточек.КоличествоКомментариев);
    
КонецПроцедуры

#КонецОбласти 
